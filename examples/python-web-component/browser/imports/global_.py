from typing import TypeVar, Generic, Union, Optional, Protocol, Tuple, List, Any, Self
from enum import Flag, Enum, auto
from dataclasses import dataclass
from abc import abstractmethod
import weakref

from ..types import Result, Ok, Err, Some
from ..imports import poll

class LifecycleConnectedCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class LifecycleDisconnectedCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class LifecycleAdoptedCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class LifecycleAttributeChangedCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class VideoFrame:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class EventHandlerNonNull:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class OnBeforeUnloadEventHandlerNonNull:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class OnErrorEventHandlerNonNull:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class TreeColumn:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Principal:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class KeyframeAnimationOptions:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ConsoleInstanceDumpCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PluginTag:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Uri:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class GenerateAssertionCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ValidateAssertionCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WindowProxy:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ObserverCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DomTimeStamp:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class UnderlyingSourceStartCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class UnderlyingSourcePullCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class UnderlyingSourceCancelCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class UnderlyingSinkStartCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class UnderlyingSinkWriteCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class UnderlyingSinkCloseCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class UnderlyingSinkAbortCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class TransformerStartCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class TransformerTransformCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class TransformerFlushCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class QueuingStrategySize:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Function:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PaymentDetailsUpdate:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class NotificationPermissionCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MutationCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class AnyCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class U2fRegisterCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class U2fSignCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class VoidFunction:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class NodeFilter:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ResizeObserverCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class IntersectionCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class BoxObject:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class TreeColumns:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class NsIScriptableRegion:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PositionCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PositionErrorCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class NsISelectionListener:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DecodeSuccessCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DecodeErrorCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class FileMode:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class BlobCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class FileSystemEntryCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ErrorCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class NsITreeSelection:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class FrameRequestCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ApplicationCache:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class IdleRequestCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Flex:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Grid:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class StaticRange:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class StackFrame:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class NsITransportProvider:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class EventListener:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Date:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class FileCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class GetNotificationOptions:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class NsIVariant:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class FunctionStringCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class FontFaceSetForEachCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CustomElementCreationCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class FileSystemEntriesCallback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ImgIRequest:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class RtcPeerConnectionIceErrorEventInit:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class AnonymousContent:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class XPathNsResolver:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class AddEventListenerOptions:
    passive: Optional[bool]
    once: Optional[bool]
    capture: Optional[bool]


@dataclass
class AddEventListenerOptionsOrBool_AddEventListenerOptions:
    value: AddEventListenerOptions


@dataclass
class AddEventListenerOptionsOrBool_Bool:
    value: bool


AddEventListenerOptionsOrBool = Union[AddEventListenerOptionsOrBool_AddEventListenerOptions, AddEventListenerOptionsOrBool_Bool]


@dataclass
class EventListenerOptions:
    capture: Optional[bool]


@dataclass
class BoolOrEventListenerOptions_Bool:
    value: bool


@dataclass
class BoolOrEventListenerOptions_EventListenerOptions:
    value: EventListenerOptions


BoolOrEventListenerOptions = Union[BoolOrEventListenerOptions_Bool, BoolOrEventListenerOptions_EventListenerOptions]


class Event:
    
    def type(self) -> str:
        raise NotImplementedError
    def target(self) -> Optional[Any]:
        raise NotImplementedError
    def current_target(self) -> Optional[Any]:
        raise NotImplementedError
    def composed_path(self) -> List[Any]:
        raise NotImplementedError
    @classmethod
    def none(cls) -> int:
        raise NotImplementedError
    @classmethod
    def capturing_phase(cls) -> int:
        raise NotImplementedError
    @classmethod
    def at_target(cls) -> int:
        raise NotImplementedError
    @classmethod
    def bubbling_phase(cls) -> int:
        raise NotImplementedError
    def event_phase(self) -> int:
        raise NotImplementedError
    def stop_propagation(self) -> None:
        raise NotImplementedError
    def stop_immediate_propagation(self) -> None:
        raise NotImplementedError
    def bubbles(self) -> bool:
        raise NotImplementedError
    def cancelable(self) -> bool:
        raise NotImplementedError
    def prevent_default(self) -> None:
        raise NotImplementedError
    def default_prevented(self) -> bool:
        raise NotImplementedError
    def default_prevented_by_chrome(self) -> bool:
        raise NotImplementedError
    def default_prevented_by_content(self) -> bool:
        raise NotImplementedError
    def composed(self) -> bool:
        raise NotImplementedError
    def is_trusted(self) -> bool:
        raise NotImplementedError
    def time_stamp(self) -> float:
        raise NotImplementedError
    def init_event(self, type: str, bubbles: Optional[bool], cancelable: Optional[bool]) -> None:
        raise NotImplementedError
    def cancel_bubble(self) -> bool:
        raise NotImplementedError
    def set_cancel_bubble(self, cancel_bubble: bool) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class EventTarget:
    
    def add_event_listener(self, type: str, listener: EventListener, options: Optional[AddEventListenerOptionsOrBool], wants_untrusted: Optional[bool]) -> None:
        raise NotImplementedError
    def remove_event_listener(self, type: str, listener: EventListener, options: Optional[BoolOrEventListenerOptions]) -> None:
        raise NotImplementedError
    def dispatch_event(self, event: Event) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PresentationAvailability:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def value(self) -> bool:
        raise NotImplementedError
    def onchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onchange(self, onchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class AudioBufferOptions:
    number_of_channels: Optional[int]
    length: int
    sample_rate: float

@dataclass
class ArrayBufferConstructorOptions:
    max_byte_length: int

class ArrayBuffer:
    
    def __init__(self, length: int, options: Optional[ArrayBufferConstructorOptions]):
        raise NotImplementedError

    def byte_length(self) -> int:
        raise NotImplementedError
    def slice(self, begin: int, end: Optional[int]) -> Self:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class Float32ArrayConstructorOptions_Float32Array:
    value: Any


@dataclass
class Float32ArrayConstructorOptions_Length:
    value: int


@dataclass
class Float32ArrayConstructorOptions_ArrayBuffer:
    value: Tuple[ArrayBuffer, Optional[int], Optional[int]]


Float32ArrayConstructorOptions = Union[Float32ArrayConstructorOptions_Float32Array, Float32ArrayConstructorOptions_Length, Float32ArrayConstructorOptions_ArrayBuffer]



@dataclass
class Float32ArraySetSrc_List:
    value: List[float]


@dataclass
class Float32ArraySetSrc_Float32Array:
    value: Any


Float32ArraySetSrc = Union[Float32ArraySetSrc_List, Float32ArraySetSrc_Float32Array]


class Float32Array:
    
    def __init__(self, options: Optional[Float32ArrayConstructorOptions]):
        raise NotImplementedError

    def fill(self, value: float, start: Optional[int], end: Optional[int]) -> Self:
        raise NotImplementedError
    def buffer(self) -> ArrayBuffer:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def byte_offset(self) -> int:
        raise NotImplementedError
    def byte_length(self) -> int:
        raise NotImplementedError
    def at(self, index: int) -> Optional[float]:
        raise NotImplementedError
    def copy_within(self, target: int, start: int, end: Optional[int]) -> Self:
        raise NotImplementedError
    def set(self, src: Float32ArraySetSrc, offset: int) -> None:
        raise NotImplementedError
    def slice(self, begin: int, end: int) -> Self:
        raise NotImplementedError
    def subarray(self, begin: int, end: int) -> Self:
        raise NotImplementedError
    def values(self) -> List[float]:
        raise NotImplementedError
    def get_index(self, index: int) -> float:
        raise NotImplementedError
    def set_index(self, index: int, value: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class AudioBuffer:
    
    def sample_rate(self) -> float:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def duration(self) -> float:
        raise NotImplementedError
    def number_of_channels(self) -> int:
        raise NotImplementedError
    def get_channel_data(self, channel: int) -> Float32Array:
        raise NotImplementedError
    def copy_from_channel(self, destination: Float32Array, channel_number: int, start_in_channel: Optional[int]) -> None:
        raise NotImplementedError
    def copy_to_channel(self, source: Float32Array, channel_number: int, start_in_channel: Optional[int]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ConnectionType(Enum):
    CELLULAR = 0
    BLUETOOTH = 1
    ETHERNET = 2
    WIFI = 3
    OTHER = 4
    NONE = 5
    UNKNOWN = 6

class NetworkInformation:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def type(self) -> ConnectionType:
        raise NotImplementedError
    def ontypechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontypechange(self, ontypechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgPathSeg:
    
    @classmethod
    def pathseg_unknown(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pathseg_closepath(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pathseg_moveto_abs(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pathseg_moveto_rel(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pathseg_lineto_abs(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pathseg_lineto_rel(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pathseg_curveto_cubic_abs(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pathseg_curveto_cubic_rel(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pathseg_curveto_quadratic_abs(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pathseg_curveto_quadratic_rel(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pathseg_arc_abs(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pathseg_arc_rel(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pathseg_lineto_horizontal_abs(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pathseg_lineto_horizontal_rel(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pathseg_lineto_vertical_abs(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pathseg_lineto_vertical_rel(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pathseg_curveto_cubic_smooth_abs(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pathseg_curveto_cubic_smooth_rel(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pathseg_curveto_quadratic_smooth_abs(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pathseg_curveto_quadratic_smooth_rel(cls) -> int:
        raise NotImplementedError
    def path_seg_type(self) -> int:
        raise NotImplementedError
    def path_seg_type_as_letter(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgPathSegClosePath:
    
    def as_svg_path_seg(self) -> SvgPathSeg:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgPathSegMovetoAbs:
    
    def as_svg_path_seg(self) -> SvgPathSeg:
        raise NotImplementedError
    def x(self) -> float:
        raise NotImplementedError
    def set_x(self, x: float) -> None:
        raise NotImplementedError
    def y(self) -> float:
        raise NotImplementedError
    def set_y(self, y: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgPathSegMovetoRel:
    
    def as_svg_path_seg(self) -> SvgPathSeg:
        raise NotImplementedError
    def x(self) -> float:
        raise NotImplementedError
    def set_x(self, x: float) -> None:
        raise NotImplementedError
    def y(self) -> float:
        raise NotImplementedError
    def set_y(self, y: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgPathSegLinetoAbs:
    
    def as_svg_path_seg(self) -> SvgPathSeg:
        raise NotImplementedError
    def x(self) -> float:
        raise NotImplementedError
    def set_x(self, x: float) -> None:
        raise NotImplementedError
    def y(self) -> float:
        raise NotImplementedError
    def set_y(self, y: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgPathSegLinetoRel:
    
    def as_svg_path_seg(self) -> SvgPathSeg:
        raise NotImplementedError
    def x(self) -> float:
        raise NotImplementedError
    def set_x(self, x: float) -> None:
        raise NotImplementedError
    def y(self) -> float:
        raise NotImplementedError
    def set_y(self, y: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgPathSegCurvetoCubicAbs:
    
    def as_svg_path_seg(self) -> SvgPathSeg:
        raise NotImplementedError
    def x(self) -> float:
        raise NotImplementedError
    def set_x(self, x: float) -> None:
        raise NotImplementedError
    def y(self) -> float:
        raise NotImplementedError
    def set_y(self, y: float) -> None:
        raise NotImplementedError
    def x1(self) -> float:
        raise NotImplementedError
    def set_x1(self, x1: float) -> None:
        raise NotImplementedError
    def y1(self) -> float:
        raise NotImplementedError
    def set_y1(self, y1: float) -> None:
        raise NotImplementedError
    def x2(self) -> float:
        raise NotImplementedError
    def set_x2(self, x2: float) -> None:
        raise NotImplementedError
    def y2(self) -> float:
        raise NotImplementedError
    def set_y2(self, y2: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgPathSegCurvetoCubicRel:
    
    def as_svg_path_seg(self) -> SvgPathSeg:
        raise NotImplementedError
    def x(self) -> float:
        raise NotImplementedError
    def set_x(self, x: float) -> None:
        raise NotImplementedError
    def y(self) -> float:
        raise NotImplementedError
    def set_y(self, y: float) -> None:
        raise NotImplementedError
    def x1(self) -> float:
        raise NotImplementedError
    def set_x1(self, x1: float) -> None:
        raise NotImplementedError
    def y1(self) -> float:
        raise NotImplementedError
    def set_y1(self, y1: float) -> None:
        raise NotImplementedError
    def x2(self) -> float:
        raise NotImplementedError
    def set_x2(self, x2: float) -> None:
        raise NotImplementedError
    def y2(self) -> float:
        raise NotImplementedError
    def set_y2(self, y2: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgPathSegCurvetoQuadraticAbs:
    
    def as_svg_path_seg(self) -> SvgPathSeg:
        raise NotImplementedError
    def x(self) -> float:
        raise NotImplementedError
    def set_x(self, x: float) -> None:
        raise NotImplementedError
    def y(self) -> float:
        raise NotImplementedError
    def set_y(self, y: float) -> None:
        raise NotImplementedError
    def x1(self) -> float:
        raise NotImplementedError
    def set_x1(self, x1: float) -> None:
        raise NotImplementedError
    def y1(self) -> float:
        raise NotImplementedError
    def set_y1(self, y1: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgPathSegCurvetoQuadraticRel:
    
    def as_svg_path_seg(self) -> SvgPathSeg:
        raise NotImplementedError
    def x(self) -> float:
        raise NotImplementedError
    def set_x(self, x: float) -> None:
        raise NotImplementedError
    def y(self) -> float:
        raise NotImplementedError
    def set_y(self, y: float) -> None:
        raise NotImplementedError
    def x1(self) -> float:
        raise NotImplementedError
    def set_x1(self, x1: float) -> None:
        raise NotImplementedError
    def y1(self) -> float:
        raise NotImplementedError
    def set_y1(self, y1: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgPathSegArcAbs:
    
    def as_svg_path_seg(self) -> SvgPathSeg:
        raise NotImplementedError
    def x(self) -> float:
        raise NotImplementedError
    def set_x(self, x: float) -> None:
        raise NotImplementedError
    def y(self) -> float:
        raise NotImplementedError
    def set_y(self, y: float) -> None:
        raise NotImplementedError
    def r1(self) -> float:
        raise NotImplementedError
    def set_r1(self, r1: float) -> None:
        raise NotImplementedError
    def r2(self) -> float:
        raise NotImplementedError
    def set_r2(self, r2: float) -> None:
        raise NotImplementedError
    def angle(self) -> float:
        raise NotImplementedError
    def set_angle(self, angle: float) -> None:
        raise NotImplementedError
    def large_arc_flag(self) -> bool:
        raise NotImplementedError
    def set_large_arc_flag(self, large_arc_flag: bool) -> None:
        raise NotImplementedError
    def sweep_flag(self) -> bool:
        raise NotImplementedError
    def set_sweep_flag(self, sweep_flag: bool) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgPathSegArcRel:
    
    def as_svg_path_seg(self) -> SvgPathSeg:
        raise NotImplementedError
    def x(self) -> float:
        raise NotImplementedError
    def set_x(self, x: float) -> None:
        raise NotImplementedError
    def y(self) -> float:
        raise NotImplementedError
    def set_y(self, y: float) -> None:
        raise NotImplementedError
    def r1(self) -> float:
        raise NotImplementedError
    def set_r1(self, r1: float) -> None:
        raise NotImplementedError
    def r2(self) -> float:
        raise NotImplementedError
    def set_r2(self, r2: float) -> None:
        raise NotImplementedError
    def angle(self) -> float:
        raise NotImplementedError
    def set_angle(self, angle: float) -> None:
        raise NotImplementedError
    def large_arc_flag(self) -> bool:
        raise NotImplementedError
    def set_large_arc_flag(self, large_arc_flag: bool) -> None:
        raise NotImplementedError
    def sweep_flag(self) -> bool:
        raise NotImplementedError
    def set_sweep_flag(self, sweep_flag: bool) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgPathSegLinetoHorizontalAbs:
    
    def as_svg_path_seg(self) -> SvgPathSeg:
        raise NotImplementedError
    def x(self) -> float:
        raise NotImplementedError
    def set_x(self, x: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgPathSegLinetoHorizontalRel:
    
    def as_svg_path_seg(self) -> SvgPathSeg:
        raise NotImplementedError
    def x(self) -> float:
        raise NotImplementedError
    def set_x(self, x: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgPathSegLinetoVerticalAbs:
    
    def as_svg_path_seg(self) -> SvgPathSeg:
        raise NotImplementedError
    def y(self) -> float:
        raise NotImplementedError
    def set_y(self, y: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgPathSegLinetoVerticalRel:
    
    def as_svg_path_seg(self) -> SvgPathSeg:
        raise NotImplementedError
    def y(self) -> float:
        raise NotImplementedError
    def set_y(self, y: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgPathSegCurvetoCubicSmoothAbs:
    
    def as_svg_path_seg(self) -> SvgPathSeg:
        raise NotImplementedError
    def x(self) -> float:
        raise NotImplementedError
    def set_x(self, x: float) -> None:
        raise NotImplementedError
    def y(self) -> float:
        raise NotImplementedError
    def set_y(self, y: float) -> None:
        raise NotImplementedError
    def x2(self) -> float:
        raise NotImplementedError
    def set_x2(self, x2: float) -> None:
        raise NotImplementedError
    def y2(self) -> float:
        raise NotImplementedError
    def set_y2(self, y2: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgPathSegCurvetoCubicSmoothRel:
    
    def as_svg_path_seg(self) -> SvgPathSeg:
        raise NotImplementedError
    def x(self) -> float:
        raise NotImplementedError
    def set_x(self, x: float) -> None:
        raise NotImplementedError
    def y(self) -> float:
        raise NotImplementedError
    def set_y(self, y: float) -> None:
        raise NotImplementedError
    def x2(self) -> float:
        raise NotImplementedError
    def set_x2(self, x2: float) -> None:
        raise NotImplementedError
    def y2(self) -> float:
        raise NotImplementedError
    def set_y2(self, y2: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgPathSegCurvetoQuadraticSmoothAbs:
    
    def as_svg_path_seg(self) -> SvgPathSeg:
        raise NotImplementedError
    def x(self) -> float:
        raise NotImplementedError
    def set_x(self, x: float) -> None:
        raise NotImplementedError
    def y(self) -> float:
        raise NotImplementedError
    def set_y(self, y: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgPathSegCurvetoQuadraticSmoothRel:
    
    def as_svg_path_seg(self) -> SvgPathSeg:
        raise NotImplementedError
    def x(self) -> float:
        raise NotImplementedError
    def set_x(self, x: float) -> None:
        raise NotImplementedError
    def y(self) -> float:
        raise NotImplementedError
    def set_y(self, y: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class NodeOrString_Node:
    value: Any


@dataclass
class NodeOrString_String:
    value: str


NodeOrString = Union[NodeOrString_Node, NodeOrString_String]


class DocumentType:
    
    def as_node(self) -> Any:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def public_id(self) -> str:
        raise NotImplementedError
    def system_id(self) -> str:
        raise NotImplementedError
    def before(self, nodes: List[NodeOrString]) -> None:
        raise NotImplementedError
    def after(self, nodes: List[NodeOrString]) -> None:
        raise NotImplementedError
    def replace_with(self, nodes: List[NodeOrString]) -> None:
        raise NotImplementedError
    def remove(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DomImplementation:
    
    def has_feature(self) -> bool:
        raise NotImplementedError
    def create_document_type(self, qualified_name: str, public_id: str, system_id: str) -> DocumentType:
        raise NotImplementedError
    def create_document(self, namespace: str, qualified_name: str, doctype: Optional[Some[Optional[DocumentType]]]) -> Any:
        raise NotImplementedError
    def create_html_document(self, title: Optional[str]) -> Any:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlCollection:
    
    def length(self) -> int:
        raise NotImplementedError
    def item(self, index: int) -> Optional[Any]:
        raise NotImplementedError
    def named_item(self, name: str) -> Optional[Any]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class ElementCreationOptions:
    is_: Optional[str]
    pseudo: Optional[str]


@dataclass
class ElementCreationOptionsOrString_ElementCreationOptions:
    value: ElementCreationOptions


@dataclass
class ElementCreationOptionsOrString_String:
    value: str


ElementCreationOptionsOrString = Union[ElementCreationOptionsOrString_ElementCreationOptions, ElementCreationOptionsOrString_String]


class NodeList:
    
    def item(self, index: int) -> Optional[Any]:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DocumentFragment:
    
    def as_node(self) -> Any:
        raise NotImplementedError
    def get_element_by_id(self, element_id: str) -> Optional[Any]:
        raise NotImplementedError
    def query_selector(self, selectors: str) -> Optional[Any]:
        raise NotImplementedError
    def query_selector_all(self, selectors: str) -> NodeList:
        raise NotImplementedError
    def children(self) -> HtmlCollection:
        raise NotImplementedError
    def first_element_child(self) -> Optional[Any]:
        raise NotImplementedError
    def last_element_child(self) -> Optional[Any]:
        raise NotImplementedError
    def child_element_count(self) -> int:
        raise NotImplementedError
    def prepend(self, nodes: List[NodeOrString]) -> None:
        raise NotImplementedError
    def append(self, nodes: List[NodeOrString]) -> None:
        raise NotImplementedError
    def replace_children(self, nodes: List[NodeOrString]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CharacterData:
    
    def as_node(self) -> Any:
        raise NotImplementedError
    def data(self) -> str:
        raise NotImplementedError
    def set_data(self, data: str) -> None:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def substring_data(self, offset: int, count: int) -> str:
        raise NotImplementedError
    def append_data(self, data: str) -> None:
        raise NotImplementedError
    def insert_data(self, offset: int, data: str) -> None:
        raise NotImplementedError
    def delete_data(self, offset: int, count: int) -> None:
        raise NotImplementedError
    def replace_data(self, offset: int, count: int, data: str) -> None:
        raise NotImplementedError
    def before(self, nodes: List[NodeOrString]) -> None:
        raise NotImplementedError
    def after(self, nodes: List[NodeOrString]) -> None:
        raise NotImplementedError
    def replace_with(self, nodes: List[NodeOrString]) -> None:
        raise NotImplementedError
    def remove(self) -> None:
        raise NotImplementedError
    def previous_element_sibling(self) -> Optional[Any]:
        raise NotImplementedError
    def next_element_sibling(self) -> Optional[Any]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class AssignedNodesOptions:
    flatten: Optional[bool]

class HtmlSlotElement:
    
    def as_html_element(self) -> Any:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def set_name(self, name: str) -> None:
        raise NotImplementedError
    def assigned_nodes(self, options: Optional[AssignedNodesOptions]) -> List[Any]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CssBoxType(Enum):
    MARGIN = 0
    BORDER = 1
    PADDING = 2
    CONTENT = 3


@dataclass
class DocumentOrElementOrText_Document:
    value: Any


@dataclass
class DocumentOrElementOrText_Element:
    value: Any


@dataclass
class DocumentOrElementOrText_Text:
    value: Any


DocumentOrElementOrText = Union[DocumentOrElementOrText_Document, DocumentOrElementOrText_Element, DocumentOrElementOrText_Text]


@dataclass
class BoxQuadOptions:
    box: Optional[CssBoxType]
    relative_to: Optional[DocumentOrElementOrText]

@dataclass
class DomPointInit:
    x: Optional[float]
    y: Optional[float]
    z: Optional[float]
    w: Optional[float]


@dataclass
class Any_Bool:
    value: bool


@dataclass
class Any_S8:
    value: int


@dataclass
class Any_S16:
    value: int


@dataclass
class Any_S32:
    value: int


@dataclass
class Any_S64:
    value: int


@dataclass
class Any_U8:
    value: int


@dataclass
class Any_U16:
    value: int


@dataclass
class Any_U32:
    value: int


@dataclass
class Any_U64:
    value: int


@dataclass
class Any_F32:
    value: float


@dataclass
class Any_F64:
    value: float


@dataclass
class Any_String:
    value: str


Any = Union[Any_Bool, Any_S8, Any_S16, Any_S32, Any_S64, Any_U8, Any_U16, Any_U32, Any_U64, Any_F32, Any_F64, Any_String]


class Object:
    
    def __init__(self):
        raise NotImplementedError

    def add(self, key: str, value: Any) -> None:
        raise NotImplementedError
    def get(self, key: str) -> Any:
        raise NotImplementedError
    def has(self, key: str) -> bool:
        raise NotImplementedError
    def remove(self, key: str) -> None:
        raise NotImplementedError
    def keys(self) -> List[str]:
        raise NotImplementedError
    def values(self) -> List[Any]:
        raise NotImplementedError
    def entries(self) -> Tuple[str, Any]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DomPointReadOnly:
    
    @classmethod
    def from_point(cls, other: Optional[DomPointInit]) -> Self:
        raise NotImplementedError
    def x(self) -> float:
        raise NotImplementedError
    def y(self) -> float:
        raise NotImplementedError
    def z(self) -> float:
        raise NotImplementedError
    def w(self) -> float:
        raise NotImplementedError
    def to_json(self) -> Object:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DomPoint:
    
    def as_dom_point_read_only(self) -> DomPointReadOnly:
        raise NotImplementedError
    @classmethod
    def from_point(cls, other: Optional[DomPointInit]) -> Self:
        raise NotImplementedError
    def x(self) -> float:
        raise NotImplementedError
    def set_x(self, x: float) -> None:
        raise NotImplementedError
    def y(self) -> float:
        raise NotImplementedError
    def set_y(self, y: float) -> None:
        raise NotImplementedError
    def z(self) -> float:
        raise NotImplementedError
    def set_z(self, z: float) -> None:
        raise NotImplementedError
    def w(self) -> float:
        raise NotImplementedError
    def set_w(self, w: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DomRectReadOnly:
    
    def x(self) -> float:
        raise NotImplementedError
    def y(self) -> float:
        raise NotImplementedError
    def width(self) -> float:
        raise NotImplementedError
    def height(self) -> float:
        raise NotImplementedError
    def top(self) -> float:
        raise NotImplementedError
    def right(self) -> float:
        raise NotImplementedError
    def bottom(self) -> float:
        raise NotImplementedError
    def left(self) -> float:
        raise NotImplementedError
    def to_json(self) -> Object:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DomQuad:
    
    def p1(self) -> DomPoint:
        raise NotImplementedError
    def p2(self) -> DomPoint:
        raise NotImplementedError
    def p3(self) -> DomPoint:
        raise NotImplementedError
    def p4(self) -> DomPoint:
        raise NotImplementedError
    def get_bounds(self) -> DomRectReadOnly:
        raise NotImplementedError
    def bounds(self) -> DomRectReadOnly:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class ConvertCoordinateOptions:
    from_box: Optional[CssBoxType]
    to_box: Optional[CssBoxType]

class Text:
    
    def as_character_data(self) -> CharacterData:
        raise NotImplementedError
    def split_text(self, offset: int) -> Self:
        raise NotImplementedError
    def whole_text(self) -> str:
        raise NotImplementedError
    def assigned_slot(self) -> Optional[HtmlSlotElement]:
        raise NotImplementedError
    def get_box_quads(self, options: Optional[BoxQuadOptions]) -> List[DomQuad]:
        raise NotImplementedError
    def convert_quad_from_node(self, quad: DomQuad, from_: DocumentOrElementOrText, options: Optional[ConvertCoordinateOptions]) -> DomQuad:
        raise NotImplementedError
    def convert_rect_from_node(self, rect: DomRectReadOnly, from_: DocumentOrElementOrText, options: Optional[ConvertCoordinateOptions]) -> DomQuad:
        raise NotImplementedError
    def convert_point_from_node(self, point: DomPointInit, from_: DocumentOrElementOrText, options: Optional[ConvertCoordinateOptions]) -> DomPoint:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Comment:
    
    def as_character_data(self) -> CharacterData:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MediaList:
    
    def media_text(self) -> str:
        raise NotImplementedError
    def set_media_text(self, media_text: str) -> None:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def item(self, index: int) -> str:
        raise NotImplementedError
    def delete_medium(self, old_medium: str) -> None:
        raise NotImplementedError
    def append_medium(self, new_medium: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class StyleSheet:
    
    def type(self) -> str:
        raise NotImplementedError
    def href(self) -> str:
        raise NotImplementedError
    def owner_node(self) -> Optional[Any]:
        raise NotImplementedError
    def parent_style_sheet(self) -> Optional[Self]:
        raise NotImplementedError
    def title(self) -> str:
        raise NotImplementedError
    def media(self) -> MediaList:
        raise NotImplementedError
    def disabled(self) -> bool:
        raise NotImplementedError
    def set_disabled(self, disabled: bool) -> None:
        raise NotImplementedError
    def source_map_url(self) -> str:
        raise NotImplementedError
    def source_url(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ProcessingInstruction:
    
    def as_character_data(self) -> CharacterData:
        raise NotImplementedError
    def target(self) -> str:
        raise NotImplementedError
    def sheet(self) -> Optional[StyleSheet]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DomRect:
    
    def as_dom_rect_read_only(self) -> DomRectReadOnly:
        raise NotImplementedError
    def x(self) -> float:
        raise NotImplementedError
    def set_x(self, x: float) -> None:
        raise NotImplementedError
    def y(self) -> float:
        raise NotImplementedError
    def set_y(self, y: float) -> None:
        raise NotImplementedError
    def width(self) -> float:
        raise NotImplementedError
    def set_width(self, width: float) -> None:
        raise NotImplementedError
    def height(self) -> float:
        raise NotImplementedError
    def set_height(self, height: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DomRectList:
    
    def length(self) -> int:
        raise NotImplementedError
    def item(self, index: int) -> Optional[DomRect]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Range:
    
    def start_container(self) -> Any:
        raise NotImplementedError
    def start_offset(self) -> int:
        raise NotImplementedError
    def end_container(self) -> Any:
        raise NotImplementedError
    def end_offset(self) -> int:
        raise NotImplementedError
    def collapsed(self) -> bool:
        raise NotImplementedError
    def common_ancestor_container(self) -> Any:
        raise NotImplementedError
    def set_start(self, ref_node: Any, offset: int) -> None:
        raise NotImplementedError
    def set_end(self, ref_node: Any, offset: int) -> None:
        raise NotImplementedError
    def set_start_before(self, ref_node: Any) -> None:
        raise NotImplementedError
    def set_start_after(self, ref_node: Any) -> None:
        raise NotImplementedError
    def set_end_before(self, ref_node: Any) -> None:
        raise NotImplementedError
    def set_end_after(self, ref_node: Any) -> None:
        raise NotImplementedError
    def collapse(self, to_start: Optional[bool]) -> None:
        raise NotImplementedError
    def select_node(self, ref_node: Any) -> None:
        raise NotImplementedError
    def select_node_contents(self, ref_node: Any) -> None:
        raise NotImplementedError
    @classmethod
    def start_to_start(cls) -> int:
        raise NotImplementedError
    @classmethod
    def start_to_end(cls) -> int:
        raise NotImplementedError
    @classmethod
    def end_to_end(cls) -> int:
        raise NotImplementedError
    @classmethod
    def end_to_start(cls) -> int:
        raise NotImplementedError
    def compare_boundary_points(self, how: int, source_range: Self) -> int:
        raise NotImplementedError
    def delete_contents(self) -> None:
        raise NotImplementedError
    def extract_contents(self) -> DocumentFragment:
        raise NotImplementedError
    def clone_contents(self) -> DocumentFragment:
        raise NotImplementedError
    def insert_node(self, node: Any) -> None:
        raise NotImplementedError
    def surround_contents(self, new_parent: Any) -> None:
        raise NotImplementedError
    def clone_range(self) -> Self:
        raise NotImplementedError
    def detach(self) -> None:
        raise NotImplementedError
    def is_point_in_range(self, node: Any, offset: int) -> bool:
        raise NotImplementedError
    def compare_point(self, node: Any, offset: int) -> int:
        raise NotImplementedError
    def intersects_node(self, node: Any) -> bool:
        raise NotImplementedError
    def create_contextual_fragment(self, fragment: str) -> DocumentFragment:
        raise NotImplementedError
    def get_client_rects(self) -> Optional[DomRectList]:
        raise NotImplementedError
    def get_bounding_client_rect(self) -> DomRect:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class NodeIterator:
    
    def root(self) -> Any:
        raise NotImplementedError
    def reference_node(self) -> Optional[Any]:
        raise NotImplementedError
    def pointer_before_reference_node(self) -> bool:
        raise NotImplementedError
    def what_to_show(self) -> int:
        raise NotImplementedError
    def filter(self) -> Optional[NodeFilter]:
        raise NotImplementedError
    def next_node(self) -> Optional[Any]:
        raise NotImplementedError
    def previous_node(self) -> Optional[Any]:
        raise NotImplementedError
    def detach(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class TreeWalker:
    
    def root(self) -> Any:
        raise NotImplementedError
    def what_to_show(self) -> int:
        raise NotImplementedError
    def filter(self) -> Optional[NodeFilter]:
        raise NotImplementedError
    def current_node(self) -> Any:
        raise NotImplementedError
    def set_current_node(self, current_node: Any) -> None:
        raise NotImplementedError
    def parent_node(self) -> Optional[Any]:
        raise NotImplementedError
    def first_child(self) -> Optional[Any]:
        raise NotImplementedError
    def last_child(self) -> Optional[Any]:
        raise NotImplementedError
    def previous_sibling(self) -> Optional[Any]:
        raise NotImplementedError
    def next_sibling(self) -> Optional[Any]:
        raise NotImplementedError
    def previous_node(self) -> Optional[Any]:
        raise NotImplementedError
    def next_node(self) -> Optional[Any]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CdataSection:
    
    def as_text(self) -> Text:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Attr:
    
    def as_node(self) -> Any:
        raise NotImplementedError
    def local_name(self) -> str:
        raise NotImplementedError
    def value(self) -> str:
        raise NotImplementedError
    def set_value(self, value: str) -> None:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def namespace_uri(self) -> str:
        raise NotImplementedError
    def prefix(self) -> str:
        raise NotImplementedError
    def specified(self) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Location:
    
    def href(self) -> str:
        raise NotImplementedError
    def set_href(self, href: str) -> None:
        raise NotImplementedError
    def origin(self) -> str:
        raise NotImplementedError
    def protocol(self) -> str:
        raise NotImplementedError
    def set_protocol(self, protocol: str) -> None:
        raise NotImplementedError
    def host(self) -> str:
        raise NotImplementedError
    def set_host(self, host: str) -> None:
        raise NotImplementedError
    def hostname(self) -> str:
        raise NotImplementedError
    def set_hostname(self, hostname: str) -> None:
        raise NotImplementedError
    def port(self) -> str:
        raise NotImplementedError
    def set_port(self, port: str) -> None:
        raise NotImplementedError
    def pathname(self) -> str:
        raise NotImplementedError
    def set_pathname(self, pathname: str) -> None:
        raise NotImplementedError
    def search(self) -> str:
        raise NotImplementedError
    def set_search(self, search: str) -> None:
        raise NotImplementedError
    def hash(self) -> str:
        raise NotImplementedError
    def set_hash(self, hash: str) -> None:
        raise NotImplementedError
    def assign(self, url: str) -> None:
        raise NotImplementedError
    def replace(self, url: str) -> None:
        raise NotImplementedError
    def reload(self, forceget: Optional[bool]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlHeadElement:
    
    def as_html_element(self) -> Any:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class VisibilityState(Enum):
    HIDDEN = 0
    VISIBLE = 1

class DomStringList:
    
    def length(self) -> int:
        raise NotImplementedError
    def item(self, index: int) -> str:
        raise NotImplementedError
    def contains(self, string: str) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CaretPosition:
    
    def offset_node(self) -> Optional[Any]:
        raise NotImplementedError
    def offset(self) -> int:
        raise NotImplementedError
    def get_client_rect(self) -> Optional[DomRect]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class AnimationTimeline:
    
    def current_time(self) -> float:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DocumentTimeline:
    
    def as_animation_timeline(self) -> AnimationTimeline:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class FillMode(Enum):
    NONE = 0
    FORWARDS = 1
    BACKWARDS = 2
    BOTH = 3
    AUTO = 4


@dataclass
class F64OrString_F64:
    value: float


@dataclass
class F64OrString_String:
    value: str


F64OrString = Union[F64OrString_F64, F64OrString_String]


class PlaybackDirection(Enum):
    NORMAL = 0
    REVERSE = 1
    ALTERNATE = 2
    ALTERNATE_REVERSE = 3

@dataclass
class EffectTiming:
    delay: Optional[float]
    end_delay: Optional[float]
    fill: Optional[FillMode]
    iteration_start: Optional[float]
    iterations: Optional[float]
    duration: Optional[F64OrString]
    direction: Optional[PlaybackDirection]
    easing: Optional[str]

@dataclass
class ComputedEffectTiming:
    end_time: Optional[float]
    active_duration: Optional[float]
    local_time: Optional[float]
    progress: Optional[float]
    current_iteration: Optional[float]
    delay: Optional[float]
    end_delay: Optional[float]
    fill: Optional[FillMode]
    iteration_start: Optional[float]
    iterations: Optional[float]
    duration: Optional[F64OrString]
    direction: Optional[PlaybackDirection]
    easing: Optional[str]

@dataclass
class OptionalEffectTiming:
    delay: Optional[float]
    end_delay: Optional[float]
    fill: Optional[FillMode]
    iteration_start: Optional[float]
    iterations: Optional[float]
    duration: Optional[F64OrString]
    direction: Optional[PlaybackDirection]
    easing: Optional[str]

class AnimationEffect:
    
    def get_timing(self) -> EffectTiming:
        raise NotImplementedError
    def get_computed_timing(self) -> ComputedEffectTiming:
        raise NotImplementedError
    def update_timing(self, timing: Optional[OptionalEffectTiming]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class AnimationPlayState(Enum):
    IDLE = 0
    RUNNING = 1
    PAUSED = 2
    FINISHED = 3

class Animation:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def id(self) -> str:
        raise NotImplementedError
    def set_id(self, id: str) -> None:
        raise NotImplementedError
    def effect(self) -> Optional[AnimationEffect]:
        raise NotImplementedError
    def set_effect(self, effect: Optional[AnimationEffect]) -> None:
        raise NotImplementedError
    def timeline(self) -> Optional[AnimationTimeline]:
        raise NotImplementedError
    def set_timeline(self, timeline: Optional[AnimationTimeline]) -> None:
        raise NotImplementedError
    def start_time(self) -> float:
        raise NotImplementedError
    def set_start_time(self, start_time: float) -> None:
        raise NotImplementedError
    def current_time(self) -> float:
        raise NotImplementedError
    def set_current_time(self, current_time: float) -> None:
        raise NotImplementedError
    def playback_rate(self) -> float:
        raise NotImplementedError
    def set_playback_rate(self, playback_rate: float) -> None:
        raise NotImplementedError
    def play_state(self) -> AnimationPlayState:
        raise NotImplementedError
    def pending(self) -> bool:
        raise NotImplementedError
    def ready(self) -> Self:
        raise NotImplementedError
    def finished(self) -> Self:
        raise NotImplementedError
    def onfinish(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onfinish(self, onfinish: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oncancel(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oncancel(self, oncancel: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def cancel(self) -> None:
        raise NotImplementedError
    def finish(self) -> None:
        raise NotImplementedError
    def play(self) -> None:
        raise NotImplementedError
    def pause(self) -> None:
        raise NotImplementedError
    def update_playback_rate(self, playback_rate: float) -> None:
        raise NotImplementedError
    def reverse(self) -> None:
        raise NotImplementedError
    def is_running_on_compositor(self) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgAnimatedString:
    
    def base_val(self) -> str:
        raise NotImplementedError
    def set_base_val(self, base_val: str) -> None:
        raise NotImplementedError
    def anim_val(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DomStringMap:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CssRuleList:
    
    def length(self) -> int:
        raise NotImplementedError
    def item(self, index: int) -> Optional[Any]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CssStyleSheetParsingMode(Enum):
    AUTHOR = 0
    USER = 1
    AGENT = 2

class CssStyleSheet:
    
    def as_style_sheet(self) -> StyleSheet:
        raise NotImplementedError
    def __init__(self):
        raise NotImplementedError

    def owner_rule(self) -> Optional[Any]:
        raise NotImplementedError
    def css_rules(self) -> CssRuleList:
        raise NotImplementedError
    def parsing_mode(self) -> CssStyleSheetParsingMode:
        raise NotImplementedError
    def insert_rule(self, rule: str, index: Optional[int]) -> int:
        raise NotImplementedError
    def delete_rule(self, index: int) -> None:
        raise NotImplementedError
    def replace(self, text: str) -> Self:
        raise NotImplementedError
    def replace_sync(self, text: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CssRule:
    
    @classmethod
    def style_rule(cls) -> int:
        raise NotImplementedError
    @classmethod
    def charset_rule(cls) -> int:
        raise NotImplementedError
    @classmethod
    def import_rule(cls) -> int:
        raise NotImplementedError
    @classmethod
    def media_rule(cls) -> int:
        raise NotImplementedError
    @classmethod
    def font_face_rule(cls) -> int:
        raise NotImplementedError
    @classmethod
    def page_rule(cls) -> int:
        raise NotImplementedError
    @classmethod
    def namespace_rule(cls) -> int:
        raise NotImplementedError
    def type(self) -> int:
        raise NotImplementedError
    def css_text(self) -> str:
        raise NotImplementedError
    def set_css_text(self, css_text: str) -> None:
        raise NotImplementedError
    def parent_rule(self) -> Optional[Self]:
        raise NotImplementedError
    def parent_style_sheet(self) -> Optional[CssStyleSheet]:
        raise NotImplementedError
    @classmethod
    def keyframes_rule(cls) -> int:
        raise NotImplementedError
    @classmethod
    def keyframe_rule(cls) -> int:
        raise NotImplementedError
    @classmethod
    def counter_style_rule(cls) -> int:
        raise NotImplementedError
    @classmethod
    def supports_rule(cls) -> int:
        raise NotImplementedError
    @classmethod
    def document_rule(cls) -> int:
        raise NotImplementedError
    @classmethod
    def font_feature_values_rule(cls) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CssStyleDeclaration:
    
    def css_text(self) -> str:
        raise NotImplementedError
    def set_css_text(self, css_text: str) -> None:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def item(self, index: int) -> str:
        raise NotImplementedError
    def get_css_image_ur_ls(self, property: str) -> List[str]:
        raise NotImplementedError
    def get_property_value(self, property: str) -> str:
        raise NotImplementedError
    def get_property_priority(self, property: str) -> str:
        raise NotImplementedError
    def set_property(self, property: str, value: str, priority: Optional[str]) -> None:
        raise NotImplementedError
    def remove_property(self, property: str) -> str:
        raise NotImplementedError
    def parent_rule(self) -> Optional[CssRule]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgElement:
    
    def as_element(self) -> Any:
        raise NotImplementedError
    def id(self) -> str:
        raise NotImplementedError
    def set_id(self, id: str) -> None:
        raise NotImplementedError
    def class_name(self) -> SvgAnimatedString:
        raise NotImplementedError
    def dataset(self) -> DomStringMap:
        raise NotImplementedError
    def style(self) -> CssStyleDeclaration:
        raise NotImplementedError
    def owner_svg_element(self) -> Optional[Any]:
        raise NotImplementedError
    def viewport_element(self) -> Optional[Self]:
        raise NotImplementedError
    def tab_index(self) -> int:
        raise NotImplementedError
    def set_tab_index(self, tab_index: int) -> None:
        raise NotImplementedError
    def focus(self) -> None:
        raise NotImplementedError
    def blur(self) -> None:
        raise NotImplementedError
    def onabort(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onabort(self, onabort: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onblur(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onblur(self, onblur: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onfocus(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onfocus(self, onfocus: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onauxclick(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onauxclick(self, onauxclick: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oncanplay(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oncanplay(self, oncanplay: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oncanplaythrough(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oncanplaythrough(self, oncanplaythrough: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onchange(self, onchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onclick(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onclick(self, onclick: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onclose(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onclose(self, onclose: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oncontextmenu(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oncontextmenu(self, oncontextmenu: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondblclick(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondblclick(self, ondblclick: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondrag(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondrag(self, ondrag: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondragend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondragend(self, ondragend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondragenter(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondragenter(self, ondragenter: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondragexit(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondragexit(self, ondragexit: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondragleave(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondragleave(self, ondragleave: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondragover(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondragover(self, ondragover: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondragstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondragstart(self, ondragstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondrop(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondrop(self, ondrop: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondurationchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondurationchange(self, ondurationchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onemptied(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onemptied(self, onemptied: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onended(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onended(self, onended: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oninput(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oninput(self, oninput: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oninvalid(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oninvalid(self, oninvalid: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onkeydown(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onkeydown(self, onkeydown: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onkeypress(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onkeypress(self, onkeypress: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onkeyup(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onkeyup(self, onkeyup: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onload(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onload(self, onload: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onloadeddata(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onloadeddata(self, onloadeddata: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onloadedmetadata(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onloadedmetadata(self, onloadedmetadata: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onloadend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onloadend(self, onloadend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onloadstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onloadstart(self, onloadstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmousedown(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmousedown(self, onmousedown: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmouseenter(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmouseenter(self, onmouseenter: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmouseleave(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmouseleave(self, onmouseleave: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmousemove(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmousemove(self, onmousemove: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmouseout(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmouseout(self, onmouseout: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmouseover(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmouseover(self, onmouseover: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmouseup(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmouseup(self, onmouseup: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwheel(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwheel(self, onwheel: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpause(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpause(self, onpause: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onplay(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onplay(self, onplay: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onplaying(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onplaying(self, onplaying: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onprogress(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onprogress(self, onprogress: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onratechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onratechange(self, onratechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onreset(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onreset(self, onreset: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onresize(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onresize(self, onresize: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onscroll(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onscroll(self, onscroll: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onseeked(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onseeked(self, onseeked: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onseeking(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onseeking(self, onseeking: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onselect(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onselect(self, onselect: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onshow(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onshow(self, onshow: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onstalled(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onstalled(self, onstalled: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onsubmit(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onsubmit(self, onsubmit: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onsuspend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onsuspend(self, onsuspend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontimeupdate(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontimeupdate(self, ontimeupdate: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onvolumechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onvolumechange(self, onvolumechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwaiting(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwaiting(self, onwaiting: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onselectstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onselectstart(self, onselectstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontoggle(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontoggle(self, ontoggle: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointercancel(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointercancel(self, onpointercancel: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointerdown(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerdown(self, onpointerdown: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointerup(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerup(self, onpointerup: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointermove(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointermove(self, onpointermove: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointerout(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerout(self, onpointerout: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointerover(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerover(self, onpointerover: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointerenter(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerenter(self, onpointerenter: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointerleave(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerleave(self, onpointerleave: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ongotpointercapture(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ongotpointercapture(self, ongotpointercapture: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onlostpointercapture(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onlostpointercapture(self, onlostpointercapture: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onanimationcancel(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onanimationcancel(self, onanimationcancel: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onanimationend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onanimationend(self, onanimationend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onanimationiteration(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onanimationiteration(self, onanimationiteration: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onanimationstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onanimationstart(self, onanimationstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontransitioncancel(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontransitioncancel(self, ontransitioncancel: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontransitionend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontransitionend(self, ontransitionend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontransitionrun(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontransitionrun(self, ontransitionrun: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontransitionstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontransitionstart(self, ontransitionstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwebkitanimationend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwebkitanimationend(self, onwebkitanimationend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwebkitanimationiteration(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwebkitanimationiteration(self, onwebkitanimationiteration: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwebkitanimationstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwebkitanimationstart(self, onwebkitanimationstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwebkittransitionend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwebkittransitionend(self, onwebkittransitionend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oncopy(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oncopy(self, oncopy: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oncut(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oncut(self, oncut: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpaste(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpaste(self, onpaste: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontouchstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontouchstart(self, ontouchstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontouchend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontouchend(self, ontouchend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontouchmove(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontouchmove(self, ontouchmove: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontouchcancel(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontouchcancel(self, ontouchcancel: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgMatrix:
    
    def a(self) -> float:
        raise NotImplementedError
    def set_a(self, a: float) -> None:
        raise NotImplementedError
    def b(self) -> float:
        raise NotImplementedError
    def set_b(self, b: float) -> None:
        raise NotImplementedError
    def c(self) -> float:
        raise NotImplementedError
    def set_c(self, c: float) -> None:
        raise NotImplementedError
    def d(self) -> float:
        raise NotImplementedError
    def set_d(self, d: float) -> None:
        raise NotImplementedError
    def e(self) -> float:
        raise NotImplementedError
    def set_e(self, e: float) -> None:
        raise NotImplementedError
    def f(self) -> float:
        raise NotImplementedError
    def set_f(self, f: float) -> None:
        raise NotImplementedError
    def multiply(self, second_matrix: Self) -> Self:
        raise NotImplementedError
    def inverse(self) -> Self:
        raise NotImplementedError
    def translate(self, x: float, y: float) -> Self:
        raise NotImplementedError
    def scale(self, scale_factor: float) -> Self:
        raise NotImplementedError
    def scale_non_uniform(self, scale_factor_x: float, scale_factor_y: float) -> Self:
        raise NotImplementedError
    def rotate(self, angle: float) -> Self:
        raise NotImplementedError
    def rotate_from_vector(self, x: float, y: float) -> Self:
        raise NotImplementedError
    def flip_x(self) -> Self:
        raise NotImplementedError
    def flip_y(self) -> Self:
        raise NotImplementedError
    def skew_x(self, angle: float) -> Self:
        raise NotImplementedError
    def skew_y(self, angle: float) -> Self:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgTransform:
    
    @classmethod
    def svg_transform_unknown(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_transform_matrix(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_transform_translate(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_transform_scale(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_transform_rotate(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_transform_skewx(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_transform_skewy(cls) -> int:
        raise NotImplementedError
    def type(self) -> int:
        raise NotImplementedError
    def matrix(self) -> SvgMatrix:
        raise NotImplementedError
    def angle(self) -> float:
        raise NotImplementedError
    def set_matrix(self, matrix: SvgMatrix) -> None:
        raise NotImplementedError
    def set_translate(self, tx: float, ty: float) -> None:
        raise NotImplementedError
    def set_scale(self, sx: float, sy: float) -> None:
        raise NotImplementedError
    def set_rotate(self, angle: float, cx: float, cy: float) -> None:
        raise NotImplementedError
    def set_skew_x(self, angle: float) -> None:
        raise NotImplementedError
    def set_skew_y(self, angle: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgTransformList:
    
    def number_of_items(self) -> int:
        raise NotImplementedError
    def clear(self) -> None:
        raise NotImplementedError
    def initialize(self, new_item: SvgTransform) -> SvgTransform:
        raise NotImplementedError
    def get_item(self, index: int) -> SvgTransform:
        raise NotImplementedError
    def insert_item_before(self, new_item: SvgTransform, index: int) -> SvgTransform:
        raise NotImplementedError
    def replace_item(self, new_item: SvgTransform, index: int) -> SvgTransform:
        raise NotImplementedError
    def remove_item(self, index: int) -> SvgTransform:
        raise NotImplementedError
    def append_item(self, new_item: SvgTransform) -> SvgTransform:
        raise NotImplementedError
    def create_svg_transform_from_matrix(self, matrix: SvgMatrix) -> SvgTransform:
        raise NotImplementedError
    def consolidate(self) -> Optional[SvgTransform]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgAnimatedTransformList:
    
    def base_val(self) -> SvgTransformList:
        raise NotImplementedError
    def anim_val(self) -> SvgTransformList:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class SvgBoundingBoxOptions:
    fill: Optional[bool]
    stroke: Optional[bool]
    markers: Optional[bool]
    clipped: Optional[bool]

class SvgRect:
    
    def x(self) -> float:
        raise NotImplementedError
    def set_x(self, x: float) -> None:
        raise NotImplementedError
    def y(self) -> float:
        raise NotImplementedError
    def set_y(self, y: float) -> None:
        raise NotImplementedError
    def width(self) -> float:
        raise NotImplementedError
    def set_width(self, width: float) -> None:
        raise NotImplementedError
    def height(self) -> float:
        raise NotImplementedError
    def set_height(self, height: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgStringList:
    
    def length(self) -> int:
        raise NotImplementedError
    def number_of_items(self) -> int:
        raise NotImplementedError
    def clear(self) -> None:
        raise NotImplementedError
    def initialize(self, new_item: str) -> str:
        raise NotImplementedError
    def get_item(self, index: int) -> str:
        raise NotImplementedError
    def insert_item_before(self, new_item: str, index: int) -> str:
        raise NotImplementedError
    def replace_item(self, new_item: str, index: int) -> str:
        raise NotImplementedError
    def remove_item(self, index: int) -> str:
        raise NotImplementedError
    def append_item(self, new_item: str) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgGraphicsElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def transform(self) -> SvgAnimatedTransformList:
        raise NotImplementedError
    def nearest_viewport_element(self) -> Optional[SvgElement]:
        raise NotImplementedError
    def farthest_viewport_element(self) -> Optional[SvgElement]:
        raise NotImplementedError
    def get_b_box(self, a_options: Optional[SvgBoundingBoxOptions]) -> SvgRect:
        raise NotImplementedError
    def get_ctm(self) -> Optional[SvgMatrix]:
        raise NotImplementedError
    def get_screen_ctm(self) -> Optional[SvgMatrix]:
        raise NotImplementedError
    def get_transform_to_element(self, element: Self) -> SvgMatrix:
        raise NotImplementedError
    def required_features(self) -> SvgStringList:
        raise NotImplementedError
    def required_extensions(self) -> SvgStringList:
        raise NotImplementedError
    def system_language(self) -> SvgStringList:
        raise NotImplementedError
    def has_extension(self, extension: str) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgLength:
    
    @classmethod
    def svg_lengthtype_unknown(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_lengthtype_number(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_lengthtype_percentage(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_lengthtype_ems(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_lengthtype_exs(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_lengthtype_px(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_lengthtype_cm(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_lengthtype_mm(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_lengthtype_in(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_lengthtype_pt(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_lengthtype_pc(cls) -> int:
        raise NotImplementedError
    def unit_type(self) -> int:
        raise NotImplementedError
    def value(self) -> float:
        raise NotImplementedError
    def set_value(self, value: float) -> None:
        raise NotImplementedError
    def value_in_specified_units(self) -> float:
        raise NotImplementedError
    def set_value_in_specified_units(self, value_in_specified_units: float) -> None:
        raise NotImplementedError
    def value_as_string(self) -> str:
        raise NotImplementedError
    def set_value_as_string(self, value_as_string: str) -> None:
        raise NotImplementedError
    def new_value_specified_units(self, unit_type: int, value_in_specified_units: float) -> None:
        raise NotImplementedError
    def convert_to_specified_units(self, unit_type: int) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgAnimatedLength:
    
    def base_val(self) -> SvgLength:
        raise NotImplementedError
    def anim_val(self) -> SvgLength:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgPoint:
    
    def x(self) -> float:
        raise NotImplementedError
    def set_x(self, x: float) -> None:
        raise NotImplementedError
    def y(self) -> float:
        raise NotImplementedError
    def set_y(self, y: float) -> None:
        raise NotImplementedError
    def matrix_transform(self, matrix: SvgMatrix) -> Self:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgNumber:
    
    def value(self) -> float:
        raise NotImplementedError
    def set_value(self, value: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgAngle:
    
    @classmethod
    def svg_angletype_unknown(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_angletype_unspecified(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_angletype_deg(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_angletype_rad(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_angletype_grad(cls) -> int:
        raise NotImplementedError
    def unit_type(self) -> int:
        raise NotImplementedError
    def value(self) -> float:
        raise NotImplementedError
    def set_value(self, value: float) -> None:
        raise NotImplementedError
    def value_in_specified_units(self) -> float:
        raise NotImplementedError
    def set_value_in_specified_units(self, value_in_specified_units: float) -> None:
        raise NotImplementedError
    def value_as_string(self) -> str:
        raise NotImplementedError
    def set_value_as_string(self, value_as_string: str) -> None:
        raise NotImplementedError
    def new_value_specified_units(self, unit_type: int, value_in_specified_units: float) -> None:
        raise NotImplementedError
    def convert_to_specified_units(self, unit_type: int) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgAnimatedRect:
    
    def base_val(self) -> Optional[SvgRect]:
        raise NotImplementedError
    def anim_val(self) -> Optional[SvgRect]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgPreserveAspectRatio:
    
    @classmethod
    def svg_preserveaspectratio_unknown(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_preserveaspectratio_none(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_preserveaspectratio_xminymin(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_preserveaspectratio_xmidymin(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_preserveaspectratio_xmaxymin(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_preserveaspectratio_xminymid(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_preserveaspectratio_xmidymid(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_preserveaspectratio_xmaxymid(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_preserveaspectratio_xminymax(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_preserveaspectratio_xmidymax(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_preserveaspectratio_xmaxymax(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_meetorslice_unknown(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_meetorslice_meet(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_meetorslice_slice(cls) -> int:
        raise NotImplementedError
    def align(self) -> int:
        raise NotImplementedError
    def set_align(self, align: int) -> None:
        raise NotImplementedError
    def meet_or_slice(self) -> int:
        raise NotImplementedError
    def set_meet_or_slice(self, meet_or_slice: int) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgAnimatedPreserveAspectRatio:
    
    def base_val(self) -> SvgPreserveAspectRatio:
        raise NotImplementedError
    def anim_val(self) -> SvgPreserveAspectRatio:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgsvgElement:
    
    def as_svg_graphics_element(self) -> SvgGraphicsElement:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def use_current_view(self) -> bool:
        raise NotImplementedError
    def current_scale(self) -> float:
        raise NotImplementedError
    def set_current_scale(self, current_scale: float) -> None:
        raise NotImplementedError
    def current_translate(self) -> SvgPoint:
        raise NotImplementedError
    def suspend_redraw(self, max_wait_milliseconds: int) -> int:
        raise NotImplementedError
    def unsuspend_redraw(self, suspend_handle_id: int) -> None:
        raise NotImplementedError
    def unsuspend_redraw_all(self) -> None:
        raise NotImplementedError
    def force_redraw(self) -> None:
        raise NotImplementedError
    def pause_animations(self) -> None:
        raise NotImplementedError
    def unpause_animations(self) -> None:
        raise NotImplementedError
    def animations_paused(self) -> bool:
        raise NotImplementedError
    def get_current_time(self) -> float:
        raise NotImplementedError
    def set_current_time(self, seconds: float) -> None:
        raise NotImplementedError
    def deselect_all(self) -> None:
        raise NotImplementedError
    def create_svg_number(self) -> SvgNumber:
        raise NotImplementedError
    def create_svg_length(self) -> SvgLength:
        raise NotImplementedError
    def create_svg_angle(self) -> SvgAngle:
        raise NotImplementedError
    def create_svg_point(self) -> SvgPoint:
        raise NotImplementedError
    def create_svg_matrix(self) -> SvgMatrix:
        raise NotImplementedError
    def create_svg_rect(self) -> SvgRect:
        raise NotImplementedError
    def create_svg_transform(self) -> SvgTransform:
        raise NotImplementedError
    def create_svg_transform_from_matrix(self, matrix: SvgMatrix) -> SvgTransform:
        raise NotImplementedError
    def get_element_by_id(self, element_id: str) -> Optional[Any]:
        raise NotImplementedError
    def view_box(self) -> SvgAnimatedRect:
        raise NotImplementedError
    def preserve_aspect_ratio(self) -> SvgAnimatedPreserveAspectRatio:
        raise NotImplementedError
    @classmethod
    def svg_zoomandpan_unknown(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_zoomandpan_disable(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_zoomandpan_magnify(cls) -> int:
        raise NotImplementedError
    def zoom_and_pan(self) -> int:
        raise NotImplementedError
    def set_zoom_and_pan(self, zoom_and_pan: int) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Selection:
    
    def anchor_node(self) -> Optional[Any]:
        raise NotImplementedError
    def anchor_offset(self) -> int:
        raise NotImplementedError
    def focus_node(self) -> Optional[Any]:
        raise NotImplementedError
    def focus_offset(self) -> int:
        raise NotImplementedError
    def is_collapsed(self) -> bool:
        raise NotImplementedError
    def range_count(self) -> int:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def get_range_at(self, index: int) -> Range:
        raise NotImplementedError
    def add_range(self, range: Range) -> None:
        raise NotImplementedError
    def remove_range(self, range: Range) -> None:
        raise NotImplementedError
    def remove_all_ranges(self) -> None:
        raise NotImplementedError
    def empty(self) -> None:
        raise NotImplementedError
    def collapse(self, node: Optional[Any], offset: Optional[int]) -> None:
        raise NotImplementedError
    def set_position(self, node: Optional[Any], offset: Optional[int]) -> None:
        raise NotImplementedError
    def collapse_to_start(self) -> None:
        raise NotImplementedError
    def collapse_to_end(self) -> None:
        raise NotImplementedError
    def extend(self, node: Any, offset: Optional[int]) -> None:
        raise NotImplementedError
    def set_base_and_extent(self, anchor_node: Any, anchor_offset: int, focus_node: Any, focus_offset: int) -> None:
        raise NotImplementedError
    def select_all_children(self, node: Any) -> None:
        raise NotImplementedError
    def delete_from_document(self) -> None:
        raise NotImplementedError
    def contains_node(self, node: Any, allow_partial_containment: Optional[bool]) -> bool:
        raise NotImplementedError
    def modify(self, alter: str, direction: str, granularity: str) -> None:
        raise NotImplementedError
    def interline_position(self) -> bool:
        raise NotImplementedError
    def set_interline_position(self, interline_position: bool) -> None:
        raise NotImplementedError
    def caret_bidi_level(self) -> int:
        raise NotImplementedError
    def set_caret_bidi_level(self, caret_bidi_level: int) -> None:
        raise NotImplementedError
    def to_string_with_format(self, format_type: str, flags: int, wrap_column: int) -> str:
        raise NotImplementedError
    def add_selection_listener(self, new_listener: NsISelectionListener) -> None:
        raise NotImplementedError
    def remove_selection_listener(self, listener_to_remove: NsISelectionListener) -> None:
        raise NotImplementedError
    def selection_type(self) -> int:
        raise NotImplementedError
    def get_ranges_for_interval(self, begin_node: Any, begin_offset: int, end_node: Any, end_offset: int, allow_adjacent: bool) -> List[Range]:
        raise NotImplementedError
    def scroll_into_view(self, a_region: int, a_is_synchronous: bool, av_percent: int, ah_percent: int) -> None:
        raise NotImplementedError
    def set_colors(self, a_foreground_color: str, a_background_color: str, a_alt_foreground_color: str, a_alt_background_color: str) -> None:
        raise NotImplementedError
    def reset_colors(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class FlashClassification(Enum):
    UNCLASSIFIED = 0
    UNKNOWN = 1
    ALLOWED = 2
    DENIED = 3

class XPathResult:
    
    @classmethod
    def any_type(cls) -> int:
        raise NotImplementedError
    @classmethod
    def number_type(cls) -> int:
        raise NotImplementedError
    @classmethod
    def string_type(cls) -> int:
        raise NotImplementedError
    @classmethod
    def boolean_type(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unordered_node_iterator_type(cls) -> int:
        raise NotImplementedError
    @classmethod
    def ordered_node_iterator_type(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unordered_node_snapshot_type(cls) -> int:
        raise NotImplementedError
    @classmethod
    def ordered_node_snapshot_type(cls) -> int:
        raise NotImplementedError
    @classmethod
    def any_unordered_node_type(cls) -> int:
        raise NotImplementedError
    @classmethod
    def first_ordered_node_type(cls) -> int:
        raise NotImplementedError
    def result_type(self) -> int:
        raise NotImplementedError
    def number_value(self) -> float:
        raise NotImplementedError
    def string_value(self) -> str:
        raise NotImplementedError
    def boolean_value(self) -> bool:
        raise NotImplementedError
    def single_node_value(self) -> Optional[Any]:
        raise NotImplementedError
    def invalid_iterator_state(self) -> bool:
        raise NotImplementedError
    def snapshot_length(self) -> int:
        raise NotImplementedError
    def iterate_next(self) -> Optional[Any]:
        raise NotImplementedError
    def snapshot_item(self, index: int) -> Optional[Any]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class XPathExpression:
    
    def evaluate(self, context_node: Any, type: Optional[int], result: Optional[Object]) -> XPathResult:
        raise NotImplementedError
    def evaluate_with_context(self, context_node: Any, context_position: int, context_size: int, type: Optional[int], result: Optional[Object]) -> XPathResult:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class FontFaceLoadStatus(Enum):
    UNLOADED = 0
    LOADING = 1
    LOADED = 2
    ERROR = 3

class FontFace:
    
    def family(self) -> str:
        raise NotImplementedError
    def set_family(self, family: str) -> None:
        raise NotImplementedError
    def style(self) -> str:
        raise NotImplementedError
    def set_style(self, style: str) -> None:
        raise NotImplementedError
    def weight(self) -> str:
        raise NotImplementedError
    def set_weight(self, weight: str) -> None:
        raise NotImplementedError
    def stretch(self) -> str:
        raise NotImplementedError
    def set_stretch(self, stretch: str) -> None:
        raise NotImplementedError
    def unicode_range(self) -> str:
        raise NotImplementedError
    def set_unicode_range(self, unicode_range: str) -> None:
        raise NotImplementedError
    def variant(self) -> str:
        raise NotImplementedError
    def set_variant(self, variant: str) -> None:
        raise NotImplementedError
    def feature_settings(self) -> str:
        raise NotImplementedError
    def set_feature_settings(self, feature_settings: str) -> None:
        raise NotImplementedError
    def variation_settings(self) -> str:
        raise NotImplementedError
    def set_variation_settings(self, variation_settings: str) -> None:
        raise NotImplementedError
    def display(self) -> str:
        raise NotImplementedError
    def set_display(self, display: str) -> None:
        raise NotImplementedError
    def status(self) -> FontFaceLoadStatus:
        raise NotImplementedError
    def load(self) -> Self:
        raise NotImplementedError
    def loaded(self) -> Self:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class FontFaceSetIteratorResult:
    value: Any
    done: bool

class FontFaceSetIterator:
    
    def next(self) -> FontFaceSetIteratorResult:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class FontFaceSetLoadStatus(Enum):
    LOADING = 0
    LOADED = 1

class FontFaceSet:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def size(self) -> int:
        raise NotImplementedError
    def add(self, font: FontFace) -> None:
        raise NotImplementedError
    def has(self, font: FontFace) -> bool:
        raise NotImplementedError
    def delete(self, font: FontFace) -> bool:
        raise NotImplementedError
    def clear(self) -> None:
        raise NotImplementedError
    def entries(self) -> FontFaceSetIterator:
        raise NotImplementedError
    def values(self) -> FontFaceSetIterator:
        raise NotImplementedError
    def for_each(self, cb: FontFaceSetForEachCallback, this_arg: Any) -> None:
        raise NotImplementedError
    def onloading(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onloading(self, onloading: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onloadingdone(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onloadingdone(self, onloadingdone: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onloadingerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onloadingerror(self, onloadingerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def load(self, font: str, text: Optional[str]) -> List[FontFace]:
        raise NotImplementedError
    def check(self, font: str, text: Optional[str]) -> bool:
        raise NotImplementedError
    def status(self) -> FontFaceSetLoadStatus:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class StyleSheetList:
    
    def length(self) -> int:
        raise NotImplementedError
    def item(self, index: int) -> Optional[StyleSheet]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Document:
    
    def as_node(self) -> Any:
        raise NotImplementedError
    def implementation(self) -> DomImplementation:
        raise NotImplementedError
    def url(self) -> str:
        raise NotImplementedError
    def document_uri(self) -> str:
        raise NotImplementedError
    def compat_mode(self) -> str:
        raise NotImplementedError
    def character_set(self) -> str:
        raise NotImplementedError
    def charset(self) -> str:
        raise NotImplementedError
    def input_encoding(self) -> str:
        raise NotImplementedError
    def content_type(self) -> str:
        raise NotImplementedError
    def doctype(self) -> Optional[DocumentType]:
        raise NotImplementedError
    def document_element(self) -> Optional[Any]:
        raise NotImplementedError
    def get_elements_by_tag_name(self, local_name: str) -> HtmlCollection:
        raise NotImplementedError
    def get_elements_by_tag_name_ns(self, namespace: str, local_name: str) -> HtmlCollection:
        raise NotImplementedError
    def get_elements_by_class_name(self, class_names: str) -> HtmlCollection:
        raise NotImplementedError
    def get_element_by_id(self, element_id: str) -> Optional[Any]:
        raise NotImplementedError
    def create_element(self, local_name: str, options: Optional[ElementCreationOptionsOrString]) -> Any:
        raise NotImplementedError
    def create_element_ns(self, namespace: str, qualified_name: str, options: Optional[ElementCreationOptionsOrString]) -> Any:
        raise NotImplementedError
    def create_document_fragment(self) -> DocumentFragment:
        raise NotImplementedError
    def create_text_node(self, data: str) -> Text:
        raise NotImplementedError
    def create_comment(self, data: str) -> Comment:
        raise NotImplementedError
    def create_processing_instruction(self, target: str, data: str) -> ProcessingInstruction:
        raise NotImplementedError
    def import_node(self, node: Any, deep: Optional[bool]) -> Any:
        raise NotImplementedError
    def adopt_node(self, node: Any) -> Any:
        raise NotImplementedError
    def create_event(self, interface: str) -> Event:
        raise NotImplementedError
    def create_range(self) -> Range:
        raise NotImplementedError
    def create_node_iterator(self, root: Any, what_to_show: Optional[int], filter: Optional[Some[Optional[NodeFilter]]]) -> NodeIterator:
        raise NotImplementedError
    def create_tree_walker(self, root: Any, what_to_show: Optional[int], filter: Optional[Some[Optional[NodeFilter]]]) -> TreeWalker:
        raise NotImplementedError
    def create_cdata_section(self, data: str) -> CdataSection:
        raise NotImplementedError
    def create_attribute(self, name: str) -> Attr:
        raise NotImplementedError
    def create_attribute_ns(self, namespace: str, name: str) -> Attr:
        raise NotImplementedError
    def location(self) -> Optional[Location]:
        raise NotImplementedError
    def referrer(self) -> str:
        raise NotImplementedError
    def last_modified(self) -> str:
        raise NotImplementedError
    def ready_state(self) -> str:
        raise NotImplementedError
    def title(self) -> str:
        raise NotImplementedError
    def set_title(self, title: str) -> None:
        raise NotImplementedError
    def dir(self) -> str:
        raise NotImplementedError
    def set_dir(self, dir: str) -> None:
        raise NotImplementedError
    def body(self) -> Optional[Any]:
        raise NotImplementedError
    def set_body(self, body: Optional[Any]) -> None:
        raise NotImplementedError
    def head(self) -> Optional[HtmlHeadElement]:
        raise NotImplementedError
    def images(self) -> HtmlCollection:
        raise NotImplementedError
    def embeds(self) -> HtmlCollection:
        raise NotImplementedError
    def plugins(self) -> HtmlCollection:
        raise NotImplementedError
    def links(self) -> HtmlCollection:
        raise NotImplementedError
    def forms(self) -> HtmlCollection:
        raise NotImplementedError
    def scripts(self) -> HtmlCollection:
        raise NotImplementedError
    def get_elements_by_name(self, element_name: str) -> NodeList:
        raise NotImplementedError
    def default_view(self) -> Optional[WindowProxy]:
        raise NotImplementedError
    def has_focus(self) -> bool:
        raise NotImplementedError
    def onreadystatechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onreadystatechange(self, onreadystatechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onbeforescriptexecute(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onbeforescriptexecute(self, onbeforescriptexecute: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onafterscriptexecute(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onafterscriptexecute(self, onafterscriptexecute: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onselectionchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onselectionchange(self, onselectionchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def current_script(self) -> Optional[Any]:
        raise NotImplementedError
    def release_capture(self) -> None:
        raise NotImplementedError
    def document_uri_object(self) -> Optional[Uri]:
        raise NotImplementedError
    def referrer_policy(self) -> int:
        raise NotImplementedError
    def anchors(self) -> HtmlCollection:
        raise NotImplementedError
    def applets(self) -> HtmlCollection:
        raise NotImplementedError
    def fullscreen(self) -> bool:
        raise NotImplementedError
    def fullscreen_enabled(self) -> bool:
        raise NotImplementedError
    def exit_fullscreen(self) -> None:
        raise NotImplementedError
    def onfullscreenchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onfullscreenchange(self, onfullscreenchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onfullscreenerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onfullscreenerror(self, onfullscreenerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def exit_pointer_lock(self) -> None:
        raise NotImplementedError
    def onpointerlockchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerlockchange(self, onpointerlockchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointerlockerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerlockerror(self, onpointerlockerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def hidden(self) -> bool:
        raise NotImplementedError
    def visibility_state(self) -> VisibilityState:
        raise NotImplementedError
    def onvisibilitychange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onvisibilitychange(self, onvisibilitychange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def selected_style_sheet_set(self) -> str:
        raise NotImplementedError
    def set_selected_style_sheet_set(self, selected_style_sheet_set: str) -> None:
        raise NotImplementedError
    def last_style_sheet_set(self) -> str:
        raise NotImplementedError
    def preferred_style_sheet_set(self) -> str:
        raise NotImplementedError
    def style_sheet_sets(self) -> DomStringList:
        raise NotImplementedError
    def enable_style_sheets_for_set(self, name: str) -> None:
        raise NotImplementedError
    def caret_position_from_point(self, x: float, y: float) -> Optional[CaretPosition]:
        raise NotImplementedError
    def scrolling_element(self) -> Optional[Any]:
        raise NotImplementedError
    def query_selector(self, selectors: str) -> Optional[Any]:
        raise NotImplementedError
    def query_selector_all(self, selectors: str) -> NodeList:
        raise NotImplementedError
    def timeline(self) -> DocumentTimeline:
        raise NotImplementedError
    def get_animations(self) -> List[Animation]:
        raise NotImplementedError
    def root_element(self) -> Optional[SvgsvgElement]:
        raise NotImplementedError
    def is_srcdoc_document(self) -> bool:
        raise NotImplementedError
    def sandbox_flags_as_string(self) -> str:
        raise NotImplementedError
    def insert_anonymous_content(self, a_element: Any) -> AnonymousContent:
        raise NotImplementedError
    def remove_anonymous_content(self, a_content: AnonymousContent) -> None:
        raise NotImplementedError
    def get_selection(self) -> Optional[Selection]:
        raise NotImplementedError
    def user_has_interacted(self) -> bool:
        raise NotImplementedError
    def notify_user_gesture_activation(self) -> None:
        raise NotImplementedError
    def document_flash_classification(self) -> FlashClassification:
        raise NotImplementedError
    def create_expression(self, expression: str, resolver: Optional[Some[Optional[XPathNsResolver]]]) -> XPathExpression:
        raise NotImplementedError
    def create_ns_resolver(self, node_resolver: Any) -> Any:
        raise NotImplementedError
    def evaluate(self, expression: str, context_node: Any, resolver: Optional[Some[Optional[XPathNsResolver]]], type: Optional[int], result: Optional[Object]) -> XPathResult:
        raise NotImplementedError
    def onabort(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onabort(self, onabort: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onblur(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onblur(self, onblur: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onfocus(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onfocus(self, onfocus: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onauxclick(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onauxclick(self, onauxclick: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oncanplay(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oncanplay(self, oncanplay: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oncanplaythrough(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oncanplaythrough(self, oncanplaythrough: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onchange(self, onchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onclick(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onclick(self, onclick: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onclose(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onclose(self, onclose: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oncontextmenu(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oncontextmenu(self, oncontextmenu: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondblclick(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondblclick(self, ondblclick: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondrag(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondrag(self, ondrag: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondragend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondragend(self, ondragend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondragenter(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondragenter(self, ondragenter: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondragexit(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondragexit(self, ondragexit: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondragleave(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondragleave(self, ondragleave: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondragover(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondragover(self, ondragover: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondragstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondragstart(self, ondragstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondrop(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondrop(self, ondrop: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondurationchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondurationchange(self, ondurationchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onemptied(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onemptied(self, onemptied: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onended(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onended(self, onended: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oninput(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oninput(self, oninput: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oninvalid(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oninvalid(self, oninvalid: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onkeydown(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onkeydown(self, onkeydown: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onkeypress(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onkeypress(self, onkeypress: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onkeyup(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onkeyup(self, onkeyup: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onload(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onload(self, onload: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onloadeddata(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onloadeddata(self, onloadeddata: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onloadedmetadata(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onloadedmetadata(self, onloadedmetadata: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onloadend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onloadend(self, onloadend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onloadstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onloadstart(self, onloadstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmousedown(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmousedown(self, onmousedown: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmouseenter(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmouseenter(self, onmouseenter: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmouseleave(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmouseleave(self, onmouseleave: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmousemove(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmousemove(self, onmousemove: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmouseout(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmouseout(self, onmouseout: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmouseover(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmouseover(self, onmouseover: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmouseup(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmouseup(self, onmouseup: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwheel(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwheel(self, onwheel: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpause(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpause(self, onpause: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onplay(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onplay(self, onplay: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onplaying(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onplaying(self, onplaying: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onprogress(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onprogress(self, onprogress: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onratechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onratechange(self, onratechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onreset(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onreset(self, onreset: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onresize(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onresize(self, onresize: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onscroll(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onscroll(self, onscroll: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onseeked(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onseeked(self, onseeked: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onseeking(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onseeking(self, onseeking: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onselect(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onselect(self, onselect: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onshow(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onshow(self, onshow: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onstalled(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onstalled(self, onstalled: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onsubmit(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onsubmit(self, onsubmit: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onsuspend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onsuspend(self, onsuspend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontimeupdate(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontimeupdate(self, ontimeupdate: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onvolumechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onvolumechange(self, onvolumechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwaiting(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwaiting(self, onwaiting: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onselectstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onselectstart(self, onselectstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontoggle(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontoggle(self, ontoggle: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointercancel(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointercancel(self, onpointercancel: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointerdown(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerdown(self, onpointerdown: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointerup(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerup(self, onpointerup: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointermove(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointermove(self, onpointermove: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointerout(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerout(self, onpointerout: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointerover(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerover(self, onpointerover: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointerenter(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerenter(self, onpointerenter: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointerleave(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerleave(self, onpointerleave: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ongotpointercapture(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ongotpointercapture(self, ongotpointercapture: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onlostpointercapture(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onlostpointercapture(self, onlostpointercapture: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onanimationcancel(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onanimationcancel(self, onanimationcancel: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onanimationend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onanimationend(self, onanimationend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onanimationiteration(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onanimationiteration(self, onanimationiteration: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onanimationstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onanimationstart(self, onanimationstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontransitioncancel(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontransitioncancel(self, ontransitioncancel: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontransitionend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontransitionend(self, ontransitionend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontransitionrun(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontransitionrun(self, ontransitionrun: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontransitionstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontransitionstart(self, ontransitionstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwebkitanimationend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwebkitanimationend(self, onwebkitanimationend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwebkitanimationiteration(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwebkitanimationiteration(self, onwebkitanimationiteration: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwebkitanimationstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwebkitanimationstart(self, onwebkitanimationstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwebkittransitionend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwebkittransitionend(self, onwebkittransitionend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oncopy(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oncopy(self, oncopy: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oncut(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oncut(self, oncut: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpaste(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpaste(self, onpaste: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontouchstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontouchstart(self, ontouchstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontouchend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontouchend(self, ontouchend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontouchmove(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontouchmove(self, ontouchmove: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontouchcancel(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontouchcancel(self, ontouchcancel: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def children(self) -> HtmlCollection:
        raise NotImplementedError
    def first_element_child(self) -> Optional[Any]:
        raise NotImplementedError
    def last_element_child(self) -> Optional[Any]:
        raise NotImplementedError
    def child_element_count(self) -> int:
        raise NotImplementedError
    def prepend(self, nodes: List[NodeOrString]) -> None:
        raise NotImplementedError
    def append(self, nodes: List[NodeOrString]) -> None:
        raise NotImplementedError
    def replace_children(self, nodes: List[NodeOrString]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def get_box_quads(self, options: Optional[BoxQuadOptions]) -> List[DomQuad]:
        raise NotImplementedError
    def convert_quad_from_node(self, quad: DomQuad, from_: DocumentOrElementOrText, options: Optional[ConvertCoordinateOptions]) -> DomQuad:
        raise NotImplementedError
    def convert_rect_from_node(self, rect: DomRectReadOnly, from_: DocumentOrElementOrText, options: Optional[ConvertCoordinateOptions]) -> DomQuad:
        raise NotImplementedError
    def convert_point_from_node(self, point: DomPointInit, from_: DocumentOrElementOrText, options: Optional[ConvertCoordinateOptions]) -> DomPoint:
        raise NotImplementedError
    def fonts(self) -> FontFaceSet:
        raise NotImplementedError
    def element_from_point(self, x: float, y: float) -> Optional[Any]:
        raise NotImplementedError
    def elements_from_point(self, x: float, y: float) -> List[Any]:
        raise NotImplementedError
    def active_element(self) -> Optional[Any]:
        raise NotImplementedError
    def style_sheets(self) -> StyleSheetList:
        raise NotImplementedError
    def pointer_lock_element(self) -> Optional[Any]:
        raise NotImplementedError
    def fullscreen_element(self) -> Optional[Any]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class GetRootNodeOptions:
    composed: Optional[bool]

class Node:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    @classmethod
    def element_node(cls) -> int:
        raise NotImplementedError
    @classmethod
    def attribute_node(cls) -> int:
        raise NotImplementedError
    @classmethod
    def text_node(cls) -> int:
        raise NotImplementedError
    @classmethod
    def cdata_section_node(cls) -> int:
        raise NotImplementedError
    @classmethod
    def entity_reference_node(cls) -> int:
        raise NotImplementedError
    @classmethod
    def entity_node(cls) -> int:
        raise NotImplementedError
    @classmethod
    def processing_instruction_node(cls) -> int:
        raise NotImplementedError
    @classmethod
    def comment_node(cls) -> int:
        raise NotImplementedError
    @classmethod
    def document_node(cls) -> int:
        raise NotImplementedError
    @classmethod
    def document_type_node(cls) -> int:
        raise NotImplementedError
    @classmethod
    def document_fragment_node(cls) -> int:
        raise NotImplementedError
    @classmethod
    def notation_node(cls) -> int:
        raise NotImplementedError
    def node_type(self) -> int:
        raise NotImplementedError
    def node_name(self) -> str:
        raise NotImplementedError
    def base_uri(self) -> str:
        raise NotImplementedError
    def is_connected(self) -> bool:
        raise NotImplementedError
    def owner_document(self) -> Optional[Document]:
        raise NotImplementedError
    def get_root_node(self, options: Optional[GetRootNodeOptions]) -> Self:
        raise NotImplementedError
    def parent_node(self) -> Optional[Self]:
        raise NotImplementedError
    def parent_element(self) -> Optional[Any]:
        raise NotImplementedError
    def has_child_nodes(self) -> bool:
        raise NotImplementedError
    def child_nodes(self) -> NodeList:
        raise NotImplementedError
    def first_child(self) -> Optional[Self]:
        raise NotImplementedError
    def last_child(self) -> Optional[Self]:
        raise NotImplementedError
    def previous_sibling(self) -> Optional[Self]:
        raise NotImplementedError
    def next_sibling(self) -> Optional[Self]:
        raise NotImplementedError
    def node_value(self) -> str:
        raise NotImplementedError
    def set_node_value(self, node_value: str) -> None:
        raise NotImplementedError
    def text_content(self) -> str:
        raise NotImplementedError
    def set_text_content(self, text_content: str) -> None:
        raise NotImplementedError
    def insert_before(self, node: Self, child: Optional[Self]) -> Self:
        raise NotImplementedError
    def append_child(self, node: Self) -> Self:
        raise NotImplementedError
    def replace_child(self, node: Self, child: Self) -> Self:
        raise NotImplementedError
    def remove_child(self, child: Self) -> Self:
        raise NotImplementedError
    def normalize(self) -> None:
        raise NotImplementedError
    def clone_node(self, deep: Optional[bool]) -> Self:
        raise NotImplementedError
    def is_same_node(self, node: Optional[Self]) -> bool:
        raise NotImplementedError
    def is_equal_node(self, node: Optional[Self]) -> bool:
        raise NotImplementedError
    @classmethod
    def document_position_disconnected(cls) -> int:
        raise NotImplementedError
    @classmethod
    def document_position_preceding(cls) -> int:
        raise NotImplementedError
    @classmethod
    def document_position_following(cls) -> int:
        raise NotImplementedError
    @classmethod
    def document_position_contains(cls) -> int:
        raise NotImplementedError
    @classmethod
    def document_position_contained_by(cls) -> int:
        raise NotImplementedError
    @classmethod
    def document_position_implementation_specific(cls) -> int:
        raise NotImplementedError
    def compare_document_position(self, other: Self) -> int:
        raise NotImplementedError
    def contains(self, other: Optional[Self]) -> bool:
        raise NotImplementedError
    def lookup_prefix(self, namespace: str) -> str:
        raise NotImplementedError
    def lookup_namespace_uri(self, prefix: str) -> str:
        raise NotImplementedError
    def is_default_namespace(self, namespace: str) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DomTokenList:
    
    def length(self) -> int:
        raise NotImplementedError
    def item(self, index: int) -> str:
        raise NotImplementedError
    def contains(self, token: str) -> bool:
        raise NotImplementedError
    def add(self, tokens: List[str]) -> None:
        raise NotImplementedError
    def remove(self, tokens: List[str]) -> None:
        raise NotImplementedError
    def replace(self, token: str, new_token: str) -> bool:
        raise NotImplementedError
    def toggle(self, token: str, force: Optional[bool]) -> bool:
        raise NotImplementedError
    def supports(self, token: str) -> bool:
        raise NotImplementedError
    def value(self) -> str:
        raise NotImplementedError
    def set_value(self, value: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class NamedNodeMap:
    
    def get_named_item(self, name: str) -> Optional[Attr]:
        raise NotImplementedError
    def set_named_item(self, arg: Attr) -> Optional[Attr]:
        raise NotImplementedError
    def remove_named_item(self, name: str) -> Attr:
        raise NotImplementedError
    def item(self, index: int) -> Optional[Attr]:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def get_named_item_ns(self, namespace_uri: str, local_name: str) -> Optional[Attr]:
        raise NotImplementedError
    def set_named_item_ns(self, arg: Attr) -> Optional[Attr]:
        raise NotImplementedError
    def remove_named_item_ns(self, namespace_uri: str, local_name: str) -> Attr:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DomMatrix:
    
    def as_dom_matrix_read_only(self) -> Any:
        raise NotImplementedError
    def a(self) -> float:
        raise NotImplementedError
    def set_a(self, a: float) -> None:
        raise NotImplementedError
    def b(self) -> float:
        raise NotImplementedError
    def set_b(self, b: float) -> None:
        raise NotImplementedError
    def c(self) -> float:
        raise NotImplementedError
    def set_c(self, c: float) -> None:
        raise NotImplementedError
    def d(self) -> float:
        raise NotImplementedError
    def set_d(self, d: float) -> None:
        raise NotImplementedError
    def e(self) -> float:
        raise NotImplementedError
    def set_e(self, e: float) -> None:
        raise NotImplementedError
    def f(self) -> float:
        raise NotImplementedError
    def set_f(self, f: float) -> None:
        raise NotImplementedError
    def m11(self) -> float:
        raise NotImplementedError
    def set_m11(self, m11: float) -> None:
        raise NotImplementedError
    def m12(self) -> float:
        raise NotImplementedError
    def set_m12(self, m12: float) -> None:
        raise NotImplementedError
    def m13(self) -> float:
        raise NotImplementedError
    def set_m13(self, m13: float) -> None:
        raise NotImplementedError
    def m14(self) -> float:
        raise NotImplementedError
    def set_m14(self, m14: float) -> None:
        raise NotImplementedError
    def m21(self) -> float:
        raise NotImplementedError
    def set_m21(self, m21: float) -> None:
        raise NotImplementedError
    def m22(self) -> float:
        raise NotImplementedError
    def set_m22(self, m22: float) -> None:
        raise NotImplementedError
    def m23(self) -> float:
        raise NotImplementedError
    def set_m23(self, m23: float) -> None:
        raise NotImplementedError
    def m24(self) -> float:
        raise NotImplementedError
    def set_m24(self, m24: float) -> None:
        raise NotImplementedError
    def m31(self) -> float:
        raise NotImplementedError
    def set_m31(self, m31: float) -> None:
        raise NotImplementedError
    def m32(self) -> float:
        raise NotImplementedError
    def set_m32(self, m32: float) -> None:
        raise NotImplementedError
    def m33(self) -> float:
        raise NotImplementedError
    def set_m33(self, m33: float) -> None:
        raise NotImplementedError
    def m34(self) -> float:
        raise NotImplementedError
    def set_m34(self, m34: float) -> None:
        raise NotImplementedError
    def m41(self) -> float:
        raise NotImplementedError
    def set_m41(self, m41: float) -> None:
        raise NotImplementedError
    def m42(self) -> float:
        raise NotImplementedError
    def set_m42(self, m42: float) -> None:
        raise NotImplementedError
    def m43(self) -> float:
        raise NotImplementedError
    def set_m43(self, m43: float) -> None:
        raise NotImplementedError
    def m44(self) -> float:
        raise NotImplementedError
    def set_m44(self, m44: float) -> None:
        raise NotImplementedError
    def multiply_self(self, other: Self) -> Self:
        raise NotImplementedError
    def pre_multiply_self(self, other: Self) -> Self:
        raise NotImplementedError
    def translate_self(self, tx: float, ty: float, tz: Optional[float]) -> Self:
        raise NotImplementedError
    def scale_self(self, scale: float, origin_x: Optional[float], origin_y: Optional[float]) -> Self:
        raise NotImplementedError
    def scale3d_self(self, scale: float, origin_x: Optional[float], origin_y: Optional[float], origin_z: Optional[float]) -> Self:
        raise NotImplementedError
    def scale_non_uniform_self(self, scale_x: float, scale_y: Optional[float], scale_z: Optional[float], origin_x: Optional[float], origin_y: Optional[float], origin_z: Optional[float]) -> Self:
        raise NotImplementedError
    def rotate_self(self, angle: float, origin_x: Optional[float], origin_y: Optional[float]) -> Self:
        raise NotImplementedError
    def rotate_from_vector_self(self, x: float, y: float) -> Self:
        raise NotImplementedError
    def rotate_axis_angle_self(self, x: float, y: float, z: float, angle: float) -> Self:
        raise NotImplementedError
    def skew_x_self(self, sx: float) -> Self:
        raise NotImplementedError
    def skew_y_self(self, sy: float) -> Self:
        raise NotImplementedError
    def invert_self(self) -> Self:
        raise NotImplementedError
    def set_matrix_value(self, transform_list: str) -> Self:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class Float64ArrayConstructorOptions_Float64Array:
    value: Any


@dataclass
class Float64ArrayConstructorOptions_Length:
    value: int


@dataclass
class Float64ArrayConstructorOptions_ArrayBuffer:
    value: Tuple[ArrayBuffer, Optional[int], Optional[int]]


Float64ArrayConstructorOptions = Union[Float64ArrayConstructorOptions_Float64Array, Float64ArrayConstructorOptions_Length, Float64ArrayConstructorOptions_ArrayBuffer]



@dataclass
class Float64ArraySetSrc_List:
    value: List[float]


@dataclass
class Float64ArraySetSrc_Float64Array:
    value: Any


Float64ArraySetSrc = Union[Float64ArraySetSrc_List, Float64ArraySetSrc_Float64Array]


class Float64Array:
    
    def __init__(self, options: Optional[Float64ArrayConstructorOptions]):
        raise NotImplementedError

    def fill(self, value: float, start: Optional[int], end: Optional[int]) -> Self:
        raise NotImplementedError
    def buffer(self) -> ArrayBuffer:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def byte_offset(self) -> int:
        raise NotImplementedError
    def byte_length(self) -> int:
        raise NotImplementedError
    def at(self, index: int) -> Optional[float]:
        raise NotImplementedError
    def copy_within(self, target: int, start: int, end: Optional[int]) -> Self:
        raise NotImplementedError
    def set(self, src: Float64ArraySetSrc, offset: int) -> None:
        raise NotImplementedError
    def slice(self, begin: int, end: int) -> Self:
        raise NotImplementedError
    def subarray(self, begin: int, end: int) -> Self:
        raise NotImplementedError
    def values(self) -> List[float]:
        raise NotImplementedError
    def get_index(self, index: int) -> float:
        raise NotImplementedError
    def set_index(self, index: int, value: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DomMatrixReadOnly:
    
    def a(self) -> float:
        raise NotImplementedError
    def b(self) -> float:
        raise NotImplementedError
    def c(self) -> float:
        raise NotImplementedError
    def d(self) -> float:
        raise NotImplementedError
    def e(self) -> float:
        raise NotImplementedError
    def f(self) -> float:
        raise NotImplementedError
    def m11(self) -> float:
        raise NotImplementedError
    def m12(self) -> float:
        raise NotImplementedError
    def m13(self) -> float:
        raise NotImplementedError
    def m14(self) -> float:
        raise NotImplementedError
    def m21(self) -> float:
        raise NotImplementedError
    def m22(self) -> float:
        raise NotImplementedError
    def m23(self) -> float:
        raise NotImplementedError
    def m24(self) -> float:
        raise NotImplementedError
    def m31(self) -> float:
        raise NotImplementedError
    def m32(self) -> float:
        raise NotImplementedError
    def m33(self) -> float:
        raise NotImplementedError
    def m34(self) -> float:
        raise NotImplementedError
    def m41(self) -> float:
        raise NotImplementedError
    def m42(self) -> float:
        raise NotImplementedError
    def m43(self) -> float:
        raise NotImplementedError
    def m44(self) -> float:
        raise NotImplementedError
    def translate(self, tx: float, ty: float, tz: Optional[float]) -> DomMatrix:
        raise NotImplementedError
    def scale(self, scale: float, origin_x: Optional[float], origin_y: Optional[float]) -> DomMatrix:
        raise NotImplementedError
    def scale3d(self, scale: float, origin_x: Optional[float], origin_y: Optional[float], origin_z: Optional[float]) -> DomMatrix:
        raise NotImplementedError
    def scale_non_uniform(self, scale_x: float, scale_y: Optional[float], scale_z: Optional[float], origin_x: Optional[float], origin_y: Optional[float], origin_z: Optional[float]) -> DomMatrix:
        raise NotImplementedError
    def rotate(self, angle: float, origin_x: Optional[float], origin_y: Optional[float]) -> DomMatrix:
        raise NotImplementedError
    def rotate_from_vector(self, x: float, y: float) -> DomMatrix:
        raise NotImplementedError
    def rotate_axis_angle(self, x: float, y: float, z: float, angle: float) -> DomMatrix:
        raise NotImplementedError
    def skew_x(self, sx: float) -> DomMatrix:
        raise NotImplementedError
    def skew_y(self, sy: float) -> DomMatrix:
        raise NotImplementedError
    def multiply(self, other: DomMatrix) -> DomMatrix:
        raise NotImplementedError
    def flip_x(self) -> DomMatrix:
        raise NotImplementedError
    def flip_y(self) -> DomMatrix:
        raise NotImplementedError
    def inverse(self) -> DomMatrix:
        raise NotImplementedError
    def is2_d(self) -> bool:
        raise NotImplementedError
    def is_identity(self) -> bool:
        raise NotImplementedError
    def transform_point(self, point: Optional[DomPointInit]) -> DomPoint:
        raise NotImplementedError
    def to_float32_array(self) -> Float32Array:
        raise NotImplementedError
    def to_float64_array(self) -> Float64Array:
        raise NotImplementedError
    def to_json(self) -> Object:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ScrollLogicalPosition(Enum):
    START = 0
    CENTER = 1
    END = 2
    NEAREST = 3

class ScrollBehavior(Enum):
    AUTO = 0
    INSTANT = 1
    SMOOTH = 2

@dataclass
class ScrollIntoViewOptions:
    block: Optional[ScrollLogicalPosition]
    inline: Optional[ScrollLogicalPosition]
    behavior: Optional[ScrollBehavior]


@dataclass
class BoolOrScrollIntoViewOptions_Bool:
    value: bool


@dataclass
class BoolOrScrollIntoViewOptions_ScrollIntoViewOptions:
    value: ScrollIntoViewOptions


BoolOrScrollIntoViewOptions = Union[BoolOrScrollIntoViewOptions_Bool, BoolOrScrollIntoViewOptions_ScrollIntoViewOptions]


@dataclass
class ScrollToOptions:
    left: Optional[float]
    top: Optional[float]
    behavior: Optional[ScrollBehavior]


@dataclass
class ElementScrollParams_XY:
    value: Tuple[float, float]


@dataclass
class ElementScrollParams_Options:
    value: Optional[ScrollToOptions]


ElementScrollParams = Union[ElementScrollParams_XY, ElementScrollParams_Options]



@dataclass
class ElementScrollToParams_XY:
    value: Tuple[float, float]


@dataclass
class ElementScrollToParams_Options:
    value: Optional[ScrollToOptions]


ElementScrollToParams = Union[ElementScrollToParams_XY, ElementScrollToParams_Options]



@dataclass
class ElementScrollByParams_XY:
    value: Tuple[float, float]


@dataclass
class ElementScrollByParams_Options:
    value: Optional[ScrollToOptions]


ElementScrollByParams = Union[ElementScrollByParams_XY, ElementScrollByParams_Options]


class ShadowRootMode(Enum):
    OPEN = 0
    CLOSED = 1

@dataclass
class ShadowRootInit:
    mode: ShadowRootMode

class ShadowRoot:
    
    def as_document_fragment(self) -> DocumentFragment:
        raise NotImplementedError
    def mode(self) -> ShadowRootMode:
        raise NotImplementedError
    def host(self) -> Any:
        raise NotImplementedError
    def get_element_by_id(self, element_id: str) -> Optional[Any]:
        raise NotImplementedError
    def get_elements_by_tag_name(self, local_name: str) -> HtmlCollection:
        raise NotImplementedError
    def get_elements_by_tag_name_ns(self, namespace: str, local_name: str) -> HtmlCollection:
        raise NotImplementedError
    def get_elements_by_class_name(self, class_names: str) -> HtmlCollection:
        raise NotImplementedError
    def inner_html(self) -> str:
        raise NotImplementedError
    def set_inner_html(self, inner_html: str) -> None:
        raise NotImplementedError
    def element_from_point(self, x: float, y: float) -> Optional[Any]:
        raise NotImplementedError
    def elements_from_point(self, x: float, y: float) -> List[Any]:
        raise NotImplementedError
    def active_element(self) -> Optional[Any]:
        raise NotImplementedError
    def style_sheets(self) -> StyleSheetList:
        raise NotImplementedError
    def pointer_lock_element(self) -> Optional[Any]:
        raise NotImplementedError
    def fullscreen_element(self) -> Optional[Any]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Element:
    
    def as_node(self) -> Node:
        raise NotImplementedError
    def as_html_element(self) -> Any:
        raise NotImplementedError
    def namespace_uri(self) -> str:
        raise NotImplementedError
    def prefix(self) -> str:
        raise NotImplementedError
    def local_name(self) -> str:
        raise NotImplementedError
    def tag_name(self) -> str:
        raise NotImplementedError
    def id(self) -> str:
        raise NotImplementedError
    def set_id(self, id: str) -> None:
        raise NotImplementedError
    def class_name(self) -> str:
        raise NotImplementedError
    def set_class_name(self, class_name: str) -> None:
        raise NotImplementedError
    def class_list(self) -> DomTokenList:
        raise NotImplementedError
    def attributes(self) -> NamedNodeMap:
        raise NotImplementedError
    def get_attribute_names(self) -> List[str]:
        raise NotImplementedError
    def get_attribute(self, name: str) -> str:
        raise NotImplementedError
    def get_attribute_ns(self, namespace: str, local_name: str) -> str:
        raise NotImplementedError
    def toggle_attribute(self, name: str, force: Optional[bool]) -> bool:
        raise NotImplementedError
    def set_attribute(self, name: str, value: str) -> None:
        raise NotImplementedError
    def set_attribute_ns(self, namespace: str, name: str, value: str) -> None:
        raise NotImplementedError
    def remove_attribute(self, name: str) -> None:
        raise NotImplementedError
    def remove_attribute_ns(self, namespace: str, local_name: str) -> None:
        raise NotImplementedError
    def has_attribute(self, name: str) -> bool:
        raise NotImplementedError
    def has_attribute_ns(self, namespace: str, local_name: str) -> bool:
        raise NotImplementedError
    def has_attributes(self) -> bool:
        raise NotImplementedError
    def closest(self, selector: str) -> Optional[Self]:
        raise NotImplementedError
    def matches(self, selector: str) -> bool:
        raise NotImplementedError
    def webkit_matches_selector(self, selector: str) -> bool:
        raise NotImplementedError
    def get_elements_by_tag_name(self, local_name: str) -> HtmlCollection:
        raise NotImplementedError
    def get_elements_by_tag_name_ns(self, namespace: str, local_name: str) -> HtmlCollection:
        raise NotImplementedError
    def get_elements_by_class_name(self, class_names: str) -> HtmlCollection:
        raise NotImplementedError
    def get_elements_with_grid(self) -> List[Self]:
        raise NotImplementedError
    def insert_adjacent_element(self, where: str, element: Self) -> Optional[Self]:
        raise NotImplementedError
    def insert_adjacent_text(self, where: str, data: str) -> None:
        raise NotImplementedError
    def font_size_inflation(self) -> float:
        raise NotImplementedError
    def set_pointer_capture(self, pointer_id: int) -> None:
        raise NotImplementedError
    def release_pointer_capture(self, pointer_id: int) -> None:
        raise NotImplementedError
    def has_pointer_capture(self, pointer_id: int) -> bool:
        raise NotImplementedError
    def set_capture(self, retarget_to_element: Optional[bool]) -> None:
        raise NotImplementedError
    def release_capture(self) -> None:
        raise NotImplementedError
    def set_capture_always(self, retarget_to_element: Optional[bool]) -> None:
        raise NotImplementedError
    def get_attribute_node(self, name: str) -> Optional[Attr]:
        raise NotImplementedError
    def set_attribute_node(self, new_attr: Attr) -> Optional[Attr]:
        raise NotImplementedError
    def remove_attribute_node(self, old_attr: Attr) -> Optional[Attr]:
        raise NotImplementedError
    def get_attribute_node_ns(self, namespace_uri: str, local_name: str) -> Optional[Attr]:
        raise NotImplementedError
    def set_attribute_node_ns(self, new_attr: Attr) -> Optional[Attr]:
        raise NotImplementedError
    def scroll_by_no_flush(self, dx: int, dy: int) -> bool:
        raise NotImplementedError
    def get_as_flex_container(self) -> Optional[Flex]:
        raise NotImplementedError
    def get_grid_fragments(self) -> List[Grid]:
        raise NotImplementedError
    def get_transform_to_ancestor(self, ancestor: Self) -> DomMatrixReadOnly:
        raise NotImplementedError
    def get_transform_to_parent(self) -> DomMatrixReadOnly:
        raise NotImplementedError
    def get_transform_to_viewport(self) -> DomMatrixReadOnly:
        raise NotImplementedError
    def get_client_rects(self) -> DomRectList:
        raise NotImplementedError
    def get_bounding_client_rect(self) -> DomRect:
        raise NotImplementedError
    def scroll_into_view(self, arg: Optional[BoolOrScrollIntoViewOptions]) -> None:
        raise NotImplementedError
    def scroll_top(self) -> int:
        raise NotImplementedError
    def set_scroll_top(self, scroll_top: int) -> None:
        raise NotImplementedError
    def scroll_left(self) -> int:
        raise NotImplementedError
    def set_scroll_left(self, scroll_left: int) -> None:
        raise NotImplementedError
    def scroll_width(self) -> int:
        raise NotImplementedError
    def scroll_height(self) -> int:
        raise NotImplementedError
    def scroll(self, params: ElementScrollParams) -> None:
        raise NotImplementedError
    def scroll_to(self, params: ElementScrollToParams) -> None:
        raise NotImplementedError
    def scroll_by(self, params: ElementScrollByParams) -> None:
        raise NotImplementedError
    def client_top(self) -> int:
        raise NotImplementedError
    def client_left(self) -> int:
        raise NotImplementedError
    def client_width(self) -> int:
        raise NotImplementedError
    def client_height(self) -> int:
        raise NotImplementedError
    def inner_html(self) -> str:
        raise NotImplementedError
    def set_inner_html(self, inner_html: str) -> None:
        raise NotImplementedError
    def outer_html(self) -> str:
        raise NotImplementedError
    def set_outer_html(self, outer_html: str) -> None:
        raise NotImplementedError
    def insert_adjacent_html(self, position: str, text: str) -> None:
        raise NotImplementedError
    def query_selector(self, selectors: str) -> Optional[Self]:
        raise NotImplementedError
    def query_selector_all(self, selectors: str) -> NodeList:
        raise NotImplementedError
    def attach_shadow(self, shadow_root_init_dict: ShadowRootInit) -> ShadowRoot:
        raise NotImplementedError
    def shadow_root(self) -> Optional[ShadowRoot]:
        raise NotImplementedError
    def open_or_closed_shadow_root(self) -> Optional[ShadowRoot]:
        raise NotImplementedError
    def assigned_slot(self) -> Optional[HtmlSlotElement]:
        raise NotImplementedError
    def slot(self) -> str:
        raise NotImplementedError
    def set_slot(self, slot: str) -> None:
        raise NotImplementedError
    def children(self) -> HtmlCollection:
        raise NotImplementedError
    def first_element_child(self) -> Optional[Self]:
        raise NotImplementedError
    def last_element_child(self) -> Optional[Self]:
        raise NotImplementedError
    def child_element_count(self) -> int:
        raise NotImplementedError
    def prepend(self, nodes: List[NodeOrString]) -> None:
        raise NotImplementedError
    def append(self, nodes: List[NodeOrString]) -> None:
        raise NotImplementedError
    def replace_children(self, nodes: List[NodeOrString]) -> None:
        raise NotImplementedError
    def get_box_quads(self, options: Optional[BoxQuadOptions]) -> List[DomQuad]:
        raise NotImplementedError
    def convert_quad_from_node(self, quad: DomQuad, from_: DocumentOrElementOrText, options: Optional[ConvertCoordinateOptions]) -> DomQuad:
        raise NotImplementedError
    def convert_rect_from_node(self, rect: DomRectReadOnly, from_: DocumentOrElementOrText, options: Optional[ConvertCoordinateOptions]) -> DomQuad:
        raise NotImplementedError
    def convert_point_from_node(self, point: DomPointInit, from_: DocumentOrElementOrText, options: Optional[ConvertCoordinateOptions]) -> DomPoint:
        raise NotImplementedError
    def request_fullscreen(self) -> None:
        raise NotImplementedError
    def request_pointer_lock(self) -> None:
        raise NotImplementedError
    def before(self, nodes: List[NodeOrString]) -> None:
        raise NotImplementedError
    def after(self, nodes: List[NodeOrString]) -> None:
        raise NotImplementedError
    def replace_with(self, nodes: List[NodeOrString]) -> None:
        raise NotImplementedError
    def remove(self) -> None:
        raise NotImplementedError
    def previous_element_sibling(self) -> Optional[Self]:
        raise NotImplementedError
    def next_element_sibling(self) -> Optional[Self]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlFormElement:
    
    def as_html_element(self) -> Any:
        raise NotImplementedError
    def accept_charset(self) -> str:
        raise NotImplementedError
    def set_accept_charset(self, accept_charset: str) -> None:
        raise NotImplementedError
    def action(self) -> str:
        raise NotImplementedError
    def set_action(self, action: str) -> None:
        raise NotImplementedError
    def autocomplete(self) -> str:
        raise NotImplementedError
    def set_autocomplete(self, autocomplete: str) -> None:
        raise NotImplementedError
    def enctype(self) -> str:
        raise NotImplementedError
    def set_enctype(self, enctype: str) -> None:
        raise NotImplementedError
    def encoding(self) -> str:
        raise NotImplementedError
    def set_encoding(self, encoding: str) -> None:
        raise NotImplementedError
    def method(self) -> str:
        raise NotImplementedError
    def set_method(self, method: str) -> None:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def set_name(self, name: str) -> None:
        raise NotImplementedError
    def no_validate(self) -> bool:
        raise NotImplementedError
    def set_no_validate(self, no_validate: bool) -> None:
        raise NotImplementedError
    def target(self) -> str:
        raise NotImplementedError
    def set_target(self, target: str) -> None:
        raise NotImplementedError
    def elements(self) -> HtmlCollection:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def submit(self) -> None:
        raise NotImplementedError
    def request_submit(self, submitter: Optional[Some[Optional[Any]]]) -> None:
        raise NotImplementedError
    def reset(self) -> None:
        raise NotImplementedError
    def check_validity(self) -> bool:
        raise NotImplementedError
    def report_validity(self) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class QueuingStrategy:
    high_water_mark: Optional[float]
    size: Optional[QueuingStrategySize]

class WritableStreamDefaultWriter:
    
    def __init__(self, stream: Any):
        raise NotImplementedError

    def desired_size(self) -> float:
        raise NotImplementedError
    def abort(self, reason: Any) -> None:
        raise NotImplementedError
    def close(self) -> None:
        raise NotImplementedError
    def release_lock(self) -> None:
        raise NotImplementedError
    def write(self, chunk: Any) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WritableStream:
    
    def __init__(self, underlying_sink: Optional[Object], strategy: Optional[QueuingStrategy]):
        raise NotImplementedError

    def locked(self) -> bool:
        raise NotImplementedError
    def abort(self, reason: Any) -> None:
        raise NotImplementedError
    def close(self) -> None:
        raise NotImplementedError
    def get_writer(self) -> WritableStreamDefaultWriter:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class ReadableWritablePair:
    readable: Any
    writable: WritableStream

class AbortSignal:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def aborted(self) -> bool:
        raise NotImplementedError
    def onabort(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onabort(self, onabort: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class StreamPipeOptions:
    prevent_close: Optional[bool]
    prevent_abort: Optional[bool]
    prevent_cancel: Optional[bool]
    signal: Optional[AbortSignal]

class ReadableStream:
    
    def __init__(self, underlying_source: Optional[Object], strategy: Optional[QueuingStrategy]):
        raise NotImplementedError

    def locked(self) -> bool:
        raise NotImplementedError
    def cancel(self, reason: Any) -> None:
        raise NotImplementedError
    def pipe_through(self, transform: ReadableWritablePair, options: Optional[StreamPipeOptions]) -> Self:
        """
        get-reader: func(options: option<readable-stream-get-reader-options>) -> readable-stream-reader;
        """
        raise NotImplementedError
    def pipe_to(self, destination: WritableStream, options: Optional[StreamPipeOptions]) -> None:
        raise NotImplementedError
    def tee(self) -> List[Self]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Blob:
    
    def size(self) -> int:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def slice(self, start: Optional[int], end: Optional[int], content_type: Optional[str]) -> Self:
        raise NotImplementedError
    def stream(self) -> ReadableStream:
        raise NotImplementedError
    def text(self) -> str:
        raise NotImplementedError
    def array_buffer(self) -> ArrayBuffer:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class File:
    
    def as_blob(self) -> Blob:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def last_modified(self) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class FileList:
    
    def item(self, index: int) -> Optional[File]:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ValidityState:
    
    def value_missing(self) -> bool:
        raise NotImplementedError
    def type_mismatch(self) -> bool:
        raise NotImplementedError
    def pattern_mismatch(self) -> bool:
        raise NotImplementedError
    def too_long(self) -> bool:
        raise NotImplementedError
    def too_short(self) -> bool:
        raise NotImplementedError
    def range_underflow(self) -> bool:
        raise NotImplementedError
    def range_overflow(self) -> bool:
        raise NotImplementedError
    def step_mismatch(self) -> bool:
        raise NotImplementedError
    def bad_input(self) -> bool:
        raise NotImplementedError
    def custom_error(self) -> bool:
        raise NotImplementedError
    def valid(self) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SelectionMode(Enum):
    SELECT = 0
    START = 1
    END = 2
    PRESERVE = 3


@dataclass
class HtmlInputElementSetRangeTextParams_Replacement:
    value: str


@dataclass
class HtmlInputElementSetRangeTextParams_ReplacementStartEndSelectionMode:
    value: Tuple[str, int, int, Optional[SelectionMode]]


HtmlInputElementSetRangeTextParams = Union[HtmlInputElementSetRangeTextParams_Replacement, HtmlInputElementSetRangeTextParams_ReplacementStartEndSelectionMode]


class FileSystemDirectoryReader:
    
    def read_entries(self, success_callback: FileSystemEntriesCallback, error_callback: Optional[ErrorCallback]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class FileSystemFlags:
    create: Optional[bool]
    exclusive: Optional[bool]

class FileSystemDirectoryEntry:
    
    def as_file_system_entry(self) -> Any:
        raise NotImplementedError
    def create_reader(self) -> FileSystemDirectoryReader:
        raise NotImplementedError
    def get_file(self, path: Optional[str], options: Optional[FileSystemFlags], success_callback: Optional[FileSystemEntryCallback], error_callback: Optional[ErrorCallback]) -> None:
        raise NotImplementedError
    def get_directory(self, path: Optional[str], options: Optional[FileSystemFlags], success_callback: Optional[FileSystemEntryCallback], error_callback: Optional[ErrorCallback]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class FileSystem:
    
    def name(self) -> str:
        raise NotImplementedError
    def root(self) -> FileSystemDirectoryEntry:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class FileSystemEntry:
    
    def is_file(self) -> bool:
        raise NotImplementedError
    def is_directory(self) -> bool:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def full_path(self) -> str:
        raise NotImplementedError
    def filesystem(self) -> FileSystem:
        raise NotImplementedError
    def get_parent(self, success_callback: Optional[FileSystemEntryCallback], error_callback: Optional[ErrorCallback]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class DateTimeValue:
    hour: Optional[int]
    minute: Optional[int]
    year: Optional[int]
    month: Optional[int]
    day: Optional[int]

class HtmlInputElement:
    
    def as_html_element(self) -> Any:
        raise NotImplementedError
    def accept(self) -> str:
        raise NotImplementedError
    def set_accept(self, accept: str) -> None:
        raise NotImplementedError
    def alt(self) -> str:
        raise NotImplementedError
    def set_alt(self, alt: str) -> None:
        raise NotImplementedError
    def autocomplete(self) -> str:
        raise NotImplementedError
    def set_autocomplete(self, autocomplete: str) -> None:
        raise NotImplementedError
    def autofocus(self) -> bool:
        raise NotImplementedError
    def set_autofocus(self, autofocus: bool) -> None:
        raise NotImplementedError
    def default_checked(self) -> bool:
        raise NotImplementedError
    def set_default_checked(self, default_checked: bool) -> None:
        raise NotImplementedError
    def checked(self) -> bool:
        raise NotImplementedError
    def set_checked(self, checked: bool) -> None:
        raise NotImplementedError
    def disabled(self) -> bool:
        raise NotImplementedError
    def set_disabled(self, disabled: bool) -> None:
        raise NotImplementedError
    def form(self) -> Optional[HtmlFormElement]:
        raise NotImplementedError
    def files(self) -> Optional[FileList]:
        raise NotImplementedError
    def set_files(self, files: Optional[FileList]) -> None:
        raise NotImplementedError
    def form_action(self) -> str:
        raise NotImplementedError
    def set_form_action(self, form_action: str) -> None:
        raise NotImplementedError
    def form_enctype(self) -> str:
        raise NotImplementedError
    def set_form_enctype(self, form_enctype: str) -> None:
        raise NotImplementedError
    def form_method(self) -> str:
        raise NotImplementedError
    def set_form_method(self, form_method: str) -> None:
        raise NotImplementedError
    def form_no_validate(self) -> bool:
        raise NotImplementedError
    def set_form_no_validate(self, form_no_validate: bool) -> None:
        raise NotImplementedError
    def form_target(self) -> str:
        raise NotImplementedError
    def set_form_target(self, form_target: str) -> None:
        raise NotImplementedError
    def height(self) -> int:
        raise NotImplementedError
    def set_height(self, height: int) -> None:
        raise NotImplementedError
    def indeterminate(self) -> bool:
        raise NotImplementedError
    def set_indeterminate(self, indeterminate: bool) -> None:
        raise NotImplementedError
    def input_mode(self) -> str:
        raise NotImplementedError
    def set_input_mode(self, input_mode: str) -> None:
        raise NotImplementedError
    def list(self) -> Optional[Any]:
        raise NotImplementedError
    def max(self) -> str:
        raise NotImplementedError
    def set_max(self, max: str) -> None:
        raise NotImplementedError
    def max_length(self) -> int:
        raise NotImplementedError
    def set_max_length(self, max_length: int) -> None:
        raise NotImplementedError
    def min(self) -> str:
        raise NotImplementedError
    def set_min(self, min: str) -> None:
        raise NotImplementedError
    def min_length(self) -> int:
        raise NotImplementedError
    def set_min_length(self, min_length: int) -> None:
        raise NotImplementedError
    def multiple(self) -> bool:
        raise NotImplementedError
    def set_multiple(self, multiple: bool) -> None:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def set_name(self, name: str) -> None:
        raise NotImplementedError
    def pattern(self) -> str:
        raise NotImplementedError
    def set_pattern(self, pattern: str) -> None:
        raise NotImplementedError
    def placeholder(self) -> str:
        raise NotImplementedError
    def set_placeholder(self, placeholder: str) -> None:
        raise NotImplementedError
    def read_only(self) -> bool:
        raise NotImplementedError
    def set_read_only(self, read_only: bool) -> None:
        raise NotImplementedError
    def required(self) -> bool:
        raise NotImplementedError
    def set_required(self, required: bool) -> None:
        raise NotImplementedError
    def size(self) -> int:
        raise NotImplementedError
    def set_size(self, size: int) -> None:
        raise NotImplementedError
    def src(self) -> str:
        raise NotImplementedError
    def set_src(self, src: str) -> None:
        raise NotImplementedError
    def step(self) -> str:
        raise NotImplementedError
    def set_step(self, step: str) -> None:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def set_type(self, type: str) -> None:
        raise NotImplementedError
    def default_value(self) -> str:
        raise NotImplementedError
    def set_default_value(self, default_value: str) -> None:
        raise NotImplementedError
    def value(self) -> str:
        raise NotImplementedError
    def set_value(self, value: str) -> None:
        raise NotImplementedError
    def value_as_date(self) -> Optional[Date]:
        raise NotImplementedError
    def set_value_as_date(self, value_as_date: Optional[Date]) -> None:
        raise NotImplementedError
    def value_as_number(self) -> float:
        raise NotImplementedError
    def set_value_as_number(self, value_as_number: float) -> None:
        raise NotImplementedError
    def width(self) -> int:
        raise NotImplementedError
    def set_width(self, width: int) -> None:
        raise NotImplementedError
    def will_validate(self) -> bool:
        raise NotImplementedError
    def validity(self) -> ValidityState:
        raise NotImplementedError
    def validation_message(self) -> str:
        raise NotImplementedError
    def check_validity(self) -> bool:
        raise NotImplementedError
    def report_validity(self) -> bool:
        raise NotImplementedError
    def set_custom_validity(self, error: str) -> None:
        raise NotImplementedError
    def labels(self) -> Optional[NodeList]:
        raise NotImplementedError
    def select(self) -> None:
        raise NotImplementedError
    def selection_start(self) -> int:
        raise NotImplementedError
    def set_selection_start(self, selection_start: int) -> None:
        raise NotImplementedError
    def selection_end(self) -> int:
        raise NotImplementedError
    def set_selection_end(self, selection_end: int) -> None:
        raise NotImplementedError
    def selection_direction(self) -> str:
        raise NotImplementedError
    def set_selection_direction(self, selection_direction: str) -> None:
        raise NotImplementedError
    def set_range_text(self, params: HtmlInputElementSetRangeTextParams) -> None:
        raise NotImplementedError
    def set_selection_range(self, start: int, end: int, direction: Optional[str]) -> None:
        raise NotImplementedError
    def show_picker(self) -> None:
        raise NotImplementedError
    def align(self) -> str:
        raise NotImplementedError
    def set_align(self, align: str) -> None:
        raise NotImplementedError
    def use_map(self) -> str:
        raise NotImplementedError
    def set_use_map(self, use_map: str) -> None:
        raise NotImplementedError
    def webkit_entries(self) -> List[FileSystemEntry]:
        raise NotImplementedError
    def webkitdirectory(self) -> bool:
        raise NotImplementedError
    def set_webkitdirectory(self, webkitdirectory: bool) -> None:
        raise NotImplementedError
    def get_date_time_input_box_value(self) -> DateTimeValue:
        raise NotImplementedError
    def update_date_time_input_box(self, value: Optional[DateTimeValue]) -> None:
        raise NotImplementedError
    def set_date_time_picker_state(self, open: bool) -> None:
        raise NotImplementedError
    def get_minimum(self) -> float:
        raise NotImplementedError
    def get_maximum(self) -> float:
        raise NotImplementedError
    def preview_value(self) -> str:
        raise NotImplementedError
    def set_preview_value(self, preview_value: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class FocusOptions:
    prevent_scroll: Optional[bool]
    focus_visible: Optional[bool]

class HtmlElement:
    
    def as_element(self) -> Element:
        raise NotImplementedError
    def as_html_input_element(self) -> HtmlInputElement:
        raise NotImplementedError
    def title(self) -> str:
        raise NotImplementedError
    def set_title(self, title: str) -> None:
        raise NotImplementedError
    def scroll_height(self) -> int:
        raise NotImplementedError
    def set_scroll_height(self, scroll_height: int) -> None:
        raise NotImplementedError
    def scroll_top(self) -> int:
        raise NotImplementedError
    def set_scroll_top(self, scroll_top: int) -> None:
        raise NotImplementedError
    def lang(self) -> str:
        raise NotImplementedError
    def set_lang(self, lang: str) -> None:
        raise NotImplementedError
    def dir(self) -> str:
        raise NotImplementedError
    def set_dir(self, dir: str) -> None:
        raise NotImplementedError
    def dataset(self) -> DomStringMap:
        raise NotImplementedError
    def inner_text(self) -> str:
        raise NotImplementedError
    def set_inner_text(self, inner_text: str) -> None:
        raise NotImplementedError
    def hidden(self) -> bool:
        raise NotImplementedError
    def set_hidden(self, hidden: bool) -> None:
        raise NotImplementedError
    def inert(self) -> bool:
        raise NotImplementedError
    def set_inert(self, inert: bool) -> None:
        raise NotImplementedError
    def click(self) -> None:
        raise NotImplementedError
    def tab_index(self) -> int:
        raise NotImplementedError
    def set_tab_index(self, tab_index: int) -> None:
        raise NotImplementedError
    def focus(self, options: Optional[FocusOptions]) -> None:
        raise NotImplementedError
    def blur(self) -> None:
        raise NotImplementedError
    def access_key(self) -> str:
        raise NotImplementedError
    def set_access_key(self, access_key: str) -> None:
        raise NotImplementedError
    def access_key_label(self) -> str:
        raise NotImplementedError
    def draggable(self) -> bool:
        raise NotImplementedError
    def set_draggable(self, draggable: bool) -> None:
        raise NotImplementedError
    def content_editable(self) -> str:
        raise NotImplementedError
    def set_content_editable(self, content_editable: str) -> None:
        raise NotImplementedError
    def is_content_editable(self) -> bool:
        raise NotImplementedError
    def spellcheck(self) -> bool:
        raise NotImplementedError
    def set_spellcheck(self, spellcheck: bool) -> None:
        raise NotImplementedError
    def style(self) -> CssStyleDeclaration:
        raise NotImplementedError
    def offset_parent(self) -> Optional[Element]:
        raise NotImplementedError
    def offset_top(self) -> int:
        raise NotImplementedError
    def offset_left(self) -> int:
        raise NotImplementedError
    def offset_width(self) -> int:
        raise NotImplementedError
    def offset_height(self) -> int:
        raise NotImplementedError
    def onabort(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onabort(self, onabort: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onblur(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onblur(self, onblur: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onfocus(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onfocus(self, onfocus: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onauxclick(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onauxclick(self, onauxclick: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oncanplay(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oncanplay(self, oncanplay: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oncanplaythrough(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oncanplaythrough(self, oncanplaythrough: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onchange(self, onchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onclick(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onclick(self, onclick: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onclick_subscribe(self) -> poll.Pollable:
        raise NotImplementedError
    def onclose(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onclose(self, onclose: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oncontextmenu(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oncontextmenu(self, oncontextmenu: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondblclick(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondblclick(self, ondblclick: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondrag(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondrag(self, ondrag: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondragend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondragend(self, ondragend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondragenter(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondragenter(self, ondragenter: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondragexit(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondragexit(self, ondragexit: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondragleave(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondragleave(self, ondragleave: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondragover(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondragover(self, ondragover: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondragstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondragstart(self, ondragstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondrop(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondrop(self, ondrop: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondurationchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondurationchange(self, ondurationchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onemptied(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onemptied(self, onemptied: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onended(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onended(self, onended: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oninput(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oninput(self, oninput: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oninvalid(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oninvalid(self, oninvalid: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onkeydown(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onkeydown(self, onkeydown: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onkeypress(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onkeypress(self, onkeypress: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onkeyup(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onkeyup(self, onkeyup: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onload(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onload(self, onload: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onloadeddata(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onloadeddata(self, onloadeddata: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onloadedmetadata(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onloadedmetadata(self, onloadedmetadata: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onloadend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onloadend(self, onloadend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onloadstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onloadstart(self, onloadstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmousedown(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmousedown(self, onmousedown: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmouseenter(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmouseenter(self, onmouseenter: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmouseleave(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmouseleave(self, onmouseleave: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmousemove(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmousemove(self, onmousemove: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmouseout(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmouseout(self, onmouseout: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmouseover(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmouseover(self, onmouseover: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmouseup(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmouseup(self, onmouseup: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwheel(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwheel(self, onwheel: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpause(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpause(self, onpause: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onplay(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onplay(self, onplay: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onplaying(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onplaying(self, onplaying: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onprogress(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onprogress(self, onprogress: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onratechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onratechange(self, onratechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onreset(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onreset(self, onreset: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onresize(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onresize(self, onresize: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onscroll(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onscroll(self, onscroll: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onseeked(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onseeked(self, onseeked: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onseeking(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onseeking(self, onseeking: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onselect(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onselect(self, onselect: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onshow(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onshow(self, onshow: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onstalled(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onstalled(self, onstalled: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onsubmit(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onsubmit(self, onsubmit: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onsuspend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onsuspend(self, onsuspend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontimeupdate(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontimeupdate(self, ontimeupdate: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onvolumechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onvolumechange(self, onvolumechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwaiting(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwaiting(self, onwaiting: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onselectstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onselectstart(self, onselectstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontoggle(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontoggle(self, ontoggle: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointercancel(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointercancel(self, onpointercancel: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointerdown(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerdown(self, onpointerdown: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointerup(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerup(self, onpointerup: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointermove(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointermove(self, onpointermove: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointerout(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerout(self, onpointerout: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointerover(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerover(self, onpointerover: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointerenter(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerenter(self, onpointerenter: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointerleave(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerleave(self, onpointerleave: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ongotpointercapture(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ongotpointercapture(self, ongotpointercapture: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onlostpointercapture(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onlostpointercapture(self, onlostpointercapture: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onanimationcancel(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onanimationcancel(self, onanimationcancel: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onanimationend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onanimationend(self, onanimationend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onanimationiteration(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onanimationiteration(self, onanimationiteration: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onanimationstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onanimationstart(self, onanimationstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontransitioncancel(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontransitioncancel(self, ontransitioncancel: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontransitionend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontransitionend(self, ontransitionend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontransitionrun(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontransitionrun(self, ontransitionrun: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontransitionstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontransitionstart(self, ontransitionstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwebkitanimationend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwebkitanimationend(self, onwebkitanimationend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwebkitanimationiteration(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwebkitanimationiteration(self, onwebkitanimationiteration: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwebkitanimationstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwebkitanimationstart(self, onwebkitanimationstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwebkittransitionend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwebkittransitionend(self, onwebkittransitionend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oncopy(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oncopy(self, oncopy: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oncut(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oncut(self, oncut: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpaste(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpaste(self, onpaste: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontouchstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontouchstart(self, ontouchstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontouchend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontouchend(self, ontouchend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontouchmove(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontouchmove(self, ontouchmove: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontouchcancel(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontouchcancel(self, ontouchcancel: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlModElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def cite(self) -> str:
        raise NotImplementedError
    def set_cite(self, cite: str) -> None:
        raise NotImplementedError
    def date_time(self) -> str:
        raise NotImplementedError
    def set_date_time(self, date_time: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgfeMergeElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def result(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class MediaTrackSupportedConstraints:
    width: Optional[bool]
    height: Optional[bool]
    aspect_ratio: Optional[bool]
    frame_rate: Optional[bool]
    facing_mode: Optional[bool]
    volume: Optional[bool]
    sample_rate: Optional[bool]
    sample_size: Optional[bool]
    echo_cancellation: Optional[bool]
    noise_suppression: Optional[bool]
    auto_gain_control: Optional[bool]
    latency: Optional[bool]
    channel_count: Optional[bool]
    device_id: Optional[bool]
    group_id: Optional[bool]

@dataclass
class IterableKeyOrValueResult:
    value: Any
    done: Optional[bool]

@dataclass
class IterableKeyAndValueResult:
    value: Optional[List[Any]]
    done: Optional[bool]

class HtmlOptGroupElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def disabled(self) -> bool:
        raise NotImplementedError
    def set_disabled(self, disabled: bool) -> None:
        raise NotImplementedError
    def label(self) -> str:
        raise NotImplementedError
    def set_label(self, label: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlOptionElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def disabled(self) -> bool:
        raise NotImplementedError
    def set_disabled(self, disabled: bool) -> None:
        raise NotImplementedError
    def form(self) -> Optional[HtmlFormElement]:
        raise NotImplementedError
    def label(self) -> str:
        raise NotImplementedError
    def set_label(self, label: str) -> None:
        raise NotImplementedError
    def default_selected(self) -> bool:
        raise NotImplementedError
    def set_default_selected(self, default_selected: bool) -> None:
        raise NotImplementedError
    def selected(self) -> bool:
        raise NotImplementedError
    def set_selected(self, selected: bool) -> None:
        raise NotImplementedError
    def value(self) -> str:
        raise NotImplementedError
    def set_value(self, value: str) -> None:
        raise NotImplementedError
    def text(self) -> str:
        raise NotImplementedError
    def set_text(self, text: str) -> None:
        raise NotImplementedError
    def index(self) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class HtmlOptGroupElementOrHtmlOptionElement_HtmlOptGroupElement:
    value: HtmlOptGroupElement


@dataclass
class HtmlOptGroupElementOrHtmlOptionElement_HtmlOptionElement:
    value: HtmlOptionElement


HtmlOptGroupElementOrHtmlOptionElement = Union[HtmlOptGroupElementOrHtmlOptionElement_HtmlOptGroupElement, HtmlOptGroupElementOrHtmlOptionElement_HtmlOptionElement]



@dataclass
class HtmlElementOrS32_HtmlElement:
    value: HtmlElement


@dataclass
class HtmlElementOrS32_S32:
    value: int


HtmlElementOrS32 = Union[HtmlElementOrS32_HtmlElement, HtmlElementOrS32_S32]


class HtmlOptionsCollection:
    
    def as_html_collection(self) -> HtmlCollection:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def set_length(self, length: int) -> None:
        raise NotImplementedError
    def add(self, element: HtmlOptGroupElementOrHtmlOptionElement, before: Optional[HtmlElementOrS32]) -> None:
        raise NotImplementedError
    def remove(self, index: int) -> None:
        raise NotImplementedError
    def selected_index(self) -> int:
        raise NotImplementedError
    def set_selected_index(self, selected_index: int) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class HtmlSelectElementRemoveParams_Index:
    value: int


HtmlSelectElementRemoveParams = Union[HtmlSelectElementRemoveParams_Index]


@dataclass
class AutocompleteInfo:
    section: Optional[str]
    address_type: Optional[str]
    contact_type: Optional[str]
    field_name: Optional[str]

class HtmlSelectElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def autofocus(self) -> bool:
        raise NotImplementedError
    def set_autofocus(self, autofocus: bool) -> None:
        raise NotImplementedError
    def autocomplete(self) -> str:
        raise NotImplementedError
    def set_autocomplete(self, autocomplete: str) -> None:
        raise NotImplementedError
    def disabled(self) -> bool:
        raise NotImplementedError
    def set_disabled(self, disabled: bool) -> None:
        raise NotImplementedError
    def form(self) -> Optional[HtmlFormElement]:
        raise NotImplementedError
    def multiple(self) -> bool:
        raise NotImplementedError
    def set_multiple(self, multiple: bool) -> None:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def set_name(self, name: str) -> None:
        raise NotImplementedError
    def required(self) -> bool:
        raise NotImplementedError
    def set_required(self, required: bool) -> None:
        raise NotImplementedError
    def size(self) -> int:
        raise NotImplementedError
    def set_size(self, size: int) -> None:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def options(self) -> HtmlOptionsCollection:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def set_length(self, length: int) -> None:
        raise NotImplementedError
    def item(self, index: int) -> Optional[Element]:
        raise NotImplementedError
    def named_item(self, name: str) -> Optional[HtmlOptionElement]:
        raise NotImplementedError
    def add(self, element: HtmlOptGroupElementOrHtmlOptionElement, before: Optional[HtmlElementOrS32]) -> None:
        raise NotImplementedError
    def selected_options(self) -> HtmlCollection:
        raise NotImplementedError
    def selected_index(self) -> int:
        raise NotImplementedError
    def set_selected_index(self, selected_index: int) -> None:
        raise NotImplementedError
    def value(self) -> str:
        raise NotImplementedError
    def set_value(self, value: str) -> None:
        raise NotImplementedError
    def will_validate(self) -> bool:
        raise NotImplementedError
    def validity(self) -> ValidityState:
        raise NotImplementedError
    def validation_message(self) -> str:
        raise NotImplementedError
    def check_validity(self) -> bool:
        raise NotImplementedError
    def report_validity(self) -> bool:
        raise NotImplementedError
    def set_custom_validity(self, error: str) -> None:
        raise NotImplementedError
    def labels(self) -> NodeList:
        raise NotImplementedError
    def remove(self, params: Optional[HtmlSelectElementRemoveParams]) -> None:
        raise NotImplementedError
    def open_in_parent_process(self) -> bool:
        raise NotImplementedError
    def set_open_in_parent_process(self, open_in_parent_process: bool) -> None:
        raise NotImplementedError
    def get_autocomplete_info(self) -> AutocompleteInfo:
        raise NotImplementedError
    def preview_value(self) -> str:
        raise NotImplementedError
    def set_preview_value(self, preview_value: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgAnimationElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def target_element(self) -> Optional[SvgElement]:
        raise NotImplementedError
    def get_start_time(self) -> float:
        raise NotImplementedError
    def get_current_time(self) -> float:
        raise NotImplementedError
    def get_simple_duration(self) -> float:
        raise NotImplementedError
    def begin_element(self) -> None:
        raise NotImplementedError
    def begin_element_at(self, offset: float) -> None:
        raise NotImplementedError
    def end_element(self) -> None:
        raise NotImplementedError
    def end_element_at(self, offset: float) -> None:
        raise NotImplementedError
    def required_features(self) -> SvgStringList:
        raise NotImplementedError
    def required_extensions(self) -> SvgStringList:
        raise NotImplementedError
    def system_language(self) -> SvgStringList:
        raise NotImplementedError
    def has_extension(self, extension: str) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class IdbRequestReadyState(Enum):
    PENDING = 0
    DONE = 1

class DomException:
    
    def name(self) -> str:
        raise NotImplementedError
    def message(self) -> str:
        raise NotImplementedError
    def code(self) -> int:
        raise NotImplementedError
    @classmethod
    def index_size_err(cls) -> int:
        raise NotImplementedError
    @classmethod
    def domstring_size_err(cls) -> int:
        raise NotImplementedError
    @classmethod
    def hierarchy_request_err(cls) -> int:
        raise NotImplementedError
    @classmethod
    def wrong_document_err(cls) -> int:
        raise NotImplementedError
    @classmethod
    def invalid_character_err(cls) -> int:
        raise NotImplementedError
    @classmethod
    def no_data_allowed_err(cls) -> int:
        raise NotImplementedError
    @classmethod
    def no_modification_allowed_err(cls) -> int:
        raise NotImplementedError
    @classmethod
    def not_found_err(cls) -> int:
        raise NotImplementedError
    @classmethod
    def not_supported_err(cls) -> int:
        raise NotImplementedError
    @classmethod
    def inuse_attribute_err(cls) -> int:
        raise NotImplementedError
    @classmethod
    def invalid_state_err(cls) -> int:
        raise NotImplementedError
    @classmethod
    def syntax_err(cls) -> int:
        raise NotImplementedError
    @classmethod
    def invalid_modification_err(cls) -> int:
        raise NotImplementedError
    @classmethod
    def namespace_err(cls) -> int:
        raise NotImplementedError
    @classmethod
    def invalid_access_err(cls) -> int:
        raise NotImplementedError
    @classmethod
    def validation_err(cls) -> int:
        raise NotImplementedError
    @classmethod
    def type_mismatch_err(cls) -> int:
        raise NotImplementedError
    @classmethod
    def security_err(cls) -> int:
        raise NotImplementedError
    @classmethod
    def network_err(cls) -> int:
        raise NotImplementedError
    @classmethod
    def abort_err(cls) -> int:
        raise NotImplementedError
    @classmethod
    def url_mismatch_err(cls) -> int:
        raise NotImplementedError
    @classmethod
    def quota_exceeded_err(cls) -> int:
        raise NotImplementedError
    @classmethod
    def timeout_err(cls) -> int:
        raise NotImplementedError
    @classmethod
    def invalid_node_type_err(cls) -> int:
        raise NotImplementedError
    @classmethod
    def data_clone_err(cls) -> int:
        raise NotImplementedError
    def result(self) -> int:
        raise NotImplementedError
    def filename(self) -> str:
        raise NotImplementedError
    def line_number(self) -> int:
        raise NotImplementedError
    def column_number(self) -> int:
        raise NotImplementedError
    def location(self) -> Optional[StackFrame]:
        raise NotImplementedError
    def data(self) -> Optional[Object]:
        raise NotImplementedError
    def stack(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class IdbTransactionMode(Enum):
    READONLY = 0
    READWRITE = 1
    READWRITEFLUSH = 2
    CLEANUP = 3
    VERSIONCHANGE = 4


@dataclass
class ListStringOrString_ListString:
    value: List[str]


@dataclass
class ListStringOrString_String:
    value: str


ListStringOrString = Union[ListStringOrString_ListString, ListStringOrString_String]


@dataclass
class IdbObjectStoreParameters:
    key_path: Optional[ListStringOrString]
    auto_increment: Optional[bool]

class IdbCursorDirection(Enum):
    NEXT = 0
    NEXTUNIQUE = 1
    PREV = 2
    PREVUNIQUE = 3

@dataclass
class IdbIndexParameters:
    unique: Optional[bool]
    multi_entry: Optional[bool]
    locale: Optional[str]

class IdbIndex:
    
    def name(self) -> str:
        raise NotImplementedError
    def set_name(self, name: str) -> None:
        raise NotImplementedError
    def object_store(self) -> Any:
        raise NotImplementedError
    def key_path(self) -> Any:
        raise NotImplementedError
    def multi_entry(self) -> bool:
        raise NotImplementedError
    def unique(self) -> bool:
        raise NotImplementedError
    def locale(self) -> str:
        raise NotImplementedError
    def is_auto_locale(self) -> bool:
        raise NotImplementedError
    def open_cursor(self, range: Any, direction: Optional[IdbCursorDirection]) -> Any:
        raise NotImplementedError
    def open_key_cursor(self, range: Any, direction: Optional[IdbCursorDirection]) -> Any:
        raise NotImplementedError
    def get(self, key: Any) -> Any:
        raise NotImplementedError
    def get_key(self, key: Any) -> Any:
        raise NotImplementedError
    def count(self, key: Any) -> Any:
        raise NotImplementedError
    def get_all(self, key: Any, limit: Optional[int]) -> Any:
        raise NotImplementedError
    def get_all_keys(self, key: Any, limit: Optional[int]) -> Any:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class IdbObjectStore:
    
    def name(self) -> str:
        raise NotImplementedError
    def set_name(self, name: str) -> None:
        raise NotImplementedError
    def key_path(self) -> Any:
        raise NotImplementedError
    def index_names(self) -> DomStringList:
        raise NotImplementedError
    def transaction(self) -> Any:
        raise NotImplementedError
    def auto_increment(self) -> bool:
        raise NotImplementedError
    def put(self, value: Any, key: Any) -> Any:
        raise NotImplementedError
    def add(self, value: Any, key: Any) -> Any:
        raise NotImplementedError
    def delete(self, key: Any) -> Any:
        raise NotImplementedError
    def get(self, key: Any) -> Any:
        raise NotImplementedError
    def get_key(self, key: Any) -> Any:
        raise NotImplementedError
    def clear(self) -> Any:
        raise NotImplementedError
    def open_cursor(self, range: Any, direction: Optional[IdbCursorDirection]) -> Any:
        raise NotImplementedError
    def create_index(self, name: str, key_path: ListStringOrString, optional_parameters: Optional[IdbIndexParameters]) -> IdbIndex:
        raise NotImplementedError
    def index(self, name: str) -> IdbIndex:
        raise NotImplementedError
    def delete_index(self, index_name: str) -> None:
        raise NotImplementedError
    def count(self, key: Any) -> Any:
        raise NotImplementedError
    def get_all(self, key: Any, limit: Optional[int]) -> Any:
        raise NotImplementedError
    def get_all_keys(self, key: Any, limit: Optional[int]) -> Any:
        raise NotImplementedError
    def open_key_cursor(self, range: Any, direction: Optional[IdbCursorDirection]) -> Any:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class StorageType(Enum):
    PERSISTENT = 0
    TEMPORARY = 1
    DEFAULT = 2

class IdbDatabase:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def version(self) -> int:
        raise NotImplementedError
    def object_store_names(self) -> DomStringList:
        raise NotImplementedError
    def create_object_store(self, name: str, optional_parameters: Optional[IdbObjectStoreParameters]) -> IdbObjectStore:
        raise NotImplementedError
    def delete_object_store(self, name: str) -> None:
        raise NotImplementedError
    def transaction(self, store_names: ListStringOrString, mode: Optional[IdbTransactionMode]) -> Any:
        raise NotImplementedError
    def close(self) -> None:
        raise NotImplementedError
    def onabort(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onabort(self, onabort: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onclose(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onclose(self, onclose: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onversionchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onversionchange(self, onversionchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def storage(self) -> StorageType:
        raise NotImplementedError
    def create_mutable_file(self, name: str, type: Optional[str]) -> Any:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class IdbTransaction:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def mode(self) -> IdbTransactionMode:
        raise NotImplementedError
    def db(self) -> IdbDatabase:
        raise NotImplementedError
    def error(self) -> Optional[DomException]:
        raise NotImplementedError
    def object_store(self, name: str) -> IdbObjectStore:
        raise NotImplementedError
    def commit(self) -> None:
        raise NotImplementedError
    def abort(self) -> None:
        raise NotImplementedError
    def onabort(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onabort(self, onabort: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oncomplete(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oncomplete(self, oncomplete: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def object_store_names(self) -> DomStringList:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class IdbRequest:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def result(self) -> Any:
        raise NotImplementedError
    def error(self) -> Optional[DomException]:
        raise NotImplementedError
    def transaction(self) -> Optional[IdbTransaction]:
        """
        source: func() -> idb-cursor-or-idb-index-or-idb-object-store;
        """
        raise NotImplementedError
    def ready_state(self) -> IdbRequestReadyState:
        raise NotImplementedError
    def onsuccess(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onsuccess(self, onsuccess: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlImageElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def alt(self) -> str:
        raise NotImplementedError
    def set_alt(self, alt: str) -> None:
        raise NotImplementedError
    def src(self) -> str:
        raise NotImplementedError
    def set_src(self, src: str) -> None:
        raise NotImplementedError
    def srcset(self) -> str:
        raise NotImplementedError
    def set_srcset(self, srcset: str) -> None:
        raise NotImplementedError
    def cross_origin(self) -> str:
        raise NotImplementedError
    def set_cross_origin(self, cross_origin: str) -> None:
        raise NotImplementedError
    def use_map(self) -> str:
        raise NotImplementedError
    def set_use_map(self, use_map: str) -> None:
        raise NotImplementedError
    def referrer_policy(self) -> str:
        raise NotImplementedError
    def set_referrer_policy(self, referrer_policy: str) -> None:
        raise NotImplementedError
    def is_map(self) -> bool:
        raise NotImplementedError
    def set_is_map(self, is_map: bool) -> None:
        raise NotImplementedError
    def width(self) -> int:
        raise NotImplementedError
    def set_width(self, width: int) -> None:
        raise NotImplementedError
    def height(self) -> int:
        raise NotImplementedError
    def set_height(self, height: int) -> None:
        raise NotImplementedError
    def decoding(self) -> str:
        raise NotImplementedError
    def set_decoding(self, decoding: str) -> None:
        raise NotImplementedError
    def natural_width(self) -> int:
        raise NotImplementedError
    def natural_height(self) -> int:
        raise NotImplementedError
    def complete(self) -> bool:
        raise NotImplementedError
    def decode(self) -> None:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def set_name(self, name: str) -> None:
        raise NotImplementedError
    def align(self) -> str:
        raise NotImplementedError
    def set_align(self, align: str) -> None:
        raise NotImplementedError
    def hspace(self) -> int:
        raise NotImplementedError
    def set_hspace(self, hspace: int) -> None:
        raise NotImplementedError
    def vspace(self) -> int:
        raise NotImplementedError
    def set_vspace(self, vspace: int) -> None:
        raise NotImplementedError
    def long_desc(self) -> str:
        raise NotImplementedError
    def set_long_desc(self, long_desc: str) -> None:
        raise NotImplementedError
    def border(self) -> str:
        raise NotImplementedError
    def set_border(self, border: str) -> None:
        raise NotImplementedError
    def sizes(self) -> str:
        raise NotImplementedError
    def set_sizes(self, sizes: str) -> None:
        raise NotImplementedError
    def current_src(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class EventSource:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def url(self) -> str:
        raise NotImplementedError
    def with_credentials(self) -> bool:
        raise NotImplementedError
    @classmethod
    def connecting(cls) -> int:
        raise NotImplementedError
    @classmethod
    def open(cls) -> int:
        raise NotImplementedError
    @classmethod
    def closed(cls) -> int:
        raise NotImplementedError
    def ready_state(self) -> int:
        raise NotImplementedError
    def onopen(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onopen(self, onopen: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmessage(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmessage(self, onmessage: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def close(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class EventSourceInit:
    with_credentials: Optional[bool]

class PaymentRequestUpdateEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def update_with(self, details_promise: PaymentDetailsUpdate) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class PaymentRequestUpdateEventInit:
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class ConstrainLongRange:
    min: Optional[int]
    max: Optional[int]
    exact: Optional[int]
    ideal: Optional[int]

@dataclass
class ConstrainDoubleRange:
    min: Optional[float]
    max: Optional[float]
    exact: Optional[float]
    ideal: Optional[float]

@dataclass
class ConstrainBooleanParameters:
    exact: Optional[bool]
    ideal: Optional[bool]

@dataclass
class ConstrainDomStringParameters:
    exact: Optional[ListStringOrString]
    ideal: Optional[ListStringOrString]

class ErrorEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def message(self) -> str:
        raise NotImplementedError
    def filename(self) -> str:
        raise NotImplementedError
    def lineno(self) -> int:
        raise NotImplementedError
    def colno(self) -> int:
        raise NotImplementedError
    def error(self) -> Any:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class ErrorEventInit:
    message: Optional[str]
    filename: Optional[str]
    lineno: Optional[int]
    colno: Optional[int]
    error: Any
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class SpeechSynthesisVoice:
    
    def voice_uri(self) -> str:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def lang(self) -> str:
        raise NotImplementedError
    def local_service(self) -> bool:
        raise NotImplementedError
    def default(self) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SpeechSynthesisUtterance:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def text(self) -> str:
        raise NotImplementedError
    def set_text(self, text: str) -> None:
        raise NotImplementedError
    def lang(self) -> str:
        raise NotImplementedError
    def set_lang(self, lang: str) -> None:
        raise NotImplementedError
    def voice(self) -> Optional[SpeechSynthesisVoice]:
        raise NotImplementedError
    def set_voice(self, voice: Optional[SpeechSynthesisVoice]) -> None:
        raise NotImplementedError
    def volume(self) -> float:
        raise NotImplementedError
    def set_volume(self, volume: float) -> None:
        raise NotImplementedError
    def rate(self) -> float:
        raise NotImplementedError
    def set_rate(self, rate: float) -> None:
        raise NotImplementedError
    def pitch(self) -> float:
        raise NotImplementedError
    def set_pitch(self, pitch: float) -> None:
        raise NotImplementedError
    def onstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onstart(self, onstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onend(self, onend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpause(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpause(self, onpause: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onresume(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onresume(self, onresume: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmark(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmark(self, onmark: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onboundary(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onboundary(self, onboundary: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def chosen_voice_uri(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SpeechSynthesisEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def utterance(self) -> SpeechSynthesisUtterance:
        raise NotImplementedError
    def char_index(self) -> int:
        raise NotImplementedError
    def char_length(self) -> int:
        raise NotImplementedError
    def elapsed_time(self) -> float:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgAnimatedEnumeration:
    
    def base_val(self) -> int:
        raise NotImplementedError
    def set_base_val(self, base_val: int) -> None:
        raise NotImplementedError
    def anim_val(self) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgGradientElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    @classmethod
    def svg_spreadmethod_unknown(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_spreadmethod_pad(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_spreadmethod_reflect(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_spreadmethod_repeat(cls) -> int:
        raise NotImplementedError
    def gradient_units(self) -> SvgAnimatedEnumeration:
        raise NotImplementedError
    def gradient_transform(self) -> SvgAnimatedTransformList:
        raise NotImplementedError
    def spread_method(self) -> SvgAnimatedEnumeration:
        raise NotImplementedError
    def href(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgLinearGradientElement:
    
    def as_svg_gradient_element(self) -> SvgGradientElement:
        raise NotImplementedError
    def x1(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y1(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def x2(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y2(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class UrlSearchParams:
    
    def append(self, name: str, value: str) -> None:
        raise NotImplementedError
    def delete(self, name: str) -> None:
        raise NotImplementedError
    def get(self, name: str) -> str:
        raise NotImplementedError
    def get_all(self, name: str) -> List[str]:
        raise NotImplementedError
    def has(self, name: str) -> bool:
        raise NotImplementedError
    def set(self, name: str, value: str) -> None:
        raise NotImplementedError
    def sort(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Url:
    
    def href(self) -> str:
        raise NotImplementedError
    def set_href(self, href: str) -> None:
        raise NotImplementedError
    def origin(self) -> str:
        raise NotImplementedError
    def protocol(self) -> str:
        raise NotImplementedError
    def set_protocol(self, protocol: str) -> None:
        raise NotImplementedError
    def username(self) -> str:
        raise NotImplementedError
    def set_username(self, username: str) -> None:
        raise NotImplementedError
    def password(self) -> str:
        raise NotImplementedError
    def set_password(self, password: str) -> None:
        raise NotImplementedError
    def host(self) -> str:
        raise NotImplementedError
    def set_host(self, host: str) -> None:
        raise NotImplementedError
    def hostname(self) -> str:
        raise NotImplementedError
    def set_hostname(self, hostname: str) -> None:
        raise NotImplementedError
    def port(self) -> str:
        raise NotImplementedError
    def set_port(self, port: str) -> None:
        raise NotImplementedError
    def pathname(self) -> str:
        raise NotImplementedError
    def set_pathname(self, pathname: str) -> None:
        raise NotImplementedError
    def search(self) -> str:
        raise NotImplementedError
    def set_search(self, search: str) -> None:
        raise NotImplementedError
    def search_params(self) -> UrlSearchParams:
        raise NotImplementedError
    def hash(self) -> str:
        raise NotImplementedError
    def set_hash(self, hash: str) -> None:
        raise NotImplementedError
    def to_json(self) -> str:
        raise NotImplementedError
    @classmethod
    def create_object_url(cls, blob: Blob) -> str:
        raise NotImplementedError
    @classmethod
    def revoke_object_url(cls, url: str) -> None:
        raise NotImplementedError
    @classmethod
    def is_valid_url(cls, url: str) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebGlContextEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def status_message(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class WebGlContextEventInit:
    status_message: Optional[str]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class SpeechRecognitionErrorCode(Enum):
    NO_SPEECH = 0
    ABORTED = 1
    AUDIO_CAPTURE = 2
    NETWORK = 3
    NOT_ALLOWED = 4
    SERVICE_NOT_ALLOWED = 5
    BAD_GRAMMAR = 6
    LANGUAGE_NOT_SUPPORTED = 7

class SpeechRecognitionError:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def error(self) -> SpeechRecognitionErrorCode:
        raise NotImplementedError
    def message(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class SpeechRecognitionErrorInit:
    error: Optional[SpeechRecognitionErrorCode]
    message: Optional[str]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class LifecycleCallbacks:
    connected_callback: Optional[LifecycleConnectedCallback]
    disconnected_callback: Optional[LifecycleDisconnectedCallback]
    adopted_callback: Optional[LifecycleAdoptedCallback]
    attribute_changed_callback: Optional[LifecycleAttributeChangedCallback]

class CanvasWindingRule(Enum):
    NONZERO = 0
    EVENODD = 1

@dataclass
class ContextAttributes2D:
    will_read_frequently: Optional[bool]
    alpha: Optional[bool]

class ImageBitmap:
    
    def width(self) -> int:
        raise NotImplementedError
    def height(self) -> int:
        raise NotImplementedError
    def close(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class ImageEncodeOptions:
    type: Optional[str]
    quality: Optional[float]

class OffscreenCanvas:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def width(self) -> int:
        raise NotImplementedError
    def set_width(self, width: int) -> None:
        raise NotImplementedError
    def height(self) -> int:
        raise NotImplementedError
    def set_height(self, height: int) -> None:
        raise NotImplementedError
    def get_context(self, context_id: str, context_options: Any) -> Optional[Object]:
        raise NotImplementedError
    def transfer_to_image_bitmap(self) -> ImageBitmap:
        raise NotImplementedError
    def convert_to_blob(self, options: Optional[ImageEncodeOptions]) -> Blob:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MediaStreamTrackState(Enum):
    LIVE = 0
    ENDED = 1


@dataclass
class ConstrainLongRangeOrS32_ConstrainLongRange:
    value: ConstrainLongRange


@dataclass
class ConstrainLongRangeOrS32_S32:
    value: int


ConstrainLongRangeOrS32 = Union[ConstrainLongRangeOrS32_ConstrainLongRange, ConstrainLongRangeOrS32_S32]



@dataclass
class ConstrainDoubleRangeOrF64_ConstrainDoubleRange:
    value: ConstrainDoubleRange


@dataclass
class ConstrainDoubleRangeOrF64_F64:
    value: float


ConstrainDoubleRangeOrF64 = Union[ConstrainDoubleRangeOrF64_ConstrainDoubleRange, ConstrainDoubleRangeOrF64_F64]



@dataclass
class ConstrainDomStringParametersOrListStringOrString_ConstrainDomStringParameters:
    value: ConstrainDomStringParameters


@dataclass
class ConstrainDomStringParametersOrListStringOrString_ListString:
    value: List[str]


@dataclass
class ConstrainDomStringParametersOrListStringOrString_String:
    value: str


ConstrainDomStringParametersOrListStringOrString = Union[ConstrainDomStringParametersOrListStringOrString_ConstrainDomStringParameters, ConstrainDomStringParametersOrListStringOrString_ListString, ConstrainDomStringParametersOrListStringOrString_String]



@dataclass
class BoolOrConstrainBooleanParameters_Bool:
    value: bool


@dataclass
class BoolOrConstrainBooleanParameters_ConstrainBooleanParameters:
    value: ConstrainBooleanParameters


BoolOrConstrainBooleanParameters = Union[BoolOrConstrainBooleanParameters_Bool, BoolOrConstrainBooleanParameters_ConstrainBooleanParameters]


@dataclass
class MediaTrackConstraintSet:
    width: Optional[ConstrainLongRangeOrS32]
    height: Optional[ConstrainLongRangeOrS32]
    frame_rate: Optional[ConstrainDoubleRangeOrF64]
    facing_mode: Optional[ConstrainDomStringParametersOrListStringOrString]
    media_source: Optional[str]
    browser_window: Optional[int]
    scroll_with_page: Optional[bool]
    device_id: Optional[ConstrainDomStringParametersOrListStringOrString]
    viewport_offset_x: Optional[ConstrainLongRangeOrS32]
    viewport_offset_y: Optional[ConstrainLongRangeOrS32]
    viewport_width: Optional[ConstrainLongRangeOrS32]
    viewport_height: Optional[ConstrainLongRangeOrS32]
    echo_cancellation: Optional[BoolOrConstrainBooleanParameters]
    noise_suppression: Optional[BoolOrConstrainBooleanParameters]
    auto_gain_control: Optional[BoolOrConstrainBooleanParameters]
    channel_count: Optional[ConstrainLongRangeOrS32]

@dataclass
class MediaTrackConstraints:
    advanced: Optional[List[MediaTrackConstraintSet]]
    width: Optional[ConstrainLongRangeOrS32]
    height: Optional[ConstrainLongRangeOrS32]
    frame_rate: Optional[ConstrainDoubleRangeOrF64]
    facing_mode: Optional[ConstrainDomStringParametersOrListStringOrString]
    media_source: Optional[str]
    browser_window: Optional[int]
    scroll_with_page: Optional[bool]
    device_id: Optional[ConstrainDomStringParametersOrListStringOrString]
    viewport_offset_x: Optional[ConstrainLongRangeOrS32]
    viewport_offset_y: Optional[ConstrainLongRangeOrS32]
    viewport_width: Optional[ConstrainLongRangeOrS32]
    viewport_height: Optional[ConstrainLongRangeOrS32]
    echo_cancellation: Optional[BoolOrConstrainBooleanParameters]
    noise_suppression: Optional[BoolOrConstrainBooleanParameters]
    auto_gain_control: Optional[BoolOrConstrainBooleanParameters]
    channel_count: Optional[ConstrainLongRangeOrS32]

@dataclass
class MediaTrackSettings:
    width: Optional[int]
    height: Optional[int]
    frame_rate: Optional[float]
    facing_mode: Optional[str]
    device_id: Optional[str]
    echo_cancellation: Optional[bool]
    noise_suppression: Optional[bool]
    auto_gain_control: Optional[bool]
    channel_count: Optional[int]

class MediaStreamTrack:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def kind(self) -> str:
        raise NotImplementedError
    def id(self) -> str:
        raise NotImplementedError
    def label(self) -> str:
        raise NotImplementedError
    def enabled(self) -> bool:
        raise NotImplementedError
    def set_enabled(self, enabled: bool) -> None:
        raise NotImplementedError
    def muted(self) -> bool:
        raise NotImplementedError
    def onmute(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmute(self, onmute: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onunmute(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onunmute(self, onunmute: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ready_state(self) -> MediaStreamTrackState:
        raise NotImplementedError
    def onended(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onended(self, onended: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def clone(self) -> Self:
        raise NotImplementedError
    def stop(self) -> None:
        raise NotImplementedError
    def get_constraints(self) -> MediaTrackConstraints:
        raise NotImplementedError
    def get_settings(self) -> MediaTrackSettings:
        raise NotImplementedError
    def apply_constraints(self, constraints: Optional[MediaTrackConstraints]) -> None:
        raise NotImplementedError
    def muted_changed(self, muted: bool) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class AudioStreamTrack:
    
    def as_media_stream_track(self) -> MediaStreamTrack:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class VideoStreamTrack:
    
    def as_media_stream_track(self) -> MediaStreamTrack:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MediaStream:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def id(self) -> str:
        raise NotImplementedError
    def get_audio_tracks(self) -> List[AudioStreamTrack]:
        raise NotImplementedError
    def get_video_tracks(self) -> List[VideoStreamTrack]:
        raise NotImplementedError
    def get_tracks(self) -> List[MediaStreamTrack]:
        raise NotImplementedError
    def get_track_by_id(self, track_id: str) -> Optional[MediaStreamTrack]:
        raise NotImplementedError
    def add_track(self, track: MediaStreamTrack) -> None:
        raise NotImplementedError
    def remove_track(self, track: MediaStreamTrack) -> None:
        raise NotImplementedError
    def clone(self) -> Self:
        raise NotImplementedError
    def active(self) -> bool:
        raise NotImplementedError
    def onaddtrack(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onaddtrack(self, onaddtrack: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onremovetrack(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onremovetrack(self, onremovetrack: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def current_time(self) -> float:
        raise NotImplementedError
    @classmethod
    def count_underlying_streams(cls) -> int:
        raise NotImplementedError
    def assign_id(self, id: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlCanvasElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def width(self) -> int:
        raise NotImplementedError
    def set_width(self, width: int) -> None:
        raise NotImplementedError
    def height(self) -> int:
        raise NotImplementedError
    def set_height(self, height: int) -> None:
        raise NotImplementedError
    def get_context(self, context_id: str, context_options: Any) -> Optional[Object]:
        raise NotImplementedError
    def to_data_url(self, type: Optional[str], encoder_options: Any) -> str:
        raise NotImplementedError
    def to_blob(self, callback: BlobCallback, type: Optional[str], encoder_options: Any) -> None:
        raise NotImplementedError
    def transfer_control_to_offscreen(self) -> OffscreenCanvas:
        raise NotImplementedError
    def capture_stream(self, frame_request_rate: Optional[float]) -> MediaStream:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ScrollRestoration(Enum):
    AUTO = 0
    MANUAL = 1

class History:
    
    def length(self) -> int:
        raise NotImplementedError
    def scroll_restoration(self) -> ScrollRestoration:
        raise NotImplementedError
    def set_scroll_restoration(self, scroll_restoration: ScrollRestoration) -> None:
        raise NotImplementedError
    def state(self) -> Any:
        raise NotImplementedError
    def go(self, delta: Optional[int]) -> None:
        raise NotImplementedError
    def back(self) -> None:
        raise NotImplementedError
    def forward(self) -> None:
        raise NotImplementedError
    def push_state(self, data: Any, title: str, url: Optional[str]) -> None:
        raise NotImplementedError
    def replace_state(self, data: Any, title: str, url: Optional[str]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class ElementDefinitionOptions:
    extends: Optional[str]

class CustomElementRegistry:
    
    def define(self, name: str, function_constructor: Function, options: Optional[ElementDefinitionOptions]) -> None:
        raise NotImplementedError
    def set_element_creation_callback(self, name: str, callback: CustomElementCreationCallback) -> None:
        raise NotImplementedError
    def get(self, name: str) -> Any:
        raise NotImplementedError
    def when_defined(self, name: str) -> None:
        raise NotImplementedError
    def upgrade(self, root: Node) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class BarProp:
    
    def visible(self) -> bool:
        raise NotImplementedError
    def set_visible(self, visible: bool) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class ShareData:
    files: Optional[List[File]]
    title: Optional[str]
    text: Optional[str]
    url: Optional[str]

@dataclass
class StorageEstimate:
    usage: Optional[int]
    quota: Optional[int]

class FileSystemHandleKind(Enum):
    FILE = 0
    DIRECTORY = 1

class FileSystemHandle:
    
    def kind(self) -> FileSystemHandleKind:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def is_same_entry(self, other: Self) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class FileSystemGetFileOptions:
    create: Optional[bool]

@dataclass
class FileSystemCreateWritableOptions:
    keep_existing_data: Optional[bool]

class DataView:
    
    def __init__(self, buffer: ArrayBuffer, byte_offset: Optional[int], byte_length: Optional[int]):
        raise NotImplementedError

    def buffer(self) -> ArrayBuffer:
        raise NotImplementedError
    def byte_length(self) -> int:
        raise NotImplementedError
    def byte_offset(self) -> int:
        raise NotImplementedError
    def get_int8(self, byte_offset: int) -> int:
        raise NotImplementedError
    def set_int8(self, byte_offset: int, value: int) -> None:
        raise NotImplementedError
    def get_int16(self, byte_offset: int, little_endian: Optional[bool]) -> int:
        raise NotImplementedError
    def set_int16(self, byte_offset: int, value: int, little_endian: Optional[bool]) -> None:
        raise NotImplementedError
    def get_int32(self, byte_offset: int, little_endian: Optional[bool]) -> int:
        raise NotImplementedError
    def set_int32(self, byte_offset: int, value: int, little_endian: Optional[bool]) -> None:
        raise NotImplementedError
    def get_uint8(self, byte_offset: int) -> int:
        raise NotImplementedError
    def set_uint8(self, byte_offset: int, value: int) -> None:
        raise NotImplementedError
    def get_uint16(self, byte_offset: int, little_endian: Optional[bool]) -> int:
        raise NotImplementedError
    def set_uint16(self, byte_offset: int, value: int, little_endian: Optional[bool]) -> None:
        raise NotImplementedError
    def get_uint32(self, byte_offset: int, little_endian: Optional[bool]) -> int:
        raise NotImplementedError
    def set_uint32(self, byte_offset: int, value: int, little_endian: Optional[bool]) -> None:
        raise NotImplementedError
    def get_float32(self, byte_offset: int, little_endian: Optional[bool]) -> float:
        raise NotImplementedError
    def set_float32(self, byte_offset: int, value: float, little_endian: Optional[bool]) -> None:
        raise NotImplementedError
    def get_float64(self, byte_offset: int, little_endian: Optional[bool]) -> float:
        raise NotImplementedError
    def set_float64(self, byte_offset: int, value: float, little_endian: Optional[bool]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class Uint8ArrayConstructorOptions_Uint8Array:
    value: Any


@dataclass
class Uint8ArrayConstructorOptions_Length:
    value: int


@dataclass
class Uint8ArrayConstructorOptions_ArrayBuffer:
    value: Tuple[ArrayBuffer, Optional[int], Optional[int]]


Uint8ArrayConstructorOptions = Union[Uint8ArrayConstructorOptions_Uint8Array, Uint8ArrayConstructorOptions_Length, Uint8ArrayConstructorOptions_ArrayBuffer]



@dataclass
class Uint8ArraySetSrc_List:
    value: bytes


@dataclass
class Uint8ArraySetSrc_Uint8Array:
    value: Any


Uint8ArraySetSrc = Union[Uint8ArraySetSrc_List, Uint8ArraySetSrc_Uint8Array]


class Uint8Array:
    
    def __init__(self, options: Optional[Uint8ArrayConstructorOptions]):
        raise NotImplementedError

    def fill(self, value: int, start: Optional[int], end: Optional[int]) -> Self:
        raise NotImplementedError
    def buffer(self) -> ArrayBuffer:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def byte_offset(self) -> int:
        raise NotImplementedError
    def byte_length(self) -> int:
        raise NotImplementedError
    def at(self, index: int) -> Optional[int]:
        raise NotImplementedError
    def copy_within(self, target: int, start: int, end: Optional[int]) -> Self:
        raise NotImplementedError
    def set(self, src: Uint8ArraySetSrc, offset: int) -> None:
        raise NotImplementedError
    def slice(self, begin: int, end: int) -> Self:
        raise NotImplementedError
    def subarray(self, begin: int, end: int) -> Self:
        raise NotImplementedError
    def values(self) -> bytes:
        raise NotImplementedError
    def get_index(self, index: int) -> int:
        raise NotImplementedError
    def set_index(self, index: int, value: int) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class Uint8ClampedArrayConstructorOptions_Uint8ClampedArray:
    value: Any


@dataclass
class Uint8ClampedArrayConstructorOptions_Length:
    value: int


@dataclass
class Uint8ClampedArrayConstructorOptions_ArrayBuffer:
    value: Tuple[ArrayBuffer, Optional[int], Optional[int]]


Uint8ClampedArrayConstructorOptions = Union[Uint8ClampedArrayConstructorOptions_Uint8ClampedArray, Uint8ClampedArrayConstructorOptions_Length, Uint8ClampedArrayConstructorOptions_ArrayBuffer]



@dataclass
class Uint8ClampedArraySetSrc_List:
    value: bytes


@dataclass
class Uint8ClampedArraySetSrc_Uint8ClampedArray:
    value: Any


Uint8ClampedArraySetSrc = Union[Uint8ClampedArraySetSrc_List, Uint8ClampedArraySetSrc_Uint8ClampedArray]


class Uint8ClampedArray:
    
    def __init__(self, options: Optional[Uint8ClampedArrayConstructorOptions]):
        raise NotImplementedError

    def fill(self, value: int, start: Optional[int], end: Optional[int]) -> Self:
        raise NotImplementedError
    def buffer(self) -> ArrayBuffer:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def byte_offset(self) -> int:
        raise NotImplementedError
    def byte_length(self) -> int:
        raise NotImplementedError
    def at(self, index: int) -> Optional[int]:
        raise NotImplementedError
    def copy_within(self, target: int, start: int, end: Optional[int]) -> Self:
        raise NotImplementedError
    def set(self, src: Uint8ClampedArraySetSrc, offset: int) -> None:
        raise NotImplementedError
    def slice(self, begin: int, end: int) -> Self:
        raise NotImplementedError
    def subarray(self, begin: int, end: int) -> Self:
        raise NotImplementedError
    def values(self) -> bytes:
        raise NotImplementedError
    def get_index(self, index: int) -> int:
        raise NotImplementedError
    def set_index(self, index: int, value: int) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class Uint16ArrayConstructorOptions_Uint16Array:
    value: Any


@dataclass
class Uint16ArrayConstructorOptions_Length:
    value: int


@dataclass
class Uint16ArrayConstructorOptions_ArrayBuffer:
    value: Tuple[ArrayBuffer, Optional[int], Optional[int]]


Uint16ArrayConstructorOptions = Union[Uint16ArrayConstructorOptions_Uint16Array, Uint16ArrayConstructorOptions_Length, Uint16ArrayConstructorOptions_ArrayBuffer]



@dataclass
class Uint16ArraySetSrc_List:
    value: List[int]


@dataclass
class Uint16ArraySetSrc_Uint16Array:
    value: Any


Uint16ArraySetSrc = Union[Uint16ArraySetSrc_List, Uint16ArraySetSrc_Uint16Array]


class Uint16Array:
    
    def __init__(self, options: Optional[Uint16ArrayConstructorOptions]):
        raise NotImplementedError

    def fill(self, value: int, start: Optional[int], end: Optional[int]) -> Self:
        raise NotImplementedError
    def buffer(self) -> ArrayBuffer:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def byte_offset(self) -> int:
        raise NotImplementedError
    def byte_length(self) -> int:
        raise NotImplementedError
    def at(self, index: int) -> Optional[int]:
        raise NotImplementedError
    def copy_within(self, target: int, start: int, end: Optional[int]) -> Self:
        raise NotImplementedError
    def set(self, src: Uint16ArraySetSrc, offset: int) -> None:
        raise NotImplementedError
    def slice(self, begin: int, end: int) -> Self:
        raise NotImplementedError
    def subarray(self, begin: int, end: int) -> Self:
        raise NotImplementedError
    def values(self) -> List[int]:
        raise NotImplementedError
    def get_index(self, index: int) -> int:
        raise NotImplementedError
    def set_index(self, index: int, value: int) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class Uint32ArrayConstructorOptions_Uint32Array:
    value: Any


@dataclass
class Uint32ArrayConstructorOptions_Length:
    value: int


@dataclass
class Uint32ArrayConstructorOptions_ArrayBuffer:
    value: Tuple[ArrayBuffer, Optional[int], Optional[int]]


Uint32ArrayConstructorOptions = Union[Uint32ArrayConstructorOptions_Uint32Array, Uint32ArrayConstructorOptions_Length, Uint32ArrayConstructorOptions_ArrayBuffer]



@dataclass
class Uint32ArraySetSrc_List:
    value: List[int]


@dataclass
class Uint32ArraySetSrc_Uint32Array:
    value: Any


Uint32ArraySetSrc = Union[Uint32ArraySetSrc_List, Uint32ArraySetSrc_Uint32Array]


class Uint32Array:
    
    def __init__(self, options: Optional[Uint32ArrayConstructorOptions]):
        raise NotImplementedError

    def fill(self, value: int, start: Optional[int], end: Optional[int]) -> Self:
        raise NotImplementedError
    def buffer(self) -> ArrayBuffer:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def byte_offset(self) -> int:
        raise NotImplementedError
    def byte_length(self) -> int:
        raise NotImplementedError
    def at(self, index: int) -> Optional[int]:
        raise NotImplementedError
    def copy_within(self, target: int, start: int, end: Optional[int]) -> Self:
        raise NotImplementedError
    def set(self, src: Uint32ArraySetSrc, offset: int) -> None:
        raise NotImplementedError
    def slice(self, begin: int, end: int) -> Self:
        raise NotImplementedError
    def subarray(self, begin: int, end: int) -> Self:
        raise NotImplementedError
    def values(self) -> List[int]:
        raise NotImplementedError
    def get_index(self, index: int) -> int:
        raise NotImplementedError
    def set_index(self, index: int, value: int) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class Int8ArrayConstructorOptions_Int8Array:
    value: Any


@dataclass
class Int8ArrayConstructorOptions_Length:
    value: int


@dataclass
class Int8ArrayConstructorOptions_ArrayBuffer:
    value: Tuple[ArrayBuffer, Optional[int], Optional[int]]


Int8ArrayConstructorOptions = Union[Int8ArrayConstructorOptions_Int8Array, Int8ArrayConstructorOptions_Length, Int8ArrayConstructorOptions_ArrayBuffer]



@dataclass
class Int8ArraySetSrc_List:
    value: bytes


@dataclass
class Int8ArraySetSrc_Int8Array:
    value: Any


Int8ArraySetSrc = Union[Int8ArraySetSrc_List, Int8ArraySetSrc_Int8Array]


class Int8Array:
    
    def __init__(self, options: Optional[Int8ArrayConstructorOptions]):
        raise NotImplementedError

    def fill(self, value: int, start: Optional[int], end: Optional[int]) -> Self:
        raise NotImplementedError
    def buffer(self) -> ArrayBuffer:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def byte_offset(self) -> int:
        raise NotImplementedError
    def byte_length(self) -> int:
        raise NotImplementedError
    def at(self, index: int) -> Optional[int]:
        raise NotImplementedError
    def copy_within(self, target: int, start: int, end: Optional[int]) -> Self:
        raise NotImplementedError
    def set(self, src: Int8ArraySetSrc, offset: int) -> None:
        raise NotImplementedError
    def slice(self, begin: int, end: int) -> Self:
        raise NotImplementedError
    def subarray(self, begin: int, end: int) -> Self:
        raise NotImplementedError
    def values(self) -> bytes:
        raise NotImplementedError
    def get_index(self, index: int) -> int:
        raise NotImplementedError
    def set_index(self, index: int, value: int) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class Int16ArrayConstructorOptions_Int16Array:
    value: Any


@dataclass
class Int16ArrayConstructorOptions_Length:
    value: int


@dataclass
class Int16ArrayConstructorOptions_ArrayBuffer:
    value: Tuple[ArrayBuffer, Optional[int], Optional[int]]


Int16ArrayConstructorOptions = Union[Int16ArrayConstructorOptions_Int16Array, Int16ArrayConstructorOptions_Length, Int16ArrayConstructorOptions_ArrayBuffer]



@dataclass
class Int16ArraySetSrc_List:
    value: List[int]


@dataclass
class Int16ArraySetSrc_Int16Array:
    value: Any


Int16ArraySetSrc = Union[Int16ArraySetSrc_List, Int16ArraySetSrc_Int16Array]


class Int16Array:
    
    def __init__(self, options: Optional[Int16ArrayConstructorOptions]):
        raise NotImplementedError

    def fill(self, value: int, start: Optional[int], end: Optional[int]) -> Self:
        raise NotImplementedError
    def buffer(self) -> ArrayBuffer:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def byte_offset(self) -> int:
        raise NotImplementedError
    def byte_length(self) -> int:
        raise NotImplementedError
    def at(self, index: int) -> Optional[int]:
        raise NotImplementedError
    def copy_within(self, target: int, start: int, end: Optional[int]) -> Self:
        raise NotImplementedError
    def set(self, src: Int16ArraySetSrc, offset: int) -> None:
        raise NotImplementedError
    def slice(self, begin: int, end: int) -> Self:
        raise NotImplementedError
    def subarray(self, begin: int, end: int) -> Self:
        raise NotImplementedError
    def values(self) -> List[int]:
        raise NotImplementedError
    def get_index(self, index: int) -> int:
        raise NotImplementedError
    def set_index(self, index: int, value: int) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class Int32ArrayConstructorOptions_Int32Array:
    value: Any


@dataclass
class Int32ArrayConstructorOptions_Length:
    value: int


@dataclass
class Int32ArrayConstructorOptions_ArrayBuffer:
    value: Tuple[ArrayBuffer, Optional[int], Optional[int]]


Int32ArrayConstructorOptions = Union[Int32ArrayConstructorOptions_Int32Array, Int32ArrayConstructorOptions_Length, Int32ArrayConstructorOptions_ArrayBuffer]



@dataclass
class Int32ArraySetSrc_List:
    value: List[int]


@dataclass
class Int32ArraySetSrc_Int32Array:
    value: Any


Int32ArraySetSrc = Union[Int32ArraySetSrc_List, Int32ArraySetSrc_Int32Array]


class Int32Array:
    
    def __init__(self, options: Optional[Int32ArrayConstructorOptions]):
        raise NotImplementedError

    def fill(self, value: int, start: Optional[int], end: Optional[int]) -> Self:
        raise NotImplementedError
    def buffer(self) -> ArrayBuffer:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def byte_offset(self) -> int:
        raise NotImplementedError
    def byte_length(self) -> int:
        raise NotImplementedError
    def at(self, index: int) -> Optional[int]:
        raise NotImplementedError
    def copy_within(self, target: int, start: int, end: Optional[int]) -> Self:
        raise NotImplementedError
    def set(self, src: Int32ArraySetSrc, offset: int) -> None:
        raise NotImplementedError
    def slice(self, begin: int, end: int) -> Self:
        raise NotImplementedError
    def subarray(self, begin: int, end: int) -> Self:
        raise NotImplementedError
    def values(self) -> List[int]:
        raise NotImplementedError
    def get_index(self, index: int) -> int:
        raise NotImplementedError
    def set_index(self, index: int, value: int) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class ArrayBufferView_DataView:
    value: DataView


@dataclass
class ArrayBufferView_Uint8Array:
    value: Uint8Array


@dataclass
class ArrayBufferView_Uint8ClampedArray:
    value: Uint8ClampedArray


@dataclass
class ArrayBufferView_Uint16Array:
    value: Uint16Array


@dataclass
class ArrayBufferView_Uint32Array:
    value: Uint32Array


@dataclass
class ArrayBufferView_Int8Array:
    value: Int8Array


@dataclass
class ArrayBufferView_Int16Array:
    value: Int16Array


@dataclass
class ArrayBufferView_Int32Array:
    value: Int32Array


@dataclass
class ArrayBufferView_Float32Array:
    value: Float32Array


@dataclass
class ArrayBufferView_Float64Array:
    value: Float64Array


ArrayBufferView = Union[ArrayBufferView_DataView, ArrayBufferView_Uint8Array, ArrayBufferView_Uint8ClampedArray, ArrayBufferView_Uint16Array, ArrayBufferView_Uint32Array, ArrayBufferView_Int8Array, ArrayBufferView_Int16Array, ArrayBufferView_Int32Array, ArrayBufferView_Float32Array, ArrayBufferView_Float64Array]



@dataclass
class BufferSource_ArrayBuffer:
    value: ArrayBuffer


@dataclass
class BufferSource_ArrayBufferView:
    value: ArrayBufferView


BufferSource = Union[BufferSource_ArrayBuffer, BufferSource_ArrayBufferView]


class WriteCommandType(Enum):
    WRITE = 0
    SEEK = 1
    TRUNCATE = 2


@dataclass
class BlobOrBufferSourceOrString_Blob:
    value: Blob


@dataclass
class BlobOrBufferSourceOrString_BufferSource:
    value: BufferSource


@dataclass
class BlobOrBufferSourceOrString_String:
    value: str


BlobOrBufferSourceOrString = Union[BlobOrBufferSourceOrString_Blob, BlobOrBufferSourceOrString_BufferSource, BlobOrBufferSourceOrString_String]


@dataclass
class WriteParams:
    type: WriteCommandType
    size: Optional[int]
    position: Optional[int]
    data: Optional[BlobOrBufferSourceOrString]


@dataclass
class BlobOrBufferSourceOrStringOrWriteParams_Blob:
    value: Blob


@dataclass
class BlobOrBufferSourceOrStringOrWriteParams_BufferSource:
    value: BufferSource


@dataclass
class BlobOrBufferSourceOrStringOrWriteParams_String:
    value: str


@dataclass
class BlobOrBufferSourceOrStringOrWriteParams_WriteParams:
    value: WriteParams


BlobOrBufferSourceOrStringOrWriteParams = Union[BlobOrBufferSourceOrStringOrWriteParams_Blob, BlobOrBufferSourceOrStringOrWriteParams_BufferSource, BlobOrBufferSourceOrStringOrWriteParams_String, BlobOrBufferSourceOrStringOrWriteParams_WriteParams]


class FileSystemWritableFileStream:
    
    def as_writable_stream(self) -> WritableStream:
        raise NotImplementedError
    def write(self, data: BlobOrBufferSourceOrStringOrWriteParams) -> None:
        raise NotImplementedError
    def seek(self, position: int) -> None:
        raise NotImplementedError
    def truncate(self, size: int) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class FileSystemReadWriteOptions:
    at: Optional[int]

class FileSystemSyncAccessHandle:
    
    def read(self, buffer: BufferSource, options: Optional[FileSystemReadWriteOptions]) -> int:
        raise NotImplementedError
    def write(self, buffer: BufferSource, options: Optional[FileSystemReadWriteOptions]) -> int:
        raise NotImplementedError
    def truncate(self, new_size: int) -> None:
        raise NotImplementedError
    def get_size(self) -> int:
        raise NotImplementedError
    def flush(self) -> None:
        raise NotImplementedError
    def close(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class FileSystemFileHandle:
    
    def as_file_system_handle(self) -> FileSystemHandle:
        raise NotImplementedError
    def get_file(self) -> File:
        raise NotImplementedError
    def create_writable(self, options: Optional[FileSystemCreateWritableOptions]) -> FileSystemWritableFileStream:
        raise NotImplementedError
    def create_sync_access_handle(self) -> FileSystemSyncAccessHandle:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class FileSystemGetDirectoryOptions:
    create: Optional[bool]

@dataclass
class FileSystemRemoveOptions:
    recursive: Optional[bool]

class FileSystemDirectoryHandle:
    
    def as_file_system_handle(self) -> FileSystemHandle:
        raise NotImplementedError
    def get_file_handle(self, name: str, options: Optional[FileSystemGetFileOptions]) -> FileSystemFileHandle:
        raise NotImplementedError
    def get_directory_handle(self, name: str, options: Optional[FileSystemGetDirectoryOptions]) -> Self:
        raise NotImplementedError
    def remove_entry(self, name: str, options: Optional[FileSystemRemoveOptions]) -> None:
        raise NotImplementedError
    def resolve(self, possible_descendant: FileSystemHandle) -> List[Optional[str]]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class StorageManager:
    
    def persisted(self) -> bool:
        raise NotImplementedError
    def persist(self) -> bool:
        raise NotImplementedError
    def estimate(self) -> StorageEstimate:
        raise NotImplementedError
    def get_directory(self) -> FileSystemDirectoryHandle:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PermissionState(Enum):
    GRANTED = 0
    DENIED = 1
    PROMPT = 2

class PermissionStatus:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def state(self) -> PermissionState:
        raise NotImplementedError
    def onchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onchange(self, onchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Permissions:
    
    def query(self, permission: Object) -> PermissionStatus:
        raise NotImplementedError
    def revoke(self, permission: Object) -> PermissionStatus:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Plugin:
    
    def description(self) -> str:
        raise NotImplementedError
    def filename(self) -> str:
        raise NotImplementedError
    def version(self) -> str:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def item(self, index: int) -> Optional[Any]:
        raise NotImplementedError
    def named_item(self, name: str) -> Optional[Any]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MimeType:
    
    def description(self) -> str:
        raise NotImplementedError
    def enabled_plugin(self) -> Optional[Plugin]:
        raise NotImplementedError
    def suffixes(self) -> str:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MimeTypeArray:
    
    def length(self) -> int:
        raise NotImplementedError
    def item(self, index: int) -> Optional[MimeType]:
        raise NotImplementedError
    def named_item(self, name: str) -> Optional[MimeType]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PluginArray:
    
    def length(self) -> int:
        raise NotImplementedError
    def item(self, index: int) -> Optional[Plugin]:
        raise NotImplementedError
    def named_item(self, name: str) -> Optional[Plugin]:
        raise NotImplementedError
    def refresh(self, reload_documents: Optional[bool]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class PositionOptions:
    enable_high_accuracy: Optional[bool]
    timeout: Optional[int]
    maximum_age: Optional[int]

class Geolocation:
    
    def get_current_position(self, success_callback: PositionCallback, error_callback: Optional[Some[Optional[PositionErrorCallback]]], options: Optional[PositionOptions]) -> None:
        raise NotImplementedError
    def watch_position(self, success_callback: PositionCallback, error_callback: Optional[Some[Optional[PositionErrorCallback]]], options: Optional[PositionOptions]) -> int:
        raise NotImplementedError
    def clear_watch(self, watch_id: int) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class BatteryManager:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def charging(self) -> bool:
        raise NotImplementedError
    def charging_time(self) -> float:
        raise NotImplementedError
    def discharging_time(self) -> float:
        raise NotImplementedError
    def level(self) -> float:
        raise NotImplementedError
    def onchargingchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onchargingchange(self, onchargingchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onchargingtimechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onchargingtimechange(self, onchargingtimechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondischargingtimechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondischargingtimechange(self, ondischargingtimechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onlevelchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onlevelchange(self, onlevelchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class NavigatorVibrateParams_Duration:
    value: int


@dataclass
class NavigatorVibrateParams_Pattern:
    value: List[int]


NavigatorVibrateParams = Union[NavigatorVibrateParams_Duration, NavigatorVibrateParams_Pattern]


class MediaDecodingType(Enum):
    FILE = 0
    MEDIA_SOURCE = 1

@dataclass
class VideoConfiguration:
    content_type: Optional[str]
    width: Optional[int]
    height: Optional[int]
    bitrate: Optional[int]
    framerate: Optional[str]

@dataclass
class AudioConfiguration:
    content_type: Optional[str]
    channels: Optional[str]
    bitrate: Optional[int]
    samplerate: Optional[int]

@dataclass
class MediaDecodingConfiguration:
    type: MediaDecodingType
    video: Optional[VideoConfiguration]
    audio: Optional[AudioConfiguration]

class MediaCapabilitiesInfo:
    
    def supported(self) -> bool:
        raise NotImplementedError
    def smooth(self) -> bool:
        raise NotImplementedError
    def power_efficient(self) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MediaEncodingType(Enum):
    RECORD = 0
    TRANSMISSION = 1

@dataclass
class MediaEncodingConfiguration:
    type: MediaEncodingType
    video: Optional[VideoConfiguration]
    audio: Optional[AudioConfiguration]

class MediaCapabilities:
    
    def decoding_info(self, configuration: MediaDecodingConfiguration) -> MediaCapabilitiesInfo:
        raise NotImplementedError
    def encoding_info(self, configuration: MediaEncodingConfiguration) -> MediaCapabilitiesInfo:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class GamepadMappingType(Enum):
    DEFAULT = 0
    STANDARD = 1

class GamepadHand(Enum):
    DEFAULT = 0
    LEFT = 1
    RIGHT = 2

class GamepadButton:
    
    def pressed(self) -> bool:
        raise NotImplementedError
    def touched(self) -> bool:
        raise NotImplementedError
    def value(self) -> float:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class GamepadPose:
    
    def has_orientation(self) -> bool:
        raise NotImplementedError
    def has_position(self) -> bool:
        raise NotImplementedError
    def position(self) -> Float32Array:
        raise NotImplementedError
    def linear_velocity(self) -> Float32Array:
        raise NotImplementedError
    def linear_acceleration(self) -> Float32Array:
        raise NotImplementedError
    def orientation(self) -> Float32Array:
        raise NotImplementedError
    def angular_velocity(self) -> Float32Array:
        raise NotImplementedError
    def angular_acceleration(self) -> Float32Array:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class GamepadHapticActuatorType(Enum):
    VIBRATION = 0

class GamepadHapticActuator:
    
    def type(self) -> GamepadHapticActuatorType:
        raise NotImplementedError
    def pulse(self, value: float, duration: float) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Gamepad:
    
    def id(self) -> str:
        raise NotImplementedError
    def index(self) -> int:
        raise NotImplementedError
    def mapping(self) -> GamepadMappingType:
        raise NotImplementedError
    def hand(self) -> GamepadHand:
        raise NotImplementedError
    def display_id(self) -> int:
        raise NotImplementedError
    def connected(self) -> bool:
        raise NotImplementedError
    def buttons(self) -> List[GamepadButton]:
        raise NotImplementedError
    def axes(self) -> List[float]:
        raise NotImplementedError
    def timestamp(self) -> float:
        raise NotImplementedError
    def pose(self) -> Optional[GamepadPose]:
        raise NotImplementedError
    def haptic_actuators(self) -> List[GamepadHapticActuator]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class GamepadServiceTest:
    
    def no_mapping(self) -> GamepadMappingType:
        raise NotImplementedError
    def standard_mapping(self) -> GamepadMappingType:
        raise NotImplementedError
    def no_hand(self) -> GamepadHand:
        raise NotImplementedError
    def left_hand(self) -> GamepadHand:
        raise NotImplementedError
    def right_hand(self) -> GamepadHand:
        raise NotImplementedError
    def add_gamepad(self, id: str, mapping: GamepadMappingType, hand: GamepadHand, num_buttons: int, num_axes: int, num_haptics: int) -> int:
        raise NotImplementedError
    def remove_gamepad(self, index: int) -> None:
        raise NotImplementedError
    def new_button_event(self, index: int, button: int, pressed: bool, touched: bool) -> None:
        raise NotImplementedError
    def new_button_value_event(self, index: int, button: int, pressed: bool, touched: bool, value: float) -> None:
        raise NotImplementedError
    def new_axis_move_event(self, index: int, axis: int, value: float) -> None:
        raise NotImplementedError
    def new_pose_move(self, index: int, orient: Float32Array, pos: Float32Array, ang_velocity: Float32Array, ang_acceleration: Float32Array, lin_velocity: Float32Array, lin_acceleration: Float32Array) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class VrDisplayCapabilities:
    
    def has_position(self) -> bool:
        raise NotImplementedError
    def has_orientation(self) -> bool:
        raise NotImplementedError
    def has_external_display(self) -> bool:
        raise NotImplementedError
    def can_present(self) -> bool:
        raise NotImplementedError
    def max_layers(self) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class VrStageParameters:
    
    def sitting_to_standing_transform(self) -> Float32Array:
        raise NotImplementedError
    def size_x(self) -> float:
        raise NotImplementedError
    def size_z(self) -> float:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class VrEye(Enum):
    LEFT = 0
    RIGHT = 1

class VrFieldOfView:
    
    def up_degrees(self) -> float:
        raise NotImplementedError
    def right_degrees(self) -> float:
        raise NotImplementedError
    def down_degrees(self) -> float:
        raise NotImplementedError
    def left_degrees(self) -> float:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class VrEyeParameters:
    
    def offset(self) -> Float32Array:
        raise NotImplementedError
    def field_of_view(self) -> VrFieldOfView:
        raise NotImplementedError
    def render_width(self) -> int:
        raise NotImplementedError
    def render_height(self) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class VrPose:
    
    def position(self) -> Float32Array:
        raise NotImplementedError
    def linear_velocity(self) -> Float32Array:
        raise NotImplementedError
    def linear_acceleration(self) -> Float32Array:
        raise NotImplementedError
    def orientation(self) -> Float32Array:
        raise NotImplementedError
    def angular_velocity(self) -> Float32Array:
        raise NotImplementedError
    def angular_acceleration(self) -> Float32Array:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class VrFrameData:
    
    def timestamp(self) -> float:
        raise NotImplementedError
    def left_projection_matrix(self) -> Float32Array:
        raise NotImplementedError
    def left_view_matrix(self) -> Float32Array:
        raise NotImplementedError
    def right_projection_matrix(self) -> Float32Array:
        raise NotImplementedError
    def right_view_matrix(self) -> Float32Array:
        raise NotImplementedError
    def pose(self) -> VrPose:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class VrSubmitFrameResult:
    
    def frame_num(self) -> int:
        raise NotImplementedError
    def base64_image(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class VrLayer:
    source: Optional[Some[Optional[HtmlCanvasElement]]]
    left_bounds: Optional[List[float]]
    right_bounds: Optional[List[float]]

class VrDisplay:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def presenting_groups(self) -> int:
        raise NotImplementedError
    def group_mask(self) -> int:
        raise NotImplementedError
    def set_group_mask(self, group_mask: int) -> None:
        raise NotImplementedError
    def is_connected(self) -> bool:
        raise NotImplementedError
    def is_presenting(self) -> bool:
        raise NotImplementedError
    def capabilities(self) -> VrDisplayCapabilities:
        raise NotImplementedError
    def stage_parameters(self) -> Optional[VrStageParameters]:
        raise NotImplementedError
    def get_eye_parameters(self, which_eye: VrEye) -> VrEyeParameters:
        raise NotImplementedError
    def display_id(self) -> int:
        raise NotImplementedError
    def display_name(self) -> str:
        raise NotImplementedError
    def get_frame_data(self, frame_data: VrFrameData) -> bool:
        raise NotImplementedError
    def get_pose(self) -> VrPose:
        raise NotImplementedError
    def get_submit_frame_result(self, result: VrSubmitFrameResult) -> bool:
        raise NotImplementedError
    def reset_pose(self) -> None:
        raise NotImplementedError
    def depth_near(self) -> float:
        raise NotImplementedError
    def set_depth_near(self, depth_near: float) -> None:
        raise NotImplementedError
    def depth_far(self) -> float:
        raise NotImplementedError
    def set_depth_far(self, depth_far: float) -> None:
        raise NotImplementedError
    def request_animation_frame(self, callback: FrameRequestCallback) -> int:
        raise NotImplementedError
    def cancel_animation_frame(self, handle: int) -> None:
        raise NotImplementedError
    def request_present(self, layers: List[VrLayer]) -> None:
        raise NotImplementedError
    def exit_present(self) -> None:
        raise NotImplementedError
    def submit_frame(self) -> None:
        """
        get-layers: func() -> list<vr-layer>;
        """
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class VrMockDisplay:
    
    def set_eye_resolution(self, a_render_width: int, a_render_height: int) -> None:
        raise NotImplementedError
    def set_eye_parameter(self, eye: VrEye, offset_x: float, offset_y: float, offset_z: float, up_degree: float, right_degree: float, down_degree: float, left_degree: float) -> None:
        raise NotImplementedError
    def set_pose(self, position: Float32Array, linear_velocity: Float32Array, linear_acceleration: Float32Array, orientation: Float32Array, angular_velocity: Float32Array, angular_acceleration: Float32Array) -> None:
        raise NotImplementedError
    def set_mount_state(self, is_mounted: bool) -> None:
        raise NotImplementedError
    def update(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class VrMockController:
    
    def new_button_event(self, button: int, pressed: bool) -> None:
        raise NotImplementedError
    def new_axis_move_event(self, axis: int, value: float) -> None:
        raise NotImplementedError
    def new_pose_move(self, position: Float32Array, linear_velocity: Float32Array, linear_acceleration: Float32Array, orientation: Float32Array, angular_velocity: Float32Array, angular_acceleration: Float32Array) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class VrServiceTest:
    
    def attach_vr_display(self, id: str) -> VrMockDisplay:
        raise NotImplementedError
    def attach_vr_controller(self, id: str) -> VrMockController:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class MidiOptions:
    sysex: Optional[bool]
    software: Optional[bool]

class MidiInputMap:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MidiOutputMap:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MidiAccess:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def inputs(self) -> MidiInputMap:
        raise NotImplementedError
    def outputs(self) -> MidiOutputMap:
        raise NotImplementedError
    def onstatechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onstatechange(self, onstatechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def sysex_enabled(self) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MediaDeviceKind(Enum):
    AUDIOINPUT = 0
    AUDIOOUTPUT = 1
    VIDEOINPUT = 2

class MediaDeviceInfo:
    
    def device_id(self) -> str:
        raise NotImplementedError
    def kind(self) -> MediaDeviceKind:
        raise NotImplementedError
    def label(self) -> str:
        raise NotImplementedError
    def group_id(self) -> str:
        raise NotImplementedError
    def to_json(self) -> Object:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class BoolOrMediaTrackConstraints_Bool:
    value: bool


@dataclass
class BoolOrMediaTrackConstraints_MediaTrackConstraints:
    value: MediaTrackConstraints


BoolOrMediaTrackConstraints = Union[BoolOrMediaTrackConstraints_Bool, BoolOrMediaTrackConstraints_MediaTrackConstraints]


@dataclass
class MediaStreamConstraints:
    audio: Optional[BoolOrMediaTrackConstraints]
    video: Optional[BoolOrMediaTrackConstraints]
    picture: Optional[bool]
    fake: Optional[bool]
    peer_identity: Optional[str]

@dataclass
class DisplayMediaStreamConstraints:
    video: Optional[BoolOrMediaTrackConstraints]
    audio: Optional[BoolOrMediaTrackConstraints]

class MediaDevices:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def ondevicechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondevicechange(self, ondevicechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def get_supported_constraints(self) -> MediaTrackSupportedConstraints:
        raise NotImplementedError
    def enumerate_devices(self) -> List[MediaDeviceInfo]:
        raise NotImplementedError
    def get_user_media(self, constraints: Optional[MediaStreamConstraints]) -> MediaStream:
        raise NotImplementedError
    def get_display_media(self, constraints: Optional[DisplayMediaStreamConstraints]) -> MediaStream:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ServiceWorkerState(Enum):
    PARSED = 0
    INSTALLING = 1
    INSTALLED = 2
    ACTIVATING = 3
    ACTIVATED = 4
    REDUNDANT = 5

class ServiceWorker:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def script_url(self) -> str:
        raise NotImplementedError
    def state(self) -> ServiceWorkerState:
        raise NotImplementedError
    def onstatechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onstatechange(self, onstatechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def post_message(self, message: Any, transferable: Optional[List[Object]]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ServiceWorkerUpdateViaCache(Enum):
    IMPORTS = 0
    ALL = 1
    NONE = 2


@dataclass
class BufferSourceOrString_BufferSource:
    value: BufferSource


@dataclass
class BufferSourceOrString_String:
    value: str


BufferSourceOrString = Union[BufferSourceOrString_BufferSource, BufferSourceOrString_String]


@dataclass
class PushSubscriptionOptionsInit:
    user_visible_only: Optional[bool]
    application_server_key: Optional[BufferSourceOrString]

class PushSubscriptionOptions:
    
    def application_server_key(self) -> ArrayBuffer:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PushEncryptionKeyName(Enum):
    P256DH = 0
    AUTH = 1

@dataclass
class PushSubscriptionKeys:
    p256dh: Optional[str]
    auth: Optional[str]

@dataclass
class PushSubscriptionJson:
    endpoint: Optional[str]
    keys: Optional[PushSubscriptionKeys]

class PushSubscription:
    
    def endpoint(self) -> str:
        raise NotImplementedError
    def options(self) -> PushSubscriptionOptions:
        raise NotImplementedError
    def get_key(self, name: PushEncryptionKeyName) -> ArrayBuffer:
        raise NotImplementedError
    def unsubscribe(self) -> bool:
        raise NotImplementedError
    def to_json(self) -> PushSubscriptionJson:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PushPermissionState(Enum):
    GRANTED = 0
    DENIED = 1
    PROMPT = 2

class PushManager:
    
    def subscribe(self, options: Optional[PushSubscriptionOptionsInit]) -> PushSubscription:
        raise NotImplementedError
    def get_subscription(self) -> Optional[PushSubscription]:
        raise NotImplementedError
    def permission_state(self, options: Optional[PushSubscriptionOptionsInit]) -> PushPermissionState:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class NotificationDirection(Enum):
    AUTO = 0
    LTR = 1
    RTL = 2

@dataclass
class NotificationAction:
    action: str
    title: str
    icon: Optional[str]

@dataclass
class NotificationOptions:
    dir: Optional[NotificationDirection]
    lang: Optional[str]
    body: Optional[str]
    tag: Optional[str]
    image: Optional[str]
    icon: Optional[str]
    badge: Optional[str]
    timestamp: Optional[int]
    renotify: Optional[bool]
    silent: Optional[bool]
    require_interaction: Optional[bool]
    data: Any
    actions: Optional[List[NotificationAction]]

class NotificationPermission(Enum):
    DEFAULT = 0
    DENIED = 1
    GRANTED = 2

class Notification:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def __init__(self, title: str, options: Optional[NotificationOptions]):
        raise NotImplementedError

    @classmethod
    def permission(cls) -> NotificationPermission:
        raise NotImplementedError
    @classmethod
    def request_permission(cls, permission_callback: Optional[NotificationPermissionCallback]) -> NotificationPermission:
        raise NotImplementedError
    @classmethod
    def max_actions(cls) -> int:
        raise NotImplementedError
    def onclick(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onclick(self, onclick: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onshow(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onshow(self, onshow: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onclose(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onclose(self, onclose: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def title(self) -> str:
        raise NotImplementedError
    def dir(self) -> NotificationDirection:
        raise NotImplementedError
    def lang(self) -> str:
        raise NotImplementedError
    def body(self) -> str:
        raise NotImplementedError
    def tag(self) -> str:
        raise NotImplementedError
    def image(self) -> str:
        raise NotImplementedError
    def icon(self) -> str:
        raise NotImplementedError
    def badge(self) -> str:
        raise NotImplementedError
    def vibrate(self) -> List[int]:
        raise NotImplementedError
    def timestamp(self) -> int:
        raise NotImplementedError
    def renotify(self) -> bool:
        raise NotImplementedError
    def silent(self) -> bool:
        raise NotImplementedError
    def require_interaction(self) -> bool:
        raise NotImplementedError
    def data(self) -> Any:
        raise NotImplementedError
    def actions(self) -> List[NotificationAction]:
        raise NotImplementedError
    def close(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ServiceWorkerRegistration:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def installing(self) -> Optional[ServiceWorker]:
        raise NotImplementedError
    def waiting(self) -> Optional[ServiceWorker]:
        raise NotImplementedError
    def active(self) -> Optional[ServiceWorker]:
        raise NotImplementedError
    def scope(self) -> str:
        raise NotImplementedError
    def update_via_cache(self) -> ServiceWorkerUpdateViaCache:
        raise NotImplementedError
    def update(self) -> None:
        raise NotImplementedError
    def unregister(self) -> bool:
        raise NotImplementedError
    def onupdatefound(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onupdatefound(self, onupdatefound: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def push_manager(self) -> PushManager:
        raise NotImplementedError
    def show_notification(self, title: str, options: Optional[NotificationOptions]) -> None:
        raise NotImplementedError
    def get_notifications(self, filter: Optional[GetNotificationOptions]) -> List[Notification]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class RegistrationOptions:
    scope: Optional[str]
    type: Optional[str]
    update_via_cache: Optional[ServiceWorkerUpdateViaCache]

class ServiceWorkerContainer:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def controller(self) -> Optional[ServiceWorker]:
        raise NotImplementedError
    def ready(self) -> ServiceWorkerRegistration:
        raise NotImplementedError
    def register(self, script_url: str, options: Optional[RegistrationOptions]) -> ServiceWorkerRegistration:
        raise NotImplementedError
    def get_registration(self, document_url: Optional[str]) -> Any:
        raise NotImplementedError
    def get_registrations(self) -> List[ServiceWorkerRegistration]:
        raise NotImplementedError
    def oncontrollerchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oncontrollerchange(self, oncontrollerchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmessage(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmessage(self, onmessage: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def get_scope_for_url(self, url: str) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class FormDataAppendParams_NameValueFilename:
    value: Tuple[str, Blob, Optional[str]]


@dataclass
class FormDataAppendParams_NameValue:
    value: Tuple[str, str]


FormDataAppendParams = Union[FormDataAppendParams_NameValueFilename, FormDataAppendParams_NameValue]



@dataclass
class FormDataSetParams_NameValueFilename:
    value: Tuple[str, Blob, Optional[str]]


@dataclass
class FormDataSetParams_NameValue:
    value: Tuple[str, str]


FormDataSetParams = Union[FormDataSetParams_NameValueFilename, FormDataSetParams_NameValue]


class FormData:
    
    def append(self, params: FormDataAppendParams) -> None:
        raise NotImplementedError
    def delete(self, name: str) -> None:
        raise NotImplementedError
    def has(self, name: str) -> bool:
        """
        get: func(name: string) -> option<form-data-entry-value>;
        get-all: func(name: string) -> list<form-data-entry-value>;
        """
        raise NotImplementedError
    def set(self, params: FormDataSetParams) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class BlobOrBufferSourceOrFormDataOrReadableStreamOrStringOrUrlSearchParams_Blob:
    value: Blob


@dataclass
class BlobOrBufferSourceOrFormDataOrReadableStreamOrStringOrUrlSearchParams_BufferSource:
    value: BufferSource


@dataclass
class BlobOrBufferSourceOrFormDataOrReadableStreamOrStringOrUrlSearchParams_FormData:
    value: FormData


@dataclass
class BlobOrBufferSourceOrFormDataOrReadableStreamOrStringOrUrlSearchParams_ReadableStream:
    value: ReadableStream


@dataclass
class BlobOrBufferSourceOrFormDataOrReadableStreamOrStringOrUrlSearchParams_String:
    value: str


@dataclass
class BlobOrBufferSourceOrFormDataOrReadableStreamOrStringOrUrlSearchParams_UrlSearchParams:
    value: UrlSearchParams


BlobOrBufferSourceOrFormDataOrReadableStreamOrStringOrUrlSearchParams = Union[BlobOrBufferSourceOrFormDataOrReadableStreamOrStringOrUrlSearchParams_Blob, BlobOrBufferSourceOrFormDataOrReadableStreamOrStringOrUrlSearchParams_BufferSource, BlobOrBufferSourceOrFormDataOrReadableStreamOrStringOrUrlSearchParams_FormData, BlobOrBufferSourceOrFormDataOrReadableStreamOrStringOrUrlSearchParams_ReadableStream, BlobOrBufferSourceOrFormDataOrReadableStreamOrStringOrUrlSearchParams_String, BlobOrBufferSourceOrFormDataOrReadableStreamOrStringOrUrlSearchParams_UrlSearchParams]


class PresentationConnectionState(Enum):
    CONNECTING = 0
    CONNECTED = 1
    CLOSED = 2
    TERMINATED = 3

class PresentationConnectionBinaryType(Enum):
    BLOB = 0
    ARRAYBUFFER = 1


@dataclass
class PresentationConnectionSendParams_Data:
    value: str


PresentationConnectionSendParams = Union[PresentationConnectionSendParams_Data]


class PresentationConnection:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def id(self) -> str:
        raise NotImplementedError
    def url(self) -> str:
        raise NotImplementedError
    def state(self) -> PresentationConnectionState:
        raise NotImplementedError
    def onconnect(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onconnect(self, onconnect: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onclose(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onclose(self, onclose: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onterminate(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onterminate(self, onterminate: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def binary_type(self) -> PresentationConnectionBinaryType:
        raise NotImplementedError
    def set_binary_type(self, binary_type: PresentationConnectionBinaryType) -> None:
        raise NotImplementedError
    def send(self, params: PresentationConnectionSendParams) -> None:
        raise NotImplementedError
    def onmessage(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmessage(self, onmessage: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def close(self) -> None:
        raise NotImplementedError
    def terminate(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PresentationRequest:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def start(self) -> PresentationConnection:
        raise NotImplementedError
    def reconnect(self, presentation_id: str) -> PresentationConnection:
        raise NotImplementedError
    def get_availability(self) -> PresentationAvailability:
        raise NotImplementedError
    def onconnectionavailable(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onconnectionavailable(self, onconnectionavailable: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def start_with_device(self, device_id: str) -> PresentationConnection:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PresentationConnectionList:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def connections(self) -> List[PresentationConnection]:
        raise NotImplementedError
    def onconnectionavailable(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onconnectionavailable(self, onconnectionavailable: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PresentationReceiver:
    
    def connection_list(self) -> PresentationConnectionList:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Presentation:
    
    def default_request(self) -> Optional[PresentationRequest]:
        raise NotImplementedError
    def set_default_request(self, default_request: Optional[PresentationRequest]) -> None:
        raise NotImplementedError
    def receiver(self) -> Optional[PresentationReceiver]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class MediaKeySystemMediaCapability:
    content_type: Optional[str]
    robustness: Optional[str]

class MediaKeysRequirement(Enum):
    REQUIRED = 0
    OPTIONAL = 1
    NOT_ALLOWED = 2

@dataclass
class MediaKeySystemConfiguration:
    label: Optional[str]
    init_data_types: Optional[List[str]]
    audio_capabilities: Optional[List[MediaKeySystemMediaCapability]]
    video_capabilities: Optional[List[MediaKeySystemMediaCapability]]
    distinctive_identifier: Optional[MediaKeysRequirement]
    persistent_state: Optional[MediaKeysRequirement]
    session_types: Optional[List[str]]

class MediaKeySessionType(Enum):
    TEMPORARY = 0
    PERSISTENT_LICENSE = 1

class MediaKeyError:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def system_code(self) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MediaKeyStatusMap:
    
    def size(self) -> int:
        raise NotImplementedError
    def has(self, key_id: BufferSource) -> bool:
        raise NotImplementedError
    def get(self, key_id: BufferSource) -> Any:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MediaKeySession:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def error(self) -> Optional[MediaKeyError]:
        raise NotImplementedError
    def session_id(self) -> str:
        raise NotImplementedError
    def expiration(self) -> float:
        raise NotImplementedError
    def key_statuses(self) -> MediaKeyStatusMap:
        raise NotImplementedError
    def onkeystatuseschange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onkeystatuseschange(self, onkeystatuseschange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmessage(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmessage(self, onmessage: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def generate_request(self, init_data_type: str, init_data: BufferSource) -> None:
        raise NotImplementedError
    def load(self, session_id: str) -> bool:
        raise NotImplementedError
    def update(self, response: BufferSource) -> None:
        raise NotImplementedError
    def close(self) -> None:
        raise NotImplementedError
    def remove(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class MediaKeysPolicy:
    min_hdcp_version: Optional[str]

class MediaKeyStatus(Enum):
    USABLE = 0
    EXPIRED = 1
    RELEASED = 2
    OUTPUT_RESTRICTED = 3
    OUTPUT_DOWNSCALED = 4
    STATUS_PENDING = 5
    INTERNAL_ERROR = 6

class MediaKeys:
    
    def key_system(self) -> str:
        raise NotImplementedError
    def create_session(self, session_type: Optional[MediaKeySessionType]) -> MediaKeySession:
        raise NotImplementedError
    def set_server_certificate(self, server_certificate: BufferSource) -> None:
        raise NotImplementedError
    def get_status_for_policy(self, policy: Optional[MediaKeysPolicy]) -> MediaKeyStatus:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MediaKeySystemAccess:
    
    def key_system(self) -> str:
        raise NotImplementedError
    def get_configuration(self) -> MediaKeySystemConfiguration:
        raise NotImplementedError
    def create_media_keys(self) -> MediaKeys:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PublicKeyCredentialType(Enum):
    PUBLIC_KEY = 0

class AuthenticatorTransport(Enum):
    USB = 0
    NFC = 1
    BLE = 2

@dataclass
class PublicKeyCredentialDescriptor:
    type: PublicKeyCredentialType
    id: BufferSource
    transports: Optional[List[AuthenticatorTransport]]

class UserVerificationRequirement(Enum):
    REQUIRED = 0
    PREFERRED = 1
    DISCOURAGED = 2

@dataclass
class AuthenticationExtensionsClientInputs:
    appid: Optional[str]

@dataclass
class PublicKeyCredentialRequestOptions:
    challenge: BufferSource
    timeout: Optional[int]
    rp_id: Optional[str]
    allow_credentials: Optional[List[PublicKeyCredentialDescriptor]]
    user_verification: Optional[UserVerificationRequirement]
    extensions: Optional[AuthenticationExtensionsClientInputs]

@dataclass
class CredentialRequestOptions:
    public_key: Optional[PublicKeyCredentialRequestOptions]
    signal: Optional[AbortSignal]

class Credential:
    
    def id(self) -> str:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class PublicKeyCredentialRpEntity:
    id: Optional[str]
    name: str
    icon: Optional[str]

@dataclass
class PublicKeyCredentialUserEntity:
    id: BufferSource
    display_name: str
    name: str
    icon: Optional[str]

@dataclass
class PublicKeyCredentialParameters:
    type: PublicKeyCredentialType
    alg: int

class AuthenticatorAttachment(Enum):
    PLATFORM = 0
    CROSS_PLATFORM = 1

@dataclass
class AuthenticatorSelectionCriteria:
    authenticator_attachment: Optional[AuthenticatorAttachment]
    require_resident_key: Optional[bool]
    user_verification: Optional[UserVerificationRequirement]

class AttestationConveyancePreference(Enum):
    NONE = 0
    INDIRECT = 1
    DIRECT = 2

@dataclass
class PublicKeyCredentialCreationOptions:
    rp: PublicKeyCredentialRpEntity
    user: PublicKeyCredentialUserEntity
    challenge: BufferSource
    pub_key_cred_params: List[PublicKeyCredentialParameters]
    timeout: Optional[int]
    exclude_credentials: Optional[List[PublicKeyCredentialDescriptor]]
    authenticator_selection: Optional[AuthenticatorSelectionCriteria]
    attestation: Optional[AttestationConveyancePreference]
    extensions: Optional[AuthenticationExtensionsClientInputs]

@dataclass
class CredentialCreationOptions:
    public_key: Optional[PublicKeyCredentialCreationOptions]
    signal: Optional[AbortSignal]

class CredentialsContainer:
    
    def get(self, options: Optional[CredentialRequestOptions]) -> Optional[Credential]:
        raise NotImplementedError
    def create(self, options: Optional[CredentialCreationOptions]) -> Optional[Credential]:
        raise NotImplementedError
    def store(self, credential: Credential) -> Credential:
        raise NotImplementedError
    def prevent_silent_access(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class UserActivation:
    
    def has_been_active(self) -> bool:
        raise NotImplementedError
    def is_active(self) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Navigator:
    
    def share(self, data: Optional[ShareData]) -> None:
        raise NotImplementedError
    def can_share(self, data: Optional[ShareData]) -> bool:
        raise NotImplementedError
    def app_code_name(self) -> str:
        raise NotImplementedError
    def app_name(self) -> str:
        raise NotImplementedError
    def app_version(self) -> str:
        raise NotImplementedError
    def platform(self) -> str:
        raise NotImplementedError
    def user_agent(self) -> str:
        raise NotImplementedError
    def product(self) -> str:
        raise NotImplementedError
    def taint_enabled(self) -> bool:
        raise NotImplementedError
    def language(self) -> str:
        raise NotImplementedError
    def languages(self) -> List[str]:
        raise NotImplementedError
    def on_line(self) -> bool:
        raise NotImplementedError
    def register_protocol_handler(self, scheme: str, url: str, title: str) -> None:
        raise NotImplementedError
    def register_content_handler(self, mime_type: str, url: str, title: str) -> None:
        raise NotImplementedError
    def storage(self) -> StorageManager:
        raise NotImplementedError
    def permissions(self) -> Permissions:
        raise NotImplementedError
    def mime_types(self) -> MimeTypeArray:
        raise NotImplementedError
    def plugins(self) -> PluginArray:
        raise NotImplementedError
    def do_not_track(self) -> str:
        raise NotImplementedError
    def geolocation(self) -> Geolocation:
        raise NotImplementedError
    def get_battery(self) -> BatteryManager:
        raise NotImplementedError
    def vibrate(self, params: NavigatorVibrateParams) -> bool:
        raise NotImplementedError
    def max_touch_points(self) -> int:
        raise NotImplementedError
    def media_capabilities(self) -> MediaCapabilities:
        raise NotImplementedError
    def connection(self) -> NetworkInformation:
        raise NotImplementedError
    def get_gamepads(self) -> List[Optional[Gamepad]]:
        raise NotImplementedError
    def request_gamepad_service_test(self) -> GamepadServiceTest:
        raise NotImplementedError
    def get_vr_displays(self) -> List[VrDisplay]:
        raise NotImplementedError
    def active_vr_displays(self) -> List[VrDisplay]:
        raise NotImplementedError
    def is_web_vr_content_detected(self) -> bool:
        raise NotImplementedError
    def is_web_vr_content_presenting(self) -> bool:
        raise NotImplementedError
    def request_vr_presentation(self, display: VrDisplay) -> None:
        raise NotImplementedError
    def request_vr_service_test(self) -> VrServiceTest:
        raise NotImplementedError
    def request_midi_access(self, options: Optional[MidiOptions]) -> MidiAccess:
        raise NotImplementedError
    def media_devices(self) -> MediaDevices:
        raise NotImplementedError
    def service_worker(self) -> ServiceWorkerContainer:
        raise NotImplementedError
    def send_beacon(self, url: str, data: Optional[Some[Optional[BlobOrBufferSourceOrFormDataOrReadableStreamOrStringOrUrlSearchParams]]]) -> bool:
        raise NotImplementedError
    def presentation(self) -> Optional[Presentation]:
        raise NotImplementedError
    def request_media_key_system_access(self, key_system: str, supported_configurations: List[MediaKeySystemConfiguration]) -> MediaKeySystemAccess:
        raise NotImplementedError
    def hardware_concurrency(self) -> int:
        raise NotImplementedError
    def credentials(self) -> CredentialsContainer:
        raise NotImplementedError
    def user_activation(self) -> UserActivation:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class External:
    
    def add_search_provider(self, a_description_url: str) -> None:
        raise NotImplementedError
    def is_search_provider_installed(self, a_search_url: str) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class WindowAlertParams_Message:
    value: str


WindowAlertParams = Union[WindowAlertParams_Message]


class Storage:
    
    def length(self) -> int:
        raise NotImplementedError
    def key(self, index: int) -> str:
        raise NotImplementedError
    def get_item(self, key: str) -> str:
        raise NotImplementedError
    def set_item(self, key: str, value: str) -> None:
        raise NotImplementedError
    def remove_item(self, key: str) -> None:
        raise NotImplementedError
    def clear(self) -> None:
        raise NotImplementedError
    def is_session_only(self) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MediaQueryList:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def media(self) -> str:
        raise NotImplementedError
    def matches(self) -> bool:
        raise NotImplementedError
    def add_listener(self, listener: Optional[EventListener]) -> None:
        raise NotImplementedError
    def remove_listener(self, listener: Optional[EventListener]) -> None:
        raise NotImplementedError
    def onchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onchange(self, onchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class OrientationLockType(Enum):
    ANY = 0
    NATURAL = 1
    LANDSCAPE = 2
    PORTRAIT = 3
    PORTRAIT_PRIMARY = 4
    PORTRAIT_SECONDARY = 5
    LANDSCAPE_PRIMARY = 6
    LANDSCAPE_SECONDARY = 7

class OrientationType(Enum):
    PORTRAIT_PRIMARY = 0
    PORTRAIT_SECONDARY = 1
    LANDSCAPE_PRIMARY = 2
    LANDSCAPE_SECONDARY = 3

class ScreenOrientation:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def lock(self, orientation: OrientationLockType) -> None:
        raise NotImplementedError
    def unlock(self) -> None:
        raise NotImplementedError
    def type(self) -> OrientationType:
        raise NotImplementedError
    def angle(self) -> int:
        raise NotImplementedError
    def onchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onchange(self, onchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ScreenColorGamut(Enum):
    SRGB = 0
    P3 = 1
    REC2020 = 2

class ScreenLuminance:
    
    def min(self) -> float:
        raise NotImplementedError
    def max(self) -> float:
        raise NotImplementedError
    def max_average(self) -> float:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Screen:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def avail_width(self) -> int:
        raise NotImplementedError
    def avail_height(self) -> int:
        raise NotImplementedError
    def width(self) -> int:
        raise NotImplementedError
    def height(self) -> int:
        raise NotImplementedError
    def color_depth(self) -> int:
        raise NotImplementedError
    def pixel_depth(self) -> int:
        raise NotImplementedError
    def top(self) -> int:
        raise NotImplementedError
    def left(self) -> int:
        raise NotImplementedError
    def avail_top(self) -> int:
        raise NotImplementedError
    def avail_left(self) -> int:
        raise NotImplementedError
    def orientation(self) -> ScreenOrientation:
        raise NotImplementedError
    def color_gamut(self) -> ScreenColorGamut:
        raise NotImplementedError
    def luminance(self) -> Optional[ScreenLuminance]:
        raise NotImplementedError
    def onchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onchange(self, onchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class VisualViewport:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def offset_left(self) -> float:
        raise NotImplementedError
    def offset_top(self) -> float:
        raise NotImplementedError
    def page_left(self) -> float:
        raise NotImplementedError
    def page_top(self) -> float:
        raise NotImplementedError
    def width(self) -> float:
        raise NotImplementedError
    def height(self) -> float:
        raise NotImplementedError
    def scale(self) -> float:
        raise NotImplementedError
    def onresize(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onresize(self, onresize: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onscroll(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onscroll(self, onscroll: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onscrollend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onscrollend(self, onscrollend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class WindowScrollParams_XY:
    value: Tuple[float, float]


@dataclass
class WindowScrollParams_Options:
    value: Optional[ScrollToOptions]


WindowScrollParams = Union[WindowScrollParams_XY, WindowScrollParams_Options]



@dataclass
class WindowScrollToParams_XY:
    value: Tuple[float, float]


@dataclass
class WindowScrollToParams_Options:
    value: Optional[ScrollToOptions]


WindowScrollToParams = Union[WindowScrollToParams_XY, WindowScrollToParams_Options]



@dataclass
class WindowScrollByParams_XY:
    value: Tuple[float, float]


@dataclass
class WindowScrollByParams_Options:
    value: Optional[ScrollToOptions]


WindowScrollByParams = Union[WindowScrollByParams_XY, WindowScrollByParams_Options]


@dataclass
class RegisterRequest:
    version: Optional[str]
    challenge: Optional[str]

class Transport(Enum):
    BT = 0
    BLE = 1
    NFC = 2
    USB = 3

@dataclass
class RegisteredKey:
    version: Optional[str]
    key_handle: Optional[str]
    transports: Optional[Some[Optional[List[Transport]]]]
    app_id: Optional[str]

class U2f:
    
    @classmethod
    def ok(cls) -> int:
        raise NotImplementedError
    @classmethod
    def other_error(cls) -> int:
        raise NotImplementedError
    @classmethod
    def bad_request(cls) -> int:
        raise NotImplementedError
    @classmethod
    def configuration_unsupported(cls) -> int:
        raise NotImplementedError
    @classmethod
    def device_ineligible(cls) -> int:
        raise NotImplementedError
    @classmethod
    def timeout(cls) -> int:
        raise NotImplementedError
    def register(self, app_id: str, register_requests: List[RegisterRequest], registered_keys: List[RegisteredKey], callback: U2fRegisterCallback, opt_timeout_seconds: Optional[int]) -> None:
        raise NotImplementedError
    def sign(self, app_id: str, challenge: str, registered_keys: List[RegisteredKey], callback: U2fSignCallback, opt_timeout_seconds: Optional[int]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SpeechSynthesis:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def pending(self) -> bool:
        raise NotImplementedError
    def speaking(self) -> bool:
        raise NotImplementedError
    def paused(self) -> bool:
        raise NotImplementedError
    def speak(self, utterance: SpeechSynthesisUtterance) -> None:
        raise NotImplementedError
    def cancel(self) -> None:
        raise NotImplementedError
    def pause(self) -> None:
        raise NotImplementedError
    def resume(self) -> None:
        raise NotImplementedError
    def get_voices(self) -> List[SpeechSynthesisVoice]:
        raise NotImplementedError
    def onvoiceschanged(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onvoiceschanged(self, onvoiceschanged: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def force_end(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class RequestCredentials(Enum):
    OMIT = 0
    SAME_ORIGIN = 1
    INCLUDE = 2

@dataclass
class WorkletOptions:
    credentials: Optional[RequestCredentials]

class Worklet:
    
    def add_module(self, module_url: str, options: Optional[WorkletOptions]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class IdleRequestOptions:
    timeout: Optional[int]


@dataclass
class ObjectOrString_Object:
    value: Object


@dataclass
class ObjectOrString_String:
    value: str


ObjectOrString = Union[ObjectOrString_Object, ObjectOrString_String]


class CryptoKey:
    
    def type(self) -> str:
        raise NotImplementedError
    def extractable(self) -> bool:
        raise NotImplementedError
    def algorithm(self) -> Object:
        raise NotImplementedError
    def usages(self) -> List[str]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SubtleCrypto:
    
    def encrypt(self, algorithm: ObjectOrString, key: CryptoKey, data: BufferSource) -> Any:
        raise NotImplementedError
    def decrypt(self, algorithm: ObjectOrString, key: CryptoKey, data: BufferSource) -> Any:
        raise NotImplementedError
    def sign(self, algorithm: ObjectOrString, key: CryptoKey, data: BufferSource) -> Any:
        raise NotImplementedError
    def verify(self, algorithm: ObjectOrString, key: CryptoKey, signature: BufferSource, data: BufferSource) -> Any:
        raise NotImplementedError
    def digest(self, algorithm: ObjectOrString, data: BufferSource) -> Any:
        raise NotImplementedError
    def generate_key(self, algorithm: ObjectOrString, extractable: bool, key_usages: List[str]) -> Any:
        raise NotImplementedError
    def derive_key(self, algorithm: ObjectOrString, base_key: CryptoKey, derived_key_type: ObjectOrString, extractable: bool, key_usages: List[str]) -> Any:
        raise NotImplementedError
    def derive_bits(self, algorithm: ObjectOrString, base_key: CryptoKey, length: int) -> Any:
        raise NotImplementedError
    def import_key(self, format: str, key_data: Object, algorithm: ObjectOrString, extractable: bool, key_usages: List[str]) -> Any:
        raise NotImplementedError
    def export_key(self, format: str, key: CryptoKey) -> Any:
        raise NotImplementedError
    def wrap_key(self, format: str, key: CryptoKey, wrapping_key: CryptoKey, wrap_algorithm: ObjectOrString) -> Any:
        raise NotImplementedError
    def unwrap_key(self, format: str, wrapped_key: BufferSource, unwrapping_key: CryptoKey, unwrap_algorithm: ObjectOrString, unwrapped_key_algorithm: ObjectOrString, extractable: bool, key_usages: List[str]) -> Any:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Crypto:
    
    def subtle(self) -> SubtleCrypto:
        raise NotImplementedError
    def get_random_values(self, array: ArrayBufferView) -> ArrayBufferView:
        raise NotImplementedError
    def random_uuid(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class WindowSetTimeoutParams_HandlerTimeoutArguments:
    value: Tuple[Function, Optional[int], List[Any]]


@dataclass
class WindowSetTimeoutParams_HandlerTimeoutUnused:
    value: Tuple[str, Optional[int], List[Any]]


WindowSetTimeoutParams = Union[WindowSetTimeoutParams_HandlerTimeoutArguments, WindowSetTimeoutParams_HandlerTimeoutUnused]



@dataclass
class WindowSetIntervalParams_HandlerTimeoutArguments:
    value: Tuple[Function, Optional[int], List[Any]]


@dataclass
class WindowSetIntervalParams_HandlerTimeoutUnused:
    value: Tuple[str, Optional[int], List[Any]]


WindowSetIntervalParams = Union[WindowSetIntervalParams_HandlerTimeoutArguments, WindowSetIntervalParams_HandlerTimeoutUnused]


class SvgImageElement:
    
    def as_svg_graphics_element(self) -> SvgGraphicsElement:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def preserve_aspect_ratio(self) -> SvgAnimatedPreserveAspectRatio:
        raise NotImplementedError
    def href(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class HtmlImageElementOrSvgImageElement_HtmlImageElement:
    value: HtmlImageElement


@dataclass
class HtmlImageElementOrSvgImageElement_SvgImageElement:
    value: SvgImageElement


HtmlImageElementOrSvgImageElement = Union[HtmlImageElementOrSvgImageElement_HtmlImageElement, HtmlImageElementOrSvgImageElement_SvgImageElement]


class MediaError:
    
    @classmethod
    def media_err_aborted(cls) -> int:
        raise NotImplementedError
    @classmethod
    def media_err_network(cls) -> int:
        raise NotImplementedError
    @classmethod
    def media_err_decode(cls) -> int:
        raise NotImplementedError
    @classmethod
    def media_err_src_not_supported(cls) -> int:
        raise NotImplementedError
    def code(self) -> int:
        raise NotImplementedError
    def message(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class TimeRanges:
    
    def length(self) -> int:
        raise NotImplementedError
    def start(self, index: int) -> float:
        raise NotImplementedError
    def end(self, index: int) -> float:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SourceBufferAppendMode(Enum):
    SEGMENTS = 0
    SEQUENCE = 1

class VideoTrack:
    
    def id(self) -> str:
        raise NotImplementedError
    def kind(self) -> str:
        raise NotImplementedError
    def label(self) -> str:
        raise NotImplementedError
    def language(self) -> str:
        raise NotImplementedError
    def selected(self) -> bool:
        raise NotImplementedError
    def set_selected(self, selected: bool) -> None:
        raise NotImplementedError
    def source_buffer(self) -> Optional[Any]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class VideoTrackList:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def get_track_by_id(self, id: str) -> Optional[VideoTrack]:
        raise NotImplementedError
    def selected_index(self) -> int:
        raise NotImplementedError
    def onchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onchange(self, onchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onaddtrack(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onaddtrack(self, onaddtrack: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onremovetrack(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onremovetrack(self, onremovetrack: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class TextTrackKind(Enum):
    SUBTITLES = 0
    CAPTIONS = 1
    DESCRIPTIONS = 2
    CHAPTERS = 3
    METADATA = 4

class TextTrackMode(Enum):
    DISABLED = 0
    HIDDEN = 1
    SHOWING = 2

class TextTrackCue:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def track(self) -> Optional[Any]:
        raise NotImplementedError
    def id(self) -> str:
        raise NotImplementedError
    def set_id(self, id: str) -> None:
        raise NotImplementedError
    def start_time(self) -> float:
        raise NotImplementedError
    def set_start_time(self, start_time: float) -> None:
        raise NotImplementedError
    def end_time(self) -> float:
        raise NotImplementedError
    def set_end_time(self, end_time: float) -> None:
        raise NotImplementedError
    def pause_on_exit(self) -> bool:
        raise NotImplementedError
    def set_pause_on_exit(self, pause_on_exit: bool) -> None:
        raise NotImplementedError
    def onenter(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onenter(self, onenter: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onexit(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onexit(self, onexit: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ScrollSetting(Enum):
    DEFAULT = 0
    UP = 1

class VttRegion:
    
    def id(self) -> str:
        raise NotImplementedError
    def set_id(self, id: str) -> None:
        raise NotImplementedError
    def width(self) -> float:
        raise NotImplementedError
    def set_width(self, width: float) -> None:
        raise NotImplementedError
    def lines(self) -> int:
        raise NotImplementedError
    def set_lines(self, lines: int) -> None:
        raise NotImplementedError
    def region_anchor_x(self) -> float:
        raise NotImplementedError
    def set_region_anchor_x(self, region_anchor_x: float) -> None:
        raise NotImplementedError
    def region_anchor_y(self) -> float:
        raise NotImplementedError
    def set_region_anchor_y(self, region_anchor_y: float) -> None:
        raise NotImplementedError
    def viewport_anchor_x(self) -> float:
        raise NotImplementedError
    def set_viewport_anchor_x(self, viewport_anchor_x: float) -> None:
        raise NotImplementedError
    def viewport_anchor_y(self) -> float:
        raise NotImplementedError
    def set_viewport_anchor_y(self, viewport_anchor_y: float) -> None:
        raise NotImplementedError
    def scroll(self) -> ScrollSetting:
        raise NotImplementedError
    def set_scroll(self, scroll: ScrollSetting) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DirectionSetting(Enum):
    DEFAULT = 0
    RL = 1
    LR = 2

class AutoKeyword(Enum):
    AUTO = 0


@dataclass
class AutoKeywordOrF64_AutoKeyword:
    value: AutoKeyword


@dataclass
class AutoKeywordOrF64_F64:
    value: float


AutoKeywordOrF64 = Union[AutoKeywordOrF64_AutoKeyword, AutoKeywordOrF64_F64]


class LineAlignSetting(Enum):
    START = 0
    CENTER = 1
    END = 2

class PositionAlignSetting(Enum):
    LINE_LEFT = 0
    CENTER = 1
    LINE_RIGHT = 2
    AUTO = 3

class AlignSetting(Enum):
    START = 0
    CENTER = 1
    END = 2
    LEFT = 3
    RIGHT = 4

class VttCue:
    
    def as_text_track_cue(self) -> TextTrackCue:
        raise NotImplementedError
    def region(self) -> Optional[VttRegion]:
        raise NotImplementedError
    def set_region(self, region: Optional[VttRegion]) -> None:
        raise NotImplementedError
    def vertical(self) -> DirectionSetting:
        raise NotImplementedError
    def set_vertical(self, vertical: DirectionSetting) -> None:
        raise NotImplementedError
    def snap_to_lines(self) -> bool:
        raise NotImplementedError
    def set_snap_to_lines(self, snap_to_lines: bool) -> None:
        raise NotImplementedError
    def line(self) -> AutoKeywordOrF64:
        raise NotImplementedError
    def set_line(self, line: AutoKeywordOrF64) -> None:
        raise NotImplementedError
    def line_align(self) -> LineAlignSetting:
        raise NotImplementedError
    def set_line_align(self, line_align: LineAlignSetting) -> None:
        raise NotImplementedError
    def position(self) -> AutoKeywordOrF64:
        raise NotImplementedError
    def set_position(self, position: AutoKeywordOrF64) -> None:
        raise NotImplementedError
    def position_align(self) -> PositionAlignSetting:
        raise NotImplementedError
    def set_position_align(self, position_align: PositionAlignSetting) -> None:
        raise NotImplementedError
    def size(self) -> float:
        raise NotImplementedError
    def set_size(self, size: float) -> None:
        raise NotImplementedError
    def align(self) -> AlignSetting:
        raise NotImplementedError
    def set_align(self, align: AlignSetting) -> None:
        raise NotImplementedError
    def text(self) -> str:
        raise NotImplementedError
    def set_text(self, text: str) -> None:
        raise NotImplementedError
    def get_cue_as_html(self) -> DocumentFragment:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class TextTrackCueList:
    
    def length(self) -> int:
        raise NotImplementedError
    def get_cue_by_id(self, id: str) -> Optional[VttCue]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class TextTrack:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def kind(self) -> TextTrackKind:
        raise NotImplementedError
    def label(self) -> str:
        raise NotImplementedError
    def language(self) -> str:
        raise NotImplementedError
    def id(self) -> str:
        raise NotImplementedError
    def in_band_metadata_track_dispatch_type(self) -> str:
        raise NotImplementedError
    def mode(self) -> TextTrackMode:
        raise NotImplementedError
    def set_mode(self, mode: TextTrackMode) -> None:
        raise NotImplementedError
    def cues(self) -> Optional[TextTrackCueList]:
        raise NotImplementedError
    def active_cues(self) -> Optional[TextTrackCueList]:
        raise NotImplementedError
    def add_cue(self, cue: VttCue) -> None:
        raise NotImplementedError
    def remove_cue(self, cue: VttCue) -> None:
        raise NotImplementedError
    def oncuechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oncuechange(self, oncuechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def source_buffer(self) -> Optional[Any]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class TextTrackList:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def get_track_by_id(self, id: str) -> Optional[TextTrack]:
        raise NotImplementedError
    def onchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onchange(self, onchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onaddtrack(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onaddtrack(self, onaddtrack: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onremovetrack(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onremovetrack(self, onremovetrack: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class SourceBufferAppendBufferParams_Data:
    value: ArrayBuffer


SourceBufferAppendBufferParams = Union[SourceBufferAppendBufferParams_Data]



@dataclass
class SourceBufferAppendBufferAsyncParams_Data:
    value: ArrayBuffer


SourceBufferAppendBufferAsyncParams = Union[SourceBufferAppendBufferAsyncParams_Data]


class SourceBuffer:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def mode(self) -> SourceBufferAppendMode:
        raise NotImplementedError
    def set_mode(self, mode: SourceBufferAppendMode) -> None:
        raise NotImplementedError
    def updating(self) -> bool:
        raise NotImplementedError
    def buffered(self) -> TimeRanges:
        raise NotImplementedError
    def timestamp_offset(self) -> float:
        raise NotImplementedError
    def set_timestamp_offset(self, timestamp_offset: float) -> None:
        raise NotImplementedError
    def audio_tracks(self) -> Any:
        raise NotImplementedError
    def video_tracks(self) -> VideoTrackList:
        raise NotImplementedError
    def text_tracks(self) -> TextTrackList:
        raise NotImplementedError
    def append_window_start(self) -> float:
        raise NotImplementedError
    def set_append_window_start(self, append_window_start: float) -> None:
        raise NotImplementedError
    def append_window_end(self) -> float:
        raise NotImplementedError
    def set_append_window_end(self, append_window_end: float) -> None:
        raise NotImplementedError
    def onupdatestart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onupdatestart(self, onupdatestart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onupdate(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onupdate(self, onupdate: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onupdateend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onupdateend(self, onupdateend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onabort(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onabort(self, onabort: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def append_buffer(self, params: SourceBufferAppendBufferParams) -> None:
        raise NotImplementedError
    def append_buffer_async(self, params: SourceBufferAppendBufferAsyncParams) -> None:
        raise NotImplementedError
    def abort(self) -> None:
        raise NotImplementedError
    def remove(self, start: float, end: float) -> None:
        raise NotImplementedError
    def remove_async(self, start: float, end: float) -> None:
        raise NotImplementedError
    def change_type(self, type: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class AudioTrack:
    
    def id(self) -> str:
        raise NotImplementedError
    def kind(self) -> str:
        raise NotImplementedError
    def label(self) -> str:
        raise NotImplementedError
    def language(self) -> str:
        raise NotImplementedError
    def enabled(self) -> bool:
        raise NotImplementedError
    def set_enabled(self, enabled: bool) -> None:
        raise NotImplementedError
    def source_buffer(self) -> Optional[SourceBuffer]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class AudioTrackList:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def get_track_by_id(self, id: str) -> Optional[AudioTrack]:
        raise NotImplementedError
    def onchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onchange(self, onchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onaddtrack(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onaddtrack(self, onaddtrack: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onremovetrack(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onremovetrack(self, onremovetrack: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlMediaElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def error(self) -> Optional[MediaError]:
        raise NotImplementedError
    def src(self) -> str:
        raise NotImplementedError
    def set_src(self, src: str) -> None:
        raise NotImplementedError
    def current_src(self) -> str:
        raise NotImplementedError
    def src_object(self) -> Optional[MediaStream]:
        raise NotImplementedError
    def set_src_object(self, src_object: Optional[MediaStream]) -> None:
        raise NotImplementedError
    def cross_origin(self) -> str:
        raise NotImplementedError
    def set_cross_origin(self, cross_origin: str) -> None:
        raise NotImplementedError
    @classmethod
    def network_empty(cls) -> int:
        raise NotImplementedError
    @classmethod
    def network_idle(cls) -> int:
        raise NotImplementedError
    @classmethod
    def network_loading(cls) -> int:
        raise NotImplementedError
    @classmethod
    def network_no_source(cls) -> int:
        raise NotImplementedError
    def network_state(self) -> int:
        raise NotImplementedError
    def preload(self) -> str:
        raise NotImplementedError
    def set_preload(self, preload: str) -> None:
        raise NotImplementedError
    def buffered(self) -> TimeRanges:
        raise NotImplementedError
    def load(self) -> None:
        raise NotImplementedError
    def can_play_type(self, type: str) -> str:
        raise NotImplementedError
    @classmethod
    def have_nothing(cls) -> int:
        raise NotImplementedError
    @classmethod
    def have_metadata(cls) -> int:
        raise NotImplementedError
    @classmethod
    def have_current_data(cls) -> int:
        raise NotImplementedError
    @classmethod
    def have_future_data(cls) -> int:
        raise NotImplementedError
    @classmethod
    def have_enough_data(cls) -> int:
        raise NotImplementedError
    def ready_state(self) -> int:
        raise NotImplementedError
    def seeking(self) -> bool:
        raise NotImplementedError
    def current_time(self) -> float:
        raise NotImplementedError
    def set_current_time(self, current_time: float) -> None:
        raise NotImplementedError
    def fast_seek(self, time: float) -> None:
        raise NotImplementedError
    def duration(self) -> float:
        raise NotImplementedError
    def is_encrypted(self) -> bool:
        raise NotImplementedError
    def paused(self) -> bool:
        raise NotImplementedError
    def default_playback_rate(self) -> float:
        raise NotImplementedError
    def set_default_playback_rate(self, default_playback_rate: float) -> None:
        raise NotImplementedError
    def playback_rate(self) -> float:
        raise NotImplementedError
    def set_playback_rate(self, playback_rate: float) -> None:
        raise NotImplementedError
    def played(self) -> TimeRanges:
        raise NotImplementedError
    def seekable(self) -> TimeRanges:
        raise NotImplementedError
    def ended(self) -> bool:
        raise NotImplementedError
    def autoplay(self) -> bool:
        raise NotImplementedError
    def set_autoplay(self, autoplay: bool) -> None:
        raise NotImplementedError
    def loop(self) -> bool:
        raise NotImplementedError
    def set_loop(self, loop: bool) -> None:
        raise NotImplementedError
    def play(self) -> None:
        raise NotImplementedError
    def pause(self) -> None:
        raise NotImplementedError
    def controls(self) -> bool:
        raise NotImplementedError
    def set_controls(self, controls: bool) -> None:
        raise NotImplementedError
    def volume(self) -> float:
        raise NotImplementedError
    def set_volume(self, volume: float) -> None:
        raise NotImplementedError
    def muted(self) -> bool:
        raise NotImplementedError
    def set_muted(self, muted: bool) -> None:
        raise NotImplementedError
    def default_muted(self) -> bool:
        raise NotImplementedError
    def set_default_muted(self, default_muted: bool) -> None:
        raise NotImplementedError
    def audio_tracks(self) -> AudioTrackList:
        raise NotImplementedError
    def video_tracks(self) -> VideoTrackList:
        raise NotImplementedError
    def text_tracks(self) -> Optional[TextTrackList]:
        raise NotImplementedError
    def add_text_track(self, kind: TextTrackKind, label: Optional[str], language: Optional[str]) -> TextTrack:
        raise NotImplementedError
    def media_keys(self) -> Optional[MediaKeys]:
        raise NotImplementedError
    def set_media_keys(self, media_keys: Optional[MediaKeys]) -> None:
        raise NotImplementedError
    def onencrypted(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onencrypted(self, onencrypted: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwaitingforkey(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwaitingforkey(self, onwaitingforkey: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def seek_to_next_frame(self) -> None:
        raise NotImplementedError
    def set_visible(self, a_visible: bool) -> None:
        raise NotImplementedError
    def has_suspend_taint(self) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class VideoPlaybackQuality:
    
    def creation_time(self) -> float:
        raise NotImplementedError
    def total_video_frames(self) -> int:
        raise NotImplementedError
    def dropped_video_frames(self) -> int:
        raise NotImplementedError
    def corrupted_video_frames(self) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlVideoElement:
    
    def as_html_media_element(self) -> HtmlMediaElement:
        raise NotImplementedError
    def width(self) -> int:
        raise NotImplementedError
    def set_width(self, width: int) -> None:
        raise NotImplementedError
    def height(self) -> int:
        raise NotImplementedError
    def set_height(self, height: int) -> None:
        raise NotImplementedError
    def video_width(self) -> int:
        raise NotImplementedError
    def video_height(self) -> int:
        raise NotImplementedError
    def poster(self) -> str:
        raise NotImplementedError
    def set_poster(self, poster: str) -> None:
        raise NotImplementedError
    def get_video_playback_quality(self) -> VideoPlaybackQuality:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class HtmlCanvasElementOrHtmlOrSvgImageElementOrHtmlVideoElementOrImageBitmapOrOffscreenCanvasOrVideoFrame_HtmlCanvasElement:
    value: HtmlCanvasElement


@dataclass
class HtmlCanvasElementOrHtmlOrSvgImageElementOrHtmlVideoElementOrImageBitmapOrOffscreenCanvasOrVideoFrame_HtmlOrSvgImageElement:
    value: HtmlImageElementOrSvgImageElement


@dataclass
class HtmlCanvasElementOrHtmlOrSvgImageElementOrHtmlVideoElementOrImageBitmapOrOffscreenCanvasOrVideoFrame_HtmlVideoElement:
    value: HtmlVideoElement


@dataclass
class HtmlCanvasElementOrHtmlOrSvgImageElementOrHtmlVideoElementOrImageBitmapOrOffscreenCanvasOrVideoFrame_ImageBitmap:
    value: ImageBitmap


@dataclass
class HtmlCanvasElementOrHtmlOrSvgImageElementOrHtmlVideoElementOrImageBitmapOrOffscreenCanvasOrVideoFrame_OffscreenCanvas:
    value: OffscreenCanvas


@dataclass
class HtmlCanvasElementOrHtmlOrSvgImageElementOrHtmlVideoElementOrImageBitmapOrOffscreenCanvasOrVideoFrame_VideoFrame:
    value: VideoFrame


HtmlCanvasElementOrHtmlOrSvgImageElementOrHtmlVideoElementOrImageBitmapOrOffscreenCanvasOrVideoFrame = Union[HtmlCanvasElementOrHtmlOrSvgImageElementOrHtmlVideoElementOrImageBitmapOrOffscreenCanvasOrVideoFrame_HtmlCanvasElement, HtmlCanvasElementOrHtmlOrSvgImageElementOrHtmlVideoElementOrImageBitmapOrOffscreenCanvasOrVideoFrame_HtmlOrSvgImageElement, HtmlCanvasElementOrHtmlOrSvgImageElementOrHtmlVideoElementOrImageBitmapOrOffscreenCanvasOrVideoFrame_HtmlVideoElement, HtmlCanvasElementOrHtmlOrSvgImageElementOrHtmlVideoElementOrImageBitmapOrOffscreenCanvasOrVideoFrame_ImageBitmap, HtmlCanvasElementOrHtmlOrSvgImageElementOrHtmlVideoElementOrImageBitmapOrOffscreenCanvasOrVideoFrame_OffscreenCanvas, HtmlCanvasElementOrHtmlOrSvgImageElementOrHtmlVideoElementOrImageBitmapOrOffscreenCanvasOrVideoFrame_VideoFrame]


class ImageData:
    
    def width(self) -> int:
        raise NotImplementedError
    def height(self) -> int:
        raise NotImplementedError
    def data(self) -> Uint8ClampedArray:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class BlobOrCanvasImageSourceOrImageData_Blob:
    value: Blob


@dataclass
class BlobOrCanvasImageSourceOrImageData_CanvasImageSource:
    value: HtmlCanvasElementOrHtmlOrSvgImageElementOrHtmlVideoElementOrImageBitmapOrOffscreenCanvasOrVideoFrame


@dataclass
class BlobOrCanvasImageSourceOrImageData_ImageData:
    value: ImageData


BlobOrCanvasImageSourceOrImageData = Union[BlobOrCanvasImageSourceOrImageData_Blob, BlobOrCanvasImageSourceOrImageData_CanvasImageSource, BlobOrCanvasImageSourceOrImageData_ImageData]


class ImageOrientation(Enum):
    FROM_IMAGE = 0
    FLIP_Y = 1

class PremultiplyAlpha(Enum):
    NONE = 0
    PREMULTIPLY = 1
    DEFAULT = 2

class ColorSpaceConversion(Enum):
    NONE = 0
    DEFAULT = 1

class ResizeQuality(Enum):
    PIXELATED = 0
    LOW = 1
    MEDIUM = 2
    HIGH = 3

@dataclass
class ImageBitmapOptions:
    image_orientation: Optional[ImageOrientation]
    premultiply_alpha: Optional[PremultiplyAlpha]
    color_space_conversion: Optional[ColorSpaceConversion]
    resize_width: Optional[int]
    resize_height: Optional[int]
    resize_quality: Optional[ResizeQuality]


@dataclass
class WindowCreateImageBitmapParams_AImageAOptions:
    value: Tuple[BlobOrCanvasImageSourceOrImageData, Optional[ImageBitmapOptions]]


@dataclass
class WindowCreateImageBitmapParams_AImageASxASyASwAShAOptions:
    value: Tuple[BlobOrCanvasImageSourceOrImageData, int, int, int, int, Optional[ImageBitmapOptions]]


WindowCreateImageBitmapParams = Union[WindowCreateImageBitmapParams_AImageAOptions, WindowCreateImageBitmapParams_AImageASxASyASwAShAOptions]


@dataclass
class DefineElementOptions:
    superclass: Optional[str]
    observed_attributes: List[str]
    form_associated: bool

@dataclass
class AttributeChanged:
    name: str
    old_value: Optional[str]
    new_value: Optional[str]
    namespace_url: Optional[str]

class CreatedElement:
    
    def connected_callback_subscribe(self) -> poll.Pollable:
        raise NotImplementedError
    def disconnected_callback_subscribe(self) -> poll.Pollable:
        raise NotImplementedError
    def adopted_callback_subscribe(self) -> poll.Pollable:
        raise NotImplementedError
    def attribute_changed_callback_subscribe(self) -> poll.Pollable:
        raise NotImplementedError
    def attribute_changed_callback_get(self) -> Optional[AttributeChanged]:
        raise NotImplementedError
    def get_element(self) -> HtmlElement:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DefineElementResult:
    """
    record define-element-result {
    // constructor: option<??>,
    connected-callback: element-connected-callback,
    // disconnected-callback: option<??>,
    // adopted-callback: option<??>,
    // attribute-changed-callback: option<??>,
    }
    resource element-connected-callback {
    subscribe: func() -> pollable;
    get: func() -> option<html-element>;
    }
    """
    
    def constructor_subscribe(self) -> poll.Pollable:
        raise NotImplementedError
    def constructor_get(self) -> Optional[CreatedElement]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ConsoleLogLevel(Enum):
    ALL = 0
    DEBUG = 1
    LOG = 2
    INFO = 3
    CLEAR = 4
    TRACE = 5
    TIME_LOG = 6
    TIME_END = 7
    TIME = 8
    GROUP = 9
    GROUP_END = 10
    PROFILE = 11
    PROFILE_END = 12
    DIR = 13
    DIRXML = 14
    WARN = 15
    ERROR = 16
    OFF = 17

@dataclass
class ConsoleInstanceOptions:
    dump: Optional[ConsoleInstanceDumpCallback]
    prefix: Optional[str]
    inner_id: Optional[str]
    console_id: Optional[str]
    max_log_level: Optional[ConsoleLogLevel]
    max_log_level_pref: Optional[str]

class ConsoleLevel(Enum):
    LOG = 0
    WARNING = 1
    ERROR = 2

class ConsoleInstance:
    
    def assert_(self, condition: Optional[bool], data: List[Any]) -> None:
        raise NotImplementedError
    def clear(self) -> None:
        raise NotImplementedError
    def count(self, label: Optional[str]) -> None:
        raise NotImplementedError
    def count_reset(self, label: Optional[str]) -> None:
        raise NotImplementedError
    def debug(self, data: List[Any]) -> None:
        raise NotImplementedError
    def error(self, data: List[Any]) -> None:
        raise NotImplementedError
    def info(self, data: List[Any]) -> None:
        raise NotImplementedError
    def log(self, data: List[Any]) -> None:
        raise NotImplementedError
    def table(self, data: List[Any]) -> None:
        raise NotImplementedError
    def trace(self, data: List[Any]) -> None:
        raise NotImplementedError
    def warn(self, data: List[Any]) -> None:
        raise NotImplementedError
    def dir(self, data: List[Any]) -> None:
        raise NotImplementedError
    def dirxml(self, data: List[Any]) -> None:
        raise NotImplementedError
    def group(self, data: List[Any]) -> None:
        raise NotImplementedError
    def group_collapsed(self, data: List[Any]) -> None:
        raise NotImplementedError
    def group_end(self) -> None:
        raise NotImplementedError
    def time(self, label: Optional[str]) -> None:
        raise NotImplementedError
    def time_log(self, label: Optional[str], data: List[Any]) -> None:
        raise NotImplementedError
    def time_end(self, label: Optional[str]) -> None:
        raise NotImplementedError
    def exception(self, data: List[Any]) -> None:
        raise NotImplementedError
    def time_stamp(self, data: Any) -> None:
        raise NotImplementedError
    def profile(self, data: List[Any]) -> None:
        raise NotImplementedError
    def profile_end(self, data: List[Any]) -> None:
        raise NotImplementedError
    def report_for_service_worker_scope(self, scope: str, message: str, filename: str, line_number: int, column_number: int, level: ConsoleLevel) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Console:
    
    def print(self, s: str) -> None:
        raise NotImplementedError
    def assert_(self, condition: Optional[bool], data: List[Any]) -> None:
        raise NotImplementedError
    def clear(self) -> None:
        raise NotImplementedError
    def count(self, label: Optional[str]) -> None:
        raise NotImplementedError
    def count_reset(self, label: Optional[str]) -> None:
        raise NotImplementedError
    def debug(self, data: List[Any]) -> None:
        raise NotImplementedError
    def error(self, data: List[Any]) -> None:
        raise NotImplementedError
    def info(self, data: List[Any]) -> None:
        raise NotImplementedError
    def log(self, data: List[Any]) -> None:
        raise NotImplementedError
    def table(self, data: List[Any]) -> None:
        raise NotImplementedError
    def trace(self, data: List[Any]) -> None:
        raise NotImplementedError
    def warn(self, data: List[Any]) -> None:
        raise NotImplementedError
    def dir(self, data: List[Any]) -> None:
        raise NotImplementedError
    def dirxml(self, data: List[Any]) -> None:
        raise NotImplementedError
    def group(self, data: List[Any]) -> None:
        raise NotImplementedError
    def group_collapsed(self, data: List[Any]) -> None:
        raise NotImplementedError
    def group_end(self) -> None:
        raise NotImplementedError
    def time(self, label: Optional[str]) -> None:
        raise NotImplementedError
    def time_log(self, label: Optional[str], data: List[Any]) -> None:
        raise NotImplementedError
    def time_end(self, label: Optional[str]) -> None:
        raise NotImplementedError
    def exception(self, data: List[Any]) -> None:
        raise NotImplementedError
    def time_stamp(self, data: Any) -> None:
        raise NotImplementedError
    def profile(self, data: List[Any]) -> None:
        raise NotImplementedError
    def profile_end(self, data: List[Any]) -> None:
        raise NotImplementedError
    def create_instance(self, options: Optional[ConsoleInstanceOptions]) -> ConsoleInstance:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Window:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def window(self) -> Self:
        raise NotImplementedError
    def self(self) -> Self:
        raise NotImplementedError
    def document(self) -> Optional[Document]:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def set_name(self, name: str) -> None:
        raise NotImplementedError
    def location(self) -> Location:
        raise NotImplementedError
    def history(self) -> History:
        raise NotImplementedError
    def custom_elements(self) -> CustomElementRegistry:
        raise NotImplementedError
    def locationbar(self) -> BarProp:
        raise NotImplementedError
    def menubar(self) -> BarProp:
        raise NotImplementedError
    def personalbar(self) -> BarProp:
        raise NotImplementedError
    def scrollbars(self) -> BarProp:
        raise NotImplementedError
    def statusbar(self) -> BarProp:
        raise NotImplementedError
    def toolbar(self) -> BarProp:
        raise NotImplementedError
    def status(self) -> str:
        raise NotImplementedError
    def set_status(self, status: str) -> None:
        raise NotImplementedError
    def close(self) -> None:
        raise NotImplementedError
    def closed(self) -> bool:
        raise NotImplementedError
    def stop(self) -> None:
        raise NotImplementedError
    def focus(self) -> None:
        raise NotImplementedError
    def blur(self) -> None:
        raise NotImplementedError
    def event(self) -> Any:
        raise NotImplementedError
    def frames(self) -> WindowProxy:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def top(self) -> Optional[WindowProxy]:
        raise NotImplementedError
    def opener(self) -> Any:
        raise NotImplementedError
    def set_opener(self, opener: Any) -> None:
        raise NotImplementedError
    def parent(self) -> Optional[WindowProxy]:
        raise NotImplementedError
    def frame_element(self) -> Optional[Element]:
        raise NotImplementedError
    def open(self, url: Optional[str], target: Optional[str], features: Optional[str]) -> Optional[WindowProxy]:
        raise NotImplementedError
    def navigator(self) -> Navigator:
        raise NotImplementedError
    def external(self) -> External:
        raise NotImplementedError
    def application_cache(self) -> ApplicationCache:
        raise NotImplementedError
    def alert(self, params: Optional[WindowAlertParams]) -> None:
        raise NotImplementedError
    def confirm(self, message: Optional[str]) -> bool:
        raise NotImplementedError
    def prompt(self, message: Optional[str], default: Optional[str]) -> str:
        raise NotImplementedError
    def print(self) -> None:
        raise NotImplementedError
    def post_message(self, message: Any, target_origin: str, transfer: Optional[List[Object]]) -> None:
        raise NotImplementedError
    def onabort(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onabort(self, onabort: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onblur(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onblur(self, onblur: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onfocus(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onfocus(self, onfocus: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onauxclick(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onauxclick(self, onauxclick: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oncanplay(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oncanplay(self, oncanplay: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oncanplaythrough(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oncanplaythrough(self, oncanplaythrough: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onchange(self, onchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onclick(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onclick(self, onclick: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onclose(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onclose(self, onclose: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oncontextmenu(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oncontextmenu(self, oncontextmenu: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondblclick(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondblclick(self, ondblclick: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondrag(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondrag(self, ondrag: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondragend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondragend(self, ondragend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondragenter(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondragenter(self, ondragenter: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondragexit(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondragexit(self, ondragexit: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondragleave(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondragleave(self, ondragleave: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondragover(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondragover(self, ondragover: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondragstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondragstart(self, ondragstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondrop(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondrop(self, ondrop: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondurationchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondurationchange(self, ondurationchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onemptied(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onemptied(self, onemptied: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onended(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onended(self, onended: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oninput(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oninput(self, oninput: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oninvalid(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oninvalid(self, oninvalid: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onkeydown(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onkeydown(self, onkeydown: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onkeypress(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onkeypress(self, onkeypress: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onkeyup(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onkeyup(self, onkeyup: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onload(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onload(self, onload: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onloadeddata(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onloadeddata(self, onloadeddata: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onloadedmetadata(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onloadedmetadata(self, onloadedmetadata: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onloadend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onloadend(self, onloadend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onloadstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onloadstart(self, onloadstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmousedown(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmousedown(self, onmousedown: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmouseenter(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmouseenter(self, onmouseenter: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmouseleave(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmouseleave(self, onmouseleave: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmousemove(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmousemove(self, onmousemove: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmouseout(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmouseout(self, onmouseout: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmouseover(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmouseover(self, onmouseover: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmouseup(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmouseup(self, onmouseup: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwheel(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwheel(self, onwheel: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpause(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpause(self, onpause: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onplay(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onplay(self, onplay: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onplaying(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onplaying(self, onplaying: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onprogress(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onprogress(self, onprogress: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onratechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onratechange(self, onratechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onreset(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onreset(self, onreset: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onresize(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onresize(self, onresize: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onscroll(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onscroll(self, onscroll: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onseeked(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onseeked(self, onseeked: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onseeking(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onseeking(self, onseeking: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onselect(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onselect(self, onselect: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onshow(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onshow(self, onshow: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onstalled(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onstalled(self, onstalled: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onsubmit(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onsubmit(self, onsubmit: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onsuspend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onsuspend(self, onsuspend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontimeupdate(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontimeupdate(self, ontimeupdate: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onvolumechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onvolumechange(self, onvolumechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwaiting(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwaiting(self, onwaiting: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onselectstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onselectstart(self, onselectstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontoggle(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontoggle(self, ontoggle: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointercancel(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointercancel(self, onpointercancel: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointerdown(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerdown(self, onpointerdown: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointerup(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerup(self, onpointerup: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointermove(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointermove(self, onpointermove: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointerout(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerout(self, onpointerout: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointerover(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerover(self, onpointerover: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointerenter(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerenter(self, onpointerenter: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpointerleave(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpointerleave(self, onpointerleave: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ongotpointercapture(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ongotpointercapture(self, ongotpointercapture: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onlostpointercapture(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onlostpointercapture(self, onlostpointercapture: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onanimationcancel(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onanimationcancel(self, onanimationcancel: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onanimationend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onanimationend(self, onanimationend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onanimationiteration(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onanimationiteration(self, onanimationiteration: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onanimationstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onanimationstart(self, onanimationstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontransitioncancel(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontransitioncancel(self, ontransitioncancel: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontransitionend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontransitionend(self, ontransitionend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontransitionrun(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontransitionrun(self, ontransitionrun: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontransitionstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontransitionstart(self, ontransitionstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwebkitanimationend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwebkitanimationend(self, onwebkitanimationend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwebkitanimationiteration(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwebkitanimationiteration(self, onwebkitanimationiteration: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwebkitanimationstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwebkitanimationstart(self, onwebkitanimationstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwebkittransitionend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwebkittransitionend(self, onwebkittransitionend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onafterprint(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onafterprint(self, onafterprint: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onbeforeprint(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onbeforeprint(self, onbeforeprint: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onbeforeunload(self) -> Optional[OnBeforeUnloadEventHandlerNonNull]:
        raise NotImplementedError
    def set_onbeforeunload(self, onbeforeunload: Optional[OnBeforeUnloadEventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onhashchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onhashchange(self, onhashchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onlanguagechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onlanguagechange(self, onlanguagechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmessage(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmessage(self, onmessage: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmessageerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmessageerror(self, onmessageerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onoffline(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onoffline(self, onoffline: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ononline(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ononline(self, ononline: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpagehide(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpagehide(self, onpagehide: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpageshow(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpageshow(self, onpageshow: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpopstate(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpopstate(self, onpopstate: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onstorage(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onstorage(self, onstorage: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onunload(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onunload(self, onunload: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onappinstalled(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onappinstalled(self, onappinstalled: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def session_storage(self) -> Optional[Storage]:
        raise NotImplementedError
    def local_storage(self) -> Optional[Storage]:
        raise NotImplementedError
    def capture_events(self) -> None:
        raise NotImplementedError
    def release_events(self) -> None:
        raise NotImplementedError
    def get_selection(self) -> Optional[Selection]:
        raise NotImplementedError
    def get_computed_style(self, elt: Element, pseudo_elt: Optional[str]) -> Optional[CssStyleDeclaration]:
        raise NotImplementedError
    def match_media(self, query: str) -> Optional[MediaQueryList]:
        raise NotImplementedError
    def screen(self) -> Screen:
        raise NotImplementedError
    def visual_viewport(self) -> Optional[VisualViewport]:
        raise NotImplementedError
    def move_to(self, x: int, y: int) -> None:
        raise NotImplementedError
    def move_by(self, x: int, y: int) -> None:
        raise NotImplementedError
    def resize_to(self, x: int, y: int) -> None:
        raise NotImplementedError
    def resize_by(self, x: int, y: int) -> None:
        raise NotImplementedError
    def inner_width(self) -> Any:
        raise NotImplementedError
    def set_inner_width(self, inner_width: Any) -> None:
        raise NotImplementedError
    def inner_height(self) -> Any:
        raise NotImplementedError
    def set_inner_height(self, inner_height: Any) -> None:
        raise NotImplementedError
    def scroll(self, params: WindowScrollParams) -> None:
        raise NotImplementedError
    def scroll_to(self, params: WindowScrollToParams) -> None:
        raise NotImplementedError
    def scroll_by(self, params: WindowScrollByParams) -> None:
        raise NotImplementedError
    def scroll_x(self) -> float:
        raise NotImplementedError
    def page_x_offset(self) -> float:
        raise NotImplementedError
    def scroll_y(self) -> float:
        raise NotImplementedError
    def page_y_offset(self) -> float:
        raise NotImplementedError
    def screen_x(self) -> Any:
        raise NotImplementedError
    def set_screen_x(self, screen_x: Any) -> None:
        raise NotImplementedError
    def screen_y(self) -> Any:
        raise NotImplementedError
    def set_screen_y(self, screen_y: Any) -> None:
        raise NotImplementedError
    def outer_width(self) -> Any:
        raise NotImplementedError
    def set_outer_width(self, outer_width: Any) -> None:
        raise NotImplementedError
    def outer_height(self) -> Any:
        raise NotImplementedError
    def set_outer_height(self, outer_height: Any) -> None:
        raise NotImplementedError
    def device_pixel_ratio(self) -> float:
        raise NotImplementedError
    def u2f(self) -> U2f:
        raise NotImplementedError
    def speech_synthesis(self) -> SpeechSynthesis:
        raise NotImplementedError
    def ontouchstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontouchstart(self, ontouchstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontouchend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontouchend(self, ontouchend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontouchmove(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontouchmove(self, ontouchmove: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontouchcancel(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontouchcancel(self, ontouchcancel: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[OnErrorEventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[OnErrorEventHandlerNonNull]) -> None:
        raise NotImplementedError
    def orientation(self) -> int:
        raise NotImplementedError
    def onorientationchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onorientationchange(self, onorientationchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onvrdisplayconnect(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onvrdisplayconnect(self, onvrdisplayconnect: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onvrdisplaydisconnect(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onvrdisplaydisconnect(self, onvrdisplaydisconnect: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onvrdisplayactivate(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onvrdisplayactivate(self, onvrdisplayactivate: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onvrdisplaydeactivate(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onvrdisplaydeactivate(self, onvrdisplaydeactivate: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onvrdisplaypresentchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onvrdisplaypresentchange(self, onvrdisplaypresentchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def paint_worklet(self) -> Worklet:
        raise NotImplementedError
    def request_idle_callback(self, callback: IdleRequestCallback, options: Optional[IdleRequestOptions]) -> int:
        raise NotImplementedError
    def cancel_idle_callback(self, handle: int) -> None:
        raise NotImplementedError
    def crypto(self) -> Crypto:
        raise NotImplementedError
    def origin(self) -> str:
        raise NotImplementedError
    def btoa(self, btoa: str) -> str:
        raise NotImplementedError
    def atob(self, atob: str) -> str:
        raise NotImplementedError
    def set_timeout(self, params: WindowSetTimeoutParams) -> int:
        raise NotImplementedError
    def clear_timeout(self, handle: Optional[int]) -> None:
        raise NotImplementedError
    def set_interval(self, params: WindowSetIntervalParams) -> int:
        raise NotImplementedError
    def clear_interval(self, handle: Optional[int]) -> None:
        raise NotImplementedError
    def create_image_bitmap(self, params: WindowCreateImageBitmapParams) -> ImageBitmap:
        raise NotImplementedError
    def request_animation_frame(self, callback: FrameRequestCallback) -> int:
        raise NotImplementedError
    def cancel_animation_frame(self, handle: int) -> None:
        raise NotImplementedError
    def define_element(self, name: str, options: DefineElementOptions) -> DefineElementResult:
        raise NotImplementedError
    def console(self) -> Console:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class DomMatrix2DInit:
    a: Optional[float]
    b: Optional[float]
    c: Optional[float]
    d: Optional[float]
    e: Optional[float]
    f: Optional[float]
    m11: Optional[float]
    m12: Optional[float]
    m21: Optional[float]
    m22: Optional[float]
    m41: Optional[float]
    m42: Optional[float]


@dataclass
class CanvasRenderingContext2DSetTransformParams_ABCDEF:
    value: Tuple[float, float, float, float, float, float]


@dataclass
class CanvasRenderingContext2DSetTransformParams_Transform:
    value: Optional[DomMatrix2DInit]


CanvasRenderingContext2DSetTransformParams = Union[CanvasRenderingContext2DSetTransformParams_ABCDEF, CanvasRenderingContext2DSetTransformParams_Transform]


class CanvasGradient:
    
    def add_color_stop(self, offset: float, color: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CanvasPattern:
    
    def set_transform(self, matrix: SvgMatrix) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class CanvasGradientOrCanvasPatternOrString_CanvasGradient:
    value: CanvasGradient


@dataclass
class CanvasGradientOrCanvasPatternOrString_CanvasPattern:
    value: CanvasPattern


@dataclass
class CanvasGradientOrCanvasPatternOrString_String:
    value: str


CanvasGradientOrCanvasPatternOrString = Union[CanvasGradientOrCanvasPatternOrString_CanvasGradient, CanvasGradientOrCanvasPatternOrString_CanvasPattern, CanvasGradientOrCanvasPatternOrString_String]



@dataclass
class DomPointInitOrF64_DomPointInit:
    value: DomPointInit


@dataclass
class DomPointInitOrF64_F64:
    value: float


DomPointInitOrF64 = Union[DomPointInitOrF64_DomPointInit, DomPointInitOrF64_F64]



@dataclass
class DomPointInitOrF64OrListDomPointInitOrF64_DomPointInit:
    value: DomPointInit


@dataclass
class DomPointInitOrF64OrListDomPointInitOrF64_F64:
    value: float


@dataclass
class DomPointInitOrF64OrListDomPointInitOrF64_ListDomPointInitOrF64:
    value: List[DomPointInitOrF64]


DomPointInitOrF64OrListDomPointInitOrF64 = Union[DomPointInitOrF64OrListDomPointInitOrF64_DomPointInit, DomPointInitOrF64OrListDomPointInitOrF64_F64, DomPointInitOrF64OrListDomPointInitOrF64_ListDomPointInitOrF64]


class Path2D:
    
    def add_path(self, path: Self, transformation: Optional[SvgMatrix]) -> None:
        raise NotImplementedError
    def close_path(self) -> None:
        raise NotImplementedError
    def move_to(self, x: float, y: float) -> None:
        raise NotImplementedError
    def line_to(self, x: float, y: float) -> None:
        raise NotImplementedError
    def quadratic_curve_to(self, cpx: float, cpy: float, x: float, y: float) -> None:
        raise NotImplementedError
    def bezier_curve_to(self, cp1x: float, cp1y: float, cp2x: float, cp2y: float, x: float, y: float) -> None:
        raise NotImplementedError
    def arc_to(self, x1: float, y1: float, x2: float, y2: float, radius: float) -> None:
        raise NotImplementedError
    def rect(self, x: float, y: float, w: float, h: float) -> None:
        raise NotImplementedError
    def round_rect(self, x: float, y: float, w: float, h: float, radii: Optional[DomPointInitOrF64OrListDomPointInitOrF64]) -> None:
        raise NotImplementedError
    def arc(self, x: float, y: float, radius: float, start_angle: float, end_angle: float, anticlockwise: Optional[bool]) -> None:
        raise NotImplementedError
    def ellipse(self, x: float, y: float, radius_x: float, radius_y: float, rotation: float, start_angle: float, end_angle: float, anticlockwise: Optional[bool]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class CanvasRenderingContext2DFillParams_Winding:
    value: Optional[CanvasWindingRule]


@dataclass
class CanvasRenderingContext2DFillParams_PathWinding:
    value: Tuple[Path2D, Optional[CanvasWindingRule]]


CanvasRenderingContext2DFillParams = Union[CanvasRenderingContext2DFillParams_Winding, CanvasRenderingContext2DFillParams_PathWinding]



@dataclass
class CanvasRenderingContext2DStrokeParams_Path:
    value: Path2D


CanvasRenderingContext2DStrokeParams = Union[CanvasRenderingContext2DStrokeParams_Path]



@dataclass
class CanvasRenderingContext2DClipParams_Winding:
    value: Optional[CanvasWindingRule]


@dataclass
class CanvasRenderingContext2DClipParams_PathWinding:
    value: Tuple[Path2D, Optional[CanvasWindingRule]]


CanvasRenderingContext2DClipParams = Union[CanvasRenderingContext2DClipParams_Winding, CanvasRenderingContext2DClipParams_PathWinding]



@dataclass
class CanvasRenderingContext2DIsPointInPathParams_XYWinding:
    value: Tuple[float, float, Optional[CanvasWindingRule]]


@dataclass
class CanvasRenderingContext2DIsPointInPathParams_PathXYWinding:
    value: Tuple[Path2D, float, float, Optional[CanvasWindingRule]]


CanvasRenderingContext2DIsPointInPathParams = Union[CanvasRenderingContext2DIsPointInPathParams_XYWinding, CanvasRenderingContext2DIsPointInPathParams_PathXYWinding]



@dataclass
class CanvasRenderingContext2DIsPointInStrokeParams_XY:
    value: Tuple[float, float]


@dataclass
class CanvasRenderingContext2DIsPointInStrokeParams_PathXY:
    value: Tuple[Path2D, float, float]


CanvasRenderingContext2DIsPointInStrokeParams = Union[CanvasRenderingContext2DIsPointInStrokeParams_XY, CanvasRenderingContext2DIsPointInStrokeParams_PathXY]


class TextMetrics:
    
    def width(self) -> float:
        raise NotImplementedError
    def actual_bounding_box_left(self) -> float:
        raise NotImplementedError
    def actual_bounding_box_right(self) -> float:
        raise NotImplementedError
    def font_bounding_box_ascent(self) -> float:
        raise NotImplementedError
    def font_bounding_box_descent(self) -> float:
        raise NotImplementedError
    def actual_bounding_box_ascent(self) -> float:
        raise NotImplementedError
    def actual_bounding_box_descent(self) -> float:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class CanvasRenderingContext2DDrawImageParams_ImageDxDy:
    value: Tuple[HtmlCanvasElementOrHtmlOrSvgImageElementOrHtmlVideoElementOrImageBitmapOrOffscreenCanvasOrVideoFrame, float, float]


@dataclass
class CanvasRenderingContext2DDrawImageParams_ImageDxDyDwDh:
    value: Tuple[HtmlCanvasElementOrHtmlOrSvgImageElementOrHtmlVideoElementOrImageBitmapOrOffscreenCanvasOrVideoFrame, float, float, float, float]


@dataclass
class CanvasRenderingContext2DDrawImageParams_ImageSxSySwShDxDyDwDh:
    value: Tuple[HtmlCanvasElementOrHtmlOrSvgImageElementOrHtmlVideoElementOrImageBitmapOrOffscreenCanvasOrVideoFrame, float, float, float, float, float, float, float, float]


CanvasRenderingContext2DDrawImageParams = Union[CanvasRenderingContext2DDrawImageParams_ImageDxDy, CanvasRenderingContext2DDrawImageParams_ImageDxDyDwDh, CanvasRenderingContext2DDrawImageParams_ImageSxSySwShDxDyDwDh]



@dataclass
class CanvasRenderingContext2DCreateImageDataParams_SwSh:
    value: Tuple[float, float]


@dataclass
class CanvasRenderingContext2DCreateImageDataParams_Imagedata:
    value: ImageData


CanvasRenderingContext2DCreateImageDataParams = Union[CanvasRenderingContext2DCreateImageDataParams_SwSh, CanvasRenderingContext2DCreateImageDataParams_Imagedata]



@dataclass
class CanvasRenderingContext2DPutImageDataParams_ImagedataDxDy:
    value: Tuple[ImageData, float, float]


@dataclass
class CanvasRenderingContext2DPutImageDataParams_ImagedataDxDyDirtyXDirtyYDirtyWidthDirtyHeight:
    value: Tuple[ImageData, float, float, float, float, float, float]


CanvasRenderingContext2DPutImageDataParams = Union[CanvasRenderingContext2DPutImageDataParams_ImagedataDxDy, CanvasRenderingContext2DPutImageDataParams_ImagedataDxDyDirtyXDirtyYDirtyWidthDirtyHeight]


@dataclass
class HitRegionOptions:
    path: Optional[Some[Optional[Path2D]]]
    id: Optional[str]
    control: Optional[Some[Optional[Element]]]

class CanvasRenderingContext2D:
    
    def canvas(self) -> Optional[HtmlCanvasElement]:
        raise NotImplementedError
    @classmethod
    def drawwindow_draw_caret(cls) -> int:
        raise NotImplementedError
    @classmethod
    def drawwindow_do_not_flush(cls) -> int:
        raise NotImplementedError
    @classmethod
    def drawwindow_draw_view(cls) -> int:
        raise NotImplementedError
    @classmethod
    def drawwindow_use_widget_layers(cls) -> int:
        raise NotImplementedError
    @classmethod
    def drawwindow_async_decode_images(cls) -> int:
        raise NotImplementedError
    def draw_window(self, window: Window, x: float, y: float, w: float, h: float, bg_color: str, flags: Optional[int]) -> None:
        raise NotImplementedError
    def demote(self) -> None:
        raise NotImplementedError
    def save(self) -> None:
        raise NotImplementedError
    def restore(self) -> None:
        raise NotImplementedError
    def reset(self) -> None:
        raise NotImplementedError
    def scale(self, x: float, y: float) -> None:
        raise NotImplementedError
    def rotate(self, angle: float) -> None:
        raise NotImplementedError
    def translate(self, x: float, y: float) -> None:
        raise NotImplementedError
    def transform(self, a: float, b: float, c: float, d: float, e: float, f: float) -> None:
        raise NotImplementedError
    def set_transform(self, params: CanvasRenderingContext2DSetTransformParams) -> None:
        raise NotImplementedError
    def reset_transform(self) -> None:
        raise NotImplementedError
    def get_transform(self) -> DomMatrix:
        raise NotImplementedError
    def global_alpha(self) -> float:
        raise NotImplementedError
    def set_global_alpha(self, global_alpha: float) -> None:
        raise NotImplementedError
    def global_composite_operation(self) -> str:
        raise NotImplementedError
    def set_global_composite_operation(self, global_composite_operation: str) -> None:
        raise NotImplementedError
    def image_smoothing_enabled(self) -> bool:
        raise NotImplementedError
    def set_image_smoothing_enabled(self, image_smoothing_enabled: bool) -> None:
        raise NotImplementedError
    def set_stroke_style(self, stroke_style: CanvasGradientOrCanvasPatternOrString) -> None:
        """
        stroke-style: func() -> canvas-gradient-or-canvas-pattern-or-string;
        """
        raise NotImplementedError
    def set_fill_style(self, fill_style: CanvasGradientOrCanvasPatternOrString) -> None:
        """
        fill-style: func() -> canvas-gradient-or-canvas-pattern-or-string;
        """
        raise NotImplementedError
    def create_linear_gradient(self, x0: float, y0: float, x1: float, y1: float) -> CanvasGradient:
        raise NotImplementedError
    def create_radial_gradient(self, x0: float, y0: float, r0: float, x1: float, y1: float, r1: float) -> CanvasGradient:
        raise NotImplementedError
    def create_pattern(self, image: HtmlCanvasElementOrHtmlOrSvgImageElementOrHtmlVideoElementOrImageBitmapOrOffscreenCanvasOrVideoFrame, repetition: str) -> Optional[CanvasPattern]:
        raise NotImplementedError
    def shadow_offset_x(self) -> float:
        raise NotImplementedError
    def set_shadow_offset_x(self, shadow_offset_x: float) -> None:
        raise NotImplementedError
    def shadow_offset_y(self) -> float:
        raise NotImplementedError
    def set_shadow_offset_y(self, shadow_offset_y: float) -> None:
        raise NotImplementedError
    def shadow_blur(self) -> float:
        raise NotImplementedError
    def set_shadow_blur(self, shadow_blur: float) -> None:
        raise NotImplementedError
    def shadow_color(self) -> str:
        raise NotImplementedError
    def set_shadow_color(self, shadow_color: str) -> None:
        raise NotImplementedError
    def filter(self) -> str:
        raise NotImplementedError
    def set_filter(self, filter: str) -> None:
        raise NotImplementedError
    def clear_rect(self, x: float, y: float, w: float, h: float) -> None:
        raise NotImplementedError
    def fill_rect(self, x: float, y: float, w: float, h: float) -> None:
        raise NotImplementedError
    def stroke_rect(self, x: float, y: float, w: float, h: float) -> None:
        raise NotImplementedError
    def begin_path(self) -> None:
        raise NotImplementedError
    def fill(self, params: CanvasRenderingContext2DFillParams) -> None:
        raise NotImplementedError
    def stroke(self, params: Optional[CanvasRenderingContext2DStrokeParams]) -> None:
        raise NotImplementedError
    def clip(self, params: CanvasRenderingContext2DClipParams) -> None:
        raise NotImplementedError
    def is_point_in_path(self, params: CanvasRenderingContext2DIsPointInPathParams) -> bool:
        raise NotImplementedError
    def is_point_in_stroke(self, params: CanvasRenderingContext2DIsPointInStrokeParams) -> bool:
        raise NotImplementedError
    def draw_focus_if_needed(self, element: Element) -> None:
        raise NotImplementedError
    def draw_custom_focus_ring(self, element: Element) -> bool:
        raise NotImplementedError
    def fill_text(self, text: str, x: float, y: float, max_width: Optional[float]) -> None:
        raise NotImplementedError
    def stroke_text(self, text: str, x: float, y: float, max_width: Optional[float]) -> None:
        raise NotImplementedError
    def measure_text(self, text: str) -> TextMetrics:
        raise NotImplementedError
    def draw_image(self, params: CanvasRenderingContext2DDrawImageParams) -> None:
        raise NotImplementedError
    def create_image_data(self, params: CanvasRenderingContext2DCreateImageDataParams) -> ImageData:
        raise NotImplementedError
    def get_image_data(self, sx: float, sy: float, sw: float, sh: float) -> ImageData:
        raise NotImplementedError
    def put_image_data(self, params: CanvasRenderingContext2DPutImageDataParams) -> None:
        raise NotImplementedError
    def line_width(self) -> float:
        raise NotImplementedError
    def set_line_width(self, line_width: float) -> None:
        raise NotImplementedError
    def line_cap(self) -> str:
        raise NotImplementedError
    def set_line_cap(self, line_cap: str) -> None:
        raise NotImplementedError
    def line_join(self) -> str:
        raise NotImplementedError
    def set_line_join(self, line_join: str) -> None:
        raise NotImplementedError
    def miter_limit(self) -> float:
        raise NotImplementedError
    def set_miter_limit(self, miter_limit: float) -> None:
        raise NotImplementedError
    def set_line_dash(self, segments: List[float]) -> None:
        raise NotImplementedError
    def get_line_dash(self) -> List[float]:
        raise NotImplementedError
    def line_dash_offset(self) -> float:
        raise NotImplementedError
    def set_line_dash_offset(self, line_dash_offset: float) -> None:
        raise NotImplementedError
    def font(self) -> str:
        raise NotImplementedError
    def set_font(self, font: str) -> None:
        raise NotImplementedError
    def text_align(self) -> str:
        raise NotImplementedError
    def set_text_align(self, text_align: str) -> None:
        raise NotImplementedError
    def text_baseline(self) -> str:
        raise NotImplementedError
    def set_text_baseline(self, text_baseline: str) -> None:
        raise NotImplementedError
    def close_path(self) -> None:
        raise NotImplementedError
    def move_to(self, x: float, y: float) -> None:
        raise NotImplementedError
    def line_to(self, x: float, y: float) -> None:
        raise NotImplementedError
    def quadratic_curve_to(self, cpx: float, cpy: float, x: float, y: float) -> None:
        raise NotImplementedError
    def bezier_curve_to(self, cp1x: float, cp1y: float, cp2x: float, cp2y: float, x: float, y: float) -> None:
        raise NotImplementedError
    def arc_to(self, x1: float, y1: float, x2: float, y2: float, radius: float) -> None:
        raise NotImplementedError
    def rect(self, x: float, y: float, w: float, h: float) -> None:
        raise NotImplementedError
    def round_rect(self, x: float, y: float, w: float, h: float, radii: Optional[DomPointInitOrF64OrListDomPointInitOrF64]) -> None:
        raise NotImplementedError
    def arc(self, x: float, y: float, radius: float, start_angle: float, end_angle: float, anticlockwise: Optional[bool]) -> None:
        raise NotImplementedError
    def ellipse(self, x: float, y: float, radius_x: float, radius_y: float, rotation: float, start_angle: float, end_angle: float, anticlockwise: Optional[bool]) -> None:
        raise NotImplementedError
    def add_hit_region(self, options: Optional[HitRegionOptions]) -> None:
        raise NotImplementedError
    def remove_hit_region(self, id: str) -> None:
        raise NotImplementedError
    def clear_hit_regions(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgRadialGradientElement:
    
    def as_svg_gradient_element(self) -> SvgGradientElement:
        raise NotImplementedError
    def cx(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def cy(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def r(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def fx(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def fy(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def fr(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class ArrayBufferOrArrayBufferView_ArrayBuffer:
    value: ArrayBuffer


@dataclass
class ArrayBufferOrArrayBufferView_ArrayBufferView:
    value: ArrayBufferView


ArrayBufferOrArrayBufferView = Union[ArrayBufferOrArrayBufferView_ArrayBuffer, ArrayBufferOrArrayBufferView_ArrayBufferView]


@dataclass
class FontFaceDescriptors:
    style: Optional[str]
    weight: Optional[str]
    stretch: Optional[str]
    unicode_range: Optional[str]
    variant: Optional[str]
    feature_settings: Optional[str]
    variation_settings: Optional[str]
    display: Optional[str]

class HtmlEmbedElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def src(self) -> str:
        raise NotImplementedError
    def set_src(self, src: str) -> None:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def set_type(self, type: str) -> None:
        raise NotImplementedError
    def width(self) -> str:
        raise NotImplementedError
    def set_width(self, width: str) -> None:
        raise NotImplementedError
    def height(self) -> str:
        raise NotImplementedError
    def set_height(self, height: str) -> None:
        raise NotImplementedError
    def align(self) -> str:
        raise NotImplementedError
    def set_align(self, align: str) -> None:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def set_name(self, name: str) -> None:
        raise NotImplementedError
    def get_svg_document(self) -> Optional[Document]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlTableColElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def span(self) -> int:
        raise NotImplementedError
    def set_span(self, span: int) -> None:
        raise NotImplementedError
    def align(self) -> str:
        raise NotImplementedError
    def set_align(self, align: str) -> None:
        raise NotImplementedError
    def ch(self) -> str:
        raise NotImplementedError
    def set_ch(self, ch: str) -> None:
        raise NotImplementedError
    def ch_off(self) -> str:
        raise NotImplementedError
    def set_ch_off(self, ch_off: str) -> None:
        raise NotImplementedError
    def v_align(self) -> str:
        raise NotImplementedError
    def set_v_align(self, v_align: str) -> None:
        raise NotImplementedError
    def width(self) -> str:
        raise NotImplementedError
    def set_width(self, width: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WorkerLocation:
    
    def href(self) -> str:
        raise NotImplementedError
    def origin(self) -> str:
        raise NotImplementedError
    def protocol(self) -> str:
        raise NotImplementedError
    def host(self) -> str:
        raise NotImplementedError
    def hostname(self) -> str:
        raise NotImplementedError
    def port(self) -> str:
        raise NotImplementedError
    def pathname(self) -> str:
        raise NotImplementedError
    def search(self) -> str:
        raise NotImplementedError
    def hash(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WorkerNavigator:
    
    def app_code_name(self) -> str:
        raise NotImplementedError
    def app_name(self) -> str:
        raise NotImplementedError
    def app_version(self) -> str:
        raise NotImplementedError
    def platform(self) -> str:
        raise NotImplementedError
    def user_agent(self) -> str:
        raise NotImplementedError
    def product(self) -> str:
        raise NotImplementedError
    def taint_enabled(self) -> bool:
        raise NotImplementedError
    def language(self) -> str:
        raise NotImplementedError
    def languages(self) -> List[str]:
        raise NotImplementedError
    def on_line(self) -> bool:
        raise NotImplementedError
    def hardware_concurrency(self) -> int:
        raise NotImplementedError
    def storage(self) -> StorageManager:
        raise NotImplementedError
    def connection(self) -> NetworkInformation:
        raise NotImplementedError
    def media_capabilities(self) -> MediaCapabilities:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class WorkerGlobalScopeSetTimeoutParams_HandlerTimeoutArguments:
    value: Tuple[Function, Optional[int], List[Any]]


@dataclass
class WorkerGlobalScopeSetTimeoutParams_HandlerTimeoutUnused:
    value: Tuple[str, Optional[int], List[Any]]


WorkerGlobalScopeSetTimeoutParams = Union[WorkerGlobalScopeSetTimeoutParams_HandlerTimeoutArguments, WorkerGlobalScopeSetTimeoutParams_HandlerTimeoutUnused]



@dataclass
class WorkerGlobalScopeSetIntervalParams_HandlerTimeoutArguments:
    value: Tuple[Function, Optional[int], List[Any]]


@dataclass
class WorkerGlobalScopeSetIntervalParams_HandlerTimeoutUnused:
    value: Tuple[str, Optional[int], List[Any]]


WorkerGlobalScopeSetIntervalParams = Union[WorkerGlobalScopeSetIntervalParams_HandlerTimeoutArguments, WorkerGlobalScopeSetIntervalParams_HandlerTimeoutUnused]



@dataclass
class WorkerGlobalScopeCreateImageBitmapParams_AImageAOptions:
    value: Tuple[BlobOrCanvasImageSourceOrImageData, Optional[ImageBitmapOptions]]


@dataclass
class WorkerGlobalScopeCreateImageBitmapParams_AImageASxASyASwAShAOptions:
    value: Tuple[BlobOrCanvasImageSourceOrImageData, int, int, int, int, Optional[ImageBitmapOptions]]


WorkerGlobalScopeCreateImageBitmapParams = Union[WorkerGlobalScopeCreateImageBitmapParams_AImageAOptions, WorkerGlobalScopeCreateImageBitmapParams_AImageASxASyASwAShAOptions]


class WorkerGlobalScope:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def self(self) -> Self:
        raise NotImplementedError
    def location(self) -> WorkerLocation:
        raise NotImplementedError
    def navigator(self) -> WorkerNavigator:
        raise NotImplementedError
    def import_scripts(self, urls: List[str]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[OnErrorEventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[OnErrorEventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onoffline(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onoffline(self, onoffline: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ononline(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ononline(self, ononline: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def crypto(self) -> Crypto:
        raise NotImplementedError
    def origin(self) -> str:
        raise NotImplementedError
    def btoa(self, btoa: str) -> str:
        raise NotImplementedError
    def atob(self, atob: str) -> str:
        raise NotImplementedError
    def set_timeout(self, params: WorkerGlobalScopeSetTimeoutParams) -> int:
        raise NotImplementedError
    def clear_timeout(self, handle: Optional[int]) -> None:
        raise NotImplementedError
    def set_interval(self, params: WorkerGlobalScopeSetIntervalParams) -> int:
        raise NotImplementedError
    def clear_interval(self, handle: Optional[int]) -> None:
        raise NotImplementedError
    def create_image_bitmap(self, params: WorkerGlobalScopeCreateImageBitmapParams) -> ImageBitmap:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ClientType(Enum):
    WINDOW = 0
    WORKER = 1
    SHAREDWORKER = 2
    SERVICEWORKER = 3
    ALL = 4

@dataclass
class ClientQueryOptions:
    include_uncontrolled: Optional[bool]
    type: Optional[ClientType]

class FrameType(Enum):
    AUXILIARY = 0
    TOP_LEVEL = 1
    NESTED = 2
    NONE = 3

class Client:
    
    def url(self) -> str:
        raise NotImplementedError
    def frame_type(self) -> FrameType:
        raise NotImplementedError
    def type(self) -> ClientType:
        raise NotImplementedError
    def id(self) -> str:
        raise NotImplementedError
    def post_message(self, message: Any, transfer: Optional[List[Object]]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WindowClient:
    
    def as_client(self) -> Client:
        raise NotImplementedError
    def visibility_state(self) -> VisibilityState:
        raise NotImplementedError
    def focused(self) -> bool:
        raise NotImplementedError
    def focus(self) -> Self:
        raise NotImplementedError
    def navigate(self, url: str) -> Self:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Clients:
    
    def get(self, id: str) -> Any:
        raise NotImplementedError
    def match_all(self, options: Optional[ClientQueryOptions]) -> List[Client]:
        raise NotImplementedError
    def open_window(self, url: str) -> Optional[WindowClient]:
        raise NotImplementedError
    def claim(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ServiceWorkerGlobalScope:
    
    def as_worker_global_scope(self) -> WorkerGlobalScope:
        raise NotImplementedError
    def clients(self) -> Clients:
        raise NotImplementedError
    def registration(self) -> ServiceWorkerRegistration:
        raise NotImplementedError
    def skip_waiting(self) -> None:
        raise NotImplementedError
    def oninstall(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oninstall(self, oninstall: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onactivate(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onactivate(self, onactivate: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onfetch(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onfetch(self, onfetch: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmessage(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmessage(self, onmessage: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpush(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpush(self, onpush: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpushsubscriptionchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpushsubscriptionchange(self, onpushsubscriptionchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onnotificationclick(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onnotificationclick(self, onnotificationclick: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onnotificationclose(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onnotificationclose(self, onnotificationclose: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class AuthenticatorResponse:
    
    def client_data_json(self) -> ArrayBuffer:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class AuthenticationExtensionsClientOutputs:
    appid: Optional[bool]

class PublicKeyCredential:
    
    def as_credential(self) -> Credential:
        raise NotImplementedError
    def raw_id(self) -> ArrayBuffer:
        raise NotImplementedError
    def response(self) -> AuthenticatorResponse:
        raise NotImplementedError
    def get_client_extension_results(self) -> AuthenticationExtensionsClientOutputs:
        raise NotImplementedError
    @classmethod
    def is_user_verifying_platform_authenticator_available(cls) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class AuthenticatorAttestationResponse:
    
    def as_authenticator_response(self) -> AuthenticatorResponse:
        raise NotImplementedError
    def attestation_object(self) -> ArrayBuffer:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class AuthenticatorAssertionResponse:
    
    def as_authenticator_response(self) -> AuthenticatorResponse:
        raise NotImplementedError
    def authenticator_data(self) -> ArrayBuffer:
        raise NotImplementedError
    def signature(self) -> ArrayBuffer:
        raise NotImplementedError
    def user_handle(self) -> ArrayBuffer:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class PublicKeyCredentialEntity:
    name: str
    icon: Optional[str]

class RecordString:
    
    def __init__(self):
        raise NotImplementedError

    def add(self, key: str, value: str) -> None:
        raise NotImplementedError
    def get(self, key: str) -> str:
        raise NotImplementedError
    def has(self, key: str) -> bool:
        raise NotImplementedError
    def remove(self, key: str) -> None:
        raise NotImplementedError
    def keys(self) -> List[str]:
        raise NotImplementedError
    def values(self) -> List[str]:
        raise NotImplementedError
    def entries(self) -> Tuple[str, str]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class CollectedClientData:
    type: str
    challenge: str
    origin: str
    hash_algorithm: str
    token_binding_id: Optional[str]
    client_extensions: Optional[AuthenticationExtensionsClientInputs]
    authenticator_extensions: Optional[RecordString]

class PromiseRejectionEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def promise(self) -> Any:
        raise NotImplementedError
    def reason(self) -> Any:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class PromiseRejectionEventInit:
    promise: Any
    reason: Any
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class AudioWorklet:
    
    def as_worklet(self) -> Worklet:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MediaQueryListEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def media(self) -> str:
        raise NotImplementedError
    def matches(self) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class MediaQueryListEventInit:
    media: Optional[str]
    matches: Optional[bool]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class MutationRecord:
    
    def type(self) -> str:
        raise NotImplementedError
    def target(self) -> Optional[Node]:
        raise NotImplementedError
    def added_nodes(self) -> NodeList:
        raise NotImplementedError
    def removed_nodes(self) -> NodeList:
        raise NotImplementedError
    def previous_sibling(self) -> Optional[Node]:
        raise NotImplementedError
    def next_sibling(self) -> Optional[Node]:
        raise NotImplementedError
    def attribute_name(self) -> str:
        raise NotImplementedError
    def attribute_namespace(self) -> str:
        raise NotImplementedError
    def old_value(self) -> str:
        raise NotImplementedError
    def added_animations(self) -> List[Animation]:
        raise NotImplementedError
    def changed_animations(self) -> List[Animation]:
        raise NotImplementedError
    def removed_animations(self) -> List[Animation]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class MutationObserverInit:
    child_list: Optional[bool]
    attributes: Optional[bool]
    character_data: Optional[bool]
    subtree: Optional[bool]
    attribute_old_value: Optional[bool]
    character_data_old_value: Optional[bool]
    native_anonymous_child_list: Optional[bool]
    animations: Optional[bool]
    attribute_filter: Optional[List[str]]

class MutationObserver:
    
    def observe(self, target: Node, options: Optional[MutationObserverInit]) -> None:
        raise NotImplementedError
    def disconnect(self) -> None:
        raise NotImplementedError
    def take_records(self) -> List[MutationRecord]:
        raise NotImplementedError
    def mutation_callback(self) -> MutationCallback:
        """
        get-observing-info: func() -> list<option<mutation-observing-info>>;
        """
        raise NotImplementedError
    def merge_attribute_records(self) -> bool:
        raise NotImplementedError
    def set_merge_attribute_records(self, merge_attribute_records: bool) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class TcpSocketBinaryType(Enum):
    ARRAYBUFFER = 0
    STRING = 1

@dataclass
class SocketOptions:
    use_secure_transport: Optional[bool]
    binary_type: Optional[TcpSocketBinaryType]

class TcpReadyState(Enum):
    CONNECTING = 0
    OPEN = 1
    CLOSING = 2
    CLOSED = 3


@dataclass
class TcpSocketSendParams_Data:
    value: str


@dataclass
class TcpSocketSendParams_DataByteOffsetByteLength:
    value: Tuple[ArrayBuffer, Optional[int], Optional[int]]


TcpSocketSendParams = Union[TcpSocketSendParams_Data, TcpSocketSendParams_DataByteOffsetByteLength]


class TcpSocket:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def upgrade_to_secure(self) -> None:
        raise NotImplementedError
    def host(self) -> str:
        raise NotImplementedError
    def port(self) -> int:
        raise NotImplementedError
    def ssl(self) -> bool:
        raise NotImplementedError
    def buffered_amount(self) -> int:
        raise NotImplementedError
    def suspend(self) -> None:
        raise NotImplementedError
    def resume(self) -> None:
        raise NotImplementedError
    def close(self) -> None:
        raise NotImplementedError
    def close_immediately(self) -> None:
        raise NotImplementedError
    def send(self, params: TcpSocketSendParams) -> bool:
        raise NotImplementedError
    def ready_state(self) -> TcpReadyState:
        raise NotImplementedError
    def binary_type(self) -> TcpSocketBinaryType:
        raise NotImplementedError
    def onopen(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onopen(self, onopen: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondrain(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondrain(self, ondrain: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondata(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondata(self, ondata: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onclose(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onclose(self, onclose: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MediaRecorderErrorEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def error(self) -> DomException:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SharedWorkerGlobalScope:
    
    def as_worker_global_scope(self) -> WorkerGlobalScope:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def close(self) -> None:
        raise NotImplementedError
    def onconnect(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onconnect(self, onconnect: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WorkerDebuggerGlobalScope:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def global_(self) -> Object:
        raise NotImplementedError
    def create_sandbox(self, name: str, prototype: Object) -> Object:
        raise NotImplementedError
    def load_sub_script(self, url: str, sandbox: Optional[Object]) -> None:
        raise NotImplementedError
    def enter_event_loop(self) -> None:
        raise NotImplementedError
    def leave_event_loop(self) -> None:
        raise NotImplementedError
    def post_message(self, message: str) -> None:
        raise NotImplementedError
    def onmessage(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmessage(self, onmessage: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def set_immediate(self, handler: Function) -> None:
        raise NotImplementedError
    def report_error(self, message: str) -> None:
        raise NotImplementedError
    def retrieve_console_events(self) -> List[Any]:
        raise NotImplementedError
    def set_console_event_handler(self, handler: Optional[AnyCallback]) -> None:
        raise NotImplementedError
    def dump(self, string: Optional[str]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgViewElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    @classmethod
    def svg_zoomandpan_unknown(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_zoomandpan_disable(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_zoomandpan_magnify(cls) -> int:
        raise NotImplementedError
    def zoom_and_pan(self) -> int:
        raise NotImplementedError
    def set_zoom_and_pan(self, zoom_and_pan: int) -> None:
        raise NotImplementedError
    def view_box(self) -> SvgAnimatedRect:
        raise NotImplementedError
    def preserve_aspect_ratio(self) -> SvgAnimatedPreserveAspectRatio:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class GetUserMediaRequest:
    
    def window_id(self) -> int:
        raise NotImplementedError
    def inner_window_id(self) -> int:
        raise NotImplementedError
    def call_id(self) -> str:
        raise NotImplementedError
    def raw_id(self) -> str:
        raise NotImplementedError
    def media_source(self) -> str:
        raise NotImplementedError
    def get_constraints(self) -> MediaStreamConstraints:
        raise NotImplementedError
    def is_secure(self) -> bool:
        raise NotImplementedError
    def is_handling_user_input(self) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class AudioNodeDisconnectParams_Output:
    value: int


@dataclass
class AudioNodeDisconnectParams_Destination:
    value: Any


@dataclass
class AudioNodeDisconnectParams_DestinationOutput:
    value: Tuple[Any, int]


@dataclass
class AudioNodeDisconnectParams_DestinationOutputInput:
    value: Tuple[Any, int, int]


AudioNodeDisconnectParams = Union[AudioNodeDisconnectParams_Output, AudioNodeDisconnectParams_Destination, AudioNodeDisconnectParams_DestinationOutput, AudioNodeDisconnectParams_DestinationOutputInput]


class AudioDestinationNode:
    
    def as_audio_node(self) -> Any:
        raise NotImplementedError
    def max_channel_count(self) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class AudioListener:
    
    def doppler_factor(self) -> float:
        raise NotImplementedError
    def set_doppler_factor(self, doppler_factor: float) -> None:
        raise NotImplementedError
    def speed_of_sound(self) -> float:
        raise NotImplementedError
    def set_speed_of_sound(self, speed_of_sound: float) -> None:
        raise NotImplementedError
    def set_position(self, x: float, y: float, z: float) -> None:
        raise NotImplementedError
    def set_orientation(self, x: float, y: float, z: float, x_up: float, y_up: float, z_up: float) -> None:
        raise NotImplementedError
    def set_velocity(self, x: float, y: float, z: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class AudioContextState(Enum):
    SUSPENDED = 0
    RUNNING = 1
    CLOSED = 2

class AudioScheduledSourceNode:
    
    def as_audio_node(self) -> Any:
        raise NotImplementedError
    def onended(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onended(self, onended: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def start(self, when: Optional[float]) -> None:
        raise NotImplementedError
    def stop(self, when: Optional[float]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class AudioParam:
    
    def value(self) -> float:
        raise NotImplementedError
    def set_value(self, value: float) -> None:
        raise NotImplementedError
    def default_value(self) -> float:
        raise NotImplementedError
    def min_value(self) -> float:
        raise NotImplementedError
    def max_value(self) -> float:
        raise NotImplementedError
    def set_value_at_time(self, value: float, start_time: float) -> Self:
        raise NotImplementedError
    def linear_ramp_to_value_at_time(self, value: float, end_time: float) -> Self:
        raise NotImplementedError
    def exponential_ramp_to_value_at_time(self, value: float, end_time: float) -> Self:
        raise NotImplementedError
    def set_target_at_time(self, target: float, start_time: float, time_constant: float) -> Self:
        raise NotImplementedError
    def set_value_curve_at_time(self, values: Float32Array, start_time: float, duration: float) -> Self:
        raise NotImplementedError
    def cancel_scheduled_values(self, start_time: float) -> Self:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class AudioBufferSourceNode:
    
    def as_audio_scheduled_source_node(self) -> AudioScheduledSourceNode:
        raise NotImplementedError
    def buffer(self) -> Optional[AudioBuffer]:
        raise NotImplementedError
    def set_buffer(self, buffer: Optional[AudioBuffer]) -> None:
        raise NotImplementedError
    def playback_rate(self) -> AudioParam:
        raise NotImplementedError
    def detune(self) -> AudioParam:
        raise NotImplementedError
    def loop(self) -> bool:
        raise NotImplementedError
    def set_loop(self, loop: bool) -> None:
        raise NotImplementedError
    def loop_start(self) -> float:
        raise NotImplementedError
    def set_loop_start(self, loop_start: float) -> None:
        raise NotImplementedError
    def loop_end(self) -> float:
        raise NotImplementedError
    def set_loop_end(self, loop_end: float) -> None:
        raise NotImplementedError
    def onended(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onended(self, onended: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def start(self, when: Optional[float], grain_offset: Optional[float], grain_duration: Optional[float]) -> None:
        raise NotImplementedError
    def stop(self, when: Optional[float]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ConstantSourceNode:
    
    def as_audio_scheduled_source_node(self) -> AudioScheduledSourceNode:
        raise NotImplementedError
    def offset(self) -> AudioParam:
        raise NotImplementedError
    def onended(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onended(self, onended: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def start(self, when: Optional[float]) -> None:
        raise NotImplementedError
    def stop(self, when: Optional[float]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ScriptProcessorNode:
    
    def as_audio_node(self) -> Any:
        raise NotImplementedError
    def onaudioprocess(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onaudioprocess(self, onaudioprocess: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def buffer_size(self) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class AnalyserNode:
    
    def as_audio_node(self) -> Any:
        raise NotImplementedError
    def get_float_frequency_data(self, array: Float32Array) -> None:
        raise NotImplementedError
    def get_byte_frequency_data(self, array: Uint8Array) -> None:
        raise NotImplementedError
    def get_float_time_domain_data(self, array: Float32Array) -> None:
        raise NotImplementedError
    def get_byte_time_domain_data(self, array: Uint8Array) -> None:
        raise NotImplementedError
    def fft_size(self) -> int:
        raise NotImplementedError
    def set_fft_size(self, fft_size: int) -> None:
        raise NotImplementedError
    def frequency_bin_count(self) -> int:
        raise NotImplementedError
    def min_decibels(self) -> float:
        raise NotImplementedError
    def set_min_decibels(self, min_decibels: float) -> None:
        raise NotImplementedError
    def max_decibels(self) -> float:
        raise NotImplementedError
    def set_max_decibels(self, max_decibels: float) -> None:
        raise NotImplementedError
    def smoothing_time_constant(self) -> float:
        raise NotImplementedError
    def set_smoothing_time_constant(self, smoothing_time_constant: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class GainNode:
    
    def as_audio_node(self) -> Any:
        raise NotImplementedError
    def gain(self) -> AudioParam:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DelayNode:
    
    def as_audio_node(self) -> Any:
        raise NotImplementedError
    def delay_time(self) -> AudioParam:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class BiquadFilterType(Enum):
    LOWPASS = 0
    HIGHPASS = 1
    BANDPASS = 2
    LOWSHELF = 3
    HIGHSHELF = 4
    PEAKING = 5
    NOTCH = 6
    ALLPASS = 7

class BiquadFilterNode:
    
    def as_audio_node(self) -> Any:
        raise NotImplementedError
    def type(self) -> BiquadFilterType:
        raise NotImplementedError
    def set_type(self, type: BiquadFilterType) -> None:
        raise NotImplementedError
    def frequency(self) -> AudioParam:
        raise NotImplementedError
    def detune(self) -> AudioParam:
        raise NotImplementedError
    def q(self) -> AudioParam:
        raise NotImplementedError
    def gain(self) -> AudioParam:
        raise NotImplementedError
    def get_frequency_response(self, frequency_hz: Float32Array, mag_response: Float32Array, phase_response: Float32Array) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class IirFilterNode:
    
    def as_audio_node(self) -> Any:
        raise NotImplementedError
    def get_frequency_response(self, frequency_hz: Float32Array, mag_response: Float32Array, phase_response: Float32Array) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class OverSampleType(Enum):
    NONE = 0
    X2X = 1
    X4X = 2

class WaveShaperNode:
    
    def as_audio_node(self) -> Any:
        raise NotImplementedError
    def curve(self) -> Float32Array:
        raise NotImplementedError
    def set_curve(self, curve: Float32Array) -> None:
        raise NotImplementedError
    def oversample(self) -> OverSampleType:
        raise NotImplementedError
    def set_oversample(self, oversample: OverSampleType) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PanningModelType(Enum):
    EQUALPOWER = 0
    HRTF = 1

class DistanceModelType(Enum):
    LINEAR = 0
    INVERSE = 1
    EXPONENTIAL = 2

class PannerNode:
    
    def as_audio_node(self) -> Any:
        raise NotImplementedError
    def panning_model(self) -> PanningModelType:
        raise NotImplementedError
    def set_panning_model(self, panning_model: PanningModelType) -> None:
        raise NotImplementedError
    def set_position(self, x: float, y: float, z: float) -> None:
        raise NotImplementedError
    def set_orientation(self, x: float, y: float, z: float) -> None:
        raise NotImplementedError
    def set_velocity(self, x: float, y: float, z: float) -> None:
        raise NotImplementedError
    def position_x(self) -> AudioParam:
        raise NotImplementedError
    def position_y(self) -> AudioParam:
        raise NotImplementedError
    def position_z(self) -> AudioParam:
        raise NotImplementedError
    def orientation_x(self) -> AudioParam:
        raise NotImplementedError
    def orientation_y(self) -> AudioParam:
        raise NotImplementedError
    def orientation_z(self) -> AudioParam:
        raise NotImplementedError
    def distance_model(self) -> DistanceModelType:
        raise NotImplementedError
    def set_distance_model(self, distance_model: DistanceModelType) -> None:
        raise NotImplementedError
    def ref_distance(self) -> float:
        raise NotImplementedError
    def set_ref_distance(self, ref_distance: float) -> None:
        raise NotImplementedError
    def max_distance(self) -> float:
        raise NotImplementedError
    def set_max_distance(self, max_distance: float) -> None:
        raise NotImplementedError
    def rolloff_factor(self) -> float:
        raise NotImplementedError
    def set_rolloff_factor(self, rolloff_factor: float) -> None:
        raise NotImplementedError
    def cone_inner_angle(self) -> float:
        raise NotImplementedError
    def set_cone_inner_angle(self, cone_inner_angle: float) -> None:
        raise NotImplementedError
    def cone_outer_angle(self) -> float:
        raise NotImplementedError
    def set_cone_outer_angle(self, cone_outer_angle: float) -> None:
        raise NotImplementedError
    def cone_outer_gain(self) -> float:
        raise NotImplementedError
    def set_cone_outer_gain(self, cone_outer_gain: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class StereoPannerNode:
    
    def as_audio_node(self) -> Any:
        raise NotImplementedError
    def pan(self) -> AudioParam:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ConvolverNode:
    
    def as_audio_node(self) -> Any:
        raise NotImplementedError
    def buffer(self) -> Optional[AudioBuffer]:
        raise NotImplementedError
    def set_buffer(self, buffer: Optional[AudioBuffer]) -> None:
        raise NotImplementedError
    def normalize(self) -> bool:
        raise NotImplementedError
    def set_normalize(self, normalize: bool) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ChannelSplitterNode:
    
    def as_audio_node(self) -> Any:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ChannelMergerNode:
    
    def as_audio_node(self) -> Any:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DynamicsCompressorNode:
    
    def as_audio_node(self) -> Any:
        raise NotImplementedError
    def threshold(self) -> AudioParam:
        raise NotImplementedError
    def knee(self) -> AudioParam:
        raise NotImplementedError
    def ratio(self) -> AudioParam:
        raise NotImplementedError
    def reduction(self) -> float:
        raise NotImplementedError
    def attack(self) -> AudioParam:
        raise NotImplementedError
    def release(self) -> AudioParam:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class OscillatorType(Enum):
    SINE = 0
    SQUARE = 1
    SAWTOOTH = 2
    TRIANGLE = 3
    CUSTOM = 4

class PeriodicWave:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class OscillatorNode:
    
    def as_audio_scheduled_source_node(self) -> AudioScheduledSourceNode:
        raise NotImplementedError
    def type(self) -> OscillatorType:
        raise NotImplementedError
    def set_type(self, type: OscillatorType) -> None:
        raise NotImplementedError
    def frequency(self) -> AudioParam:
        raise NotImplementedError
    def detune(self) -> AudioParam:
        raise NotImplementedError
    def set_periodic_wave(self, periodic_wave: PeriodicWave) -> None:
        raise NotImplementedError
    def onended(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onended(self, onended: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def start(self, when: Optional[float]) -> None:
        raise NotImplementedError
    def stop(self, when: Optional[float]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class PeriodicWaveConstraints:
    disable_normalization: Optional[bool]

class BaseAudioContext:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def destination(self) -> AudioDestinationNode:
        raise NotImplementedError
    def sample_rate(self) -> float:
        raise NotImplementedError
    def current_time(self) -> float:
        raise NotImplementedError
    def listener(self) -> AudioListener:
        raise NotImplementedError
    def state(self) -> AudioContextState:
        raise NotImplementedError
    def audio_worklet(self) -> AudioWorklet:
        raise NotImplementedError
    def resume(self) -> None:
        raise NotImplementedError
    def onstatechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onstatechange(self, onstatechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def create_buffer(self, number_of_channels: int, length: int, sample_rate: float) -> AudioBuffer:
        raise NotImplementedError
    def decode_audio_data(self, audio_data: ArrayBuffer, success_callback: Optional[DecodeSuccessCallback], error_callback: Optional[DecodeErrorCallback]) -> AudioBuffer:
        raise NotImplementedError
    def create_buffer_source(self) -> AudioBufferSourceNode:
        raise NotImplementedError
    def create_constant_source(self) -> ConstantSourceNode:
        raise NotImplementedError
    def create_script_processor(self, buffer_size: Optional[int], number_of_input_channels: Optional[int], number_of_output_channels: Optional[int]) -> ScriptProcessorNode:
        raise NotImplementedError
    def create_analyser(self) -> AnalyserNode:
        raise NotImplementedError
    def create_gain(self) -> GainNode:
        raise NotImplementedError
    def create_delay(self, max_delay_time: Optional[float]) -> DelayNode:
        raise NotImplementedError
    def create_biquad_filter(self) -> BiquadFilterNode:
        raise NotImplementedError
    def create_iir_filter(self, feedforward: List[float], feedback: List[float]) -> IirFilterNode:
        raise NotImplementedError
    def create_wave_shaper(self) -> WaveShaperNode:
        raise NotImplementedError
    def create_panner(self) -> PannerNode:
        raise NotImplementedError
    def create_stereo_panner(self) -> StereoPannerNode:
        raise NotImplementedError
    def create_convolver(self) -> ConvolverNode:
        raise NotImplementedError
    def create_channel_splitter(self, number_of_outputs: Optional[int]) -> ChannelSplitterNode:
        raise NotImplementedError
    def create_channel_merger(self, number_of_inputs: Optional[int]) -> ChannelMergerNode:
        raise NotImplementedError
    def create_dynamics_compressor(self) -> DynamicsCompressorNode:
        raise NotImplementedError
    def create_oscillator(self) -> OscillatorNode:
        raise NotImplementedError
    def create_periodic_wave(self, real: Float32Array, imag: Float32Array, constraints: Optional[PeriodicWaveConstraints]) -> PeriodicWave:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ChannelCountMode(Enum):
    MAX = 0
    CLAMPED_MAX = 1
    EXPLICIT = 2

class ChannelInterpretation(Enum):
    SPEAKERS = 0
    DISCRETE = 1

class AudioNode:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def disconnect(self, params: Optional[AudioNodeDisconnectParams]) -> None:
        raise NotImplementedError
    def context(self) -> BaseAudioContext:
        raise NotImplementedError
    def number_of_inputs(self) -> int:
        raise NotImplementedError
    def number_of_outputs(self) -> int:
        raise NotImplementedError
    def channel_count(self) -> int:
        raise NotImplementedError
    def set_channel_count(self, channel_count: int) -> None:
        raise NotImplementedError
    def channel_count_mode(self) -> ChannelCountMode:
        raise NotImplementedError
    def set_channel_count_mode(self, channel_count_mode: ChannelCountMode) -> None:
        raise NotImplementedError
    def channel_interpretation(self) -> ChannelInterpretation:
        raise NotImplementedError
    def set_channel_interpretation(self, channel_interpretation: ChannelInterpretation) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MediaStreamAudioSourceNode:
    
    def as_audio_node(self) -> AudioNode:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CssTransition:
    
    def as_animation(self) -> Animation:
        raise NotImplementedError
    def transition_property(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgaElement:
    
    def as_svg_graphics_element(self) -> SvgGraphicsElement:
        raise NotImplementedError
    def target(self) -> SvgAnimatedString:
        raise NotImplementedError
    def download(self) -> str:
        raise NotImplementedError
    def set_download(self, download: str) -> None:
        raise NotImplementedError
    def ping(self) -> str:
        raise NotImplementedError
    def set_ping(self, ping: str) -> None:
        raise NotImplementedError
    def rel(self) -> str:
        raise NotImplementedError
    def set_rel(self, rel: str) -> None:
        raise NotImplementedError
    def referrer_policy(self) -> str:
        raise NotImplementedError
    def set_referrer_policy(self, referrer_policy: str) -> None:
        raise NotImplementedError
    def rel_list(self) -> DomTokenList:
        raise NotImplementedError
    def hreflang(self) -> str:
        raise NotImplementedError
    def set_hreflang(self, hreflang: str) -> None:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def set_type(self, type: str) -> None:
        raise NotImplementedError
    def text(self) -> str:
        raise NotImplementedError
    def set_text(self, text: str) -> None:
        raise NotImplementedError
    def href(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Coordinates:
    
    def latitude(self) -> float:
        raise NotImplementedError
    def longitude(self) -> float:
        raise NotImplementedError
    def altitude(self) -> float:
        raise NotImplementedError
    def accuracy(self) -> float:
        raise NotImplementedError
    def altitude_accuracy(self) -> float:
        raise NotImplementedError
    def heading(self) -> float:
        raise NotImplementedError
    def speed(self) -> float:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MidiPortType(Enum):
    INPUT = 0
    OUTPUT = 1

class MidiPortDeviceState(Enum):
    DISCONNECTED = 0
    CONNECTED = 1

class MidiPortConnectionState(Enum):
    OPEN = 0
    CLOSED = 1
    PENDING = 2

class MidiPort:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def id(self) -> str:
        raise NotImplementedError
    def manufacturer(self) -> str:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def version(self) -> str:
        raise NotImplementedError
    def type(self) -> MidiPortType:
        raise NotImplementedError
    def state(self) -> MidiPortDeviceState:
        raise NotImplementedError
    def connection(self) -> MidiPortConnectionState:
        raise NotImplementedError
    def onstatechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onstatechange(self, onstatechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def open(self) -> Self:
        raise NotImplementedError
    def close(self) -> Self:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MidiInput:
    
    def as_midi_port(self) -> MidiPort:
        raise NotImplementedError
    def onmidimessage(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmidimessage(self, onmidimessage: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class U2fClientData:
    typ: Optional[str]
    challenge: Optional[str]
    origin: Optional[str]

@dataclass
class RegisterResponse:
    version: Optional[str]
    registration_data: Optional[str]
    client_data: Optional[str]
    error_code: Optional[Some[Optional[int]]]
    error_message: Optional[str]

@dataclass
class SignResponse:
    key_handle: Optional[str]
    signature_data: Optional[str]
    client_data: Optional[str]
    error_code: Optional[Some[Optional[int]]]
    error_message: Optional[str]

@dataclass
class ConstantSourceOptions:
    offset: Optional[float]

class WorkletGlobalScope:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class AudioWorkletGlobalScope:
    
    def as_worklet_global_scope(self) -> WorkletGlobalScope:
        raise NotImplementedError
    def register_processor(self, name: str, processor_ctor: VoidFunction) -> None:
        raise NotImplementedError
    def current_frame(self) -> int:
        raise NotImplementedError
    def current_time(self) -> float:
        raise NotImplementedError
    def sample_rate(self) -> float:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class NetworkCommandOptions:
    id: Optional[int]
    cmd: Optional[str]
    ifname: Optional[str]
    ip: Optional[str]
    prefix_length: Optional[int]
    domain: Optional[str]
    dnses: Optional[List[str]]
    gateway: Optional[str]
    gateways: Optional[List[str]]
    mode: Optional[str]
    report: Optional[bool]
    enabled: Optional[bool]
    wifictrlinterfacename: Optional[str]
    internal_ifname: Optional[str]
    external_ifname: Optional[str]
    enable: Optional[bool]
    ssid: Optional[str]
    security: Optional[str]
    key: Optional[str]
    prefix: Optional[str]
    link: Optional[str]
    interface_list: Optional[List[str]]
    wifi_start_ip: Optional[str]
    wifi_end_ip: Optional[str]
    usb_start_ip: Optional[str]
    usb_end_ip: Optional[str]
    dns1: Optional[str]
    dns2: Optional[str]
    threshold: Optional[int]
    start_ip: Optional[str]
    end_ip: Optional[str]
    server_ip: Optional[str]
    mask_length: Optional[str]
    pre_internal_ifname: Optional[str]
    pre_external_ifname: Optional[str]
    cur_internal_ifname: Optional[str]
    cur_external_ifname: Optional[str]
    ipaddr: Optional[int]
    mask: Optional[int]
    gateway_long: Optional[int]
    dns1_long: Optional[int]
    dns2_long: Optional[int]
    mtu: Optional[int]

@dataclass
class NetworkResultOptions:
    id: Optional[int]
    ret: Optional[bool]
    broadcast: Optional[bool]
    topic: Optional[str]
    reason: Optional[str]
    result_code: Optional[int]
    result_reason: Optional[str]
    error: Optional[bool]
    enable: Optional[bool]
    result: Optional[bool]
    success: Optional[bool]
    cur_external_ifname: Optional[str]
    cur_internal_ifname: Optional[str]
    reply: Optional[str]
    route: Optional[str]
    ipaddr_str: Optional[str]
    gateway_str: Optional[str]
    dns1_str: Optional[str]
    dns2_str: Optional[str]
    mask_str: Optional[str]
    server_str: Optional[str]
    vendor_str: Optional[str]
    lease: Optional[int]
    prefix_length: Optional[int]
    mask: Optional[int]
    ipaddr: Optional[int]
    gateway: Optional[int]
    dns1: Optional[int]
    dns2: Optional[int]
    server: Optional[int]
    net_id: Optional[str]
    interface_list: Optional[List[str]]
    flag: Optional[str]
    mac_addr: Optional[str]
    ip_addr: Optional[str]

class PopStateEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def state(self) -> Any:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class PopStateEventInit:
    state: Any
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class CssGroupingRule:
    
    def as_css_rule(self) -> CssRule:
        raise NotImplementedError
    def css_rules(self) -> CssRuleList:
        raise NotImplementedError
    def insert_rule(self, rule: str, index: Optional[int]) -> int:
        raise NotImplementedError
    def delete_rule(self, index: int) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CssConditionRule:
    
    def as_css_grouping_rule(self) -> CssGroupingRule:
        raise NotImplementedError
    def condition_text(self) -> str:
        raise NotImplementedError
    def set_condition_text(self, condition_text: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CssMediaRule:
    
    def as_css_condition_rule(self) -> CssConditionRule:
        raise NotImplementedError
    def media(self) -> MediaList:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgAnimatedNumber:
    
    def base_val(self) -> float:
        raise NotImplementedError
    def set_base_val(self, base_val: float) -> None:
        raise NotImplementedError
    def anim_val(self) -> float:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgGeometryElement:
    
    def as_svg_graphics_element(self) -> SvgGraphicsElement:
        raise NotImplementedError
    def path_length(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def get_total_length(self) -> float:
        raise NotImplementedError
    def get_point_at_length(self, distance: float) -> SvgPoint:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class XmlHttpRequestEventTarget:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def onloadstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onloadstart(self, onloadstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onprogress(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onprogress(self, onprogress: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onabort(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onabort(self, onabort: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onload(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onload(self, onload: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontimeout(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontimeout(self, ontimeout: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onloadend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onloadend(self, onloadend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgfeDistantLightElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def azimuth(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def elevation(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgNumberList:
    
    def number_of_items(self) -> int:
        raise NotImplementedError
    def clear(self) -> None:
        raise NotImplementedError
    def initialize(self, new_item: SvgNumber) -> SvgNumber:
        raise NotImplementedError
    def get_item(self, index: int) -> SvgNumber:
        raise NotImplementedError
    def insert_item_before(self, new_item: SvgNumber, index: int) -> SvgNumber:
        raise NotImplementedError
    def replace_item(self, new_item: SvgNumber, index: int) -> SvgNumber:
        raise NotImplementedError
    def remove_item(self, index: int) -> SvgNumber:
        raise NotImplementedError
    def append_item(self, new_item: SvgNumber) -> SvgNumber:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgAnimatedNumberList:
    
    def base_val(self) -> SvgNumberList:
        raise NotImplementedError
    def anim_val(self) -> SvgNumberList:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgfeTileElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def in1(self) -> SvgAnimatedString:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def result(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class FileReaderSync:
    
    def read_as_array_buffer(self, blob: Blob) -> ArrayBuffer:
        raise NotImplementedError
    def read_as_binary_string(self, blob: Blob) -> str:
        raise NotImplementedError
    def read_as_text(self, blob: Blob, encoding: Optional[str]) -> str:
        raise NotImplementedError
    def read_as_data_url(self, blob: Blob) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgfeDiffuseLightingElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def in1(self) -> SvgAnimatedString:
        raise NotImplementedError
    def surface_scale(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def diffuse_constant(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def kernel_unit_length_x(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def kernel_unit_length_y(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def result(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SocketReadyState(Enum):
    OPENING = 0
    OPEN = 1
    CLOSING = 2
    CLOSED = 3
    HALFCLOSED = 4

class ExtendableEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def wait_until(self, p: Any) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HeadersGuardEnum(Enum):
    NONE = 0
    REQUEST = 1
    REQUEST_NO_CORS = 2
    RESPONSE = 3
    IMMUTABLE = 4

class Headers:
    
    def append(self, name: str, value: str) -> None:
        raise NotImplementedError
    def delete(self, name: str) -> None:
        raise NotImplementedError
    def get(self, name: str) -> str:
        raise NotImplementedError
    def has(self, name: str) -> bool:
        raise NotImplementedError
    def set(self, name: str, value: str) -> None:
        raise NotImplementedError
    def guard(self) -> HeadersGuardEnum:
        raise NotImplementedError
    def set_guard(self, guard: HeadersGuardEnum) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class RequestDestination(Enum):
    DEFAULT = 0
    AUDIO = 1
    AUDIOWORKLET = 2
    DOCUMENT = 3
    EMBED = 4
    FONT = 5
    IMAGE = 6
    MANIFEST = 7
    OBJECT = 8
    PAINTWORKLET = 9
    REPORT = 10
    SCRIPT = 11
    SHAREDWORKER = 12
    STYLE = 13
    TRACK = 14
    VIDEO = 15
    WORKER = 16
    XSLT = 17

class ReferrerPolicy(Enum):
    DEFAULT = 0
    NO_REFERRER = 1
    NO_REFERRER_WHEN_DOWNGRADE = 2
    ORIGIN = 3
    ORIGIN_WHEN_CROSS_ORIGIN = 4
    UNSAFE_URL = 5
    SAME_ORIGIN = 6
    STRICT_ORIGIN = 7
    STRICT_ORIGIN_WHEN_CROSS_ORIGIN = 8

class RequestMode(Enum):
    SAME_ORIGIN = 0
    NO_CORS = 1
    CORS = 2
    NAVIGATE = 3

class RequestCache(Enum):
    DEFAULT = 0
    NO_STORE = 1
    RELOAD = 2
    NO_CACHE = 3
    FORCE_CACHE = 4
    ONLY_IF_CACHED = 5

class RequestRedirect(Enum):
    FOLLOW = 0
    ERROR = 1
    MANUAL = 2

class Request:
    
    def method(self) -> str:
        raise NotImplementedError
    def url(self) -> str:
        raise NotImplementedError
    def headers(self) -> Headers:
        raise NotImplementedError
    def destination(self) -> RequestDestination:
        raise NotImplementedError
    def referrer(self) -> str:
        raise NotImplementedError
    def referrer_policy(self) -> ReferrerPolicy:
        raise NotImplementedError
    def mode(self) -> RequestMode:
        raise NotImplementedError
    def credentials(self) -> RequestCredentials:
        raise NotImplementedError
    def cache(self) -> RequestCache:
        raise NotImplementedError
    def redirect(self) -> RequestRedirect:
        raise NotImplementedError
    def integrity(self) -> str:
        raise NotImplementedError
    def signal(self) -> AbortSignal:
        raise NotImplementedError
    def clone(self) -> Self:
        raise NotImplementedError
    def override_content_policy_type(self, context: int) -> None:
        raise NotImplementedError
    def body_used(self) -> bool:
        raise NotImplementedError
    def array_buffer(self) -> ArrayBuffer:
        raise NotImplementedError
    def blob(self) -> Blob:
        raise NotImplementedError
    def form_data(self) -> FormData:
        raise NotImplementedError
    def json(self) -> Object:
        raise NotImplementedError
    def text(self) -> str:
        raise NotImplementedError
    def body(self) -> Optional[ReadableStream]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ResponseType(Enum):
    BASIC = 0
    CORS = 1
    DEFAULT = 2
    ERROR = 3
    OPAQUE = 4
    OPAQUEREDIRECT = 5

class Response:
    
    @classmethod
    def error(cls) -> Self:
        raise NotImplementedError
    @classmethod
    def redirect(cls, url: str, status: Optional[int]) -> Self:
        raise NotImplementedError
    def type(self) -> ResponseType:
        raise NotImplementedError
    def url(self) -> str:
        raise NotImplementedError
    def redirected(self) -> bool:
        raise NotImplementedError
    def status(self) -> int:
        raise NotImplementedError
    def ok(self) -> bool:
        raise NotImplementedError
    def status_text(self) -> str:
        raise NotImplementedError
    def headers(self) -> Headers:
        raise NotImplementedError
    def clone(self) -> Self:
        raise NotImplementedError
    def clone_unfiltered(self) -> Self:
        raise NotImplementedError
    def body_used(self) -> bool:
        raise NotImplementedError
    def array_buffer(self) -> ArrayBuffer:
        raise NotImplementedError
    def blob(self) -> Blob:
        raise NotImplementedError
    def form_data(self) -> FormData:
        raise NotImplementedError
    def json(self) -> Object:
        raise NotImplementedError
    def text(self) -> str:
        raise NotImplementedError
    def body(self) -> Optional[ReadableStream]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class FetchEvent:
    
    def as_extendable_event(self) -> ExtendableEvent:
        raise NotImplementedError
    def request(self) -> Request:
        raise NotImplementedError
    def client_id(self) -> str:
        raise NotImplementedError
    def is_reload(self) -> bool:
        raise NotImplementedError
    def respond_with(self, r: Response) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DomRequestReadyState(Enum):
    PENDING = 0
    DONE = 1

class DomRequest:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def then(self, fulfill_callback: Optional[Some[Optional[AnyCallback]]], reject_callback: Optional[Some[Optional[AnyCallback]]]) -> Any:
        raise NotImplementedError
    def fire_detailed_error(self, a_error: DomException) -> None:
        raise NotImplementedError
    def ready_state(self) -> DomRequestReadyState:
        raise NotImplementedError
    def result(self) -> Any:
        raise NotImplementedError
    def error(self) -> Optional[DomException]:
        raise NotImplementedError
    def onsuccess(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onsuccess(self, onsuccess: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgTextContentElement:
    
    def as_svg_graphics_element(self) -> SvgGraphicsElement:
        raise NotImplementedError
    @classmethod
    def lengthadjust_unknown(cls) -> int:
        raise NotImplementedError
    @classmethod
    def lengthadjust_spacing(cls) -> int:
        raise NotImplementedError
    @classmethod
    def lengthadjust_spacingandglyphs(cls) -> int:
        raise NotImplementedError
    def text_length(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def length_adjust(self) -> SvgAnimatedEnumeration:
        raise NotImplementedError
    def get_number_of_chars(self) -> int:
        raise NotImplementedError
    def get_computed_text_length(self) -> float:
        raise NotImplementedError
    def get_sub_string_length(self, charnum: int, nchars: int) -> float:
        raise NotImplementedError
    def get_start_position_of_char(self, charnum: int) -> SvgPoint:
        raise NotImplementedError
    def get_end_position_of_char(self, charnum: int) -> SvgPoint:
        raise NotImplementedError
    def get_extent_of_char(self, charnum: int) -> SvgRect:
        raise NotImplementedError
    def get_rotation_of_char(self, charnum: int) -> float:
        raise NotImplementedError
    def get_char_num_at_position(self, point: SvgPoint) -> int:
        raise NotImplementedError
    def select_sub_string(self, charnum: int, nchars: int) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgLengthList:
    
    def number_of_items(self) -> int:
        raise NotImplementedError
    def clear(self) -> None:
        raise NotImplementedError
    def initialize(self, new_item: SvgLength) -> SvgLength:
        raise NotImplementedError
    def get_item(self, index: int) -> SvgLength:
        raise NotImplementedError
    def insert_item_before(self, new_item: SvgLength, index: int) -> SvgLength:
        raise NotImplementedError
    def replace_item(self, new_item: SvgLength, index: int) -> SvgLength:
        raise NotImplementedError
    def remove_item(self, index: int) -> SvgLength:
        raise NotImplementedError
    def append_item(self, new_item: SvgLength) -> SvgLength:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgAnimatedLengthList:
    
    def base_val(self) -> SvgLengthList:
        raise NotImplementedError
    def anim_val(self) -> SvgLengthList:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgTextPositioningElement:
    
    def as_svg_text_content_element(self) -> SvgTextContentElement:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLengthList:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLengthList:
        raise NotImplementedError
    def dx(self) -> SvgAnimatedLengthList:
        raise NotImplementedError
    def dy(self) -> SvgAnimatedLengthList:
        raise NotImplementedError
    def rotate(self) -> SvgAnimatedNumberList:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgTextElement:
    
    def as_svg_text_positioning_element(self) -> SvgTextPositioningElement:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlTableCellElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def col_span(self) -> int:
        raise NotImplementedError
    def set_col_span(self, col_span: int) -> None:
        raise NotImplementedError
    def row_span(self) -> int:
        raise NotImplementedError
    def set_row_span(self, row_span: int) -> None:
        raise NotImplementedError
    def headers(self) -> str:
        raise NotImplementedError
    def set_headers(self, headers: str) -> None:
        raise NotImplementedError
    def cell_index(self) -> int:
        raise NotImplementedError
    def align(self) -> str:
        raise NotImplementedError
    def set_align(self, align: str) -> None:
        raise NotImplementedError
    def axis(self) -> str:
        raise NotImplementedError
    def set_axis(self, axis: str) -> None:
        raise NotImplementedError
    def height(self) -> str:
        raise NotImplementedError
    def set_height(self, height: str) -> None:
        raise NotImplementedError
    def width(self) -> str:
        raise NotImplementedError
    def set_width(self, width: str) -> None:
        raise NotImplementedError
    def ch(self) -> str:
        raise NotImplementedError
    def set_ch(self, ch: str) -> None:
        raise NotImplementedError
    def ch_off(self) -> str:
        raise NotImplementedError
    def set_ch_off(self, ch_off: str) -> None:
        raise NotImplementedError
    def no_wrap(self) -> bool:
        raise NotImplementedError
    def set_no_wrap(self, no_wrap: bool) -> None:
        raise NotImplementedError
    def v_align(self) -> str:
        raise NotImplementedError
    def set_v_align(self, v_align: str) -> None:
        raise NotImplementedError
    def bg_color(self) -> str:
        raise NotImplementedError
    def set_bg_color(self, bg_color: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlSpanElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgSwitchElement:
    
    def as_svg_graphics_element(self) -> SvgGraphicsElement:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class RtcIceCandidate:
    
    def candidate(self) -> str:
        raise NotImplementedError
    def set_candidate(self, candidate: str) -> None:
        raise NotImplementedError
    def sdp_mid(self) -> str:
        raise NotImplementedError
    def set_sdp_mid(self, sdp_mid: str) -> None:
        raise NotImplementedError
    def sdp_m_line_index(self) -> int:
        raise NotImplementedError
    def set_sdp_m_line_index(self, sdp_m_line_index: int) -> None:
        raise NotImplementedError
    def to_json(self) -> Object:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class RtcPeerConnectionIceEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def candidate(self) -> Optional[RtcIceCandidate]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgClipPathElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def clip_path_units(self) -> SvgAnimatedEnumeration:
        raise NotImplementedError
    def transform(self) -> SvgAnimatedTransformList:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class TextDecodeOptions:
    stream: Optional[bool]

class TextDecoder:
    
    def encoding(self) -> str:
        raise NotImplementedError
    def fatal(self) -> bool:
        raise NotImplementedError
    def decode(self, input: Optional[BufferSource], options: Optional[TextDecodeOptions]) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class TextDecoderOptions:
    fatal: Optional[bool]

class ImageCaptureError:
    
    @classmethod
    def frame_grab_error(cls) -> int:
        raise NotImplementedError
    @classmethod
    def settings_error(cls) -> int:
        raise NotImplementedError
    @classmethod
    def photo_error(cls) -> int:
        raise NotImplementedError
    @classmethod
    def error_unknown(cls) -> int:
        raise NotImplementedError
    def code(self) -> int:
        raise NotImplementedError
    def message(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ImageCaptureErrorEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def image_capture_error(self) -> Optional[ImageCaptureError]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class ImageCaptureErrorEventInit:
    image_capture_error: Optional[Some[Optional[ImageCaptureError]]]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class WebGlPowerPreference(Enum):
    DEFAULT = 0
    LOW_POWER = 1
    HIGH_PERFORMANCE = 2

@dataclass
class WebGlContextAttributes:
    alpha: Optional[bool]
    depth: Optional[bool]
    stencil: Optional[bool]
    antialias: Optional[bool]
    premultiplied_alpha: Optional[bool]
    preserve_drawing_buffer: Optional[bool]
    fail_if_major_performance_caveat: Optional[bool]
    power_preference: Optional[WebGlPowerPreference]

class WebGlBuffer:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebGlFramebuffer:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebGlProgram:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebGlRenderbuffer:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebGlShader:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebGlTexture:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebGlUniformLocation:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebGlVertexArrayObject:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebGlActiveInfo:
    
    def size(self) -> int:
        raise NotImplementedError
    def type(self) -> int:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebGlShaderPrecisionFormat:
    
    def range_min(self) -> int:
        raise NotImplementedError
    def range_max(self) -> int:
        raise NotImplementedError
    def precision(self) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class Float32ArrayOrListGLfloat_Float32Array:
    value: Float32Array


@dataclass
class Float32ArrayOrListGLfloat_ListGLfloat:
    value: List[float]


Float32ArrayOrListGLfloat = Union[Float32ArrayOrListGLfloat_Float32Array, Float32ArrayOrListGLfloat_ListGLfloat]



@dataclass
class Int32ArrayOrListGLint_Int32Array:
    value: Int32Array


@dataclass
class Int32ArrayOrListGLint_ListGLint:
    value: List[int]


Int32ArrayOrListGLint = Union[Int32ArrayOrListGLint_Int32Array, Int32ArrayOrListGLint_ListGLint]



@dataclass
class WebGlRenderingContextBufferDataParams_TargetSizeUsage:
    value: Tuple[int, int, int]


WebGlRenderingContextBufferDataParams = Union[WebGlRenderingContextBufferDataParams_TargetSizeUsage]



@dataclass
class WebGlRenderingContextBufferSubDataParams_TargetOffsetData:
    value: Tuple[int, int, ArrayBuffer]


WebGlRenderingContextBufferSubDataParams = Union[WebGlRenderingContextBufferSubDataParams_TargetOffsetData]



@dataclass
class WebGlRenderingContextTexImage2DParams_TargetLevelInternalformatWidthHeightBorderFormatTypePixels:
    value: Tuple[int, int, int, int, int, int, int, int, ArrayBufferView]


@dataclass
class WebGlRenderingContextTexImage2DParams_TargetLevelInternalformatFormatTypePixels:
    value: Tuple[int, int, int, int, int, ImageBitmap]


@dataclass
class WebGlRenderingContextTexImage2DParams_TargetLevelInternalformatFormatTypeImage:
    value: Tuple[int, int, int, int, int, HtmlImageElement]


@dataclass
class WebGlRenderingContextTexImage2DParams_TargetLevelInternalformatFormatTypeCanvas:
    value: Tuple[int, int, int, int, int, HtmlCanvasElement]


@dataclass
class WebGlRenderingContextTexImage2DParams_TargetLevelInternalformatFormatTypeVideo:
    value: Tuple[int, int, int, int, int, HtmlVideoElement]


@dataclass
class WebGlRenderingContextTexImage2DParams_TargetLevelInternalformatFormatTypeVideoFrame:
    value: Tuple[int, int, int, int, int, VideoFrame]


WebGlRenderingContextTexImage2DParams = Union[WebGlRenderingContextTexImage2DParams_TargetLevelInternalformatWidthHeightBorderFormatTypePixels, WebGlRenderingContextTexImage2DParams_TargetLevelInternalformatFormatTypePixels, WebGlRenderingContextTexImage2DParams_TargetLevelInternalformatFormatTypeImage, WebGlRenderingContextTexImage2DParams_TargetLevelInternalformatFormatTypeCanvas, WebGlRenderingContextTexImage2DParams_TargetLevelInternalformatFormatTypeVideo, WebGlRenderingContextTexImage2DParams_TargetLevelInternalformatFormatTypeVideoFrame]



@dataclass
class WebGlRenderingContextTexSubImage2DParams_TargetLevelXoffsetYoffsetWidthHeightFormatTypePixels:
    value: Tuple[int, int, int, int, int, int, int, int, ArrayBufferView]


@dataclass
class WebGlRenderingContextTexSubImage2DParams_TargetLevelXoffsetYoffsetFormatTypePixels:
    value: Tuple[int, int, int, int, int, int, ImageBitmap]


@dataclass
class WebGlRenderingContextTexSubImage2DParams_TargetLevelXoffsetYoffsetFormatTypeImage:
    value: Tuple[int, int, int, int, int, int, HtmlImageElement]


@dataclass
class WebGlRenderingContextTexSubImage2DParams_TargetLevelXoffsetYoffsetFormatTypeCanvas:
    value: Tuple[int, int, int, int, int, int, HtmlCanvasElement]


@dataclass
class WebGlRenderingContextTexSubImage2DParams_TargetLevelXoffsetYoffsetFormatTypeVideo:
    value: Tuple[int, int, int, int, int, int, HtmlVideoElement]


@dataclass
class WebGlRenderingContextTexSubImage2DParams_TargetLevelXoffsetYoffsetFormatTypeVideoFrame:
    value: Tuple[int, int, int, int, int, int, VideoFrame]


WebGlRenderingContextTexSubImage2DParams = Union[WebGlRenderingContextTexSubImage2DParams_TargetLevelXoffsetYoffsetWidthHeightFormatTypePixels, WebGlRenderingContextTexSubImage2DParams_TargetLevelXoffsetYoffsetFormatTypePixels, WebGlRenderingContextTexSubImage2DParams_TargetLevelXoffsetYoffsetFormatTypeImage, WebGlRenderingContextTexSubImage2DParams_TargetLevelXoffsetYoffsetFormatTypeCanvas, WebGlRenderingContextTexSubImage2DParams_TargetLevelXoffsetYoffsetFormatTypeVideo, WebGlRenderingContextTexSubImage2DParams_TargetLevelXoffsetYoffsetFormatTypeVideoFrame]


class WebGlRenderingContext:
    
    def buffer_data(self, params: WebGlRenderingContextBufferDataParams) -> None:
        raise NotImplementedError
    def buffer_sub_data(self, params: WebGlRenderingContextBufferSubDataParams) -> None:
        raise NotImplementedError
    def compressed_tex_image2_d(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, data: ArrayBufferView) -> None:
        raise NotImplementedError
    def compressed_tex_sub_image2_d(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, data: ArrayBufferView) -> None:
        raise NotImplementedError
    def read_pixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: ArrayBufferView) -> None:
        raise NotImplementedError
    def tex_image2_d(self, params: WebGlRenderingContextTexImage2DParams) -> None:
        raise NotImplementedError
    def tex_sub_image2_d(self, params: WebGlRenderingContextTexSubImage2DParams) -> None:
        raise NotImplementedError
    def uniform1fv(self, location: Optional[WebGlUniformLocation], data: Float32ArrayOrListGLfloat) -> None:
        raise NotImplementedError
    def uniform2fv(self, location: Optional[WebGlUniformLocation], data: Float32ArrayOrListGLfloat) -> None:
        raise NotImplementedError
    def uniform3fv(self, location: Optional[WebGlUniformLocation], data: Float32ArrayOrListGLfloat) -> None:
        raise NotImplementedError
    def uniform4fv(self, location: Optional[WebGlUniformLocation], data: Float32ArrayOrListGLfloat) -> None:
        raise NotImplementedError
    def uniform1iv(self, location: Optional[WebGlUniformLocation], data: Int32ArrayOrListGLint) -> None:
        raise NotImplementedError
    def uniform2iv(self, location: Optional[WebGlUniformLocation], data: Int32ArrayOrListGLint) -> None:
        raise NotImplementedError
    def uniform3iv(self, location: Optional[WebGlUniformLocation], data: Int32ArrayOrListGLint) -> None:
        raise NotImplementedError
    def uniform4iv(self, location: Optional[WebGlUniformLocation], data: Int32ArrayOrListGLint) -> None:
        raise NotImplementedError
    def uniform_matrix2fv(self, location: Optional[WebGlUniformLocation], transpose: bool, data: Float32ArrayOrListGLfloat) -> None:
        raise NotImplementedError
    def uniform_matrix3fv(self, location: Optional[WebGlUniformLocation], transpose: bool, data: Float32ArrayOrListGLfloat) -> None:
        raise NotImplementedError
    def uniform_matrix4fv(self, location: Optional[WebGlUniformLocation], transpose: bool, data: Float32ArrayOrListGLfloat) -> None:
        raise NotImplementedError
    @classmethod
    def depth_buffer_bit(cls) -> int:
        raise NotImplementedError
    @classmethod
    def stencil_buffer_bit(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_buffer_bit(cls) -> int:
        raise NotImplementedError
    @classmethod
    def points(cls) -> int:
        raise NotImplementedError
    @classmethod
    def lines(cls) -> int:
        raise NotImplementedError
    @classmethod
    def line_loop(cls) -> int:
        raise NotImplementedError
    @classmethod
    def line_strip(cls) -> int:
        raise NotImplementedError
    @classmethod
    def triangles(cls) -> int:
        raise NotImplementedError
    @classmethod
    def triangle_strip(cls) -> int:
        raise NotImplementedError
    @classmethod
    def triangle_fan(cls) -> int:
        raise NotImplementedError
    @classmethod
    def zero(cls) -> int:
        raise NotImplementedError
    @classmethod
    def one(cls) -> int:
        raise NotImplementedError
    @classmethod
    def src_color(cls) -> int:
        raise NotImplementedError
    @classmethod
    def one_minus_src_color(cls) -> int:
        raise NotImplementedError
    @classmethod
    def src_alpha(cls) -> int:
        raise NotImplementedError
    @classmethod
    def one_minus_src_alpha(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dst_alpha(cls) -> int:
        raise NotImplementedError
    @classmethod
    def one_minus_dst_alpha(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dst_color(cls) -> int:
        raise NotImplementedError
    @classmethod
    def one_minus_dst_color(cls) -> int:
        raise NotImplementedError
    @classmethod
    def src_alpha_saturate(cls) -> int:
        raise NotImplementedError
    @classmethod
    def func_add(cls) -> int:
        raise NotImplementedError
    @classmethod
    def blend_equation(cls) -> int:
        raise NotImplementedError
    @classmethod
    def blend_equation_rgb(cls) -> int:
        raise NotImplementedError
    @classmethod
    def blend_equation_alpha(cls) -> int:
        raise NotImplementedError
    @classmethod
    def func_subtract(cls) -> int:
        raise NotImplementedError
    @classmethod
    def func_reverse_subtract(cls) -> int:
        raise NotImplementedError
    @classmethod
    def blend_dst_rgb(cls) -> int:
        raise NotImplementedError
    @classmethod
    def blend_src_rgb(cls) -> int:
        raise NotImplementedError
    @classmethod
    def blend_dst_alpha(cls) -> int:
        raise NotImplementedError
    @classmethod
    def blend_src_alpha(cls) -> int:
        raise NotImplementedError
    @classmethod
    def constant_color(cls) -> int:
        raise NotImplementedError
    @classmethod
    def one_minus_constant_color(cls) -> int:
        raise NotImplementedError
    @classmethod
    def constant_alpha(cls) -> int:
        raise NotImplementedError
    @classmethod
    def one_minus_constant_alpha(cls) -> int:
        raise NotImplementedError
    @classmethod
    def blend_color(cls) -> int:
        raise NotImplementedError
    @classmethod
    def array_buffer(cls) -> int:
        raise NotImplementedError
    @classmethod
    def element_array_buffer(cls) -> int:
        raise NotImplementedError
    @classmethod
    def array_buffer_binding(cls) -> int:
        raise NotImplementedError
    @classmethod
    def element_array_buffer_binding(cls) -> int:
        raise NotImplementedError
    @classmethod
    def stream_draw(cls) -> int:
        raise NotImplementedError
    @classmethod
    def static_draw(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dynamic_draw(cls) -> int:
        raise NotImplementedError
    @classmethod
    def buffer_size(cls) -> int:
        raise NotImplementedError
    @classmethod
    def buffer_usage(cls) -> int:
        raise NotImplementedError
    @classmethod
    def current_vertex_attrib(cls) -> int:
        raise NotImplementedError
    @classmethod
    def front(cls) -> int:
        raise NotImplementedError
    @classmethod
    def back(cls) -> int:
        raise NotImplementedError
    @classmethod
    def front_and_back(cls) -> int:
        raise NotImplementedError
    @classmethod
    def cull_face(cls) -> int:
        raise NotImplementedError
    @classmethod
    def blend(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dither(cls) -> int:
        raise NotImplementedError
    @classmethod
    def stencil_test(cls) -> int:
        raise NotImplementedError
    @classmethod
    def depth_test(cls) -> int:
        raise NotImplementedError
    @classmethod
    def scissor_test(cls) -> int:
        raise NotImplementedError
    @classmethod
    def polygon_offset_fill(cls) -> int:
        raise NotImplementedError
    @classmethod
    def sample_alpha_to_coverage(cls) -> int:
        raise NotImplementedError
    @classmethod
    def sample_coverage(cls) -> int:
        raise NotImplementedError
    @classmethod
    def no_error(cls) -> int:
        raise NotImplementedError
    @classmethod
    def invalid_enum(cls) -> int:
        raise NotImplementedError
    @classmethod
    def invalid_value(cls) -> int:
        raise NotImplementedError
    @classmethod
    def invalid_operation(cls) -> int:
        raise NotImplementedError
    @classmethod
    def out_of_memory(cls) -> int:
        raise NotImplementedError
    @classmethod
    def cw(cls) -> int:
        raise NotImplementedError
    @classmethod
    def ccw(cls) -> int:
        raise NotImplementedError
    @classmethod
    def line_width(cls) -> int:
        raise NotImplementedError
    @classmethod
    def aliased_point_size_range(cls) -> int:
        raise NotImplementedError
    @classmethod
    def aliased_line_width_range(cls) -> int:
        raise NotImplementedError
    @classmethod
    def cull_face_mode(cls) -> int:
        raise NotImplementedError
    @classmethod
    def front_face(cls) -> int:
        raise NotImplementedError
    @classmethod
    def depth_range(cls) -> int:
        raise NotImplementedError
    @classmethod
    def depth_writemask(cls) -> int:
        raise NotImplementedError
    @classmethod
    def depth_clear_value(cls) -> int:
        raise NotImplementedError
    @classmethod
    def depth_func(cls) -> int:
        raise NotImplementedError
    @classmethod
    def stencil_clear_value(cls) -> int:
        raise NotImplementedError
    @classmethod
    def stencil_func(cls) -> int:
        raise NotImplementedError
    @classmethod
    def stencil_fail(cls) -> int:
        raise NotImplementedError
    @classmethod
    def stencil_pass_depth_fail(cls) -> int:
        raise NotImplementedError
    @classmethod
    def stencil_pass_depth_pass(cls) -> int:
        raise NotImplementedError
    @classmethod
    def stencil_ref(cls) -> int:
        raise NotImplementedError
    @classmethod
    def stencil_value_mask(cls) -> int:
        raise NotImplementedError
    @classmethod
    def stencil_writemask(cls) -> int:
        raise NotImplementedError
    @classmethod
    def stencil_back_func(cls) -> int:
        raise NotImplementedError
    @classmethod
    def stencil_back_fail(cls) -> int:
        raise NotImplementedError
    @classmethod
    def stencil_back_pass_depth_fail(cls) -> int:
        raise NotImplementedError
    @classmethod
    def stencil_back_pass_depth_pass(cls) -> int:
        raise NotImplementedError
    @classmethod
    def stencil_back_ref(cls) -> int:
        raise NotImplementedError
    @classmethod
    def stencil_back_value_mask(cls) -> int:
        raise NotImplementedError
    @classmethod
    def stencil_back_writemask(cls) -> int:
        raise NotImplementedError
    @classmethod
    def viewport(cls) -> int:
        raise NotImplementedError
    @classmethod
    def scissor_box(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_clear_value(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_writemask(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unpack_alignment(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pack_alignment(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_texture_size(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_viewport_dims(cls) -> int:
        raise NotImplementedError
    @classmethod
    def subpixel_bits(cls) -> int:
        raise NotImplementedError
    @classmethod
    def red_bits(cls) -> int:
        raise NotImplementedError
    @classmethod
    def green_bits(cls) -> int:
        raise NotImplementedError
    @classmethod
    def blue_bits(cls) -> int:
        raise NotImplementedError
    @classmethod
    def alpha_bits(cls) -> int:
        raise NotImplementedError
    @classmethod
    def depth_bits(cls) -> int:
        raise NotImplementedError
    @classmethod
    def stencil_bits(cls) -> int:
        raise NotImplementedError
    @classmethod
    def polygon_offset_units(cls) -> int:
        raise NotImplementedError
    @classmethod
    def polygon_offset_factor(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture_binding2d(cls) -> int:
        raise NotImplementedError
    @classmethod
    def sample_buffers(cls) -> int:
        raise NotImplementedError
    @classmethod
    def samples(cls) -> int:
        raise NotImplementedError
    @classmethod
    def sample_coverage_value(cls) -> int:
        raise NotImplementedError
    @classmethod
    def sample_coverage_invert(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_texture_formats(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dont_care(cls) -> int:
        raise NotImplementedError
    @classmethod
    def fastest(cls) -> int:
        raise NotImplementedError
    @classmethod
    def nicest(cls) -> int:
        raise NotImplementedError
    @classmethod
    def generate_mipmap_hint(cls) -> int:
        raise NotImplementedError
    @classmethod
    def byte(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unsigned_byte(cls) -> int:
        raise NotImplementedError
    @classmethod
    def short(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unsigned_short(cls) -> int:
        raise NotImplementedError
    @classmethod
    def int(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unsigned_int(cls) -> int:
        raise NotImplementedError
    @classmethod
    def float(cls) -> int:
        raise NotImplementedError
    @classmethod
    def depth_component(cls) -> int:
        raise NotImplementedError
    @classmethod
    def alpha(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgb(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgba(cls) -> int:
        raise NotImplementedError
    @classmethod
    def luminance(cls) -> int:
        raise NotImplementedError
    @classmethod
    def luminance_alpha(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unsigned_short4444(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unsigned_short5551(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unsigned_short565(cls) -> int:
        raise NotImplementedError
    @classmethod
    def fragment_shader(cls) -> int:
        raise NotImplementedError
    @classmethod
    def vertex_shader(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_vertex_attribs(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_vertex_uniform_vectors(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_varying_vectors(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_combined_texture_image_units(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_vertex_texture_image_units(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_texture_image_units(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_fragment_uniform_vectors(cls) -> int:
        raise NotImplementedError
    @classmethod
    def shader_type(cls) -> int:
        raise NotImplementedError
    @classmethod
    def delete_status(cls) -> int:
        raise NotImplementedError
    @classmethod
    def link_status(cls) -> int:
        raise NotImplementedError
    @classmethod
    def validate_status(cls) -> int:
        raise NotImplementedError
    @classmethod
    def attached_shaders(cls) -> int:
        raise NotImplementedError
    @classmethod
    def active_uniforms(cls) -> int:
        raise NotImplementedError
    @classmethod
    def active_attributes(cls) -> int:
        raise NotImplementedError
    @classmethod
    def shading_language_version(cls) -> int:
        raise NotImplementedError
    @classmethod
    def current_program(cls) -> int:
        raise NotImplementedError
    @classmethod
    def never(cls) -> int:
        raise NotImplementedError
    @classmethod
    def less(cls) -> int:
        raise NotImplementedError
    @classmethod
    def equal(cls) -> int:
        raise NotImplementedError
    @classmethod
    def lequal(cls) -> int:
        raise NotImplementedError
    @classmethod
    def greater(cls) -> int:
        raise NotImplementedError
    @classmethod
    def notequal(cls) -> int:
        raise NotImplementedError
    @classmethod
    def gequal(cls) -> int:
        raise NotImplementedError
    @classmethod
    def always(cls) -> int:
        raise NotImplementedError
    @classmethod
    def keep(cls) -> int:
        raise NotImplementedError
    @classmethod
    def replace(cls) -> int:
        raise NotImplementedError
    @classmethod
    def incr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def decr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def invert(cls) -> int:
        raise NotImplementedError
    @classmethod
    def incr_wrap(cls) -> int:
        raise NotImplementedError
    @classmethod
    def decr_wrap(cls) -> int:
        raise NotImplementedError
    @classmethod
    def vendor(cls) -> int:
        raise NotImplementedError
    @classmethod
    def renderer(cls) -> int:
        raise NotImplementedError
    @classmethod
    def version(cls) -> int:
        raise NotImplementedError
    @classmethod
    def nearest(cls) -> int:
        raise NotImplementedError
    @classmethod
    def linear(cls) -> int:
        raise NotImplementedError
    @classmethod
    def nearest_mipmap_nearest(cls) -> int:
        raise NotImplementedError
    @classmethod
    def linear_mipmap_nearest(cls) -> int:
        raise NotImplementedError
    @classmethod
    def nearest_mipmap_linear(cls) -> int:
        raise NotImplementedError
    @classmethod
    def linear_mipmap_linear(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture_mag_filter(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture_min_filter(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture_wrap_s(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture_wrap_t(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture2d(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture_cube_map(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture_binding_cube_map(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture_cube_map_positive_x(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture_cube_map_negative_x(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture_cube_map_positive_y(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture_cube_map_negative_y(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture_cube_map_positive_z(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture_cube_map_negative_z(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_cube_map_texture_size(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture0(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture1(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture2(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture3(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture4(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture5(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture6(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture7(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture8(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture9(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture10(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture11(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture12(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture13(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture14(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture15(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture16(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture17(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture18(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture19(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture20(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture21(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture22(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture23(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture24(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture25(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture26(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture27(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture28(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture29(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture30(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture31(cls) -> int:
        raise NotImplementedError
    @classmethod
    def active_texture(cls) -> int:
        raise NotImplementedError
    @classmethod
    def repeat(cls) -> int:
        raise NotImplementedError
    @classmethod
    def clamp_to_edge(cls) -> int:
        raise NotImplementedError
    @classmethod
    def mirrored_repeat(cls) -> int:
        raise NotImplementedError
    @classmethod
    def float_vec2(cls) -> int:
        raise NotImplementedError
    @classmethod
    def float_vec3(cls) -> int:
        raise NotImplementedError
    @classmethod
    def float_vec4(cls) -> int:
        raise NotImplementedError
    @classmethod
    def int_vec2(cls) -> int:
        raise NotImplementedError
    @classmethod
    def int_vec3(cls) -> int:
        raise NotImplementedError
    @classmethod
    def int_vec4(cls) -> int:
        raise NotImplementedError
    @classmethod
    def bool(cls) -> int:
        raise NotImplementedError
    @classmethod
    def bool_vec2(cls) -> int:
        raise NotImplementedError
    @classmethod
    def bool_vec3(cls) -> int:
        raise NotImplementedError
    @classmethod
    def bool_vec4(cls) -> int:
        raise NotImplementedError
    @classmethod
    def float_mat2(cls) -> int:
        raise NotImplementedError
    @classmethod
    def float_mat3(cls) -> int:
        raise NotImplementedError
    @classmethod
    def float_mat4(cls) -> int:
        raise NotImplementedError
    @classmethod
    def sampler2d(cls) -> int:
        raise NotImplementedError
    @classmethod
    def sampler_cube(cls) -> int:
        raise NotImplementedError
    @classmethod
    def vertex_attrib_array_enabled(cls) -> int:
        raise NotImplementedError
    @classmethod
    def vertex_attrib_array_size(cls) -> int:
        raise NotImplementedError
    @classmethod
    def vertex_attrib_array_stride(cls) -> int:
        raise NotImplementedError
    @classmethod
    def vertex_attrib_array_type(cls) -> int:
        raise NotImplementedError
    @classmethod
    def vertex_attrib_array_normalized(cls) -> int:
        raise NotImplementedError
    @classmethod
    def vertex_attrib_array_pointer(cls) -> int:
        raise NotImplementedError
    @classmethod
    def vertex_attrib_array_buffer_binding(cls) -> int:
        raise NotImplementedError
    @classmethod
    def implementation_color_read_type(cls) -> int:
        raise NotImplementedError
    @classmethod
    def implementation_color_read_format(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compile_status(cls) -> int:
        raise NotImplementedError
    @classmethod
    def low_float(cls) -> int:
        raise NotImplementedError
    @classmethod
    def medium_float(cls) -> int:
        raise NotImplementedError
    @classmethod
    def high_float(cls) -> int:
        raise NotImplementedError
    @classmethod
    def low_int(cls) -> int:
        raise NotImplementedError
    @classmethod
    def medium_int(cls) -> int:
        raise NotImplementedError
    @classmethod
    def high_int(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer(cls) -> int:
        raise NotImplementedError
    @classmethod
    def renderbuffer(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgba4(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgb5_a1(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgb565(cls) -> int:
        raise NotImplementedError
    @classmethod
    def depth_component16(cls) -> int:
        raise NotImplementedError
    @classmethod
    def stencil_index8(cls) -> int:
        raise NotImplementedError
    @classmethod
    def depth_stencil(cls) -> int:
        raise NotImplementedError
    @classmethod
    def renderbuffer_width(cls) -> int:
        raise NotImplementedError
    @classmethod
    def renderbuffer_height(cls) -> int:
        raise NotImplementedError
    @classmethod
    def renderbuffer_internal_format(cls) -> int:
        raise NotImplementedError
    @classmethod
    def renderbuffer_red_size(cls) -> int:
        raise NotImplementedError
    @classmethod
    def renderbuffer_green_size(cls) -> int:
        raise NotImplementedError
    @classmethod
    def renderbuffer_blue_size(cls) -> int:
        raise NotImplementedError
    @classmethod
    def renderbuffer_alpha_size(cls) -> int:
        raise NotImplementedError
    @classmethod
    def renderbuffer_depth_size(cls) -> int:
        raise NotImplementedError
    @classmethod
    def renderbuffer_stencil_size(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_attachment_object_type(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_attachment_object_name(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_attachment_texture_level(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_attachment_texture_cube_map_face(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment0(cls) -> int:
        raise NotImplementedError
    @classmethod
    def depth_attachment(cls) -> int:
        raise NotImplementedError
    @classmethod
    def stencil_attachment(cls) -> int:
        raise NotImplementedError
    @classmethod
    def depth_stencil_attachment(cls) -> int:
        raise NotImplementedError
    @classmethod
    def none(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_complete(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_incomplete_attachment(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_incomplete_missing_attachment(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_incomplete_dimensions(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_unsupported(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_binding(cls) -> int:
        raise NotImplementedError
    @classmethod
    def renderbuffer_binding(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_renderbuffer_size(cls) -> int:
        raise NotImplementedError
    @classmethod
    def invalid_framebuffer_operation(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unpack_flip_y_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unpack_premultiply_alpha_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def context_lost_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unpack_colorspace_conversion_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def browser_default_webgl(cls) -> int:
        raise NotImplementedError
    def drawing_buffer_width(self) -> int:
        """
        canvas: func() -> html-canvas-element-or-offscreen-canvas;
        """
        raise NotImplementedError
    def drawing_buffer_height(self) -> int:
        raise NotImplementedError
    def get_context_attributes(self) -> Optional[WebGlContextAttributes]:
        raise NotImplementedError
    def is_context_lost(self) -> bool:
        raise NotImplementedError
    def get_supported_extensions(self) -> List[Optional[str]]:
        raise NotImplementedError
    def get_extension(self, name: str) -> Object:
        raise NotImplementedError
    def attach_shader(self, program: WebGlProgram, shader: WebGlShader) -> None:
        """
        active-texture: func(texture: g-lenum);
        """
        raise NotImplementedError
    def bind_attrib_location(self, program: WebGlProgram, index: int, name: str) -> None:
        raise NotImplementedError
    def bind_buffer(self, target: int, buffer: Optional[WebGlBuffer]) -> None:
        raise NotImplementedError
    def bind_framebuffer(self, target: int, framebuffer: Optional[WebGlFramebuffer]) -> None:
        raise NotImplementedError
    def bind_renderbuffer(self, target: int, renderbuffer: Optional[WebGlRenderbuffer]) -> None:
        raise NotImplementedError
    def bind_texture(self, target: int, texture: Optional[WebGlTexture]) -> None:
        raise NotImplementedError
    def blend_equation_separate(self, mode_rgb: int, mode_alpha: int) -> None:
        """
        blend-color: func(red: g-lfloat, green: g-lfloat, blue: g-lfloat, alpha: g-lfloat);
        blend-equation: func(mode: g-lenum);
        """
        raise NotImplementedError
    def blend_func(self, sfactor: int, dfactor: int) -> None:
        raise NotImplementedError
    def blend_func_separate(self, src_rgb: int, dst_rgb: int, src_alpha: int, dst_alpha: int) -> None:
        raise NotImplementedError
    def check_framebuffer_status(self, target: int) -> int:
        raise NotImplementedError
    def clear(self, mask: int) -> None:
        raise NotImplementedError
    def clear_color(self, red: float, green: float, blue: float, alpha: float) -> None:
        raise NotImplementedError
    def clear_depth(self, depth: float) -> None:
        raise NotImplementedError
    def clear_stencil(self, s: int) -> None:
        raise NotImplementedError
    def color_mask(self, red: bool, green: bool, blue: bool, alpha: bool) -> None:
        raise NotImplementedError
    def compile_shader(self, shader: WebGlShader) -> None:
        raise NotImplementedError
    def copy_tex_image2_d(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int) -> None:
        raise NotImplementedError
    def copy_tex_sub_image2_d(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int) -> None:
        raise NotImplementedError
    def create_buffer(self) -> Optional[WebGlBuffer]:
        raise NotImplementedError
    def create_framebuffer(self) -> Optional[WebGlFramebuffer]:
        raise NotImplementedError
    def create_program(self) -> Optional[WebGlProgram]:
        raise NotImplementedError
    def create_renderbuffer(self) -> Optional[WebGlRenderbuffer]:
        raise NotImplementedError
    def create_shader(self, type: int) -> Optional[WebGlShader]:
        raise NotImplementedError
    def create_texture(self) -> Optional[WebGlTexture]:
        raise NotImplementedError
    def delete_buffer(self, buffer: Optional[WebGlBuffer]) -> None:
        """
        cull-face: func(mode: g-lenum);
        """
        raise NotImplementedError
    def delete_framebuffer(self, framebuffer: Optional[WebGlFramebuffer]) -> None:
        raise NotImplementedError
    def delete_program(self, program: Optional[WebGlProgram]) -> None:
        raise NotImplementedError
    def delete_renderbuffer(self, renderbuffer: Optional[WebGlRenderbuffer]) -> None:
        raise NotImplementedError
    def delete_shader(self, shader: Optional[WebGlShader]) -> None:
        raise NotImplementedError
    def delete_texture(self, texture: Optional[WebGlTexture]) -> None:
        raise NotImplementedError
    def depth_mask(self, flag: bool) -> None:
        """
        depth-func: func(%func: g-lenum);
        """
        raise NotImplementedError
    def detach_shader(self, program: WebGlProgram, shader: WebGlShader) -> None:
        """
        depth-range: func(z-near: g-lclampf, z-far: g-lclampf);
        """
        raise NotImplementedError
    def disable(self, cap: int) -> None:
        raise NotImplementedError
    def disable_vertex_attrib_array(self, index: int) -> None:
        raise NotImplementedError
    def draw_arrays(self, mode: int, first: int, count: int) -> None:
        raise NotImplementedError
    def draw_elements(self, mode: int, count: int, type: int, offset: int) -> None:
        raise NotImplementedError
    def enable(self, cap: int) -> None:
        raise NotImplementedError
    def enable_vertex_attrib_array(self, index: int) -> None:
        raise NotImplementedError
    def finish(self) -> None:
        raise NotImplementedError
    def flush(self) -> None:
        raise NotImplementedError
    def framebuffer_renderbuffer(self, target: int, attachment: int, renderbuffertarget: int, renderbuffer: Optional[WebGlRenderbuffer]) -> None:
        raise NotImplementedError
    def framebuffer_texture2_d(self, target: int, attachment: int, textarget: int, texture: Optional[WebGlTexture], level: int) -> None:
        raise NotImplementedError
    def generate_mipmap(self, target: int) -> None:
        """
        front-face: func(mode: g-lenum);
        """
        raise NotImplementedError
    def get_active_attrib(self, program: WebGlProgram, index: int) -> Optional[WebGlActiveInfo]:
        raise NotImplementedError
    def get_active_uniform(self, program: WebGlProgram, index: int) -> Optional[WebGlActiveInfo]:
        raise NotImplementedError
    def get_attached_shaders(self, program: WebGlProgram) -> List[Optional[WebGlShader]]:
        raise NotImplementedError
    def get_attrib_location(self, program: WebGlProgram, name: str) -> int:
        raise NotImplementedError
    def get_buffer_parameter(self, target: int, pname: int) -> Any:
        raise NotImplementedError
    def get_parameter(self, pname: int) -> Any:
        raise NotImplementedError
    def get_error(self) -> int:
        raise NotImplementedError
    def get_framebuffer_attachment_parameter(self, target: int, attachment: int, pname: int) -> Any:
        raise NotImplementedError
    def get_program_parameter(self, program: WebGlProgram, pname: int) -> Any:
        raise NotImplementedError
    def get_program_info_log(self, program: WebGlProgram) -> str:
        raise NotImplementedError
    def get_renderbuffer_parameter(self, target: int, pname: int) -> Any:
        raise NotImplementedError
    def get_shader_parameter(self, shader: WebGlShader, pname: int) -> Any:
        raise NotImplementedError
    def get_shader_precision_format(self, shadertype: int, precisiontype: int) -> Optional[WebGlShaderPrecisionFormat]:
        raise NotImplementedError
    def get_shader_info_log(self, shader: WebGlShader) -> str:
        raise NotImplementedError
    def get_shader_source(self, shader: WebGlShader) -> str:
        raise NotImplementedError
    def get_tex_parameter(self, target: int, pname: int) -> Any:
        raise NotImplementedError
    def get_uniform(self, program: WebGlProgram, location: WebGlUniformLocation) -> Any:
        raise NotImplementedError
    def get_uniform_location(self, program: WebGlProgram, name: str) -> Optional[WebGlUniformLocation]:
        raise NotImplementedError
    def get_vertex_attrib(self, index: int, pname: int) -> Any:
        raise NotImplementedError
    def get_vertex_attrib_offset(self, index: int, pname: int) -> int:
        raise NotImplementedError
    def hint(self, target: int, mode: int) -> None:
        raise NotImplementedError
    def is_buffer(self, buffer: Optional[WebGlBuffer]) -> bool:
        raise NotImplementedError
    def is_enabled(self, cap: int) -> bool:
        raise NotImplementedError
    def is_framebuffer(self, framebuffer: Optional[WebGlFramebuffer]) -> bool:
        raise NotImplementedError
    def is_program(self, program: Optional[WebGlProgram]) -> bool:
        raise NotImplementedError
    def is_renderbuffer(self, renderbuffer: Optional[WebGlRenderbuffer]) -> bool:
        raise NotImplementedError
    def is_shader(self, shader: Optional[WebGlShader]) -> bool:
        raise NotImplementedError
    def is_texture(self, texture: Optional[WebGlTexture]) -> bool:
        raise NotImplementedError
    def link_program(self, program: WebGlProgram) -> None:
        """
        line-width: func(width: g-lfloat);
        """
        raise NotImplementedError
    def pixel_storei(self, pname: int, param: int) -> None:
        raise NotImplementedError
    def polygon_offset(self, factor: float, units: float) -> None:
        raise NotImplementedError
    def renderbuffer_storage(self, target: int, internalformat: int, width: int, height: int) -> None:
        raise NotImplementedError
    def scissor(self, x: int, y: int, width: int, height: int) -> None:
        """
        sample-coverage: func(value: g-lclampf, invert: g-lboolean);
        """
        raise NotImplementedError
    def shader_source(self, shader: WebGlShader, source: str) -> None:
        raise NotImplementedError
    def stencil_func_separate(self, face: int, func: int, ref: int, mask: int) -> None:
        """
        stencil-func: func(%func: g-lenum, ref: g-lint, mask: g-luint);
        """
        raise NotImplementedError
    def stencil_mask(self, mask: int) -> None:
        raise NotImplementedError
    def stencil_mask_separate(self, face: int, mask: int) -> None:
        raise NotImplementedError
    def stencil_op(self, fail: int, zfail: int, zpass: int) -> None:
        raise NotImplementedError
    def stencil_op_separate(self, face: int, fail: int, zfail: int, zpass: int) -> None:
        raise NotImplementedError
    def tex_parameterf(self, target: int, pname: int, param: float) -> None:
        raise NotImplementedError
    def tex_parameteri(self, target: int, pname: int, param: int) -> None:
        raise NotImplementedError
    def uniform1f(self, location: Optional[WebGlUniformLocation], x: float) -> None:
        raise NotImplementedError
    def uniform2f(self, location: Optional[WebGlUniformLocation], x: float, y: float) -> None:
        raise NotImplementedError
    def uniform3f(self, location: Optional[WebGlUniformLocation], x: float, y: float, z: float) -> None:
        raise NotImplementedError
    def uniform4f(self, location: Optional[WebGlUniformLocation], x: float, y: float, z: float, w: float) -> None:
        raise NotImplementedError
    def uniform1i(self, location: Optional[WebGlUniformLocation], x: int) -> None:
        raise NotImplementedError
    def uniform2i(self, location: Optional[WebGlUniformLocation], x: int, y: int) -> None:
        raise NotImplementedError
    def uniform3i(self, location: Optional[WebGlUniformLocation], x: int, y: int, z: int) -> None:
        raise NotImplementedError
    def uniform4i(self, location: Optional[WebGlUniformLocation], x: int, y: int, z: int, w: int) -> None:
        raise NotImplementedError
    def use_program(self, program: Optional[WebGlProgram]) -> None:
        raise NotImplementedError
    def validate_program(self, program: WebGlProgram) -> None:
        raise NotImplementedError
    def vertex_attrib1f(self, indx: int, x: float) -> None:
        raise NotImplementedError
    def vertex_attrib1fv(self, indx: int, values: Float32ArrayOrListGLfloat) -> None:
        raise NotImplementedError
    def vertex_attrib2f(self, indx: int, x: float, y: float) -> None:
        raise NotImplementedError
    def vertex_attrib2fv(self, indx: int, values: Float32ArrayOrListGLfloat) -> None:
        raise NotImplementedError
    def vertex_attrib3f(self, indx: int, x: float, y: float, z: float) -> None:
        raise NotImplementedError
    def vertex_attrib3fv(self, indx: int, values: Float32ArrayOrListGLfloat) -> None:
        raise NotImplementedError
    def vertex_attrib4f(self, indx: int, x: float, y: float, z: float, w: float) -> None:
        raise NotImplementedError
    def vertex_attrib4fv(self, indx: int, values: Float32ArrayOrListGLfloat) -> None:
        raise NotImplementedError
    def vertex_attrib_pointer(self, indx: int, size: int, type: int, normalized: bool, stride: int, offset: int) -> None:
        raise NotImplementedError
    def commit(self) -> None:
        """
        viewport: func(x: g-lint, y: g-lint, width: g-lsizei, height: g-lsizei);
        """
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebglCompressedTextureS3tc:
    
    @classmethod
    def compressed_rgb_s3tc_dxt1_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_rgba_s3tc_dxt1_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_rgba_s3tc_dxt3_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_rgba_s3tc_dxt5_ext(cls) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebglCompressedTextureS3tcSrgb:
    
    @classmethod
    def compressed_srgb_s3tc_dxt1_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_srgb_alpha_s3tc_dxt1_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_srgb_alpha_s3tc_dxt3_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_srgb_alpha_s3tc_dxt5_ext(cls) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebglCompressedTextureAstc:
    
    @classmethod
    def compressed_rgba_astc4x4_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_rgba_astc5x4_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_rgba_astc5x5_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_rgba_astc6x5_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_rgba_astc6x6_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_rgba_astc8x5_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_rgba_astc8x6_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_rgba_astc8x8_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_rgba_astc10x5_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_rgba_astc10x6_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_rgba_astc10x8_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_rgba_astc10x10_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_rgba_astc12x10_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_rgba_astc12x12_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_srgb8_alpha8_astc4x4_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_srgb8_alpha8_astc5x4_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_srgb8_alpha8_astc5x5_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_srgb8_alpha8_astc6x5_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_srgb8_alpha8_astc6x6_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_srgb8_alpha8_astc8x5_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_srgb8_alpha8_astc8x6_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_srgb8_alpha8_astc8x8_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_srgb8_alpha8_astc10x5_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_srgb8_alpha8_astc10x6_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_srgb8_alpha8_astc10x8_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_srgb8_alpha8_astc10x10_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_srgb8_alpha8_astc12x10_khr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_srgb8_alpha8_astc12x12_khr(cls) -> int:
        raise NotImplementedError
    def get_supported_profiles(self) -> List[Optional[str]]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebglCompressedTextureAtc:
    
    @classmethod
    def compressed_rgb_atc_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_rgba_atc_explicit_alpha_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_rgba_atc_interpolated_alpha_webgl(cls) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebglCompressedTextureEtc:
    
    @classmethod
    def compressed_r11_eac(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_signed_r11_eac(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_rg11_eac(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_signed_rg11_eac(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_rgb8_etc2(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_srgb8_etc2(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_rgb8_punchthrough_alpha1_etc2(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_srgb8_punchthrough_alpha1_etc2(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_rgba8_etc2_eac(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_srgb8_alpha8_etc2_eac(cls) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebglCompressedTextureEtc1:
    
    @classmethod
    def compressed_rgb_etc1_webgl(cls) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebglCompressedTexturePvrtc:
    
    @classmethod
    def compressed_rgb_pvrtc4bppv1_img(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_rgb_pvrtc2bppv1_img(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_rgba_pvrtc4bppv1_img(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compressed_rgba_pvrtc2bppv1_img(cls) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebglDebugRendererInfo:
    
    @classmethod
    def unmasked_vendor_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unmasked_renderer_webgl(cls) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebglDebugShaders:
    
    def get_translated_shader_source(self, shader: WebGlShader) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebglDepthTexture:
    
    @classmethod
    def unsigned_int248_webgl(cls) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class OesElementIndexUint:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ExtFragDepth:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebglLoseContext:
    
    def lose_context(self) -> None:
        raise NotImplementedError
    def restore_context(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ExtTextureFilterAnisotropic:
    
    @classmethod
    def texture_max_anisotropy_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_texture_max_anisotropy_ext(cls) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ExtSRgb:
    
    @classmethod
    def srgb_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def srgb_alpha_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def srgb8_alpha8_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_attachment_color_encoding_ext(cls) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class OesStandardDerivatives:
    
    @classmethod
    def fragment_shader_derivative_hint_oes(cls) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class OesTextureFloat:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebglDrawBuffers:
    
    @classmethod
    def color_attachment0_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment1_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment2_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment3_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment4_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment5_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment6_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment7_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment8_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment9_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment10_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment11_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment12_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment13_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment14_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment15_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer0_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer1_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer2_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer3_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer4_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer5_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer6_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer7_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer8_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer9_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer10_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer11_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer12_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer13_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer14_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer15_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_color_attachments_webgl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_draw_buffers_webgl(cls) -> int:
        raise NotImplementedError
    def draw_buffers_webgl(self, buffers: List[int]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class OesTextureFloatLinear:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ExtShaderTextureLod:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class OesTextureHalfFloat:
    
    @classmethod
    def half_float_oes(cls) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class OesTextureHalfFloatLinear:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebglColorBufferFloat:
    
    @classmethod
    def rgba32f_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgb32f_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_attachment_component_type_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unsigned_normalized_ext(cls) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ExtColorBufferHalfFloat:
    
    @classmethod
    def rgba16f_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgb16f_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_attachment_component_type_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unsigned_normalized_ext(cls) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class OesVertexArrayObject:
    
    @classmethod
    def vertex_array_binding_oes(cls) -> int:
        raise NotImplementedError
    def create_vertex_array_oes(self) -> Optional[WebGlVertexArrayObject]:
        raise NotImplementedError
    def delete_vertex_array_oes(self, array_object: Optional[WebGlVertexArrayObject]) -> None:
        raise NotImplementedError
    def is_vertex_array_oes(self, array_object: Optional[WebGlVertexArrayObject]) -> bool:
        raise NotImplementedError
    def bind_vertex_array_oes(self, array_object: Optional[WebGlVertexArrayObject]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class AngleInstancedArrays:
    
    @classmethod
    def vertex_attrib_array_divisor_angle(cls) -> int:
        raise NotImplementedError
    def draw_arrays_instanced_angle(self, mode: int, first: int, count: int, primcount: int) -> None:
        raise NotImplementedError
    def draw_elements_instanced_angle(self, mode: int, count: int, type: int, offset: int, primcount: int) -> None:
        raise NotImplementedError
    def vertex_attrib_divisor_angle(self, index: int, divisor: int) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ExtBlendMinmax:
    
    @classmethod
    def min_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_ext(cls) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebGlQuery:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ExtDisjointTimerQuery:
    
    @classmethod
    def query_counter_bits_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def current_query_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def query_result_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def query_result_available_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def time_elapsed_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def timestamp_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def gpu_disjoint_ext(cls) -> int:
        raise NotImplementedError
    def create_query_ext(self) -> Optional[WebGlQuery]:
        raise NotImplementedError
    def delete_query_ext(self, query: Optional[WebGlQuery]) -> None:
        raise NotImplementedError
    def is_query_ext(self, query: Optional[WebGlQuery]) -> bool:
        raise NotImplementedError
    def begin_query_ext(self, target: int, query: WebGlQuery) -> None:
        raise NotImplementedError
    def end_query_ext(self, target: int) -> None:
        raise NotImplementedError
    def query_counter_ext(self, query: WebGlQuery, target: int) -> None:
        raise NotImplementedError
    def get_query_ext(self, target: int, pname: int) -> Any:
        raise NotImplementedError
    def get_query_object_ext(self, query: WebGlQuery, pname: int) -> Any:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MozDebug:
    
    @classmethod
    def extensions(cls) -> int:
        raise NotImplementedError
    @classmethod
    def wsi_info(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unpack_require_fastpath(cls) -> int:
        raise NotImplementedError
    def get_parameter(self, pname: int) -> Any:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MessagePort:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def post_message(self, message: Any, transferable: Optional[List[Object]]) -> None:
        raise NotImplementedError
    def start(self) -> None:
        raise NotImplementedError
    def close(self) -> None:
        raise NotImplementedError
    def onmessage(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmessage(self, onmessage: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmessageerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmessageerror(self, onmessageerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MessageChannel:
    
    def port1(self) -> MessagePort:
        raise NotImplementedError
    def port2(self) -> MessagePort:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgfeMorphologyElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    @classmethod
    def svg_morphology_operator_unknown(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_morphology_operator_erode(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_morphology_operator_dilate(cls) -> int:
        raise NotImplementedError
    def in1(self) -> SvgAnimatedString:
        raise NotImplementedError
    def operator(self) -> SvgAnimatedEnumeration:
        raise NotImplementedError
    def radius_x(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def radius_y(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def result(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MediaKeyMessageType(Enum):
    LICENSE_REQUEST = 0
    LICENSE_RENEWAL = 1
    LICENSE_RELEASE = 2
    INDIVIDUALIZATION_REQUEST = 3

class MediaKeyMessageEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def message_type(self) -> MediaKeyMessageType:
        raise NotImplementedError
    def message(self) -> ArrayBuffer:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class MediaKeyMessageEventInit:
    message_type: MediaKeyMessageType
    message: ArrayBuffer
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class PerformanceObserverInit:
    entry_types: List[str]
    buffered: Optional[bool]

class PerformanceEntry:
    
    def name(self) -> str:
        raise NotImplementedError
    def entry_type(self) -> str:
        raise NotImplementedError
    def start_time(self) -> float:
        raise NotImplementedError
    def duration(self) -> float:
        raise NotImplementedError
    def to_json(self) -> Object:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PerformanceObserver:
    
    def observe(self, options: PerformanceObserverInit) -> None:
        raise NotImplementedError
    def disconnect(self) -> None:
        raise NotImplementedError
    def take_records(self) -> List[PerformanceEntry]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DomError:
    
    def name(self) -> str:
        raise NotImplementedError
    def message(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class ProfileTimelineStackFrame:
    line: Optional[int]
    column: Optional[int]
    source: Optional[str]
    function_display_name: Optional[str]
    parent: Optional[Object]
    async_parent: Optional[Object]
    async_cause: Optional[str]

@dataclass
class ProfileTimelineLayerRect:
    x: Optional[int]
    y: Optional[int]
    width: Optional[int]
    height: Optional[int]

class ProfileTimelineMessagePortOperationType(Enum):
    SERIALIZE_DATA = 0
    DESERIALIZE_DATA = 1

class ProfileTimelineWorkerOperationType(Enum):
    SERIALIZE_DATA_OFF_MAIN_THREAD = 0
    SERIALIZE_DATA_ON_MAIN_THREAD = 1
    DESERIALIZE_DATA_OFF_MAIN_THREAD = 2
    DESERIALIZE_DATA_ON_MAIN_THREAD = 3

class SvgAnimatedAngle:
    
    def base_val(self) -> SvgAngle:
        raise NotImplementedError
    def anim_val(self) -> SvgAngle:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class GroupedHistoryEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def other_browser(self) -> Optional[Element]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class RequestOrString_Request:
    value: Request


@dataclass
class RequestOrString_String:
    value: str


RequestOrString = Union[RequestOrString_Request, RequestOrString_String]


@dataclass
class CacheQueryOptions:
    ignore_search: Optional[bool]
    ignore_method: Optional[bool]
    ignore_vary: Optional[bool]
    cache_name: Optional[str]

class Cache:
    
    def match(self, request: RequestOrString, options: Optional[CacheQueryOptions]) -> Response:
        raise NotImplementedError
    def match_all(self, request: Optional[RequestOrString], options: Optional[CacheQueryOptions]) -> List[Response]:
        raise NotImplementedError
    def add(self, request: RequestOrString) -> None:
        raise NotImplementedError
    def add_all(self, requests: List[RequestOrString]) -> None:
        raise NotImplementedError
    def put(self, request: RequestOrString, response: Response) -> None:
        raise NotImplementedError
    def delete(self, request: RequestOrString, options: Optional[CacheQueryOptions]) -> bool:
        raise NotImplementedError
    def keys(self, request: Optional[RequestOrString], options: Optional[CacheQueryOptions]) -> List[Request]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CacheStorage:
    
    def match(self, request: RequestOrString, options: Optional[CacheQueryOptions]) -> Response:
        raise NotImplementedError
    def has(self, cache_name: str) -> bool:
        raise NotImplementedError
    def open(self, cache_name: str) -> Cache:
        raise NotImplementedError
    def delete(self, cache_name: str) -> bool:
        raise NotImplementedError
    def keys(self) -> List[str]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CacheStorageNamespace(Enum):
    CONTENT = 0
    CHROME = 1

class RtcSdpType(Enum):
    OFFER = 0
    PRANSWER = 1
    ANSWER = 2
    ROLLBACK = 3

@dataclass
class RtcSessionDescriptionInit:
    type: RtcSdpType
    sdp: Optional[str]

class RtcSessionDescription:
    
    def type(self) -> RtcSdpType:
        raise NotImplementedError
    def set_type(self, type: RtcSdpType) -> None:
        raise NotImplementedError
    def sdp(self) -> str:
        raise NotImplementedError
    def set_sdp(self, sdp: str) -> None:
        raise NotImplementedError
    def to_json(self) -> Object:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class FetchReadableStreamReadDataDone:
    done: Optional[bool]

@dataclass
class FetchReadableStreamReadDataArray:
    value: Optional[Uint8Array]

class GamepadEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def gamepad(self) -> Optional[Gamepad]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class GamepadAxisMoveEvent:
    
    def as_gamepad_event(self) -> GamepadEvent:
        raise NotImplementedError
    def axis(self) -> int:
        raise NotImplementedError
    def value(self) -> float:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgRectElement:
    
    def as_svg_geometry_element(self) -> SvgGeometryElement:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def rx(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def ry(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class XmlSerializer:
    
    def serialize_to_string(self, root: Node) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgComponentTransferFunctionElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    @classmethod
    def svg_fecomponenttransfer_type_unknown(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_fecomponenttransfer_type_identity(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_fecomponenttransfer_type_table(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_fecomponenttransfer_type_discrete(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_fecomponenttransfer_type_linear(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_fecomponenttransfer_type_gamma(cls) -> int:
        raise NotImplementedError
    def type(self) -> SvgAnimatedEnumeration:
        raise NotImplementedError
    def table_values(self) -> SvgAnimatedNumberList:
        raise NotImplementedError
    def slope(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def intercept(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def amplitude(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def exponent(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def offset(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgfeFuncGElement:
    
    def as_svg_component_transfer_function_element(self) -> SvgComponentTransferFunctionElement:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgAnimatedInteger:
    
    def base_val(self) -> int:
        raise NotImplementedError
    def set_base_val(self, base_val: int) -> None:
        raise NotImplementedError
    def anim_val(self) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgAnimatedBoolean:
    
    def base_val(self) -> bool:
        raise NotImplementedError
    def set_base_val(self, base_val: bool) -> None:
        raise NotImplementedError
    def anim_val(self) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgfeConvolveMatrixElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    @classmethod
    def svg_edgemode_unknown(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_edgemode_duplicate(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_edgemode_wrap(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_edgemode_none(cls) -> int:
        raise NotImplementedError
    def in1(self) -> SvgAnimatedString:
        raise NotImplementedError
    def order_x(self) -> SvgAnimatedInteger:
        raise NotImplementedError
    def order_y(self) -> SvgAnimatedInteger:
        raise NotImplementedError
    def kernel_matrix(self) -> SvgAnimatedNumberList:
        raise NotImplementedError
    def divisor(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def bias(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def target_x(self) -> SvgAnimatedInteger:
        raise NotImplementedError
    def target_y(self) -> SvgAnimatedInteger:
        raise NotImplementedError
    def edge_mode(self) -> SvgAnimatedEnumeration:
        raise NotImplementedError
    def kernel_unit_length_x(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def kernel_unit_length_y(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def preserve_alpha(self) -> SvgAnimatedBoolean:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def result(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CanvasCaptureMediaStreamTrack:
    
    def as_media_stream_track(self) -> MediaStreamTrack:
        raise NotImplementedError
    def canvas(self) -> HtmlCanvasElement:
        raise NotImplementedError
    def request_frame(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MediaStreamError:
    
    def name(self) -> str:
        raise NotImplementedError
    def message(self) -> str:
        raise NotImplementedError
    def constraint(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CssPseudoElement:
    
    def type(self) -> str:
        raise NotImplementedError
    def parent_element(self) -> Element:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class KeyAlgorithm:
    name: str

@dataclass
class AesKeyAlgorithm:
    length: int
    name: str

@dataclass
class EcKeyAlgorithm:
    named_curve: str
    name: str

@dataclass
class HmacKeyAlgorithm:
    hash: KeyAlgorithm
    length: int
    name: str

@dataclass
class RsaHashedKeyAlgorithm:
    modulus_length: int
    public_exponent: Uint8Array
    hash: KeyAlgorithm
    name: str

@dataclass
class DhKeyAlgorithm:
    prime: Uint8Array
    generator: Uint8Array
    name: str

class WebGlSampler:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebGlSync:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebGlTransformFeedback:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class ListGLuintOrUint32Array_ListGLuint:
    value: List[int]


@dataclass
class ListGLuintOrUint32Array_Uint32Array:
    value: Uint32Array


ListGLuintOrUint32Array = Union[ListGLuintOrUint32Array_ListGLuint, ListGLuintOrUint32Array_Uint32Array]



@dataclass
class WebGl2RenderingContextBufferDataParams_TargetSizeUsage:
    value: Tuple[int, int, int]


@dataclass
class WebGl2RenderingContextBufferDataParams_TargetSrcDataUsage:
    value: Tuple[int, ArrayBuffer, int]


@dataclass
class WebGl2RenderingContextBufferDataParams_TargetSrcDataUsageSrcOffsetLength:
    value: Tuple[int, ArrayBufferView, int, int, Optional[int]]


WebGl2RenderingContextBufferDataParams = Union[WebGl2RenderingContextBufferDataParams_TargetSizeUsage, WebGl2RenderingContextBufferDataParams_TargetSrcDataUsage, WebGl2RenderingContextBufferDataParams_TargetSrcDataUsageSrcOffsetLength]



@dataclass
class WebGl2RenderingContextBufferSubDataParams_TargetOffsetSrcData:
    value: Tuple[int, int, ArrayBuffer]


@dataclass
class WebGl2RenderingContextBufferSubDataParams_TargetDstByteOffsetSrcDataSrcOffsetLength:
    value: Tuple[int, int, ArrayBufferView, int, Optional[int]]


WebGl2RenderingContextBufferSubDataParams = Union[WebGl2RenderingContextBufferSubDataParams_TargetOffsetSrcData, WebGl2RenderingContextBufferSubDataParams_TargetDstByteOffsetSrcDataSrcOffsetLength]



@dataclass
class WebGl2RenderingContextTexImage2DParams_TargetLevelInternalformatWidthHeightBorderFormatTypePixels:
    value: Tuple[int, int, int, int, int, int, int, int, ArrayBufferView]


@dataclass
class WebGl2RenderingContextTexImage2DParams_TargetLevelInternalformatFormatTypeSource:
    value: Tuple[int, int, int, int, int, HtmlCanvasElement]


@dataclass
class WebGl2RenderingContextTexImage2DParams_TargetLevelInternalformatWidthHeightBorderFormatTypePboOffset:
    value: Tuple[int, int, int, int, int, int, int, int, int]


@dataclass
class WebGl2RenderingContextTexImage2DParams_TargetLevelInternalformatWidthHeightBorderFormatTypeSource:
    value: Tuple[int, int, int, int, int, int, int, int, HtmlCanvasElement]


@dataclass
class WebGl2RenderingContextTexImage2DParams_TargetLevelInternalformatWidthHeightBorderFormatTypeSrcDataSrcOffset:
    value: Tuple[int, int, int, int, int, int, int, int, ArrayBufferView, int]


WebGl2RenderingContextTexImage2DParams = Union[WebGl2RenderingContextTexImage2DParams_TargetLevelInternalformatWidthHeightBorderFormatTypePixels, WebGl2RenderingContextTexImage2DParams_TargetLevelInternalformatFormatTypeSource, WebGl2RenderingContextTexImage2DParams_TargetLevelInternalformatWidthHeightBorderFormatTypePboOffset, WebGl2RenderingContextTexImage2DParams_TargetLevelInternalformatWidthHeightBorderFormatTypeSource, WebGl2RenderingContextTexImage2DParams_TargetLevelInternalformatWidthHeightBorderFormatTypeSrcDataSrcOffset]



@dataclass
class WebGl2RenderingContextTexImage3DParams_TargetLevelInternalformatWidthHeightDepthBorderFormatTypePboOffset:
    value: Tuple[int, int, int, int, int, int, int, int, int, int]


@dataclass
class WebGl2RenderingContextTexImage3DParams_TargetLevelInternalformatWidthHeightDepthBorderFormatTypeSource:
    value: Tuple[int, int, int, int, int, int, int, int, int, HtmlCanvasElement]


@dataclass
class WebGl2RenderingContextTexImage3DParams_TargetLevelInternalformatWidthHeightDepthBorderFormatTypeSrcData:
    value: Tuple[int, int, int, int, int, int, int, int, int, ArrayBufferView]


@dataclass
class WebGl2RenderingContextTexImage3DParams_TargetLevelInternalformatWidthHeightDepthBorderFormatTypeSrcDataSrcOffset:
    value: Tuple[int, int, int, int, int, int, int, int, int, ArrayBufferView, int]


WebGl2RenderingContextTexImage3DParams = Union[WebGl2RenderingContextTexImage3DParams_TargetLevelInternalformatWidthHeightDepthBorderFormatTypePboOffset, WebGl2RenderingContextTexImage3DParams_TargetLevelInternalformatWidthHeightDepthBorderFormatTypeSource, WebGl2RenderingContextTexImage3DParams_TargetLevelInternalformatWidthHeightDepthBorderFormatTypeSrcData, WebGl2RenderingContextTexImage3DParams_TargetLevelInternalformatWidthHeightDepthBorderFormatTypeSrcDataSrcOffset]



@dataclass
class WebGl2RenderingContextTexSubImage2DParams_TargetLevelXoffsetYoffsetWidthHeightFormatTypePixels:
    value: Tuple[int, int, int, int, int, int, int, int, ArrayBufferView]


@dataclass
class WebGl2RenderingContextTexSubImage2DParams_TargetLevelXoffsetYoffsetFormatTypeSource:
    value: Tuple[int, int, int, int, int, int, HtmlCanvasElement]


@dataclass
class WebGl2RenderingContextTexSubImage2DParams_TargetLevelXoffsetYoffsetWidthHeightFormatTypePboOffset:
    value: Tuple[int, int, int, int, int, int, int, int, int]


@dataclass
class WebGl2RenderingContextTexSubImage2DParams_TargetLevelXoffsetYoffsetWidthHeightFormatTypeSource:
    value: Tuple[int, int, int, int, int, int, int, int, HtmlCanvasElement]


@dataclass
class WebGl2RenderingContextTexSubImage2DParams_TargetLevelXoffsetYoffsetWidthHeightFormatTypeSrcDataSrcOffset:
    value: Tuple[int, int, int, int, int, int, int, int, ArrayBufferView, int]


WebGl2RenderingContextTexSubImage2DParams = Union[WebGl2RenderingContextTexSubImage2DParams_TargetLevelXoffsetYoffsetWidthHeightFormatTypePixels, WebGl2RenderingContextTexSubImage2DParams_TargetLevelXoffsetYoffsetFormatTypeSource, WebGl2RenderingContextTexSubImage2DParams_TargetLevelXoffsetYoffsetWidthHeightFormatTypePboOffset, WebGl2RenderingContextTexSubImage2DParams_TargetLevelXoffsetYoffsetWidthHeightFormatTypeSource, WebGl2RenderingContextTexSubImage2DParams_TargetLevelXoffsetYoffsetWidthHeightFormatTypeSrcDataSrcOffset]



@dataclass
class WebGl2RenderingContextTexSubImage3DParams_TargetLevelXoffsetYoffsetZoffsetWidthHeightDepthFormatTypePboOffset:
    value: Tuple[int, int, int, int, int, int, int, int, int, int, int]


@dataclass
class WebGl2RenderingContextTexSubImage3DParams_TargetLevelXoffsetYoffsetZoffsetWidthHeightDepthFormatTypeSource:
    value: Tuple[int, int, int, int, int, int, int, int, int, int, HtmlCanvasElement]


@dataclass
class WebGl2RenderingContextTexSubImage3DParams_TargetLevelXoffsetYoffsetZoffsetWidthHeightDepthFormatTypeSrcDataSrcOffset:
    value: Tuple[int, int, int, int, int, int, int, int, int, int, ArrayBufferView, Optional[int]]


WebGl2RenderingContextTexSubImage3DParams = Union[WebGl2RenderingContextTexSubImage3DParams_TargetLevelXoffsetYoffsetZoffsetWidthHeightDepthFormatTypePboOffset, WebGl2RenderingContextTexSubImage3DParams_TargetLevelXoffsetYoffsetZoffsetWidthHeightDepthFormatTypeSource, WebGl2RenderingContextTexSubImage3DParams_TargetLevelXoffsetYoffsetZoffsetWidthHeightDepthFormatTypeSrcDataSrcOffset]



@dataclass
class WebGl2RenderingContextCompressedTexImage2DParams_TargetLevelInternalformatWidthHeightBorderImageSizeOffset:
    value: Tuple[int, int, int, int, int, int, int, int]


@dataclass
class WebGl2RenderingContextCompressedTexImage2DParams_TargetLevelInternalformatWidthHeightBorderSrcDataSrcOffsetSrcLengthOverride:
    value: Tuple[int, int, int, int, int, int, ArrayBufferView, Optional[int], Optional[int]]


WebGl2RenderingContextCompressedTexImage2DParams = Union[WebGl2RenderingContextCompressedTexImage2DParams_TargetLevelInternalformatWidthHeightBorderImageSizeOffset, WebGl2RenderingContextCompressedTexImage2DParams_TargetLevelInternalformatWidthHeightBorderSrcDataSrcOffsetSrcLengthOverride]



@dataclass
class WebGl2RenderingContextCompressedTexImage3DParams_TargetLevelInternalformatWidthHeightDepthBorderImageSizeOffset:
    value: Tuple[int, int, int, int, int, int, int, int, int]


@dataclass
class WebGl2RenderingContextCompressedTexImage3DParams_TargetLevelInternalformatWidthHeightDepthBorderSrcDataSrcOffsetSrcLengthOverride:
    value: Tuple[int, int, int, int, int, int, int, ArrayBufferView, Optional[int], Optional[int]]


WebGl2RenderingContextCompressedTexImage3DParams = Union[WebGl2RenderingContextCompressedTexImage3DParams_TargetLevelInternalformatWidthHeightDepthBorderImageSizeOffset, WebGl2RenderingContextCompressedTexImage3DParams_TargetLevelInternalformatWidthHeightDepthBorderSrcDataSrcOffsetSrcLengthOverride]



@dataclass
class WebGl2RenderingContextCompressedTexSubImage2DParams_TargetLevelXoffsetYoffsetWidthHeightFormatImageSizeOffset:
    value: Tuple[int, int, int, int, int, int, int, int, int]


@dataclass
class WebGl2RenderingContextCompressedTexSubImage2DParams_TargetLevelXoffsetYoffsetWidthHeightFormatSrcDataSrcOffsetSrcLengthOverride:
    value: Tuple[int, int, int, int, int, int, int, ArrayBufferView, Optional[int], Optional[int]]


WebGl2RenderingContextCompressedTexSubImage2DParams = Union[WebGl2RenderingContextCompressedTexSubImage2DParams_TargetLevelXoffsetYoffsetWidthHeightFormatImageSizeOffset, WebGl2RenderingContextCompressedTexSubImage2DParams_TargetLevelXoffsetYoffsetWidthHeightFormatSrcDataSrcOffsetSrcLengthOverride]



@dataclass
class WebGl2RenderingContextCompressedTexSubImage3DParams_TargetLevelXoffsetYoffsetZoffsetWidthHeightDepthFormatImageSizeOffset:
    value: Tuple[int, int, int, int, int, int, int, int, int, int, int]


@dataclass
class WebGl2RenderingContextCompressedTexSubImage3DParams_TargetLevelXoffsetYoffsetZoffsetWidthHeightDepthFormatSrcDataSrcOffsetSrcLengthOverride:
    value: Tuple[int, int, int, int, int, int, int, int, int, ArrayBufferView, Optional[int], Optional[int]]


WebGl2RenderingContextCompressedTexSubImage3DParams = Union[WebGl2RenderingContextCompressedTexSubImage3DParams_TargetLevelXoffsetYoffsetZoffsetWidthHeightDepthFormatImageSizeOffset, WebGl2RenderingContextCompressedTexSubImage3DParams_TargetLevelXoffsetYoffsetZoffsetWidthHeightDepthFormatSrcDataSrcOffsetSrcLengthOverride]



@dataclass
class WebGl2RenderingContextReadPixelsParams_XYWidthHeightFormatTypeDstData:
    value: Tuple[int, int, int, int, int, int, ArrayBufferView]


@dataclass
class WebGl2RenderingContextReadPixelsParams_XYWidthHeightFormatTypeOffset:
    value: Tuple[int, int, int, int, int, int, int]


@dataclass
class WebGl2RenderingContextReadPixelsParams_XYWidthHeightFormatTypeDstDataDstOffset:
    value: Tuple[int, int, int, int, int, int, ArrayBufferView, int]


WebGl2RenderingContextReadPixelsParams = Union[WebGl2RenderingContextReadPixelsParams_XYWidthHeightFormatTypeDstData, WebGl2RenderingContextReadPixelsParams_XYWidthHeightFormatTypeOffset, WebGl2RenderingContextReadPixelsParams_XYWidthHeightFormatTypeDstDataDstOffset]


class WebGl2RenderingContext:
    
    @classmethod
    def read_buffer(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unpack_row_length(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unpack_skip_rows(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unpack_skip_pixels(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pack_row_length(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pack_skip_rows(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pack_skip_pixels(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color(cls) -> int:
        raise NotImplementedError
    @classmethod
    def depth(cls) -> int:
        raise NotImplementedError
    @classmethod
    def stencil(cls) -> int:
        raise NotImplementedError
    @classmethod
    def red(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgb8(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgba8(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgb10_a2(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture_binding3d(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unpack_skip_images(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unpack_image_height(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture3d(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture_wrap_r(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max3d_texture_size(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unsigned_int2101010_rev(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_elements_vertices(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_elements_indices(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture_min_lod(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture_max_lod(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture_base_level(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture_max_level(cls) -> int:
        raise NotImplementedError
    @classmethod
    def min(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max(cls) -> int:
        raise NotImplementedError
    @classmethod
    def depth_component24(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_texture_lod_bias(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture_compare_mode(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture_compare_func(cls) -> int:
        raise NotImplementedError
    @classmethod
    def current_query(cls) -> int:
        raise NotImplementedError
    @classmethod
    def query_result(cls) -> int:
        raise NotImplementedError
    @classmethod
    def query_result_available(cls) -> int:
        raise NotImplementedError
    @classmethod
    def stream_read(cls) -> int:
        raise NotImplementedError
    @classmethod
    def stream_copy(cls) -> int:
        raise NotImplementedError
    @classmethod
    def static_read(cls) -> int:
        raise NotImplementedError
    @classmethod
    def static_copy(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dynamic_read(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dynamic_copy(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_draw_buffers(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer0(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer1(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer2(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer3(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer4(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer5(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer6(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer7(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer8(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer9(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer10(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer11(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer12(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer13(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer14(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_buffer15(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_fragment_uniform_components(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_vertex_uniform_components(cls) -> int:
        raise NotImplementedError
    @classmethod
    def sampler3d(cls) -> int:
        raise NotImplementedError
    @classmethod
    def sampler2d_shadow(cls) -> int:
        raise NotImplementedError
    @classmethod
    def fragment_shader_derivative_hint(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pixel_pack_buffer(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pixel_unpack_buffer(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pixel_pack_buffer_binding(cls) -> int:
        raise NotImplementedError
    @classmethod
    def pixel_unpack_buffer_binding(cls) -> int:
        raise NotImplementedError
    @classmethod
    def float_mat2x3(cls) -> int:
        raise NotImplementedError
    @classmethod
    def float_mat2x4(cls) -> int:
        raise NotImplementedError
    @classmethod
    def float_mat3x2(cls) -> int:
        raise NotImplementedError
    @classmethod
    def float_mat3x4(cls) -> int:
        raise NotImplementedError
    @classmethod
    def float_mat4x2(cls) -> int:
        raise NotImplementedError
    @classmethod
    def float_mat4x3(cls) -> int:
        raise NotImplementedError
    @classmethod
    def srgb(cls) -> int:
        raise NotImplementedError
    @classmethod
    def srgb8(cls) -> int:
        raise NotImplementedError
    @classmethod
    def srgb8_alpha8(cls) -> int:
        raise NotImplementedError
    @classmethod
    def compare_ref_to_texture(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgba32f(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgb32f(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgba16f(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgb16f(cls) -> int:
        raise NotImplementedError
    @classmethod
    def vertex_attrib_array_integer(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_array_texture_layers(cls) -> int:
        raise NotImplementedError
    @classmethod
    def min_program_texel_offset(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_program_texel_offset(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_varying_components(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture2d_array(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture_binding2d_array(cls) -> int:
        raise NotImplementedError
    @classmethod
    def r11f_g11f_b10f(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unsigned_int10f11f11f_rev(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgb9_e5(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unsigned_int5999_rev(cls) -> int:
        raise NotImplementedError
    @classmethod
    def transform_feedback_buffer_mode(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_transform_feedback_separate_components(cls) -> int:
        raise NotImplementedError
    @classmethod
    def transform_feedback_varyings(cls) -> int:
        raise NotImplementedError
    @classmethod
    def transform_feedback_buffer_start(cls) -> int:
        raise NotImplementedError
    @classmethod
    def transform_feedback_buffer_size(cls) -> int:
        raise NotImplementedError
    @classmethod
    def transform_feedback_primitives_written(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rasterizer_discard(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_transform_feedback_interleaved_components(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_transform_feedback_separate_attribs(cls) -> int:
        raise NotImplementedError
    @classmethod
    def interleaved_attribs(cls) -> int:
        raise NotImplementedError
    @classmethod
    def separate_attribs(cls) -> int:
        raise NotImplementedError
    @classmethod
    def transform_feedback_buffer(cls) -> int:
        raise NotImplementedError
    @classmethod
    def transform_feedback_buffer_binding(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgba32ui(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgb32ui(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgba16ui(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgb16ui(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgba8ui(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgb8ui(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgba32i(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgb32i(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgba16i(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgb16i(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgba8i(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgb8i(cls) -> int:
        raise NotImplementedError
    @classmethod
    def red_integer(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgb_integer(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgba_integer(cls) -> int:
        raise NotImplementedError
    @classmethod
    def sampler2d_array(cls) -> int:
        raise NotImplementedError
    @classmethod
    def sampler2d_array_shadow(cls) -> int:
        raise NotImplementedError
    @classmethod
    def sampler_cube_shadow(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unsigned_int_vec2(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unsigned_int_vec3(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unsigned_int_vec4(cls) -> int:
        raise NotImplementedError
    @classmethod
    def int_sampler2d(cls) -> int:
        raise NotImplementedError
    @classmethod
    def int_sampler3d(cls) -> int:
        raise NotImplementedError
    @classmethod
    def int_sampler_cube(cls) -> int:
        raise NotImplementedError
    @classmethod
    def int_sampler2d_array(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unsigned_int_sampler2d(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unsigned_int_sampler3d(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unsigned_int_sampler_cube(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unsigned_int_sampler2d_array(cls) -> int:
        raise NotImplementedError
    @classmethod
    def depth_component32f(cls) -> int:
        raise NotImplementedError
    @classmethod
    def depth32f_stencil8(cls) -> int:
        raise NotImplementedError
    @classmethod
    def float32_unsigned_int248_rev(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_attachment_color_encoding(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_attachment_component_type(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_attachment_red_size(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_attachment_green_size(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_attachment_blue_size(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_attachment_alpha_size(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_attachment_depth_size(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_attachment_stencil_size(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_default(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unsigned_int248(cls) -> int:
        raise NotImplementedError
    @classmethod
    def depth24_stencil8(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unsigned_normalized(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_framebuffer_binding(cls) -> int:
        raise NotImplementedError
    @classmethod
    def read_framebuffer(cls) -> int:
        raise NotImplementedError
    @classmethod
    def draw_framebuffer(cls) -> int:
        raise NotImplementedError
    @classmethod
    def read_framebuffer_binding(cls) -> int:
        raise NotImplementedError
    @classmethod
    def renderbuffer_samples(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_attachment_texture_layer(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_color_attachments(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment1(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment2(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment3(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment4(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment5(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment6(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment7(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment8(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment9(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment10(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment11(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment12(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment13(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment14(cls) -> int:
        raise NotImplementedError
    @classmethod
    def color_attachment15(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_incomplete_multisample(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_samples(cls) -> int:
        raise NotImplementedError
    @classmethod
    def half_float(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rg(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rg_integer(cls) -> int:
        raise NotImplementedError
    @classmethod
    def r8(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rg8(cls) -> int:
        raise NotImplementedError
    @classmethod
    def r16f(cls) -> int:
        raise NotImplementedError
    @classmethod
    def r32f(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rg16f(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rg32f(cls) -> int:
        raise NotImplementedError
    @classmethod
    def r8i(cls) -> int:
        raise NotImplementedError
    @classmethod
    def r8ui(cls) -> int:
        raise NotImplementedError
    @classmethod
    def r16i(cls) -> int:
        raise NotImplementedError
    @classmethod
    def r16ui(cls) -> int:
        raise NotImplementedError
    @classmethod
    def r32i(cls) -> int:
        raise NotImplementedError
    @classmethod
    def r32ui(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rg8i(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rg8ui(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rg16i(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rg16ui(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rg32i(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rg32ui(cls) -> int:
        raise NotImplementedError
    @classmethod
    def vertex_array_binding(cls) -> int:
        raise NotImplementedError
    @classmethod
    def r8_snorm(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rg8_snorm(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgb8_snorm(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgba8_snorm(cls) -> int:
        raise NotImplementedError
    @classmethod
    def signed_normalized(cls) -> int:
        raise NotImplementedError
    @classmethod
    def copy_read_buffer(cls) -> int:
        raise NotImplementedError
    @classmethod
    def copy_write_buffer(cls) -> int:
        raise NotImplementedError
    @classmethod
    def copy_read_buffer_binding(cls) -> int:
        raise NotImplementedError
    @classmethod
    def copy_write_buffer_binding(cls) -> int:
        raise NotImplementedError
    @classmethod
    def uniform_buffer(cls) -> int:
        raise NotImplementedError
    @classmethod
    def uniform_buffer_binding(cls) -> int:
        raise NotImplementedError
    @classmethod
    def uniform_buffer_start(cls) -> int:
        raise NotImplementedError
    @classmethod
    def uniform_buffer_size(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_vertex_uniform_blocks(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_fragment_uniform_blocks(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_combined_uniform_blocks(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_uniform_buffer_bindings(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_uniform_block_size(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_combined_vertex_uniform_components(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_combined_fragment_uniform_components(cls) -> int:
        raise NotImplementedError
    @classmethod
    def uniform_buffer_offset_alignment(cls) -> int:
        raise NotImplementedError
    @classmethod
    def active_uniform_blocks(cls) -> int:
        raise NotImplementedError
    @classmethod
    def uniform_type(cls) -> int:
        raise NotImplementedError
    @classmethod
    def uniform_size(cls) -> int:
        raise NotImplementedError
    @classmethod
    def uniform_block_index(cls) -> int:
        raise NotImplementedError
    @classmethod
    def uniform_offset(cls) -> int:
        raise NotImplementedError
    @classmethod
    def uniform_array_stride(cls) -> int:
        raise NotImplementedError
    @classmethod
    def uniform_matrix_stride(cls) -> int:
        raise NotImplementedError
    @classmethod
    def uniform_is_row_major(cls) -> int:
        raise NotImplementedError
    @classmethod
    def uniform_block_binding(cls) -> int:
        raise NotImplementedError
    @classmethod
    def uniform_block_data_size(cls) -> int:
        raise NotImplementedError
    @classmethod
    def uniform_block_active_uniforms(cls) -> int:
        raise NotImplementedError
    @classmethod
    def uniform_block_active_uniform_indices(cls) -> int:
        raise NotImplementedError
    @classmethod
    def uniform_block_referenced_by_vertex_shader(cls) -> int:
        raise NotImplementedError
    @classmethod
    def uniform_block_referenced_by_fragment_shader(cls) -> int:
        raise NotImplementedError
    @classmethod
    def invalid_index(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_vertex_output_components(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_fragment_input_components(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_server_wait_timeout(cls) -> int:
        raise NotImplementedError
    @classmethod
    def object_type(cls) -> int:
        raise NotImplementedError
    @classmethod
    def sync_condition(cls) -> int:
        raise NotImplementedError
    @classmethod
    def sync_status(cls) -> int:
        raise NotImplementedError
    @classmethod
    def sync_flags(cls) -> int:
        raise NotImplementedError
    @classmethod
    def sync_fence(cls) -> int:
        raise NotImplementedError
    @classmethod
    def sync_gpu_commands_complete(cls) -> int:
        raise NotImplementedError
    @classmethod
    def unsignaled(cls) -> int:
        raise NotImplementedError
    @classmethod
    def signaled(cls) -> int:
        raise NotImplementedError
    @classmethod
    def already_signaled(cls) -> int:
        raise NotImplementedError
    @classmethod
    def timeout_expired(cls) -> int:
        raise NotImplementedError
    @classmethod
    def condition_satisfied(cls) -> int:
        raise NotImplementedError
    @classmethod
    def wait_failed(cls) -> int:
        raise NotImplementedError
    @classmethod
    def sync_flush_commands_bit(cls) -> int:
        raise NotImplementedError
    @classmethod
    def vertex_attrib_array_divisor(cls) -> int:
        raise NotImplementedError
    @classmethod
    def any_samples_passed(cls) -> int:
        raise NotImplementedError
    @classmethod
    def any_samples_passed_conservative(cls) -> int:
        raise NotImplementedError
    @classmethod
    def sampler_binding(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgb10_a2ui(cls) -> int:
        raise NotImplementedError
    @classmethod
    def int2101010_rev(cls) -> int:
        raise NotImplementedError
    @classmethod
    def transform_feedback(cls) -> int:
        raise NotImplementedError
    @classmethod
    def transform_feedback_paused(cls) -> int:
        raise NotImplementedError
    @classmethod
    def transform_feedback_active(cls) -> int:
        raise NotImplementedError
    @classmethod
    def transform_feedback_binding(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture_immutable_format(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_element_index(cls) -> int:
        raise NotImplementedError
    @classmethod
    def texture_immutable_levels(cls) -> int:
        raise NotImplementedError
    @classmethod
    def timeout_ignored(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_client_wait_timeout_webgl(cls) -> int:
        raise NotImplementedError
    def buffer_data(self, params: WebGl2RenderingContextBufferDataParams) -> None:
        raise NotImplementedError
    def buffer_sub_data(self, params: WebGl2RenderingContextBufferSubDataParams) -> None:
        raise NotImplementedError
    def copy_buffer_sub_data(self, read_target: int, write_target: int, read_offset: int, write_offset: int, size: int) -> None:
        raise NotImplementedError
    def get_buffer_sub_data(self, target: int, src_byte_offset: int, dst_data: ArrayBufferView, dst_offset: Optional[int], length: Optional[int]) -> None:
        raise NotImplementedError
    def blit_framebuffer(self, src_x0: int, src_y0: int, src_x1: int, src_y1: int, dst_x0: int, dst_y0: int, dst_x1: int, dst_y1: int, mask: int, filter: int) -> None:
        raise NotImplementedError
    def framebuffer_texture_layer(self, target: int, attachment: int, texture: Optional[WebGlTexture], level: int, layer: int) -> None:
        raise NotImplementedError
    def invalidate_framebuffer(self, target: int, attachments: List[int]) -> None:
        raise NotImplementedError
    def invalidate_sub_framebuffer(self, target: int, attachments: List[int], x: int, y: int, width: int, height: int) -> None:
        raise NotImplementedError
    def get_internalformat_parameter(self, target: int, internalformat: int, pname: int) -> Any:
        """
        read-buffer: func(src: g-lenum);
        """
        raise NotImplementedError
    def renderbuffer_storage_multisample(self, target: int, samples: int, internalformat: int, width: int, height: int) -> None:
        raise NotImplementedError
    def tex_storage2_d(self, target: int, levels: int, internalformat: int, width: int, height: int) -> None:
        raise NotImplementedError
    def tex_storage3_d(self, target: int, levels: int, internalformat: int, width: int, height: int, depth: int) -> None:
        raise NotImplementedError
    def tex_image2_d(self, params: WebGl2RenderingContextTexImage2DParams) -> None:
        raise NotImplementedError
    def tex_image3_d(self, params: WebGl2RenderingContextTexImage3DParams) -> None:
        raise NotImplementedError
    def tex_sub_image2_d(self, params: WebGl2RenderingContextTexSubImage2DParams) -> None:
        raise NotImplementedError
    def tex_sub_image3_d(self, params: WebGl2RenderingContextTexSubImage3DParams) -> None:
        raise NotImplementedError
    def copy_tex_sub_image3_d(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int) -> None:
        raise NotImplementedError
    def compressed_tex_image2_d(self, params: WebGl2RenderingContextCompressedTexImage2DParams) -> None:
        raise NotImplementedError
    def compressed_tex_image3_d(self, params: WebGl2RenderingContextCompressedTexImage3DParams) -> None:
        raise NotImplementedError
    def compressed_tex_sub_image2_d(self, params: WebGl2RenderingContextCompressedTexSubImage2DParams) -> None:
        raise NotImplementedError
    def compressed_tex_sub_image3_d(self, params: WebGl2RenderingContextCompressedTexSubImage3DParams) -> None:
        raise NotImplementedError
    def get_frag_data_location(self, program: WebGlProgram, name: str) -> int:
        raise NotImplementedError
    def uniform1ui(self, location: Optional[WebGlUniformLocation], v0: int) -> None:
        raise NotImplementedError
    def uniform2ui(self, location: Optional[WebGlUniformLocation], v0: int, v1: int) -> None:
        raise NotImplementedError
    def uniform3ui(self, location: Optional[WebGlUniformLocation], v0: int, v1: int, v2: int) -> None:
        raise NotImplementedError
    def uniform4ui(self, location: Optional[WebGlUniformLocation], v0: int, v1: int, v2: int, v3: int) -> None:
        raise NotImplementedError
    def uniform1fv(self, location: Optional[WebGlUniformLocation], data: Float32ArrayOrListGLfloat, src_offset: Optional[int], src_length: Optional[int]) -> None:
        raise NotImplementedError
    def uniform2fv(self, location: Optional[WebGlUniformLocation], data: Float32ArrayOrListGLfloat, src_offset: Optional[int], src_length: Optional[int]) -> None:
        raise NotImplementedError
    def uniform3fv(self, location: Optional[WebGlUniformLocation], data: Float32ArrayOrListGLfloat, src_offset: Optional[int], src_length: Optional[int]) -> None:
        raise NotImplementedError
    def uniform4fv(self, location: Optional[WebGlUniformLocation], data: Float32ArrayOrListGLfloat, src_offset: Optional[int], src_length: Optional[int]) -> None:
        raise NotImplementedError
    def uniform1iv(self, location: Optional[WebGlUniformLocation], data: Int32ArrayOrListGLint, src_offset: Optional[int], src_length: Optional[int]) -> None:
        raise NotImplementedError
    def uniform2iv(self, location: Optional[WebGlUniformLocation], data: Int32ArrayOrListGLint, src_offset: Optional[int], src_length: Optional[int]) -> None:
        raise NotImplementedError
    def uniform3iv(self, location: Optional[WebGlUniformLocation], data: Int32ArrayOrListGLint, src_offset: Optional[int], src_length: Optional[int]) -> None:
        raise NotImplementedError
    def uniform4iv(self, location: Optional[WebGlUniformLocation], data: Int32ArrayOrListGLint, src_offset: Optional[int], src_length: Optional[int]) -> None:
        raise NotImplementedError
    def uniform1uiv(self, location: Optional[WebGlUniformLocation], data: ListGLuintOrUint32Array, src_offset: Optional[int], src_length: Optional[int]) -> None:
        raise NotImplementedError
    def uniform2uiv(self, location: Optional[WebGlUniformLocation], data: ListGLuintOrUint32Array, src_offset: Optional[int], src_length: Optional[int]) -> None:
        raise NotImplementedError
    def uniform3uiv(self, location: Optional[WebGlUniformLocation], data: ListGLuintOrUint32Array, src_offset: Optional[int], src_length: Optional[int]) -> None:
        raise NotImplementedError
    def uniform4uiv(self, location: Optional[WebGlUniformLocation], data: ListGLuintOrUint32Array, src_offset: Optional[int], src_length: Optional[int]) -> None:
        raise NotImplementedError
    def uniform_matrix2fv(self, location: Optional[WebGlUniformLocation], transpose: bool, data: Float32ArrayOrListGLfloat, src_offset: Optional[int], src_length: Optional[int]) -> None:
        raise NotImplementedError
    def uniform_matrix3x2fv(self, location: Optional[WebGlUniformLocation], transpose: bool, data: Float32ArrayOrListGLfloat, src_offset: Optional[int], src_length: Optional[int]) -> None:
        raise NotImplementedError
    def uniform_matrix4x2fv(self, location: Optional[WebGlUniformLocation], transpose: bool, data: Float32ArrayOrListGLfloat, src_offset: Optional[int], src_length: Optional[int]) -> None:
        raise NotImplementedError
    def uniform_matrix2x3fv(self, location: Optional[WebGlUniformLocation], transpose: bool, data: Float32ArrayOrListGLfloat, src_offset: Optional[int], src_length: Optional[int]) -> None:
        raise NotImplementedError
    def uniform_matrix3fv(self, location: Optional[WebGlUniformLocation], transpose: bool, data: Float32ArrayOrListGLfloat, src_offset: Optional[int], src_length: Optional[int]) -> None:
        raise NotImplementedError
    def uniform_matrix4x3fv(self, location: Optional[WebGlUniformLocation], transpose: bool, data: Float32ArrayOrListGLfloat, src_offset: Optional[int], src_length: Optional[int]) -> None:
        raise NotImplementedError
    def uniform_matrix2x4fv(self, location: Optional[WebGlUniformLocation], transpose: bool, data: Float32ArrayOrListGLfloat, src_offset: Optional[int], src_length: Optional[int]) -> None:
        raise NotImplementedError
    def uniform_matrix3x4fv(self, location: Optional[WebGlUniformLocation], transpose: bool, data: Float32ArrayOrListGLfloat, src_offset: Optional[int], src_length: Optional[int]) -> None:
        raise NotImplementedError
    def uniform_matrix4fv(self, location: Optional[WebGlUniformLocation], transpose: bool, data: Float32ArrayOrListGLfloat, src_offset: Optional[int], src_length: Optional[int]) -> None:
        raise NotImplementedError
    def vertex_attrib_i4i(self, index: int, x: int, y: int, z: int, w: int) -> None:
        raise NotImplementedError
    def vertex_attrib_i4iv(self, index: int, values: Int32ArrayOrListGLint) -> None:
        raise NotImplementedError
    def vertex_attrib_i4ui(self, index: int, x: int, y: int, z: int, w: int) -> None:
        raise NotImplementedError
    def vertex_attrib_i4uiv(self, index: int, values: ListGLuintOrUint32Array) -> None:
        raise NotImplementedError
    def vertex_attrib_i_pointer(self, index: int, size: int, type: int, stride: int, offset: int) -> None:
        raise NotImplementedError
    def vertex_attrib_divisor(self, index: int, divisor: int) -> None:
        raise NotImplementedError
    def draw_arrays_instanced(self, mode: int, first: int, count: int, instance_count: int) -> None:
        raise NotImplementedError
    def draw_elements_instanced(self, mode: int, count: int, type: int, offset: int, instance_count: int) -> None:
        raise NotImplementedError
    def draw_range_elements(self, mode: int, start: int, end: int, count: int, type: int, offset: int) -> None:
        raise NotImplementedError
    def read_pixels(self, params: WebGl2RenderingContextReadPixelsParams) -> None:
        raise NotImplementedError
    def draw_buffers(self, buffers: List[int]) -> None:
        raise NotImplementedError
    def clear_bufferfv(self, buffer: int, drawbuffer: int, values: Float32ArrayOrListGLfloat, src_offset: Optional[int]) -> None:
        raise NotImplementedError
    def clear_bufferiv(self, buffer: int, drawbuffer: int, values: Int32ArrayOrListGLint, src_offset: Optional[int]) -> None:
        raise NotImplementedError
    def clear_bufferuiv(self, buffer: int, drawbuffer: int, values: ListGLuintOrUint32Array, src_offset: Optional[int]) -> None:
        raise NotImplementedError
    def clear_bufferfi(self, buffer: int, drawbuffer: int, depth: float, stencil: int) -> None:
        raise NotImplementedError
    def create_query(self) -> Optional[WebGlQuery]:
        raise NotImplementedError
    def delete_query(self, query: Optional[WebGlQuery]) -> None:
        raise NotImplementedError
    def is_query(self, query: Optional[WebGlQuery]) -> bool:
        raise NotImplementedError
    def begin_query(self, target: int, query: WebGlQuery) -> None:
        raise NotImplementedError
    def end_query(self, target: int) -> None:
        raise NotImplementedError
    def get_query(self, target: int, pname: int) -> Any:
        raise NotImplementedError
    def get_query_parameter(self, query: WebGlQuery, pname: int) -> Any:
        raise NotImplementedError
    def create_sampler(self) -> Optional[WebGlSampler]:
        raise NotImplementedError
    def delete_sampler(self, sampler: Optional[WebGlSampler]) -> None:
        raise NotImplementedError
    def is_sampler(self, sampler: Optional[WebGlSampler]) -> bool:
        raise NotImplementedError
    def bind_sampler(self, unit: int, sampler: Optional[WebGlSampler]) -> None:
        raise NotImplementedError
    def sampler_parameteri(self, sampler: WebGlSampler, pname: int, param: int) -> None:
        raise NotImplementedError
    def sampler_parameterf(self, sampler: WebGlSampler, pname: int, param: float) -> None:
        raise NotImplementedError
    def get_sampler_parameter(self, sampler: WebGlSampler, pname: int) -> Any:
        raise NotImplementedError
    def fence_sync(self, condition: int, flags: int) -> Optional[WebGlSync]:
        raise NotImplementedError
    def is_sync(self, sync: Optional[WebGlSync]) -> bool:
        raise NotImplementedError
    def delete_sync(self, sync: Optional[WebGlSync]) -> None:
        raise NotImplementedError
    def client_wait_sync(self, sync: WebGlSync, flags: int, timeout: int) -> int:
        raise NotImplementedError
    def wait_sync(self, sync: WebGlSync, flags: int, timeout: int) -> None:
        raise NotImplementedError
    def get_sync_parameter(self, sync: WebGlSync, pname: int) -> Any:
        raise NotImplementedError
    def create_transform_feedback(self) -> Optional[WebGlTransformFeedback]:
        raise NotImplementedError
    def delete_transform_feedback(self, tf: Optional[WebGlTransformFeedback]) -> None:
        raise NotImplementedError
    def is_transform_feedback(self, tf: Optional[WebGlTransformFeedback]) -> bool:
        raise NotImplementedError
    def bind_transform_feedback(self, target: int, tf: Optional[WebGlTransformFeedback]) -> None:
        raise NotImplementedError
    def begin_transform_feedback(self, primitive_mode: int) -> None:
        raise NotImplementedError
    def end_transform_feedback(self) -> None:
        raise NotImplementedError
    def get_transform_feedback_varying(self, program: WebGlProgram, index: int) -> Optional[WebGlActiveInfo]:
        """
        transform-feedback-varyings: func(program: borrow<web-gl-program>, varyings: list<string>, buffer-mode: g-lenum);
        """
        raise NotImplementedError
    def pause_transform_feedback(self) -> None:
        raise NotImplementedError
    def resume_transform_feedback(self) -> None:
        raise NotImplementedError
    def bind_buffer_base(self, target: int, index: int, buffer: Optional[WebGlBuffer]) -> None:
        raise NotImplementedError
    def bind_buffer_range(self, target: int, index: int, buffer: Optional[WebGlBuffer], offset: int, size: int) -> None:
        raise NotImplementedError
    def get_indexed_parameter(self, target: int, index: int) -> Any:
        raise NotImplementedError
    def get_uniform_indices(self, program: WebGlProgram, uniform_names: List[str]) -> List[Optional[int]]:
        raise NotImplementedError
    def get_active_uniforms(self, program: WebGlProgram, uniform_indices: List[int], pname: int) -> Any:
        raise NotImplementedError
    def get_uniform_block_index(self, program: WebGlProgram, uniform_block_name: str) -> int:
        raise NotImplementedError
    def get_active_uniform_block_parameter(self, program: WebGlProgram, uniform_block_index: int, pname: int) -> Any:
        raise NotImplementedError
    def get_active_uniform_block_name(self, program: WebGlProgram, uniform_block_index: int) -> str:
        raise NotImplementedError
    def create_vertex_array(self) -> Optional[WebGlVertexArrayObject]:
        """
        uniform-block-binding: func(program: borrow<web-gl-program>, uniform-block-index: g-luint, uniform-block-binding: g-luint);
        """
        raise NotImplementedError
    def delete_vertex_array(self, vertex_array: Optional[WebGlVertexArrayObject]) -> None:
        raise NotImplementedError
    def is_vertex_array(self, vertex_array: Optional[WebGlVertexArrayObject]) -> bool:
        raise NotImplementedError
    def bind_vertex_array(self, array: Optional[WebGlVertexArrayObject]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ExtColorBufferFloat:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ExtTextureNorm16:
    
    @classmethod
    def r16_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rg16_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgb16_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgba16_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def r16_snorm_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rg16_snorm_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgb16_snorm_ext(cls) -> int:
        raise NotImplementedError
    @classmethod
    def rgba16_snorm_ext(cls) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlStyleElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def disabled(self) -> bool:
        raise NotImplementedError
    def set_disabled(self, disabled: bool) -> None:
        raise NotImplementedError
    def media(self) -> str:
        raise NotImplementedError
    def set_media(self, media: str) -> None:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def set_type(self, type: str) -> None:
        raise NotImplementedError
    def sheet(self) -> Optional[StyleSheet]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PositionError:
    
    @classmethod
    def permission_denied(cls) -> int:
        raise NotImplementedError
    @classmethod
    def position_unavailable(cls) -> int:
        raise NotImplementedError
    @classmethod
    def timeout(cls) -> int:
        raise NotImplementedError
    def code(self) -> int:
        raise NotImplementedError
    def message(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PaymentComplete(Enum):
    SUCCESS = 0
    FAIL = 1
    UNKNOWN = 2

class PaymentAddress:
    
    def to_json(self) -> Object:
        raise NotImplementedError
    def country(self) -> str:
        raise NotImplementedError
    def address_line(self) -> List[str]:
        raise NotImplementedError
    def region(self) -> str:
        raise NotImplementedError
    def city(self) -> str:
        raise NotImplementedError
    def dependent_locality(self) -> str:
        raise NotImplementedError
    def postal_code(self) -> str:
        raise NotImplementedError
    def sorting_code(self) -> str:
        raise NotImplementedError
    def language_code(self) -> str:
        raise NotImplementedError
    def organization(self) -> str:
        raise NotImplementedError
    def recipient(self) -> str:
        raise NotImplementedError
    def phone(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PaymentResponse:
    
    def to_json(self) -> Object:
        raise NotImplementedError
    def request_id(self) -> str:
        raise NotImplementedError
    def method_name(self) -> str:
        raise NotImplementedError
    def details(self) -> Object:
        raise NotImplementedError
    def shipping_address(self) -> Optional[PaymentAddress]:
        raise NotImplementedError
    def shipping_option(self) -> str:
        raise NotImplementedError
    def payer_name(self) -> str:
        raise NotImplementedError
    def payer_email(self) -> str:
        raise NotImplementedError
    def payer_phone(self) -> str:
        raise NotImplementedError
    def complete(self, result: Optional[PaymentComplete]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WebKitCssMatrix:
    
    def as_dom_matrix(self) -> DomMatrix:
        raise NotImplementedError
    def set_matrix_value(self, transform_list: str) -> Self:
        raise NotImplementedError
    def multiply(self, other: Self) -> Self:
        raise NotImplementedError
    def inverse(self) -> Self:
        raise NotImplementedError
    def translate(self, tx: Optional[float], ty: Optional[float], tz: Optional[float]) -> Self:
        raise NotImplementedError
    def scale(self, scale_x: Optional[float], scale_y: Optional[float], scale_z: Optional[float]) -> Self:
        raise NotImplementedError
    def rotate(self, rot_x: Optional[float], rot_y: Optional[float], rot_z: Optional[float]) -> Self:
        raise NotImplementedError
    def rotate_axis_angle(self, x: Optional[float], y: Optional[float], z: Optional[float], angle: Optional[float]) -> Self:
        raise NotImplementedError
    def skew_x(self, sx: Optional[float]) -> Self:
        raise NotImplementedError
    def skew_y(self, sy: Optional[float]) -> Self:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CssImportRule:
    
    def as_css_rule(self) -> CssRule:
        raise NotImplementedError
    def href(self) -> str:
        raise NotImplementedError
    def media(self) -> Optional[MediaList]:
        raise NotImplementedError
    def style_sheet(self) -> Optional[CssStyleSheet]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlFrameSetElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def cols(self) -> str:
        raise NotImplementedError
    def set_cols(self, cols: str) -> None:
        raise NotImplementedError
    def rows(self) -> str:
        raise NotImplementedError
    def set_rows(self, rows: str) -> None:
        raise NotImplementedError
    def onafterprint(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onafterprint(self, onafterprint: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onbeforeprint(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onbeforeprint(self, onbeforeprint: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onbeforeunload(self) -> Optional[OnBeforeUnloadEventHandlerNonNull]:
        raise NotImplementedError
    def set_onbeforeunload(self, onbeforeunload: Optional[OnBeforeUnloadEventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onhashchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onhashchange(self, onhashchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onlanguagechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onlanguagechange(self, onlanguagechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmessage(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmessage(self, onmessage: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmessageerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmessageerror(self, onmessageerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onoffline(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onoffline(self, onoffline: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ononline(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ononline(self, ononline: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpagehide(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpagehide(self, onpagehide: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpageshow(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpageshow(self, onpageshow: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpopstate(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpopstate(self, onpopstate: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onstorage(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onstorage(self, onstorage: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onunload(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onunload(self, onunload: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ResizeObserverBoxOptions(Enum):
    BORDER_BOX = 0
    CONTENT_BOX = 1
    DEVICE_PIXEL_CONTENT_BOX = 2

@dataclass
class ResizeObserverOptions:
    box: Optional[ResizeObserverBoxOptions]

class ResizeObserver:
    
    def __init__(self, callback: ResizeObserverCallback):
        raise NotImplementedError

    def observe(self, target: Element, options: Optional[ResizeObserverOptions]) -> None:
        raise NotImplementedError
    def unobserve(self, target: Element) -> None:
        raise NotImplementedError
    def disconnect(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ResizeObserverSize:
    
    def inline_size(self) -> float:
        raise NotImplementedError
    def block_size(self) -> float:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ResizeObserverEntry:
    
    def target(self) -> Element:
        raise NotImplementedError
    def content_rect(self) -> DomRectReadOnly:
        raise NotImplementedError
    def border_box_size(self) -> List[ResizeObserverSize]:
        raise NotImplementedError
    def content_box_size(self) -> List[ResizeObserverSize]:
        raise NotImplementedError
    def device_pixel_content_box_size(self) -> List[ResizeObserverSize]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgfeColorMatrixElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    @classmethod
    def svg_fecolormatrix_type_unknown(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_fecolormatrix_type_matrix(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_fecolormatrix_type_saturate(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_fecolormatrix_type_huerotate(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_fecolormatrix_type_luminancetoalpha(cls) -> int:
        raise NotImplementedError
    def in1(self) -> SvgAnimatedString:
        raise NotImplementedError
    def type(self) -> SvgAnimatedEnumeration:
        raise NotImplementedError
    def values(self) -> SvgAnimatedNumberList:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def result(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PerformanceServerTiming:
    
    def name(self) -> str:
        raise NotImplementedError
    def duration(self) -> float:
        raise NotImplementedError
    def description(self) -> str:
        raise NotImplementedError
    def to_json(self) -> Object:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PerformanceResourceTiming:
    
    def as_performance_entry(self) -> PerformanceEntry:
        raise NotImplementedError
    def initiator_type(self) -> str:
        raise NotImplementedError
    def next_hop_protocol(self) -> str:
        raise NotImplementedError
    def worker_start(self) -> float:
        raise NotImplementedError
    def redirect_start(self) -> float:
        raise NotImplementedError
    def redirect_end(self) -> float:
        raise NotImplementedError
    def fetch_start(self) -> float:
        raise NotImplementedError
    def domain_lookup_start(self) -> float:
        raise NotImplementedError
    def domain_lookup_end(self) -> float:
        raise NotImplementedError
    def connect_start(self) -> float:
        raise NotImplementedError
    def connect_end(self) -> float:
        raise NotImplementedError
    def secure_connection_start(self) -> float:
        raise NotImplementedError
    def request_start(self) -> float:
        raise NotImplementedError
    def response_start(self) -> float:
        raise NotImplementedError
    def response_end(self) -> float:
        raise NotImplementedError
    def transfer_size(self) -> int:
        raise NotImplementedError
    def encoded_body_size(self) -> int:
        raise NotImplementedError
    def decoded_body_size(self) -> int:
        raise NotImplementedError
    def server_timing(self) -> List[PerformanceServerTiming]:
        raise NotImplementedError
    def to_json(self) -> Object:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class GamepadButtonEvent:
    
    def as_gamepad_event(self) -> GamepadEvent:
        raise NotImplementedError
    def button(self) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class MediaStreamAudioSourceOptions:
    media_stream: MediaStream

class SvgPointList:
    
    def number_of_items(self) -> int:
        raise NotImplementedError
    def clear(self) -> None:
        raise NotImplementedError
    def initialize(self, new_item: SvgPoint) -> SvgPoint:
        raise NotImplementedError
    def get_item(self, index: int) -> SvgPoint:
        raise NotImplementedError
    def insert_item_before(self, new_item: SvgPoint, index: int) -> SvgPoint:
        raise NotImplementedError
    def replace_item(self, new_item: SvgPoint, index: int) -> SvgPoint:
        raise NotImplementedError
    def remove_item(self, index: int) -> SvgPoint:
        raise NotImplementedError
    def append_item(self, new_item: SvgPoint) -> SvgPoint:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class RtcDataChannelState(Enum):
    CONNECTING = 0
    OPEN = 1
    CLOSING = 2
    CLOSED = 3

class RtcDataChannelType(Enum):
    ARRAYBUFFER = 0
    BLOB = 1


@dataclass
class RtcDataChannelSendParams_Data:
    value: str


RtcDataChannelSendParams = Union[RtcDataChannelSendParams_Data]


class RtcDataChannel:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def label(self) -> str:
        raise NotImplementedError
    def id(self) -> int:
        raise NotImplementedError
    def reliable(self) -> bool:
        raise NotImplementedError
    def max_packet_life_time(self) -> int:
        raise NotImplementedError
    def max_retransmits(self) -> int:
        raise NotImplementedError
    def ready_state(self) -> RtcDataChannelState:
        raise NotImplementedError
    def buffered_amount(self) -> int:
        raise NotImplementedError
    def buffered_amount_low_threshold(self) -> int:
        raise NotImplementedError
    def set_buffered_amount_low_threshold(self, buffered_amount_low_threshold: int) -> None:
        raise NotImplementedError
    def onopen(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onopen(self, onopen: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onclose(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onclose(self, onclose: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def close(self) -> None:
        raise NotImplementedError
    def onmessage(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmessage(self, onmessage: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onbufferedamountlow(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onbufferedamountlow(self, onbufferedamountlow: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def binary_type(self) -> RtcDataChannelType:
        raise NotImplementedError
    def set_binary_type(self, binary_type: RtcDataChannelType) -> None:
        raise NotImplementedError
    def send(self, params: RtcDataChannelSendParams) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PaintRequest:
    
    def client_rect(self) -> DomRect:
        raise NotImplementedError
    def reason(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PaintRequestList:
    
    def length(self) -> int:
        raise NotImplementedError
    def item(self, index: int) -> Optional[PaintRequest]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class DisplayNameOptions:
    style: Optional[str]
    keys: Optional[List[str]]

@dataclass
class DisplayNameResult:
    locale: Optional[str]
    style: Optional[str]
    values: Optional[RecordString]

@dataclass
class LocaleInfo:
    locale: Optional[str]
    direction: Optional[str]

class IntlUtils:
    
    def get_display_names(self, locales: List[str], options: Optional[DisplayNameOptions]) -> DisplayNameResult:
        raise NotImplementedError
    def get_locale_info(self, locales: List[str]) -> LocaleInfo:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class IntersectionObserverEntry:
    
    def time(self) -> float:
        raise NotImplementedError
    def root_bounds(self) -> Optional[DomRectReadOnly]:
        raise NotImplementedError
    def bounding_client_rect(self) -> DomRectReadOnly:
        raise NotImplementedError
    def intersection_rect(self) -> DomRectReadOnly:
        raise NotImplementedError
    def is_intersecting(self) -> bool:
        raise NotImplementedError
    def intersection_ratio(self) -> float:
        raise NotImplementedError
    def target(self) -> Element:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class IntersectionObserver:
    
    def root(self) -> Optional[Element]:
        raise NotImplementedError
    def root_margin(self) -> str:
        raise NotImplementedError
    def thresholds(self) -> List[float]:
        raise NotImplementedError
    def observe(self, target: Element) -> None:
        raise NotImplementedError
    def unobserve(self, target: Element) -> None:
        raise NotImplementedError
    def disconnect(self) -> None:
        raise NotImplementedError
    def take_records(self) -> List[IntersectionObserverEntry]:
        raise NotImplementedError
    def intersection_callback(self) -> IntersectionCallback:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class F64OrListF64_F64:
    value: float


@dataclass
class F64OrListF64_ListF64:
    value: List[float]


F64OrListF64 = Union[F64OrListF64_F64, F64OrListF64_ListF64]


class SvgfeFuncRElement:
    
    def as_svg_component_transfer_function_element(self) -> SvgComponentTransferFunctionElement:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgAnimateMotionElement:
    
    def as_svg_animation_element(self) -> SvgAnimationElement:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class OfflineAudioCompletionEventInit:
    rendered_buffer: AudioBuffer
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class OfflineAudioCompletionEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def rendered_buffer(self) -> AudioBuffer:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class KeyEvent:
    
    @classmethod
    def dom_vk_cancel(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_help(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_back_space(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_tab(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_clear(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_return(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_shift(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_control(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_alt(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_pause(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_caps_lock(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_kana(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_hangul(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_eisu(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_junja(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_final(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_hanja(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_kanji(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_escape(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_convert(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_nonconvert(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_accept(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_modechange(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_space(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_page_up(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_page_down(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_end(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_home(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_left(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_up(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_right(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_down(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_select(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_print(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_execute(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_printscreen(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_insert(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_delete(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk0(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk1(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk2(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk3(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk4(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk5(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk6(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk7(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk8(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk9(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_colon(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_semicolon(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_less_than(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_equals(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_greater_than(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_question_mark(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_at(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_a(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_b(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_c(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_d(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_e(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_f(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_g(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_h(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_i(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_j(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_k(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_l(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_m(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_n(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_o(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_p(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_q(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_r(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_s(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_t(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_u(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_v(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_w(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_x(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_y(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_z(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_win(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_context_menu(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_sleep(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_numpad0(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_numpad1(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_numpad2(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_numpad3(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_numpad4(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_numpad5(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_numpad6(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_numpad7(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_numpad8(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_numpad9(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_multiply(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_add(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_separator(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_subtract(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_decimal(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_divide(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_f1(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_f2(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_f3(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_f4(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_f5(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_f6(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_f7(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_f8(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_f9(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_f10(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_f11(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_f12(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_f13(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_f14(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_f15(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_f16(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_f17(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_f18(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_f19(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_f20(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_f21(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_f22(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_f23(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_f24(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_num_lock(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_scroll_lock(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_win_oem_fj_jisho(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_win_oem_fj_masshou(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_win_oem_fj_touroku(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_win_oem_fj_loya(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_win_oem_fj_roya(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_circumflex(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_exclamation(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_double_quote(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_hash(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_dollar(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_percent(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_ampersand(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_underscore(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_open_paren(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_close_paren(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_asterisk(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_plus(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_pipe(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_hyphen_minus(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_open_curly_bracket(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_close_curly_bracket(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_tilde(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_volume_mute(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_volume_down(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_volume_up(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_comma(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_period(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_slash(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_back_quote(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_open_bracket(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_back_slash(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_close_bracket(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_quote(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_meta(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_altgr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_win_ico_help(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_win_ico00(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_processkey(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_win_ico_clear(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_win_oem_reset(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_win_oem_jump(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_win_oem_pa1(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_win_oem_pa2(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_win_oem_pa3(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_win_oem_wsctrl(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_win_oem_cusel(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_win_oem_attn(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_win_oem_finish(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_win_oem_copy(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_win_oem_auto(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_win_oem_enlw(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_win_oem_backtab(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_attn(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_crsel(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_exsel(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_ereof(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_play(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_zoom(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_pa1(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_vk_win_oem_clear(cls) -> int:
        raise NotImplementedError
    def init_key_event(self, type: str, can_bubble: Optional[bool], cancelable: Optional[bool], view: Optional[Some[Optional[Window]]], ctrl_key: Optional[bool], alt_key: Optional[bool], shift_key: Optional[bool], meta_key: Optional[bool], key_code: Optional[int], char_code: Optional[int]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class AudioParamMap:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgfeBlendElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    @classmethod
    def svg_feblend_mode_unknown(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_feblend_mode_normal(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_feblend_mode_multiply(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_feblend_mode_screen(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_feblend_mode_darken(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_feblend_mode_lighten(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_feblend_mode_overlay(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_feblend_mode_color_dodge(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_feblend_mode_color_burn(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_feblend_mode_hard_light(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_feblend_mode_soft_light(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_feblend_mode_difference(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_feblend_mode_exclusion(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_feblend_mode_hue(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_feblend_mode_saturation(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_feblend_mode_color(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_feblend_mode_luminosity(cls) -> int:
        raise NotImplementedError
    def in1(self) -> SvgAnimatedString:
        raise NotImplementedError
    def in2(self) -> SvgAnimatedString:
        raise NotImplementedError
    def mode(self) -> SvgAnimatedEnumeration:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def result(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class TimeEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def detail(self) -> int:
        raise NotImplementedError
    def view(self) -> Optional[WindowProxy]:
        raise NotImplementedError
    def init_time_event(self, a_type: str, a_view: Optional[Some[Optional[Window]]], a_detail: Optional[int]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class SocketElement:
    host: Optional[str]
    port: Optional[int]
    active: Optional[bool]
    tcp: Optional[bool]
    sent: Optional[float]
    received: Optional[float]

@dataclass
class SocketsDict:
    sockets: Optional[List[SocketElement]]
    sent: Optional[float]
    received: Optional[float]

@dataclass
class HttpConnInfo:
    rtt: Optional[int]
    ttl: Optional[int]
    protocol_version: Optional[str]

@dataclass
class HalfOpenInfoDict:
    speculative: Optional[bool]

@dataclass
class HttpConnectionElement:
    host: Optional[str]
    port: Optional[int]
    spdy: Optional[bool]
    ssl: Optional[bool]
    active: Optional[List[HttpConnInfo]]
    idle: Optional[List[HttpConnInfo]]
    half_opens: Optional[List[HalfOpenInfoDict]]

@dataclass
class HttpConnDict:
    connections: Optional[List[HttpConnectionElement]]

@dataclass
class WebSocketElement:
    hostport: Optional[str]
    msgsent: Optional[int]
    msgreceived: Optional[int]
    sentsize: Optional[float]
    receivedsize: Optional[float]
    encrypted: Optional[bool]

@dataclass
class WebSocketDict:
    websockets: Optional[List[WebSocketElement]]

@dataclass
class DnsCacheEntry:
    hostname: Optional[str]
    hostaddr: Optional[List[str]]
    family: Optional[str]
    expiration: Optional[float]
    trr: Optional[bool]

@dataclass
class DnsCacheDict:
    entries: Optional[List[DnsCacheEntry]]

@dataclass
class DnsLookupDict:
    address: Optional[List[str]]
    error: Optional[str]
    answer: Optional[bool]

@dataclass
class ConnStatusDict:
    status: Optional[str]

@dataclass
class RcwnPerfStats:
    avg_short: Optional[int]
    avg_long: Optional[int]
    stddev_long: Optional[int]

@dataclass
class RcwnStatus:
    total_network_requests: Optional[int]
    rcwn_cache_won_count: Optional[int]
    rcwn_net_won_count: Optional[int]
    cache_slow_count: Optional[int]
    cache_not_slow_count: Optional[int]
    perf_stats: Optional[List[RcwnPerfStats]]

class UiEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def view(self) -> Optional[WindowProxy]:
        raise NotImplementedError
    def detail(self) -> int:
        raise NotImplementedError
    def init_ui_event(self, a_type: str, a_can_bubble: Optional[bool], a_cancelable: Optional[bool], a_view: Optional[Some[Optional[Window]]], a_detail: Optional[int]) -> None:
        raise NotImplementedError
    @classmethod
    def scroll_page_up(cls) -> int:
        raise NotImplementedError
    @classmethod
    def scroll_page_down(cls) -> int:
        raise NotImplementedError
    def layer_x(self) -> int:
        raise NotImplementedError
    def layer_y(self) -> int:
        raise NotImplementedError
    def page_x(self) -> int:
        raise NotImplementedError
    def page_y(self) -> int:
        raise NotImplementedError
    def which(self) -> int:
        raise NotImplementedError
    def range_parent(self) -> Optional[Node]:
        raise NotImplementedError
    def range_offset(self) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class FocusEvent:
    
    def as_ui_event(self) -> UiEvent:
        raise NotImplementedError
    def related_target(self) -> Optional[EventTarget]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DecoderDoctorNotificationType(Enum):
    CANNOT_PLAY = 0
    PLATFORM_DECODER_NOT_FOUND = 1
    CAN_PLAY_BUT_SOME_MISSING_DECODERS = 2
    CANNOT_INITIALIZE_PULSEAUDIO = 3
    UNSUPPORTED_LIBAVCODEC = 4
    DECODE_ERROR = 5
    DECODE_WARNING = 6

@dataclass
class DecoderDoctorNotification:
    type: DecoderDoctorNotificationType
    is_solved: bool
    decoder_doctor_report_id: str
    formats: Optional[str]
    decode_issue: Optional[str]
    doc_url: Optional[str]
    resource_url: Optional[str]

class HtmlButtonElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def autofocus(self) -> bool:
        raise NotImplementedError
    def set_autofocus(self, autofocus: bool) -> None:
        raise NotImplementedError
    def disabled(self) -> bool:
        raise NotImplementedError
    def set_disabled(self, disabled: bool) -> None:
        raise NotImplementedError
    def form(self) -> Optional[HtmlFormElement]:
        raise NotImplementedError
    def form_action(self) -> str:
        raise NotImplementedError
    def set_form_action(self, form_action: str) -> None:
        raise NotImplementedError
    def form_enctype(self) -> str:
        raise NotImplementedError
    def set_form_enctype(self, form_enctype: str) -> None:
        raise NotImplementedError
    def form_method(self) -> str:
        raise NotImplementedError
    def set_form_method(self, form_method: str) -> None:
        raise NotImplementedError
    def form_no_validate(self) -> bool:
        raise NotImplementedError
    def set_form_no_validate(self, form_no_validate: bool) -> None:
        raise NotImplementedError
    def form_target(self) -> str:
        raise NotImplementedError
    def set_form_target(self, form_target: str) -> None:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def set_name(self, name: str) -> None:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def set_type(self, type: str) -> None:
        raise NotImplementedError
    def value(self) -> str:
        raise NotImplementedError
    def set_value(self, value: str) -> None:
        raise NotImplementedError
    def will_validate(self) -> bool:
        raise NotImplementedError
    def validity(self) -> ValidityState:
        raise NotImplementedError
    def validation_message(self) -> str:
        raise NotImplementedError
    def check_validity(self) -> bool:
        raise NotImplementedError
    def report_validity(self) -> bool:
        raise NotImplementedError
    def set_custom_validity(self, error: str) -> None:
        raise NotImplementedError
    def labels(self) -> NodeList:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MediaKeySystemStatus(Enum):
    AVAILABLE = 0
    API_DISABLED = 1
    CDM_DISABLED = 2
    CDM_NOT_SUPPORTED = 3
    CDM_NOT_INSTALLED = 4
    CDM_CREATED = 5

@dataclass
class RequestMediaKeySystemAccessNotification:
    key_system: str
    status: MediaKeySystemStatus

@dataclass
class TreeCellInfo:
    row: Optional[int]
    col: Optional[Some[Optional[TreeColumn]]]
    child_elt: Optional[str]

class TreeBoxObject:
    
    def as_box_object(self) -> BoxObject:
        raise NotImplementedError
    def columns(self) -> Optional[TreeColumns]:
        raise NotImplementedError
    def focused(self) -> bool:
        raise NotImplementedError
    def set_focused(self, focused: bool) -> None:
        raise NotImplementedError
    def tree_body(self) -> Optional[Element]:
        raise NotImplementedError
    def row_height(self) -> int:
        raise NotImplementedError
    def row_width(self) -> int:
        raise NotImplementedError
    def horizontal_position(self) -> int:
        raise NotImplementedError
    def selection_region(self) -> NsIScriptableRegion:
        raise NotImplementedError
    def get_first_visible_row(self) -> int:
        raise NotImplementedError
    def get_last_visible_row(self) -> int:
        raise NotImplementedError
    def get_page_length(self) -> int:
        raise NotImplementedError
    def ensure_row_is_visible(self, index: int) -> None:
        raise NotImplementedError
    def ensure_cell_is_visible(self, row: int, col: Optional[TreeColumn]) -> None:
        raise NotImplementedError
    def scroll_to_row(self, index: int) -> None:
        raise NotImplementedError
    def scroll_by_lines(self, num_lines: int) -> None:
        raise NotImplementedError
    def scroll_by_pages(self, num_pages: int) -> None:
        raise NotImplementedError
    def invalidate(self) -> None:
        raise NotImplementedError
    def invalidate_column(self, col: Optional[TreeColumn]) -> None:
        raise NotImplementedError
    def invalidate_row(self, index: int) -> None:
        raise NotImplementedError
    def invalidate_cell(self, row: int, col: Optional[TreeColumn]) -> None:
        raise NotImplementedError
    def invalidate_range(self, start_index: int, end_index: int) -> None:
        raise NotImplementedError
    def get_row_at(self, x: int, y: int) -> int:
        raise NotImplementedError
    def is_cell_cropped(self, row: int, col: Optional[TreeColumn]) -> bool:
        raise NotImplementedError
    def row_count_changed(self, index: int, count: int) -> None:
        raise NotImplementedError
    def begin_update_batch(self) -> None:
        raise NotImplementedError
    def end_update_batch(self) -> None:
        raise NotImplementedError
    def clear_style_and_image_caches(self) -> None:
        raise NotImplementedError
    def remove_image_cache_entry(self, row: int, col: TreeColumn) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgfeOffsetElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def in1(self) -> SvgAnimatedString:
        raise NotImplementedError
    def dx(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def dy(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def result(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class AnimationEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def animation_name(self) -> str:
        raise NotImplementedError
    def elapsed_time(self) -> float:
        raise NotImplementedError
    def pseudo_element(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class AnimationEventInit:
    animation_name: Optional[str]
    elapsed_time: Optional[float]
    pseudo_element: Optional[str]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class CloseEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def was_clean(self) -> bool:
        raise NotImplementedError
    def code(self) -> int:
        raise NotImplementedError
    def reason(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class CloseEventInit:
    was_clean: Optional[bool]
    code: Optional[int]
    reason: Optional[str]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class StyleSheetChangeEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def stylesheet(self) -> Optional[CssStyleSheet]:
        raise NotImplementedError
    def document_sheet(self) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class IdbCursor:
    
    def direction(self) -> IdbCursorDirection:
        """
        source: func() -> idb-index-or-idb-object-store;
        """
        raise NotImplementedError
    def key(self) -> Any:
        raise NotImplementedError
    def primary_key(self) -> Any:
        raise NotImplementedError
    def request(self) -> IdbRequest:
        raise NotImplementedError
    def update(self, value: Any) -> IdbRequest:
        raise NotImplementedError
    def advance(self, count: int) -> None:
        raise NotImplementedError
    def continue_(self, key: Any) -> None:
        raise NotImplementedError
    def continue_primary_key(self, key: Any, primary_key: Any) -> None:
        raise NotImplementedError
    def delete(self) -> IdbRequest:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class IdbCursorWithValue:
    
    def as_idb_cursor(self) -> IdbCursor:
        raise NotImplementedError
    def value(self) -> Any:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class DataTransferItemListAddParams_DataType:
    value: Tuple[str, str]


@dataclass
class DataTransferItemListAddParams_Data:
    value: File


DataTransferItemListAddParams = Union[DataTransferItemListAddParams_DataType, DataTransferItemListAddParams_Data]


class DataTransferItem:
    
    def kind(self) -> str:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def get_as_string(self, callback: Optional[FunctionStringCallback]) -> None:
        raise NotImplementedError
    def get_as_file(self) -> Optional[File]:
        raise NotImplementedError
    def webkit_get_as_entry(self) -> Optional[FileSystemEntry]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DataTransferItemList:
    
    def length(self) -> int:
        raise NotImplementedError
    def add(self, params: DataTransferItemListAddParams) -> Optional[DataTransferItem]:
        raise NotImplementedError
    def remove(self, index: int) -> None:
        raise NotImplementedError
    def clear(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DataTransfer:
    
    def drop_effect(self) -> str:
        raise NotImplementedError
    def set_drop_effect(self, drop_effect: str) -> None:
        raise NotImplementedError
    def effect_allowed(self) -> str:
        raise NotImplementedError
    def set_effect_allowed(self, effect_allowed: str) -> None:
        raise NotImplementedError
    def items(self) -> DataTransferItemList:
        raise NotImplementedError
    def set_drag_image(self, image: Element, x: int, y: int) -> None:
        raise NotImplementedError
    def types(self) -> List[str]:
        raise NotImplementedError
    def get_data(self, format: str) -> str:
        raise NotImplementedError
    def set_data(self, format: str, data: str) -> None:
        raise NotImplementedError
    def clear_data(self, format: Optional[str]) -> None:
        raise NotImplementedError
    def files(self) -> Optional[FileList]:
        raise NotImplementedError
    def get_files(self, recursive_flag: Optional[bool]) -> List[File]:
        """
        get-files-and-directories: func() -> list<directory-or-file>;
        """
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlFormControlsCollection:
    
    def as_html_collection(self) -> HtmlCollection:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlDataElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def value(self) -> str:
        raise NotImplementedError
    def set_value(self, value: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlFrameElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def set_name(self, name: str) -> None:
        raise NotImplementedError
    def scrolling(self) -> str:
        raise NotImplementedError
    def set_scrolling(self, scrolling: str) -> None:
        raise NotImplementedError
    def src(self) -> str:
        raise NotImplementedError
    def set_src(self, src: str) -> None:
        raise NotImplementedError
    def frame_border(self) -> str:
        raise NotImplementedError
    def set_frame_border(self, frame_border: str) -> None:
        raise NotImplementedError
    def long_desc(self) -> str:
        raise NotImplementedError
    def set_long_desc(self, long_desc: str) -> None:
        raise NotImplementedError
    def no_resize(self) -> bool:
        raise NotImplementedError
    def set_no_resize(self, no_resize: bool) -> None:
        raise NotImplementedError
    def content_document(self) -> Optional[Document]:
        raise NotImplementedError
    def content_window(self) -> Optional[WindowProxy]:
        raise NotImplementedError
    def margin_height(self) -> str:
        raise NotImplementedError
    def set_margin_height(self, margin_height: str) -> None:
        raise NotImplementedError
    def margin_width(self) -> str:
        raise NotImplementedError
    def set_margin_width(self, margin_width: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlDivElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def align(self) -> str:
        raise NotImplementedError
    def set_align(self, align: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class IdbMutableFile:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def database(self) -> IdbDatabase:
        raise NotImplementedError
    def open(self, mode: Optional[FileMode]) -> Any:
        raise NotImplementedError
    def get_file(self) -> DomRequest:
        raise NotImplementedError
    def onabort(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onabort(self, onabort: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class IdbFileMetadataParameters:
    size: Optional[bool]
    last_modified: Optional[bool]


@dataclass
class ArrayBufferOrArrayBufferViewOrBlobOrString_ArrayBuffer:
    value: ArrayBuffer


@dataclass
class ArrayBufferOrArrayBufferViewOrBlobOrString_ArrayBufferView:
    value: ArrayBufferView


@dataclass
class ArrayBufferOrArrayBufferViewOrBlobOrString_Blob:
    value: Blob


@dataclass
class ArrayBufferOrArrayBufferViewOrBlobOrString_String:
    value: str


ArrayBufferOrArrayBufferViewOrBlobOrString = Union[ArrayBufferOrArrayBufferViewOrBlobOrString_ArrayBuffer, ArrayBufferOrArrayBufferViewOrBlobOrString_ArrayBufferView, ArrayBufferOrArrayBufferViewOrBlobOrString_Blob, ArrayBufferOrArrayBufferViewOrBlobOrString_String]


class IdbFileHandle:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def mutable_file(self) -> Optional[IdbMutableFile]:
        raise NotImplementedError
    def file_handle(self) -> Optional[IdbMutableFile]:
        raise NotImplementedError
    def mode(self) -> FileMode:
        raise NotImplementedError
    def active(self) -> bool:
        raise NotImplementedError
    def location(self) -> int:
        raise NotImplementedError
    def set_location(self, location: int) -> None:
        raise NotImplementedError
    def get_metadata(self, parameters: Optional[IdbFileMetadataParameters]) -> Optional[Any]:
        raise NotImplementedError
    def read_as_array_buffer(self, size: int) -> Optional[Any]:
        raise NotImplementedError
    def read_as_text(self, size: int, encoding: Optional[str]) -> Optional[Any]:
        raise NotImplementedError
    def write(self, value: ArrayBufferOrArrayBufferViewOrBlobOrString) -> Optional[Any]:
        raise NotImplementedError
    def append(self, value: ArrayBufferOrArrayBufferViewOrBlobOrString) -> Optional[Any]:
        raise NotImplementedError
    def truncate(self, size: Optional[int]) -> Optional[Any]:
        raise NotImplementedError
    def flush(self) -> Optional[Any]:
        raise NotImplementedError
    def abort(self) -> None:
        raise NotImplementedError
    def oncomplete(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oncomplete(self, oncomplete: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onabort(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onabort(self, onabort: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class IdbFileRequest:
    
    def as_dom_request(self) -> DomRequest:
        raise NotImplementedError
    def file_handle(self) -> Optional[IdbFileHandle]:
        raise NotImplementedError
    def locked_file(self) -> Optional[IdbFileHandle]:
        raise NotImplementedError
    def onprogress(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onprogress(self, onprogress: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgfeMergeNodeElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def in1(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class RtcdtmfSender:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def insert_dtmf(self, tones: str, duration: Optional[int], inter_tone_gap: Optional[int]) -> None:
        raise NotImplementedError
    def ontonechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontonechange(self, ontonechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def tone_buffer(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgfeDropShadowElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def in1(self) -> SvgAnimatedString:
        raise NotImplementedError
    def dx(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def dy(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def std_deviation_x(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def std_deviation_y(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def set_std_deviation(self, std_deviation_x: float, std_deviation_y: float) -> None:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def result(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlPreElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def width(self) -> int:
        raise NotImplementedError
    def set_width(self, width: int) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgfeFloodElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def result(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class IdbOpenDbOptions:
    version: Optional[int]
    storage: Optional[StorageType]


@dataclass
class IdbFactoryOpenParams_NameVersion:
    value: Tuple[str, int]


@dataclass
class IdbFactoryOpenParams_NameOptions:
    value: Tuple[str, Optional[IdbOpenDbOptions]]


IdbFactoryOpenParams = Union[IdbFactoryOpenParams_NameVersion, IdbFactoryOpenParams_NameOptions]


class IdbOpenDbRequest:
    
    def as_idb_request(self) -> IdbRequest:
        raise NotImplementedError
    def onblocked(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onblocked(self, onblocked: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onupgradeneeded(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onupgradeneeded(self, onupgradeneeded: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class IdbFactoryOpenForPrincipalParams_PrincipalNameVersion:
    value: Tuple[Principal, str, int]


@dataclass
class IdbFactoryOpenForPrincipalParams_PrincipalNameOptions:
    value: Tuple[Principal, str, Optional[IdbOpenDbOptions]]


IdbFactoryOpenForPrincipalParams = Union[IdbFactoryOpenForPrincipalParams_PrincipalNameVersion, IdbFactoryOpenForPrincipalParams_PrincipalNameOptions]


class IdbFactory:
    
    def open(self, params: IdbFactoryOpenParams) -> IdbOpenDbRequest:
        raise NotImplementedError
    def delete_database(self, name: str, options: Optional[IdbOpenDbOptions]) -> IdbOpenDbRequest:
        raise NotImplementedError
    def cmp(self, first: Any, second: Any) -> int:
        raise NotImplementedError
    def open_for_principal(self, params: IdbFactoryOpenForPrincipalParams) -> IdbOpenDbRequest:
        raise NotImplementedError
    def delete_for_principal(self, principal: Principal, name: str, options: Optional[IdbOpenDbOptions]) -> IdbOpenDbRequest:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class F64OrKeyframeAnimationOptions_F64:
    value: float


@dataclass
class F64OrKeyframeAnimationOptions_KeyframeAnimationOptions:
    value: KeyframeAnimationOptions


F64OrKeyframeAnimationOptions = Union[F64OrKeyframeAnimationOptions_F64, F64OrKeyframeAnimationOptions_KeyframeAnimationOptions]


class RecordF64:
    
    def __init__(self):
        raise NotImplementedError

    def add(self, key: str, value: float) -> None:
        raise NotImplementedError
    def get(self, key: str) -> float:
        raise NotImplementedError
    def has(self, key: str) -> bool:
        raise NotImplementedError
    def remove(self, key: str) -> None:
        raise NotImplementedError
    def keys(self) -> List[str]:
        raise NotImplementedError
    def values(self) -> List[float]:
        raise NotImplementedError
    def entries(self) -> Tuple[str, float]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class AudioWorkletNode:
    
    def as_audio_node(self) -> AudioNode:
        raise NotImplementedError
    def parameters(self) -> AudioParamMap:
        raise NotImplementedError
    def port(self) -> MessagePort:
        raise NotImplementedError
    def onprocessorerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onprocessorerror(self, onprocessorerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class RtcIceCredentialType(Enum):
    PASSWORD = 0
    TOKEN = 1

@dataclass
class RtcIceServer:
    urls: Optional[ListStringOrString]
    url: Optional[str]
    username: Optional[str]
    credential: Optional[str]
    credential_type: Optional[RtcIceCredentialType]

class RtcIceTransportPolicy(Enum):
    RELAY = 0
    ALL = 1

class RtcBundlePolicy(Enum):
    BALANCED = 0
    MAX_COMPAT = 1
    MAX_BUNDLE = 2

@dataclass
class AudioBufferSourceOptions:
    buffer: Optional[Some[Optional[AudioBuffer]]]
    detune: Optional[float]
    loop: Optional[bool]
    loop_end: Optional[float]
    loop_start: Optional[float]
    playback_rate: Optional[float]

class AudioProcessingEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def playback_time(self) -> float:
        raise NotImplementedError
    def input_buffer(self) -> AudioBuffer:
        raise NotImplementedError
    def output_buffer(self) -> AudioBuffer:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CssNamespaceRule:
    
    def as_css_rule(self) -> CssRule:
        raise NotImplementedError
    def namespace_uri(self) -> str:
        raise NotImplementedError
    def prefix(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlBodyElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def text(self) -> str:
        raise NotImplementedError
    def set_text(self, text: str) -> None:
        raise NotImplementedError
    def link(self) -> str:
        raise NotImplementedError
    def set_link(self, link: str) -> None:
        raise NotImplementedError
    def v_link(self) -> str:
        raise NotImplementedError
    def set_v_link(self, v_link: str) -> None:
        raise NotImplementedError
    def a_link(self) -> str:
        raise NotImplementedError
    def set_a_link(self, a_link: str) -> None:
        raise NotImplementedError
    def bg_color(self) -> str:
        raise NotImplementedError
    def set_bg_color(self, bg_color: str) -> None:
        raise NotImplementedError
    def background(self) -> str:
        raise NotImplementedError
    def set_background(self, background: str) -> None:
        raise NotImplementedError
    def onafterprint(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onafterprint(self, onafterprint: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onbeforeprint(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onbeforeprint(self, onbeforeprint: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onbeforeunload(self) -> Optional[OnBeforeUnloadEventHandlerNonNull]:
        raise NotImplementedError
    def set_onbeforeunload(self, onbeforeunload: Optional[OnBeforeUnloadEventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onhashchange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onhashchange(self, onhashchange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onlanguagechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onlanguagechange(self, onlanguagechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmessage(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmessage(self, onmessage: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmessageerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmessageerror(self, onmessageerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onoffline(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onoffline(self, onoffline: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ononline(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ononline(self, ononline: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpagehide(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpagehide(self, onpagehide: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpageshow(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpageshow(self, onpageshow: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onpopstate(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onpopstate(self, onpopstate: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onstorage(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onstorage(self, onstorage: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onunload(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onunload(self, onunload: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlSourceElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def src(self) -> str:
        raise NotImplementedError
    def set_src(self, src: str) -> None:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def set_type(self, type: str) -> None:
        raise NotImplementedError
    def srcset(self) -> str:
        raise NotImplementedError
    def set_srcset(self, srcset: str) -> None:
        raise NotImplementedError
    def sizes(self) -> str:
        raise NotImplementedError
    def set_sizes(self, sizes: str) -> None:
        raise NotImplementedError
    def media(self) -> str:
        raise NotImplementedError
    def set_media(self, media: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class RtcSignalingState(Enum):
    STABLE = 0
    HAVE_LOCAL_OFFER = 1
    HAVE_REMOTE_OFFER = 2
    HAVE_LOCAL_PRANSWER = 3
    HAVE_REMOTE_PRANSWER = 4
    CLOSED = 5

class RtcIceGatheringState(Enum):
    NEW = 0
    GATHERING = 1
    COMPLETE = 2

class RtcIceConnectionState(Enum):
    NEW = 0
    CHECKING = 1
    CONNECTED = 2
    COMPLETED = 3
    FAILED = 4
    DISCONNECTED = 5
    CLOSED = 6

class RtcPeerConnectionState(Enum):
    CLOSED = 0
    FAILED = 1
    DISCONNECTED = 2
    NEW = 3
    CONNECTING = 4
    CONNECTED = 5

@dataclass
class RtcDataChannelInit:
    ordered: Optional[bool]
    max_packet_life_time: Optional[int]
    max_retransmits: Optional[int]
    protocol: Optional[str]
    negotiated: Optional[bool]
    id: Optional[int]
    max_retransmit_time: Optional[int]

@dataclass
class RtcOfferOptions:
    """
    record rtc-offer-answer-options {  }
    record rtc-answer-options {  }
    """
    offer_to_receive_video: Optional[bool]
    offer_to_receive_audio: Optional[bool]
    ice_restart: Optional[bool]

class RtcCertificate:
    
    def expires(self) -> DomTimeStamp:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class RtcIdentityProviderOptions:
    protocol: Optional[str]
    username_hint: Optional[str]
    peer_identity: Optional[str]

@dataclass
class RtcIceCandidateInit:
    candidate: str
    sdp_mid: Optional[str]
    sdp_m_line_index: Optional[int]


@dataclass
class RtcIceCandidateOrRtcIceCandidateInit_RtcIceCandidate:
    value: RtcIceCandidate


@dataclass
class RtcIceCandidateOrRtcIceCandidateInit_RtcIceCandidateInit:
    value: RtcIceCandidateInit


RtcIceCandidateOrRtcIceCandidateInit = Union[RtcIceCandidateOrRtcIceCandidateInit_RtcIceCandidate, RtcIceCandidateOrRtcIceCandidateInit_RtcIceCandidateInit]


@dataclass
class RtcIdentityAssertion:
    idp: Optional[str]
    name: Optional[str]

@dataclass
class RtcRtxParameters:
    ssrc: Optional[int]

@dataclass
class RtcFecParameters:
    ssrc: Optional[int]

class RtcPriorityType(Enum):
    VERY_LOW = 0
    LOW = 1
    MEDIUM = 2
    HIGH = 3

class RtcDegradationPreference(Enum):
    MAINTAIN_FRAMERATE = 0
    MAINTAIN_RESOLUTION = 1
    BALANCED = 2

@dataclass
class RtcRtpEncodingParameters:
    ssrc: Optional[int]
    rtx: Optional[RtcRtxParameters]
    fec: Optional[RtcFecParameters]
    active: Optional[bool]
    priority: Optional[RtcPriorityType]
    max_bitrate: Optional[int]
    degradation_preference: Optional[RtcDegradationPreference]
    rid: Optional[str]
    scale_resolution_down_by: Optional[float]

@dataclass
class RtcRtpHeaderExtensionParameters:
    uri: Optional[str]
    id: Optional[int]
    encrypted: Optional[bool]

@dataclass
class RtcRtcpParameters:
    cname: Optional[str]
    reduced_size: Optional[bool]

@dataclass
class RtcRtpCodecParameters:
    payload_type: Optional[int]
    mime_type: Optional[str]
    clock_rate: Optional[int]
    channels: Optional[int]
    sdp_fmtp_line: Optional[str]

@dataclass
class RtcRtpParameters:
    encodings: Optional[List[RtcRtpEncodingParameters]]
    header_extensions: Optional[List[RtcRtpHeaderExtensionParameters]]
    rtcp: Optional[RtcRtcpParameters]
    codecs: Optional[List[RtcRtpCodecParameters]]

class RtcStatsReport:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class RtcRtpCodecCapability:
    mime_type: str
    clock_rate: int
    channels: Optional[int]
    sdp_fmtp_line: Optional[str]

@dataclass
class RtcRtpHeaderExtensionCapability:
    uri: str

@dataclass
class RtcRtpCapabilities:
    codecs: List[RtcRtpCodecCapability]
    header_extensions: List[RtcRtpHeaderExtensionCapability]

class RtcRtpSender:
    
    def track(self) -> Optional[MediaStreamTrack]:
        raise NotImplementedError
    def set_parameters(self, parameters: Optional[RtcRtpParameters]) -> None:
        raise NotImplementedError
    def get_parameters(self) -> RtcRtpParameters:
        raise NotImplementedError
    def replace_track(self, with_track: Optional[MediaStreamTrack]) -> None:
        raise NotImplementedError
    def get_stats(self) -> RtcStatsReport:
        raise NotImplementedError
    @classmethod
    def get_capabilities(cls, kind: str) -> Optional[RtcRtpCapabilities]:
        raise NotImplementedError
    def dtmf(self) -> Optional[RtcdtmfSender]:
        raise NotImplementedError
    def get_streams(self) -> List[MediaStream]:
        raise NotImplementedError
    def set_streams(self, streams: List[MediaStream]) -> None:
        raise NotImplementedError
    def set_track(self, track: Optional[MediaStreamTrack]) -> None:
        raise NotImplementedError
    def check_was_created_by_pc(self, pc: Any) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class MediaStreamTrackOrString_MediaStreamTrack:
    value: MediaStreamTrack


@dataclass
class MediaStreamTrackOrString_String:
    value: str


MediaStreamTrackOrString = Union[MediaStreamTrackOrString_MediaStreamTrack, MediaStreamTrackOrString_String]


class RtcRtpTransceiverDirection(Enum):
    SENDRECV = 0
    SENDONLY = 1
    RECVONLY = 2
    INACTIVE = 3

@dataclass
class RtcRtpTransceiverInit:
    direction: Optional[RtcRtpTransceiverDirection]
    streams: Optional[List[MediaStream]]
    send_encodings: Optional[List[RtcRtpEncodingParameters]]

@dataclass
class RtcRtpContributingSource:
    timestamp: float
    source: int
    audio_level: Optional[float]

@dataclass
class RtcRtpSynchronizationSource:
    voice_activity_flag: Optional[bool]
    timestamp: float
    source: int
    audio_level: Optional[float]

class RtcRtpReceiver:
    
    def track(self) -> MediaStreamTrack:
        raise NotImplementedError
    @classmethod
    def get_capabilities(cls, kind: str) -> Optional[RtcRtpCapabilities]:
        raise NotImplementedError
    def get_stats(self) -> RtcStatsReport:
        raise NotImplementedError
    def get_contributing_sources(self) -> List[RtcRtpContributingSource]:
        raise NotImplementedError
    def get_synchronization_sources(self) -> List[RtcRtpSynchronizationSource]:
        raise NotImplementedError
    def set_stream_ids(self, stream_ids: List[str]) -> None:
        raise NotImplementedError
    def set_remote_send_bit(self, send_bit: bool) -> None:
        raise NotImplementedError
    def process_track_additions_and_removals(self, transceiver: Any, post_processing: Object) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class RtcRtpTransceiver:
    
    def mid(self) -> str:
        raise NotImplementedError
    def sender(self) -> RtcRtpSender:
        raise NotImplementedError
    def receiver(self) -> RtcRtpReceiver:
        raise NotImplementedError
    def stopped(self) -> bool:
        raise NotImplementedError
    def direction(self) -> RtcRtpTransceiverDirection:
        raise NotImplementedError
    def set_direction(self, direction: RtcRtpTransceiverDirection) -> None:
        raise NotImplementedError
    def current_direction(self) -> Optional[RtcRtpTransceiverDirection]:
        raise NotImplementedError
    def stop(self) -> None:
        raise NotImplementedError
    def set_codec_preferences(self, codecs: List[RtcRtpCodecCapability]) -> None:
        raise NotImplementedError
    def set_remote_track_id(self, track_id: str) -> None:
        raise NotImplementedError
    def remote_track_id_is(self, track_id: str) -> bool:
        raise NotImplementedError
    def get_remote_track_id(self) -> str:
        raise NotImplementedError
    def set_add_track_magic(self) -> None:
        raise NotImplementedError
    def add_track_magic(self) -> bool:
        raise NotImplementedError
    def should_remove(self) -> bool:
        raise NotImplementedError
    def set_should_remove(self, should_remove: bool) -> None:
        raise NotImplementedError
    def set_current_direction(self, direction: RtcRtpTransceiverDirection) -> None:
        raise NotImplementedError
    def set_direction_internal(self, direction: RtcRtpTransceiverDirection) -> None:
        raise NotImplementedError
    def set_mid(self, mid: str) -> None:
        raise NotImplementedError
    def unset_mid(self) -> None:
        raise NotImplementedError
    def set_stopped(self) -> None:
        raise NotImplementedError
    def get_kind(self) -> str:
        raise NotImplementedError
    def has_been_used_to_send(self) -> bool:
        raise NotImplementedError
    def sync(self) -> None:
        raise NotImplementedError
    def insert_dtmf(self, tones: str, duration: Optional[int], inter_tone_gap: Optional[int]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class RtcPeerConnection:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    @classmethod
    def generate_certificate(cls, keygen_algorithm: ObjectOrString) -> RtcCertificate:
        raise NotImplementedError
    def set_identity_provider(self, provider: str, options: Optional[RtcIdentityProviderOptions]) -> None:
        raise NotImplementedError
    def get_identity_assertion(self) -> str:
        raise NotImplementedError
    def create_offer(self, options: Optional[RtcOfferOptions]) -> RtcSessionDescriptionInit:
        raise NotImplementedError
    def set_local_description(self, description: RtcSessionDescriptionInit) -> None:
        """
        create-answer: func(options: option<rtc-answer-options>) -> rtc-session-description-init;
        """
        raise NotImplementedError
    def set_remote_description(self, description: RtcSessionDescriptionInit) -> None:
        raise NotImplementedError
    def local_description(self) -> Optional[RtcSessionDescription]:
        raise NotImplementedError
    def current_local_description(self) -> Optional[RtcSessionDescription]:
        raise NotImplementedError
    def pending_local_description(self) -> Optional[RtcSessionDescription]:
        raise NotImplementedError
    def remote_description(self) -> Optional[RtcSessionDescription]:
        raise NotImplementedError
    def current_remote_description(self) -> Optional[RtcSessionDescription]:
        raise NotImplementedError
    def pending_remote_description(self) -> Optional[RtcSessionDescription]:
        raise NotImplementedError
    def signaling_state(self) -> RtcSignalingState:
        raise NotImplementedError
    def add_ice_candidate(self, candidate: RtcIceCandidateOrRtcIceCandidateInit) -> None:
        raise NotImplementedError
    def can_trickle_ice_candidates(self) -> bool:
        raise NotImplementedError
    def ice_gathering_state(self) -> RtcIceGatheringState:
        raise NotImplementedError
    def ice_connection_state(self) -> RtcIceConnectionState:
        raise NotImplementedError
    def connection_state(self) -> RtcPeerConnectionState:
        raise NotImplementedError
    def peer_identity(self) -> RtcIdentityAssertion:
        raise NotImplementedError
    def idp_login_url(self) -> str:
        raise NotImplementedError
    def id(self) -> str:
        raise NotImplementedError
    def set_id(self, id: str) -> None:
        raise NotImplementedError
    def get_local_streams(self) -> List[MediaStream]:
        """
        get-configuration: func() -> rtc-configuration;
        """
        raise NotImplementedError
    def get_remote_streams(self) -> List[MediaStream]:
        raise NotImplementedError
    def add_stream(self, stream: MediaStream) -> None:
        raise NotImplementedError
    def add_track(self, track: MediaStreamTrack, stream: MediaStream, more_streams: List[MediaStream]) -> RtcRtpSender:
        raise NotImplementedError
    def remove_track(self, sender: RtcRtpSender) -> None:
        raise NotImplementedError
    def add_transceiver(self, track_or_kind: MediaStreamTrackOrString, init: Optional[RtcRtpTransceiverInit]) -> RtcRtpTransceiver:
        raise NotImplementedError
    def get_senders(self) -> List[RtcRtpSender]:
        raise NotImplementedError
    def get_receivers(self) -> List[RtcRtpReceiver]:
        raise NotImplementedError
    def get_transceivers(self) -> List[RtcRtpTransceiver]:
        raise NotImplementedError
    def close(self) -> None:
        raise NotImplementedError
    def onnegotiationneeded(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onnegotiationneeded(self, onnegotiationneeded: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onicecandidate(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onicecandidate(self, onicecandidate: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onsignalingstatechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onsignalingstatechange(self, onsignalingstatechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onaddstream(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onaddstream(self, onaddstream: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onaddtrack(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onaddtrack(self, onaddtrack: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ontrack(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ontrack(self, ontrack: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onremovestream(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onremovestream(self, onremovestream: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oniceconnectionstatechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oniceconnectionstatechange(self, oniceconnectionstatechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onicegatheringstatechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onicegatheringstatechange(self, onicegatheringstatechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onconnectionstatechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onconnectionstatechange(self, onconnectionstatechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def get_stats(self, selector: Optional[Some[Optional[MediaStreamTrack]]]) -> RtcStatsReport:
        raise NotImplementedError
    def create_data_channel(self, label: str, data_channel_dict: Optional[RtcDataChannelInit]) -> RtcDataChannel:
        raise NotImplementedError
    def ondatachannel(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondatachannel(self, ondatachannel: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class ExtendableEventInit:
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class PushMessageData:
    
    def array_buffer(self) -> ArrayBuffer:
        raise NotImplementedError
    def blob(self) -> Blob:
        raise NotImplementedError
    def json(self) -> Any:
        raise NotImplementedError
    def text(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgDefsElement:
    
    def as_svg_graphics_element(self) -> SvgGraphicsElement:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class BlobEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def data(self) -> Optional[Blob]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class OfflineAudioContextOptions:
    number_of_channels: Optional[int]
    length: int
    sample_rate: float

class OfflineAudioContext:
    
    def as_base_audio_context(self) -> BaseAudioContext:
        raise NotImplementedError
    def start_rendering(self) -> AudioBuffer:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def oncomplete(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oncomplete(self, oncomplete: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def destination(self) -> AudioDestinationNode:
        raise NotImplementedError
    def sample_rate(self) -> float:
        raise NotImplementedError
    def current_time(self) -> float:
        raise NotImplementedError
    def listener(self) -> AudioListener:
        raise NotImplementedError
    def state(self) -> AudioContextState:
        raise NotImplementedError
    def audio_worklet(self) -> AudioWorklet:
        raise NotImplementedError
    def resume(self) -> None:
        raise NotImplementedError
    def onstatechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onstatechange(self, onstatechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def create_buffer(self, number_of_channels: int, length: int, sample_rate: float) -> AudioBuffer:
        raise NotImplementedError
    def decode_audio_data(self, audio_data: ArrayBuffer, success_callback: Optional[DecodeSuccessCallback], error_callback: Optional[DecodeErrorCallback]) -> AudioBuffer:
        raise NotImplementedError
    def create_buffer_source(self) -> AudioBufferSourceNode:
        raise NotImplementedError
    def create_constant_source(self) -> ConstantSourceNode:
        raise NotImplementedError
    def create_script_processor(self, buffer_size: Optional[int], number_of_input_channels: Optional[int], number_of_output_channels: Optional[int]) -> ScriptProcessorNode:
        raise NotImplementedError
    def create_analyser(self) -> AnalyserNode:
        raise NotImplementedError
    def create_gain(self) -> GainNode:
        raise NotImplementedError
    def create_delay(self, max_delay_time: Optional[float]) -> DelayNode:
        raise NotImplementedError
    def create_biquad_filter(self) -> BiquadFilterNode:
        raise NotImplementedError
    def create_iir_filter(self, feedforward: List[float], feedback: List[float]) -> IirFilterNode:
        raise NotImplementedError
    def create_wave_shaper(self) -> WaveShaperNode:
        raise NotImplementedError
    def create_panner(self) -> PannerNode:
        raise NotImplementedError
    def create_stereo_panner(self) -> StereoPannerNode:
        raise NotImplementedError
    def create_convolver(self) -> ConvolverNode:
        raise NotImplementedError
    def create_channel_splitter(self, number_of_outputs: Optional[int]) -> ChannelSplitterNode:
        raise NotImplementedError
    def create_channel_merger(self, number_of_inputs: Optional[int]) -> ChannelMergerNode:
        raise NotImplementedError
    def create_dynamics_compressor(self) -> DynamicsCompressorNode:
        raise NotImplementedError
    def create_oscillator(self) -> OscillatorNode:
        raise NotImplementedError
    def create_periodic_wave(self, real: Float32Array, imag: Float32Array, constraints: Optional[PeriodicWaveConstraints]) -> PeriodicWave:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlParagraphElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def align(self) -> str:
        raise NotImplementedError
    def set_align(self, align: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class StringOrU64_String:
    value: str


@dataclass
class StringOrU64_U64:
    value: int


StringOrU64 = Union[StringOrU64_String, StringOrU64_U64]


@dataclass
class ConsoleEvent:
    id: Optional[StringOrU64]
    inner_id: Optional[StringOrU64]
    console_id: Optional[str]
    addon_id: Optional[str]
    level: Optional[str]
    filename: Optional[str]
    line_number: Optional[int]
    column_number: Optional[int]
    function_name: Optional[str]
    time_stamp: Optional[float]
    arguments: Optional[List[Any]]
    styles: Optional[List[str]]
    private: Optional[bool]
    group_name: Optional[str]
    timer: Any
    counter: Any
    prefix: Optional[str]

@dataclass
class ConsoleProfileEvent:
    action: Optional[str]
    arguments: Optional[List[Any]]

@dataclass
class ConsoleStackEntry:
    filename: Optional[str]
    line_number: Optional[int]
    column_number: Optional[int]
    function_name: Optional[str]
    async_cause: Optional[str]

@dataclass
class ConsoleTimerStart:
    name: Optional[str]

@dataclass
class ConsoleTimerLogOrEnd:
    name: Optional[str]
    duration: Optional[float]

@dataclass
class ConsoleTimerError:
    error: Optional[str]
    name: Optional[str]

@dataclass
class ConsoleCounter:
    label: Optional[str]
    count: Optional[int]

@dataclass
class ConsoleCounterError:
    label: Optional[str]
    error: Optional[str]

@dataclass
class PerformanceEntryFilterOptions:
    name: Optional[str]
    entry_type: Optional[str]
    initiator_type: Optional[str]

class PerformanceObserverEntryList:
    
    def get_entries(self, filter: Optional[PerformanceEntryFilterOptions]) -> List[PerformanceEntry]:
        raise NotImplementedError
    def get_entries_by_type(self, entry_type: str) -> List[PerformanceEntry]:
        raise NotImplementedError
    def get_entries_by_name(self, name: str, entry_type: Optional[str]) -> List[PerformanceEntry]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class XmlHttpRequestUpload:
    
    def as_xml_http_request_event_target(self) -> XmlHttpRequestEventTarget:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgCircleElement:
    
    def as_svg_geometry_element(self) -> SvgGeometryElement:
        raise NotImplementedError
    def cx(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def cy(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def r(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class Position:
    
    def coords(self) -> Coordinates:
        raise NotImplementedError
    def timestamp(self) -> DomTimeStamp:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class RtcStatsType(Enum):
    INBOUND_RTP = 0
    OUTBOUND_RTP = 1
    CSRC = 2
    SESSION = 3
    TRACK = 4
    TRANSPORT = 5
    CANDIDATE_PAIR = 6
    LOCAL_CANDIDATE = 7
    REMOTE_CANDIDATE = 8

class RtcStatsIceCandidatePairState(Enum):
    FROZEN = 0
    WAITING = 1
    INPROGRESS = 2
    FAILED = 3
    SUCCEEDED = 4
    CANCELLED = 5

class RtcStatsIceCandidateType(Enum):
    HOST = 0
    SERVERREFLEXIVE = 1
    PEERREFLEXIVE = 2
    RELAYED = 3

class HtmlUnknownElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class DomWindowResizeEventDetail:
    width: Optional[int]
    height: Optional[int]

class SvgfePointLightElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def x(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def y(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def z(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgStyleElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def xmlspace(self) -> str:
        raise NotImplementedError
    def set_xmlspace(self, xmlspace: str) -> None:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def set_type(self, type: str) -> None:
        raise NotImplementedError
    def media(self) -> str:
        raise NotImplementedError
    def set_media(self, media: str) -> None:
        raise NotImplementedError
    def title(self) -> str:
        raise NotImplementedError
    def set_title(self, title: str) -> None:
        raise NotImplementedError
    def sheet(self) -> Optional[StyleSheet]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CssKeyframeRule:
    
    def as_css_rule(self) -> CssRule:
        raise NotImplementedError
    def key_text(self) -> str:
        raise NotImplementedError
    def set_key_text(self, key_text: str) -> None:
        raise NotImplementedError
    def style(self) -> CssStyleDeclaration:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CssKeyframesRule:
    
    def as_css_rule(self) -> CssRule:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def set_name(self, name: str) -> None:
        raise NotImplementedError
    def css_rules(self) -> CssRuleList:
        raise NotImplementedError
    def append_rule(self, rule: str) -> None:
        raise NotImplementedError
    def delete_rule(self, select: str) -> None:
        raise NotImplementedError
    def find_rule(self, select: str) -> Optional[CssKeyframeRule]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class RtcPeerConnectionIceEventInit:
    candidate: Optional[Some[Optional[RtcIceCandidate]]]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class ScrollAreaEvent:
    
    def as_ui_event(self) -> UiEvent:
        raise NotImplementedError
    def x(self) -> float:
        raise NotImplementedError
    def y(self) -> float:
        raise NotImplementedError
    def width(self) -> float:
        raise NotImplementedError
    def height(self) -> float:
        raise NotImplementedError
    def init_scroll_area_event(self, type: str, can_bubble: Optional[bool], cancelable: Optional[bool], view: Optional[Some[Optional[Window]]], detail: Optional[int], x: Optional[float], y: Optional[float], width: Optional[float], height: Optional[float]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ScrollBoxObject:
    
    def as_box_object(self) -> BoxObject:
        raise NotImplementedError
    def scroll_to(self, x: int, y: int) -> None:
        raise NotImplementedError
    def scroll_by(self, dx: int, dy: int) -> None:
        raise NotImplementedError
    def scroll_by_index(self, dindexes: int) -> None:
        raise NotImplementedError
    def scroll_to_element(self, child: Element) -> None:
        raise NotImplementedError
    def position_x(self) -> int:
        raise NotImplementedError
    def position_y(self) -> int:
        raise NotImplementedError
    def scrolled_width(self) -> int:
        raise NotImplementedError
    def scrolled_height(self) -> int:
        raise NotImplementedError
    def ensure_element_is_visible(self, child: Element) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class XmlDocument:
    
    def as_document(self) -> Document:
        raise NotImplementedError
    def load(self, url: str) -> bool:
        raise NotImplementedError
    def async_(self) -> bool:
        raise NotImplementedError
    def set_async(self, async_: bool) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MouseEvent:
    
    def as_ui_event(self) -> UiEvent:
        raise NotImplementedError
    def screen_x(self) -> int:
        raise NotImplementedError
    def screen_y(self) -> int:
        raise NotImplementedError
    def client_x(self) -> int:
        raise NotImplementedError
    def client_y(self) -> int:
        raise NotImplementedError
    def x(self) -> int:
        raise NotImplementedError
    def y(self) -> int:
        raise NotImplementedError
    def offset_x(self) -> int:
        raise NotImplementedError
    def offset_y(self) -> int:
        raise NotImplementedError
    def ctrl_key(self) -> bool:
        raise NotImplementedError
    def shift_key(self) -> bool:
        raise NotImplementedError
    def alt_key(self) -> bool:
        raise NotImplementedError
    def meta_key(self) -> bool:
        raise NotImplementedError
    def button(self) -> int:
        raise NotImplementedError
    def buttons(self) -> int:
        raise NotImplementedError
    def related_target(self) -> Optional[EventTarget]:
        raise NotImplementedError
    def region(self) -> str:
        raise NotImplementedError
    def movement_x(self) -> int:
        raise NotImplementedError
    def movement_y(self) -> int:
        raise NotImplementedError
    def init_mouse_event(self, type_arg: str, can_bubble_arg: Optional[bool], cancelable_arg: Optional[bool], view_arg: Optional[Some[Optional[Window]]], detail_arg: Optional[int], screen_x_arg: Optional[int], screen_y_arg: Optional[int], client_x_arg: Optional[int], client_y_arg: Optional[int], ctrl_key_arg: Optional[bool], alt_key_arg: Optional[bool], shift_key_arg: Optional[bool], meta_key_arg: Optional[bool], button_arg: Optional[int], related_target_arg: Optional[Some[Optional[EventTarget]]]) -> None:
        raise NotImplementedError
    def get_modifier_state(self, key_arg: str) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MouseScrollEvent:
    
    def as_mouse_event(self) -> MouseEvent:
        raise NotImplementedError
    @classmethod
    def horizontal_axis(cls) -> int:
        raise NotImplementedError
    @classmethod
    def vertical_axis(cls) -> int:
        raise NotImplementedError
    def axis(self) -> int:
        raise NotImplementedError
    def init_mouse_scroll_event(self, type: str, can_bubble: Optional[bool], cancelable: Optional[bool], view: Optional[Some[Optional[Window]]], detail: Optional[int], screen_x: Optional[int], screen_y: Optional[int], client_x: Optional[int], client_y: Optional[int], ctrl_key: Optional[bool], alt_key: Optional[bool], shift_key: Optional[bool], meta_key: Optional[bool], button: Optional[int], related_target: Optional[Some[Optional[EventTarget]]], axis: Optional[int]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlScriptElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def src(self) -> str:
        raise NotImplementedError
    def set_src(self, src: str) -> None:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def set_type(self, type: str) -> None:
        raise NotImplementedError
    def no_module(self) -> bool:
        raise NotImplementedError
    def set_no_module(self, no_module: bool) -> None:
        raise NotImplementedError
    def charset(self) -> str:
        raise NotImplementedError
    def set_charset(self, charset: str) -> None:
        raise NotImplementedError
    def async_(self) -> bool:
        raise NotImplementedError
    def set_async(self, async_: bool) -> None:
        raise NotImplementedError
    def defer(self) -> bool:
        raise NotImplementedError
    def set_defer(self, defer: bool) -> None:
        raise NotImplementedError
    def cross_origin(self) -> str:
        raise NotImplementedError
    def set_cross_origin(self, cross_origin: str) -> None:
        raise NotImplementedError
    def text(self) -> str:
        raise NotImplementedError
    def set_text(self, text: str) -> None:
        raise NotImplementedError
    def event(self) -> str:
        raise NotImplementedError
    def set_event(self, event: str) -> None:
        raise NotImplementedError
    def html_for(self) -> str:
        raise NotImplementedError
    def set_html_for(self, html_for: str) -> None:
        raise NotImplementedError
    def integrity(self) -> str:
        raise NotImplementedError
    def set_integrity(self, integrity: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class ServerSocketOptions:
    binary_type: Optional[TcpSocketBinaryType]

class TcpServerSocket:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def local_port(self) -> int:
        raise NotImplementedError
    def onconnect(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onconnect(self, onconnect: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def close(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmloListElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def reversed(self) -> bool:
        raise NotImplementedError
    def set_reversed(self, reversed: bool) -> None:
        raise NotImplementedError
    def start(self) -> int:
        raise NotImplementedError
    def set_start(self, start: int) -> None:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def set_type(self, type: str) -> None:
        raise NotImplementedError
    def compact(self) -> bool:
        raise NotImplementedError
    def set_compact(self, compact: bool) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlHeadingElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def align(self) -> str:
        raise NotImplementedError
    def set_align(self, align: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgfeSpecularLightingElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def in1(self) -> SvgAnimatedString:
        raise NotImplementedError
    def surface_scale(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def specular_constant(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def specular_exponent(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def kernel_unit_length_x(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def kernel_unit_length_y(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def result(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlTrackElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def kind(self) -> str:
        raise NotImplementedError
    def set_kind(self, kind: str) -> None:
        raise NotImplementedError
    def src(self) -> str:
        raise NotImplementedError
    def set_src(self, src: str) -> None:
        raise NotImplementedError
    def srclang(self) -> str:
        raise NotImplementedError
    def set_srclang(self, srclang: str) -> None:
        raise NotImplementedError
    def label(self) -> str:
        raise NotImplementedError
    def set_label(self, label: str) -> None:
        raise NotImplementedError
    def default(self) -> bool:
        raise NotImplementedError
    def set_default(self, default: bool) -> None:
        raise NotImplementedError
    @classmethod
    def none(cls) -> int:
        raise NotImplementedError
    @classmethod
    def loading(cls) -> int:
        raise NotImplementedError
    @classmethod
    def loaded(cls) -> int:
        raise NotImplementedError
    @classmethod
    def error(cls) -> int:
        raise NotImplementedError
    def ready_state(self) -> int:
        raise NotImplementedError
    def track(self) -> Optional[TextTrack]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class TreeView:
    
    def row_count(self) -> int:
        raise NotImplementedError
    def selection(self) -> Optional[NsITreeSelection]:
        raise NotImplementedError
    def set_selection(self, selection: Optional[NsITreeSelection]) -> None:
        raise NotImplementedError
    def get_row_properties(self, row: int) -> str:
        raise NotImplementedError
    def get_cell_properties(self, row: int, column: TreeColumn) -> str:
        raise NotImplementedError
    def get_column_properties(self, column: TreeColumn) -> str:
        raise NotImplementedError
    def is_container(self, row: int) -> bool:
        raise NotImplementedError
    def is_container_open(self, row: int) -> bool:
        raise NotImplementedError
    def is_container_empty(self, row: int) -> bool:
        raise NotImplementedError
    def is_separator(self, row: int) -> bool:
        raise NotImplementedError
    def is_sorted(self) -> bool:
        raise NotImplementedError
    @classmethod
    def drop_before(cls) -> int:
        raise NotImplementedError
    @classmethod
    def drop_on(cls) -> int:
        raise NotImplementedError
    @classmethod
    def drop_after(cls) -> int:
        raise NotImplementedError
    def can_drop(self, row: int, orientation: int, data_transfer: Optional[DataTransfer]) -> bool:
        raise NotImplementedError
    def drop(self, row: int, orientation: int, data_transfer: Optional[DataTransfer]) -> None:
        raise NotImplementedError
    def get_parent_index(self, row: int) -> int:
        raise NotImplementedError
    def has_next_sibling(self, row: int, after_index: int) -> bool:
        raise NotImplementedError
    def get_level(self, row: int) -> int:
        raise NotImplementedError
    def get_image_src(self, row: int, column: TreeColumn) -> str:
        raise NotImplementedError
    def get_cell_value(self, row: int, column: TreeColumn) -> str:
        raise NotImplementedError
    def get_cell_text(self, row: int, column: TreeColumn) -> str:
        raise NotImplementedError
    def set_tree(self, tree: Optional[TreeBoxObject]) -> None:
        raise NotImplementedError
    def toggle_open_state(self, row: int) -> None:
        raise NotImplementedError
    def cycle_header(self, column: TreeColumn) -> None:
        raise NotImplementedError
    def selection_changed(self) -> None:
        raise NotImplementedError
    def cycle_cell(self, row: int, column: TreeColumn) -> None:
        raise NotImplementedError
    def is_editable(self, row: int, column: TreeColumn) -> bool:
        raise NotImplementedError
    def is_selectable(self, row: int, column: TreeColumn) -> bool:
        raise NotImplementedError
    def set_cell_value(self, row: int, column: TreeColumn, value: str) -> None:
        raise NotImplementedError
    def set_cell_text(self, row: int, column: TreeColumn, value: str) -> None:
        raise NotImplementedError
    def perform_action(self, action: str) -> None:
        raise NotImplementedError
    def perform_action_on_row(self, action: str, row: int) -> None:
        raise NotImplementedError
    def perform_action_on_cell(self, action: str, row: int, column: TreeColumn) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlLabelElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def form(self) -> Optional[HtmlFormElement]:
        raise NotImplementedError
    def html_for(self) -> str:
        raise NotImplementedError
    def set_html_for(self, html_for: str) -> None:
        raise NotImplementedError
    def control(self) -> Optional[HtmlElement]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class NavigationType(Enum):
    NAVIGATE = 0
    RELOAD = 1
    BACK_FORWARD = 2
    PRERENDER = 3

class PerformanceNavigationTiming:
    
    def as_performance_resource_timing(self) -> PerformanceResourceTiming:
        raise NotImplementedError
    def unload_event_start(self) -> float:
        raise NotImplementedError
    def unload_event_end(self) -> float:
        raise NotImplementedError
    def dom_interactive(self) -> float:
        raise NotImplementedError
    def dom_content_loaded_event_start(self) -> float:
        raise NotImplementedError
    def dom_content_loaded_event_end(self) -> float:
        raise NotImplementedError
    def dom_complete(self) -> float:
        raise NotImplementedError
    def load_event_start(self) -> float:
        raise NotImplementedError
    def load_event_end(self) -> float:
        raise NotImplementedError
    def type(self) -> NavigationType:
        raise NotImplementedError
    def redirect_count(self) -> int:
        raise NotImplementedError
    def to_json(self) -> Object:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlQuoteElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def cite(self) -> str:
        raise NotImplementedError
    def set_cite(self, cite: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SharedWorker:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def port(self) -> MessagePort:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgfeFuncBElement:
    
    def as_svg_component_transfer_function_element(self) -> SvgComponentTransferFunctionElement:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class TextClause:
    
    def start_offset(self) -> int:
        raise NotImplementedError
    def end_offset(self) -> int:
        raise NotImplementedError
    def is_caret(self) -> bool:
        raise NotImplementedError
    def is_target_clause(self) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class RtcTrackEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def receiver(self) -> RtcRtpReceiver:
        raise NotImplementedError
    def track(self) -> MediaStreamTrack:
        raise NotImplementedError
    def streams(self) -> List[MediaStream]:
        raise NotImplementedError
    def transceiver(self) -> RtcRtpTransceiver:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class NativeOsFileReadOptions:
    encoding: Optional[str]
    bytes: Optional[int]

@dataclass
class NativeOsFileWriteAtomicOptions:
    bytes: Optional[int]
    tmp_path: Optional[str]
    no_overwrite: Optional[bool]
    flush: Optional[bool]
    backup_to: Optional[str]

@dataclass
class L10nElement:
    namespace_uri: str
    local_name: str
    l10n_id: str
    type: Optional[str]
    l10n_attrs: Optional[str]
    l10n_args: Optional[Object]

@dataclass
class AttributeNameValue:
    name: str
    value: str

@dataclass
class L10nValue:
    value: Optional[str]
    attributes: Optional[List[Optional[AttributeNameValue]]]

class SupportedType(Enum):
    TEXT_HTML = 0
    TEXT_XML = 1
    APPLICATION_XML = 2
    APPLICATION_XHTML_XML = 3
    IMAGE_SVG_XML = 4

class DomParser:
    
    def parse_from_string(self, str: str, type: SupportedType) -> Document:
        raise NotImplementedError
    def force_enable_xulxbl(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PermissionName(Enum):
    GEOLOCATION = 0
    NOTIFICATIONS = 1
    PUSH = 2
    PERSISTENT_STORAGE = 3

@dataclass
class PermissionDescriptor:
    name: PermissionName

@dataclass
class IdbVersionChangeEventInit:
    old_version: Optional[int]
    new_version: Optional[int]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class IdbVersionChangeEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def __init__(self, type: str, event_init_dict: Optional[IdbVersionChangeEventInit]):
        raise NotImplementedError

    def old_version(self) -> int:
        raise NotImplementedError
    def new_version(self) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SpeechGrammar:
    
    def src(self) -> str:
        raise NotImplementedError
    def set_src(self, src: str) -> None:
        raise NotImplementedError
    def weight(self) -> float:
        raise NotImplementedError
    def set_weight(self, weight: float) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PresentationConnectionAvailableEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def connection(self) -> PresentationConnection:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ListBoxObject:
    
    def as_box_object(self) -> BoxObject:
        raise NotImplementedError
    def get_row_count(self) -> int:
        raise NotImplementedError
    def get_row_height(self) -> int:
        raise NotImplementedError
    def get_number_of_visible_rows(self) -> int:
        raise NotImplementedError
    def get_index_of_first_visible_row(self) -> int:
        raise NotImplementedError
    def ensure_index_is_visible(self, row_index: int) -> None:
        raise NotImplementedError
    def scroll_to_index(self, row_index: int) -> None:
        raise NotImplementedError
    def scroll_by_lines(self, num_lines: int) -> None:
        raise NotImplementedError
    def get_item_at_index(self, index: int) -> Optional[Element]:
        raise NotImplementedError
    def get_index_of_item(self, item: Element) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class NavigatorAutomationInformation:
    
    def webdriver(self) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ScrollState(Enum):
    STARTED = 0
    STOPPED = 1

@dataclass
class ScrollViewChangeEventInit:
    state: Optional[ScrollState]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class ScrollViewChangeEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def state(self) -> ScrollState:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmldListElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def compact(self) -> bool:
        raise NotImplementedError
    def set_compact(self, compact: bool) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class StyleSheetApplicableStateChangeEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def stylesheet(self) -> Optional[CssStyleSheet]:
        raise NotImplementedError
    def applicable(self) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class CssSupportsParams_PropertyValue:
    value: Tuple[str, str]


@dataclass
class CssSupportsParams_ConditionText:
    value: str


CssSupportsParams = Union[CssSupportsParams_PropertyValue, CssSupportsParams_ConditionText]


class Css:
    
    def supports(self, params: CssSupportsParams) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlMenuItemElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def set_type(self, type: str) -> None:
        raise NotImplementedError
    def label(self) -> str:
        raise NotImplementedError
    def set_label(self, label: str) -> None:
        raise NotImplementedError
    def icon(self) -> str:
        raise NotImplementedError
    def set_icon(self, icon: str) -> None:
        raise NotImplementedError
    def disabled(self) -> bool:
        raise NotImplementedError
    def set_disabled(self, disabled: bool) -> None:
        raise NotImplementedError
    def checked(self) -> bool:
        raise NotImplementedError
    def set_checked(self, checked: bool) -> None:
        raise NotImplementedError
    def radiogroup(self) -> str:
        raise NotImplementedError
    def set_radiogroup(self, radiogroup: str) -> None:
        raise NotImplementedError
    def default_checked(self) -> bool:
        raise NotImplementedError
    def set_default_checked(self, default_checked: bool) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class EventInit:
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class MutationObservingInfo:
    observed_node: Optional[Some[Optional[Node]]]
    child_list: Optional[bool]
    attributes: Optional[bool]
    character_data: Optional[bool]
    subtree: Optional[bool]
    attribute_old_value: Optional[bool]
    character_data_old_value: Optional[bool]
    native_anonymous_child_list: Optional[bool]
    animations: Optional[bool]
    attribute_filter: Optional[List[str]]

@dataclass
class OpenWindowEventDetail:
    url: Optional[str]
    name: Optional[str]
    features: Optional[str]
    frame_element: Optional[Some[Optional[Node]]]

class SourceBufferList:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def length(self) -> int:
        raise NotImplementedError
    def onaddsourcebuffer(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onaddsourcebuffer(self, onaddsourcebuffer: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onremovesourcebuffer(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onremovesourcebuffer(self, onremovesourcebuffer: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WheelEvent:
    
    def as_mouse_event(self) -> MouseEvent:
        raise NotImplementedError
    @classmethod
    def dom_delta_pixel(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_delta_line(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_delta_page(cls) -> int:
        raise NotImplementedError
    def delta_x(self) -> float:
        raise NotImplementedError
    def delta_y(self) -> float:
        raise NotImplementedError
    def delta_z(self) -> float:
        raise NotImplementedError
    def delta_mode(self) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class UdpOptions:
    local_address: Optional[str]
    local_port: Optional[int]
    remote_address: Optional[str]
    remote_port: Optional[int]
    address_reuse: Optional[bool]
    loopback: Optional[bool]

class UdpSocket:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def local_address(self) -> str:
        raise NotImplementedError
    def local_port(self) -> int:
        raise NotImplementedError
    def remote_address(self) -> str:
        raise NotImplementedError
    def remote_port(self) -> int:
        raise NotImplementedError
    def address_reuse(self) -> bool:
        raise NotImplementedError
    def loopback(self) -> bool:
        raise NotImplementedError
    def ready_state(self) -> SocketReadyState:
        raise NotImplementedError
    def onmessage(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmessage(self, onmessage: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def close(self) -> None:
        raise NotImplementedError
    def join_multicast_group(self, multicast_group_address: str) -> None:
        raise NotImplementedError
    def leave_multicast_group(self, multicast_group_address: str) -> None:
        raise NotImplementedError
    def send(self, data: ArrayBufferOrArrayBufferViewOrBlobOrString, remote_address: Optional[str], remote_port: Optional[int]) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgAnimateElement:
    
    def as_svg_animation_element(self) -> SvgAnimationElement:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgForeignObjectElement:
    
    def as_svg_graphics_element(self) -> SvgGraphicsElement:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class RtcdtmfToneChangeEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def tone(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class RtcdtmfToneChangeEventInit:
    tone: Optional[str]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class FontFaceSetLoadEventInit:
    fontfaces: Optional[List[FontFace]]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class FontFaceSetLoadEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def fontfaces(self) -> List[FontFace]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CreateOfferRequest:
    
    def window_id(self) -> int:
        raise NotImplementedError
    def inner_window_id(self) -> int:
        raise NotImplementedError
    def call_id(self) -> str:
        raise NotImplementedError
    def is_secure(self) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmliFrameElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def src(self) -> str:
        raise NotImplementedError
    def set_src(self, src: str) -> None:
        raise NotImplementedError
    def srcdoc(self) -> str:
        raise NotImplementedError
    def set_srcdoc(self, srcdoc: str) -> None:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def set_name(self, name: str) -> None:
        raise NotImplementedError
    def sandbox(self) -> DomTokenList:
        raise NotImplementedError
    def allow_fullscreen(self) -> bool:
        raise NotImplementedError
    def set_allow_fullscreen(self, allow_fullscreen: bool) -> None:
        raise NotImplementedError
    def allow_payment_request(self) -> bool:
        raise NotImplementedError
    def set_allow_payment_request(self, allow_payment_request: bool) -> None:
        raise NotImplementedError
    def width(self) -> str:
        raise NotImplementedError
    def set_width(self, width: str) -> None:
        raise NotImplementedError
    def height(self) -> str:
        raise NotImplementedError
    def set_height(self, height: str) -> None:
        raise NotImplementedError
    def referrer_policy(self) -> str:
        raise NotImplementedError
    def set_referrer_policy(self, referrer_policy: str) -> None:
        raise NotImplementedError
    def content_document(self) -> Optional[Document]:
        raise NotImplementedError
    def content_window(self) -> Optional[WindowProxy]:
        raise NotImplementedError
    def align(self) -> str:
        raise NotImplementedError
    def set_align(self, align: str) -> None:
        raise NotImplementedError
    def scrolling(self) -> str:
        raise NotImplementedError
    def set_scrolling(self, scrolling: str) -> None:
        raise NotImplementedError
    def frame_border(self) -> str:
        raise NotImplementedError
    def set_frame_border(self, frame_border: str) -> None:
        raise NotImplementedError
    def long_desc(self) -> str:
        raise NotImplementedError
    def set_long_desc(self, long_desc: str) -> None:
        raise NotImplementedError
    def margin_height(self) -> str:
        raise NotImplementedError
    def set_margin_height(self, margin_height: str) -> None:
        raise NotImplementedError
    def margin_width(self) -> str:
        raise NotImplementedError
    def set_margin_width(self, margin_width: str) -> None:
        raise NotImplementedError
    def get_svg_document(self) -> Optional[Document]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgDescElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class DomQuadJson:
    p1: Optional[DomPoint]
    p2: Optional[DomPoint]
    p3: Optional[DomPoint]
    p4: Optional[DomPoint]

@dataclass
class DomQuadInit:
    p1: Optional[DomPointInit]
    p2: Optional[DomPointInit]
    p3: Optional[DomPointInit]
    p4: Optional[DomPointInit]

class BroadcastChannel:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def post_message(self, message: Any) -> None:
        raise NotImplementedError
    def close(self) -> None:
        raise NotImplementedError
    def onmessage(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmessage(self, onmessage: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmessageerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmessageerror(self, onmessageerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class AnimationPlaybackEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def current_time(self) -> float:
        raise NotImplementedError
    def timeline_time(self) -> float:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class AnimationPlaybackEventInit:
    current_time: Optional[float]
    timeline_time: Optional[float]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class DomRectInit:
    x: Optional[float]
    y: Optional[float]
    width: Optional[float]
    height: Optional[float]

class IdleDeadline:
    
    def time_remaining(self) -> float:
        raise NotImplementedError
    def did_timeout(self) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class OvrMultiview2:
    
    @classmethod
    def framebuffer_attachment_texture_num_views_ovr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_attachment_texture_base_view_index_ovr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def max_views_ovr(cls) -> int:
        raise NotImplementedError
    @classmethod
    def framebuffer_incomplete_view_targets_ovr(cls) -> int:
        raise NotImplementedError
    def framebuffer_texture_multiview_ovr(self, target: int, attachment: int, texture: Optional[WebGlTexture], level: int, base_view_index: int, num_views: int) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ImageBitmapRenderingContext:
    
    def transfer_from_image_bitmap(self, bitmap: ImageBitmap) -> None:
        raise NotImplementedError
    def transfer_image_bitmap(self, bitmap: ImageBitmap) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CssAnimation:
    
    def as_animation(self) -> Animation:
        raise NotImplementedError
    def animation_name(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class HtmlTextAreaElementSetRangeTextParams_Replacement:
    value: str


@dataclass
class HtmlTextAreaElementSetRangeTextParams_ReplacementStartEndMode:
    value: Tuple[str, int, int, Optional[str]]


HtmlTextAreaElementSetRangeTextParams = Union[HtmlTextAreaElementSetRangeTextParams_Replacement, HtmlTextAreaElementSetRangeTextParams_ReplacementStartEndMode]


class HtmlTextAreaElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def autocomplete(self) -> str:
        raise NotImplementedError
    def set_autocomplete(self, autocomplete: str) -> None:
        raise NotImplementedError
    def autofocus(self) -> bool:
        raise NotImplementedError
    def set_autofocus(self, autofocus: bool) -> None:
        raise NotImplementedError
    def cols(self) -> int:
        raise NotImplementedError
    def set_cols(self, cols: int) -> None:
        raise NotImplementedError
    def disabled(self) -> bool:
        raise NotImplementedError
    def set_disabled(self, disabled: bool) -> None:
        raise NotImplementedError
    def form(self) -> Optional[HtmlFormElement]:
        raise NotImplementedError
    def max_length(self) -> int:
        raise NotImplementedError
    def set_max_length(self, max_length: int) -> None:
        raise NotImplementedError
    def min_length(self) -> int:
        raise NotImplementedError
    def set_min_length(self, min_length: int) -> None:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def set_name(self, name: str) -> None:
        raise NotImplementedError
    def placeholder(self) -> str:
        raise NotImplementedError
    def set_placeholder(self, placeholder: str) -> None:
        raise NotImplementedError
    def read_only(self) -> bool:
        raise NotImplementedError
    def set_read_only(self, read_only: bool) -> None:
        raise NotImplementedError
    def required(self) -> bool:
        raise NotImplementedError
    def set_required(self, required: bool) -> None:
        raise NotImplementedError
    def rows(self) -> int:
        raise NotImplementedError
    def set_rows(self, rows: int) -> None:
        raise NotImplementedError
    def wrap(self) -> str:
        raise NotImplementedError
    def set_wrap(self, wrap: str) -> None:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def default_value(self) -> str:
        raise NotImplementedError
    def set_default_value(self, default_value: str) -> None:
        raise NotImplementedError
    def value(self) -> str:
        raise NotImplementedError
    def set_value(self, value: str) -> None:
        raise NotImplementedError
    def text_length(self) -> int:
        raise NotImplementedError
    def will_validate(self) -> bool:
        raise NotImplementedError
    def validity(self) -> ValidityState:
        raise NotImplementedError
    def validation_message(self) -> str:
        raise NotImplementedError
    def check_validity(self) -> bool:
        raise NotImplementedError
    def report_validity(self) -> bool:
        raise NotImplementedError
    def set_custom_validity(self, error: str) -> None:
        raise NotImplementedError
    def labels(self) -> NodeList:
        raise NotImplementedError
    def select(self) -> None:
        raise NotImplementedError
    def selection_start(self) -> int:
        raise NotImplementedError
    def set_selection_start(self, selection_start: int) -> None:
        raise NotImplementedError
    def selection_end(self) -> int:
        raise NotImplementedError
    def set_selection_end(self, selection_end: int) -> None:
        raise NotImplementedError
    def selection_direction(self) -> str:
        raise NotImplementedError
    def set_selection_direction(self, selection_direction: str) -> None:
        raise NotImplementedError
    def set_range_text(self, params: HtmlTextAreaElementSetRangeTextParams) -> None:
        raise NotImplementedError
    def set_selection_range(self, start: int, end: int, direction: Optional[str]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HiddenPluginEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def tag(self) -> Optional[PluginTag]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class HiddenPluginEventInit:
    tag: Optional[Some[Optional[PluginTag]]]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class SvgPatternElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def pattern_units(self) -> SvgAnimatedEnumeration:
        raise NotImplementedError
    def pattern_content_units(self) -> SvgAnimatedEnumeration:
        raise NotImplementedError
    def pattern_transform(self) -> SvgAnimatedTransformList:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def href(self) -> SvgAnimatedString:
        raise NotImplementedError
    def view_box(self) -> SvgAnimatedRect:
        raise NotImplementedError
    def preserve_aspect_ratio(self) -> SvgAnimatedPreserveAspectRatio:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class IdbKeyRange:
    
    def lower(self) -> Any:
        raise NotImplementedError
    def upper(self) -> Any:
        raise NotImplementedError
    def lower_open(self) -> bool:
        raise NotImplementedError
    def upper_open(self) -> bool:
        raise NotImplementedError
    def includes(self, key: Any) -> bool:
        raise NotImplementedError
    @classmethod
    def only(cls, value: Any) -> Self:
        raise NotImplementedError
    @classmethod
    def lower_bound(cls, lower: Any, open: Optional[bool]) -> Self:
        raise NotImplementedError
    @classmethod
    def upper_bound(cls, upper: Any, open: Optional[bool]) -> Self:
        raise NotImplementedError
    @classmethod
    def bound(cls, lower: Any, upper: Any, lower_open: Optional[bool], upper_open: Optional[bool]) -> Self:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class IdbLocaleAwareKeyRange:
    
    def as_idb_key_range(self) -> IdbKeyRange:
        raise NotImplementedError
    @classmethod
    def bound(cls, lower: Any, upper: Any, lower_open: Optional[bool], upper_open: Optional[bool]) -> Self:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class KeyboardEvent:
    
    def as_ui_event(self) -> UiEvent:
        raise NotImplementedError
    def char_code(self) -> int:
        raise NotImplementedError
    def key_code(self) -> int:
        raise NotImplementedError
    def alt_key(self) -> bool:
        raise NotImplementedError
    def ctrl_key(self) -> bool:
        raise NotImplementedError
    def shift_key(self) -> bool:
        raise NotImplementedError
    def meta_key(self) -> bool:
        raise NotImplementedError
    def get_modifier_state(self, key: str) -> bool:
        raise NotImplementedError
    @classmethod
    def dom_key_location_standard(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_key_location_left(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_key_location_right(cls) -> int:
        raise NotImplementedError
    @classmethod
    def dom_key_location_numpad(cls) -> int:
        raise NotImplementedError
    def location(self) -> int:
        raise NotImplementedError
    def repeat(self) -> bool:
        raise NotImplementedError
    def is_composing(self) -> bool:
        raise NotImplementedError
    def key(self) -> str:
        raise NotImplementedError
    def code(self) -> str:
        raise NotImplementedError
    def init_keyboard_event(self, type_arg: str, bubbles_arg: Optional[bool], cancelable_arg: Optional[bool], view_arg: Optional[Some[Optional[Window]]], key_arg: Optional[str], location_arg: Optional[int], ctrl_key: Optional[bool], alt_key: Optional[bool], shift_key: Optional[bool], meta_key: Optional[bool]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlMeterElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def value(self) -> float:
        raise NotImplementedError
    def set_value(self, value: float) -> None:
        raise NotImplementedError
    def min(self) -> float:
        raise NotImplementedError
    def set_min(self, min: float) -> None:
        raise NotImplementedError
    def max(self) -> float:
        raise NotImplementedError
    def set_max(self, max: float) -> None:
        raise NotImplementedError
    def low(self) -> float:
        raise NotImplementedError
    def set_low(self, low: float) -> None:
        raise NotImplementedError
    def high(self) -> float:
        raise NotImplementedError
    def set_high(self, high: float) -> None:
        raise NotImplementedError
    def optimum(self) -> float:
        raise NotImplementedError
    def set_optimum(self, optimum: float) -> None:
        raise NotImplementedError
    def labels(self) -> NodeList:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmluListElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def compact(self) -> bool:
        raise NotImplementedError
    def set_compact(self, compact: bool) -> None:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def set_type(self, type: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ProgressEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def length_computable(self) -> bool:
        raise NotImplementedError
    def loaded(self) -> int:
        raise NotImplementedError
    def total(self) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class ProgressEventInit:
    length_computable: Optional[bool]
    loaded: Optional[int]
    total: Optional[int]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class DeviceProximityEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def value(self) -> float:
        raise NotImplementedError
    def min(self) -> float:
        raise NotImplementedError
    def max(self) -> float:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class DeviceProximityEventInit:
    value: Optional[float]
    min: Optional[float]
    max: Optional[float]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class HtmlAudioElement:
    
    def as_html_media_element(self) -> HtmlMediaElement:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlTableCaptionElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def align(self) -> str:
        raise NotImplementedError
    def set_align(self, align: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class WidevineCdmManifest:
    name: str
    description: str
    version: str
    x_cdm_module_versions: str
    x_cdm_interface_versions: str
    x_cdm_host_versions: str
    x_cdm_codecs: str

class TextEncoder:
    
    def encoding(self) -> str:
        raise NotImplementedError
    def encode(self, input: Optional[str]) -> Uint8Array:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgFilterElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def filter_units(self) -> SvgAnimatedEnumeration:
        raise NotImplementedError
    def primitive_units(self) -> SvgAnimatedEnumeration:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def href(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MediaStreamTrackEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def track(self) -> MediaStreamTrack:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgPathSegList:
    
    def number_of_items(self) -> int:
        raise NotImplementedError
    def get_item(self, index: int) -> SvgPathSeg:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgPathElement:
    
    def as_svg_geometry_element(self) -> SvgGeometryElement:
        raise NotImplementedError
    def get_path_seg_at_length(self, distance: float) -> int:
        raise NotImplementedError
    def path_seg_list(self) -> SvgPathSegList:
        raise NotImplementedError
    def animated_path_seg_list(self) -> SvgPathSegList:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlFontElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def color(self) -> str:
        raise NotImplementedError
    def set_color(self, color: str) -> None:
        raise NotImplementedError
    def face(self) -> str:
        raise NotImplementedError
    def set_face(self, face: str) -> None:
        raise NotImplementedError
    def size(self) -> str:
        raise NotImplementedError
    def set_size(self, size: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlMetaElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def set_name(self, name: str) -> None:
        raise NotImplementedError
    def http_equiv(self) -> str:
        raise NotImplementedError
    def set_http_equiv(self, http_equiv: str) -> None:
        raise NotImplementedError
    def content(self) -> str:
        raise NotImplementedError
    def set_content(self, content: str) -> None:
        raise NotImplementedError
    def scheme(self) -> str:
        raise NotImplementedError
    def set_scheme(self, scheme: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CssPageRule:
    
    def as_css_rule(self) -> CssRule:
        raise NotImplementedError
    def style(self) -> CssStyleDeclaration:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlTableRowElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def row_index(self) -> int:
        raise NotImplementedError
    def section_row_index(self) -> int:
        raise NotImplementedError
    def cells(self) -> HtmlCollection:
        raise NotImplementedError
    def insert_cell(self, index: Optional[int]) -> HtmlElement:
        raise NotImplementedError
    def delete_cell(self, index: int) -> None:
        raise NotImplementedError
    def align(self) -> str:
        raise NotImplementedError
    def set_align(self, align: str) -> None:
        raise NotImplementedError
    def ch(self) -> str:
        raise NotImplementedError
    def set_ch(self, ch: str) -> None:
        raise NotImplementedError
    def ch_off(self) -> str:
        raise NotImplementedError
    def set_ch_off(self, ch_off: str) -> None:
        raise NotImplementedError
    def v_align(self) -> str:
        raise NotImplementedError
    def set_v_align(self, v_align: str) -> None:
        raise NotImplementedError
    def bg_color(self) -> str:
        raise NotImplementedError
    def set_bg_color(self, bg_color: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DedicatedWorkerGlobalScope:
    
    def as_worker_global_scope(self) -> WorkerGlobalScope:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def post_message(self, message: Any, transfer: Optional[List[Object]]) -> None:
        raise NotImplementedError
    def close(self) -> None:
        raise NotImplementedError
    def onmessage(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmessage(self, onmessage: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmessageerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmessageerror(self, onmessageerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def request_animation_frame(self, callback: FrameRequestCallback) -> int:
        raise NotImplementedError
    def cancel_animation_frame(self, handle: int) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class HeadersOrListListStringOrRecordString_Headers:
    value: Headers


@dataclass
class HeadersOrListListStringOrRecordString_ListListString:
    value: List[List[str]]


@dataclass
class HeadersOrListListStringOrRecordString_RecordString:
    value: RecordString


HeadersOrListListStringOrRecordString = Union[HeadersOrListListStringOrRecordString_Headers, HeadersOrListListStringOrRecordString_ListListString, HeadersOrListListStringOrRecordString_RecordString]


@dataclass
class ResponseInit:
    status: Optional[int]
    status_text: Optional[str]
    headers: Optional[HeadersOrListListStringOrRecordString]

class Touch:
    
    def identifier(self) -> int:
        raise NotImplementedError
    def target(self) -> Optional[EventTarget]:
        raise NotImplementedError
    def screen_x(self) -> int:
        raise NotImplementedError
    def screen_y(self) -> int:
        raise NotImplementedError
    def client_x(self) -> int:
        raise NotImplementedError
    def client_y(self) -> int:
        raise NotImplementedError
    def page_x(self) -> int:
        raise NotImplementedError
    def page_y(self) -> int:
        raise NotImplementedError
    def radius_x(self) -> int:
        raise NotImplementedError
    def radius_y(self) -> int:
        raise NotImplementedError
    def rotation_angle(self) -> float:
        raise NotImplementedError
    def force(self) -> float:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class TouchList:
    
    def length(self) -> int:
        raise NotImplementedError
    def item(self, index: int) -> Optional[Touch]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlTimeElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def date_time(self) -> str:
        raise NotImplementedError
    def set_date_time(self, date_time: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class ProfileTimelineMarker:
    name: Optional[str]
    start: Optional[float]
    end: Optional[float]
    stack: Optional[Object]
    process_type: Optional[int]
    is_off_main_thread: Optional[bool]
    cause_name: Optional[str]
    end_stack: Optional[Object]
    type: Optional[str]
    event_phase: Optional[int]
    unix_time: Optional[int]
    rectangles: Optional[List[ProfileTimelineLayerRect]]
    is_animation_only: Optional[bool]
    message_port_operation: Optional[ProfileTimelineMessagePortOperationType]
    worker_operation: Optional[ProfileTimelineWorkerOperationType]

@dataclass
class RtcStats:
    timestamp: Optional[float]
    type: Optional[RtcStatsType]
    id: Optional[str]

@dataclass
class RtcrtpStreamStats:
    ssrc: Optional[str]
    media_type: Optional[str]
    remote_id: Optional[str]
    is_remote: Optional[bool]
    media_track_id: Optional[str]
    transport_id: Optional[str]
    codec_id: Optional[str]
    bitrate_mean: Optional[float]
    bitrate_std_dev: Optional[float]
    framerate_mean: Optional[float]
    framerate_std_dev: Optional[float]
    fir_count: Optional[int]
    pli_count: Optional[int]
    nack_count: Optional[int]
    timestamp: Optional[float]
    type: Optional[RtcStatsType]
    id: Optional[str]

@dataclass
class RtcInboundRtpStreamStats:
    packets_received: Optional[int]
    bytes_received: Optional[int]
    jitter: Optional[float]
    packets_lost: Optional[int]
    round_trip_time: Optional[int]
    discarded_packets: Optional[int]
    frames_decoded: Optional[int]
    ssrc: Optional[str]
    media_type: Optional[str]
    remote_id: Optional[str]
    is_remote: Optional[bool]
    media_track_id: Optional[str]
    transport_id: Optional[str]
    codec_id: Optional[str]
    bitrate_mean: Optional[float]
    bitrate_std_dev: Optional[float]
    framerate_mean: Optional[float]
    framerate_std_dev: Optional[float]
    fir_count: Optional[int]
    pli_count: Optional[int]
    nack_count: Optional[int]
    timestamp: Optional[float]
    type: Optional[RtcStatsType]
    id: Optional[str]

@dataclass
class RtcOutboundRtpStreamStats:
    packets_sent: Optional[int]
    bytes_sent: Optional[int]
    target_bitrate: Optional[float]
    dropped_frames: Optional[int]
    frames_encoded: Optional[int]
    ssrc: Optional[str]
    media_type: Optional[str]
    remote_id: Optional[str]
    is_remote: Optional[bool]
    media_track_id: Optional[str]
    transport_id: Optional[str]
    codec_id: Optional[str]
    bitrate_mean: Optional[float]
    bitrate_std_dev: Optional[float]
    framerate_mean: Optional[float]
    framerate_std_dev: Optional[float]
    fir_count: Optional[int]
    pli_count: Optional[int]
    nack_count: Optional[int]
    timestamp: Optional[float]
    type: Optional[RtcStatsType]
    id: Optional[str]

@dataclass
class RtcMediaStreamTrackStats:
    track_identifier: Optional[str]
    remote_source: Optional[bool]
    ssrc_ids: Optional[List[str]]
    frame_width: Optional[int]
    frame_height: Optional[int]
    frames_per_second: Optional[float]
    frames_sent: Optional[int]
    frames_received: Optional[int]
    frames_decoded: Optional[int]
    frames_dropped: Optional[int]
    frames_corrupted: Optional[int]
    audio_level: Optional[float]
    echo_return_loss: Optional[float]
    echo_return_loss_enhancement: Optional[float]
    timestamp: Optional[float]
    type: Optional[RtcStatsType]
    id: Optional[str]

@dataclass
class RtcMediaStreamStats:
    stream_identifier: Optional[str]
    track_ids: Optional[List[str]]
    timestamp: Optional[float]
    type: Optional[RtcStatsType]
    id: Optional[str]

@dataclass
class RtcrtpContributingSourceStats:
    contributor_ssrc: Optional[int]
    inbound_rtp_stream_id: Optional[str]
    timestamp: Optional[float]
    type: Optional[RtcStatsType]
    id: Optional[str]

@dataclass
class RtcTransportStats:
    bytes_sent: Optional[int]
    bytes_received: Optional[int]
    timestamp: Optional[float]
    type: Optional[RtcStatsType]
    id: Optional[str]

@dataclass
class RtcIceComponentStats:
    transport_id: Optional[str]
    component: Optional[int]
    bytes_sent: Optional[int]
    bytes_received: Optional[int]
    active_connection: Optional[bool]
    timestamp: Optional[float]
    type: Optional[RtcStatsType]
    id: Optional[str]

@dataclass
class RtcIceCandidatePairStats:
    transport_id: Optional[str]
    local_candidate_id: Optional[str]
    remote_candidate_id: Optional[str]
    state: Optional[RtcStatsIceCandidatePairState]
    priority: Optional[int]
    nominated: Optional[bool]
    writable: Optional[bool]
    readable: Optional[bool]
    bytes_sent: Optional[int]
    bytes_received: Optional[int]
    last_packet_sent_timestamp: Optional[float]
    last_packet_received_timestamp: Optional[float]
    selected: Optional[bool]
    component_id: Optional[int]
    timestamp: Optional[float]
    type: Optional[RtcStatsType]
    id: Optional[str]

@dataclass
class RtcIceCandidateStats:
    component_id: Optional[str]
    candidate_id: Optional[str]
    ip_address: Optional[str]
    transport: Optional[str]
    port_number: Optional[int]
    candidate_type: Optional[RtcStatsIceCandidateType]
    timestamp: Optional[float]
    type: Optional[RtcStatsType]
    id: Optional[str]

@dataclass
class RtcCodecStats:
    payload_type: Optional[int]
    codec: Optional[str]
    clock_rate: Optional[int]
    channels: Optional[int]
    parameters: Optional[str]
    timestamp: Optional[float]
    type: Optional[RtcStatsType]
    id: Optional[str]

@dataclass
class RtcStatsReportInternal:
    pcid: Optional[str]
    inbound_rtp_stream_stats: Optional[List[RtcInboundRtpStreamStats]]
    outbound_rtp_stream_stats: Optional[List[RtcOutboundRtpStreamStats]]
    rtp_contributing_source_stats: Optional[List[RtcrtpContributingSourceStats]]
    media_stream_track_stats: Optional[List[RtcMediaStreamTrackStats]]
    media_stream_stats: Optional[List[RtcMediaStreamStats]]
    transport_stats: Optional[List[RtcTransportStats]]
    ice_component_stats: Optional[List[RtcIceComponentStats]]
    ice_candidate_pair_stats: Optional[List[RtcIceCandidatePairStats]]
    ice_candidate_stats: Optional[List[RtcIceCandidateStats]]
    codec_stats: Optional[List[RtcCodecStats]]
    local_sdp: Optional[str]
    remote_sdp: Optional[str]
    timestamp: Optional[float]
    ice_restarts: Optional[int]
    ice_rollbacks: Optional[int]
    offerer: Optional[bool]
    closed: Optional[bool]
    trickled_ice_candidate_stats: Optional[List[RtcIceCandidateStats]]
    raw_local_candidates: Optional[List[str]]
    raw_remote_candidates: Optional[List[str]]

class HtmlMapElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def set_name(self, name: str) -> None:
        raise NotImplementedError
    def areas(self) -> HtmlCollection:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MidiOutput:
    
    def as_midi_port(self) -> MidiPort:
        raise NotImplementedError
    def send(self, data: bytes, timestamp: Optional[float]) -> None:
        raise NotImplementedError
    def clear(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgmPathElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def href(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlTableSectionElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def rows(self) -> HtmlCollection:
        raise NotImplementedError
    def insert_row(self, index: Optional[int]) -> HtmlElement:
        raise NotImplementedError
    def delete_row(self, index: int) -> None:
        raise NotImplementedError
    def align(self) -> str:
        raise NotImplementedError
    def set_align(self, align: str) -> None:
        raise NotImplementedError
    def ch(self) -> str:
        raise NotImplementedError
    def set_ch(self, ch: str) -> None:
        raise NotImplementedError
    def ch_off(self) -> str:
        raise NotImplementedError
    def set_ch_off(self, ch_off: str) -> None:
        raise NotImplementedError
    def v_align(self) -> str:
        raise NotImplementedError
    def set_v_align(self, v_align: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlTableElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def caption(self) -> Optional[HtmlTableCaptionElement]:
        raise NotImplementedError
    def set_caption(self, caption: Optional[HtmlTableCaptionElement]) -> None:
        raise NotImplementedError
    def create_caption(self) -> HtmlElement:
        raise NotImplementedError
    def delete_caption(self) -> None:
        raise NotImplementedError
    def t_head(self) -> Optional[HtmlTableSectionElement]:
        raise NotImplementedError
    def set_t_head(self, t_head: Optional[HtmlTableSectionElement]) -> None:
        raise NotImplementedError
    def create_t_head(self) -> HtmlElement:
        raise NotImplementedError
    def delete_t_head(self) -> None:
        raise NotImplementedError
    def t_foot(self) -> Optional[HtmlTableSectionElement]:
        raise NotImplementedError
    def set_t_foot(self, t_foot: Optional[HtmlTableSectionElement]) -> None:
        raise NotImplementedError
    def create_t_foot(self) -> HtmlElement:
        raise NotImplementedError
    def delete_t_foot(self) -> None:
        raise NotImplementedError
    def t_bodies(self) -> HtmlCollection:
        raise NotImplementedError
    def create_t_body(self) -> HtmlElement:
        raise NotImplementedError
    def rows(self) -> HtmlCollection:
        raise NotImplementedError
    def insert_row(self, index: Optional[int]) -> HtmlElement:
        raise NotImplementedError
    def delete_row(self, index: int) -> None:
        raise NotImplementedError
    def align(self) -> str:
        raise NotImplementedError
    def set_align(self, align: str) -> None:
        raise NotImplementedError
    def border(self) -> str:
        raise NotImplementedError
    def set_border(self, border: str) -> None:
        raise NotImplementedError
    def frame(self) -> str:
        raise NotImplementedError
    def set_frame(self, frame: str) -> None:
        raise NotImplementedError
    def rules(self) -> str:
        raise NotImplementedError
    def set_rules(self, rules: str) -> None:
        raise NotImplementedError
    def summary(self) -> str:
        raise NotImplementedError
    def set_summary(self, summary: str) -> None:
        raise NotImplementedError
    def width(self) -> str:
        raise NotImplementedError
    def set_width(self, width: str) -> None:
        raise NotImplementedError
    def bg_color(self) -> str:
        raise NotImplementedError
    def set_bg_color(self, bg_color: str) -> None:
        raise NotImplementedError
    def cell_padding(self) -> str:
        raise NotImplementedError
    def set_cell_padding(self, cell_padding: str) -> None:
        raise NotImplementedError
    def cell_spacing(self) -> str:
        raise NotImplementedError
    def set_cell_spacing(self, cell_spacing: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class KeyboardEventInit:
    key: Optional[str]
    code: Optional[str]
    location: Optional[int]
    repeat: Optional[bool]
    is_composing: Optional[bool]
    char_code: Optional[int]
    key_code: Optional[int]
    which: Optional[int]
    ctrl_key: Optional[bool]
    shift_key: Optional[bool]
    alt_key: Optional[bool]
    meta_key: Optional[bool]
    modifier_alt_graph: Optional[bool]
    modifier_caps_lock: Optional[bool]
    modifier_fn: Optional[bool]
    modifier_fn_lock: Optional[bool]
    modifier_num_lock: Optional[bool]
    modifier_os: Optional[bool]
    modifier_scroll_lock: Optional[bool]
    modifier_symbol: Optional[bool]
    modifier_symbol_lock: Optional[bool]
    view: Optional[Some[Optional[Window]]]
    detail: Optional[int]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class ScrollOptions:
    behavior: Optional[ScrollBehavior]

class StyleRuleChangeEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def stylesheet(self) -> Optional[CssStyleSheet]:
        raise NotImplementedError
    def rule(self) -> Optional[CssRule]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PerformanceMark:
    
    def as_performance_entry(self) -> PerformanceEntry:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SpeechRecognitionAlternative:
    
    def transcript(self) -> str:
        raise NotImplementedError
    def confidence(self) -> float:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SpeechRecognitionResult:
    
    def length(self) -> int:
        raise NotImplementedError
    def item(self, index: int) -> SpeechRecognitionAlternative:
        raise NotImplementedError
    def is_final(self) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SpeechRecognitionResultList:
    
    def length(self) -> int:
        raise NotImplementedError
    def item(self, index: int) -> SpeechRecognitionResult:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class AbortController:
    
    def signal(self) -> AbortSignal:
        raise NotImplementedError
    def abort(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class GroupedHistoryEventInit:
    other_browser: Optional[Some[Optional[Element]]]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class IntersectionObserverEntryInit:
    time: float
    root_bounds: DomRectInit
    bounding_client_rect: DomRectInit
    intersection_rect: DomRectInit
    target: Element

@dataclass
class IntersectionObserverInit:
    root: Optional[Some[Optional[Element]]]
    root_margin: Optional[str]
    threshold: Optional[F64OrListF64]

class UdpMessageEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def remote_address(self) -> str:
        raise NotImplementedError
    def remote_port(self) -> int:
        raise NotImplementedError
    def data(self) -> Any:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class UdpMessageEventInit:
    remote_address: Optional[str]
    remote_port: Optional[int]
    data: Any
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class HtmlLinkElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def disabled(self) -> bool:
        raise NotImplementedError
    def set_disabled(self, disabled: bool) -> None:
        raise NotImplementedError
    def href(self) -> str:
        raise NotImplementedError
    def set_href(self, href: str) -> None:
        raise NotImplementedError
    def cross_origin(self) -> str:
        raise NotImplementedError
    def set_cross_origin(self, cross_origin: str) -> None:
        raise NotImplementedError
    def rel(self) -> str:
        raise NotImplementedError
    def set_rel(self, rel: str) -> None:
        raise NotImplementedError
    def rel_list(self) -> DomTokenList:
        raise NotImplementedError
    def media(self) -> str:
        raise NotImplementedError
    def set_media(self, media: str) -> None:
        raise NotImplementedError
    def hreflang(self) -> str:
        raise NotImplementedError
    def set_hreflang(self, hreflang: str) -> None:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def set_type(self, type: str) -> None:
        raise NotImplementedError
    def referrer_policy(self) -> str:
        raise NotImplementedError
    def set_referrer_policy(self, referrer_policy: str) -> None:
        raise NotImplementedError
    def sizes(self) -> DomTokenList:
        raise NotImplementedError
    def charset(self) -> str:
        raise NotImplementedError
    def set_charset(self, charset: str) -> None:
        raise NotImplementedError
    def rev(self) -> str:
        raise NotImplementedError
    def set_rev(self, rev: str) -> None:
        raise NotImplementedError
    def target(self) -> str:
        raise NotImplementedError
    def set_target(self, target: str) -> None:
        raise NotImplementedError
    def integrity(self) -> str:
        raise NotImplementedError
    def set_integrity(self, integrity: str) -> None:
        raise NotImplementedError
    def as_(self) -> str:
        raise NotImplementedError
    def set_as(self, as_: str) -> None:
        raise NotImplementedError
    def sheet(self) -> Optional[StyleSheet]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class StorageEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def key(self) -> str:
        raise NotImplementedError
    def old_value(self) -> str:
        raise NotImplementedError
    def new_value(self) -> str:
        raise NotImplementedError
    def url(self) -> str:
        raise NotImplementedError
    def storage_area(self) -> Optional[Storage]:
        raise NotImplementedError
    def init_storage_event(self, type: str, can_bubble: Optional[bool], cancelable: Optional[bool], key: Optional[str], old_value: Optional[str], new_value: Optional[str], url: Optional[str], storage_area: Optional[Some[Optional[Storage]]]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class StorageEventInit:
    key: Optional[str]
    old_value: Optional[str]
    new_value: Optional[str]
    url: Optional[str]
    storage_area: Optional[Some[Optional[Storage]]]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class FetchState(Enum):
    REQUESTING = 0
    RESPONDING = 1
    ABORTED = 2
    ERRORED = 3
    COMPLETE = 4

class FetchObserver:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def state(self) -> FetchState:
        raise NotImplementedError
    def onstatechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onstatechange(self, onstatechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onrequestprogress(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onrequestprogress(self, onrequestprogress: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onresponseprogress(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onresponseprogress(self, onresponseprogress: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlParamElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def set_name(self, name: str) -> None:
        raise NotImplementedError
    def value(self) -> str:
        raise NotImplementedError
    def set_value(self, value: str) -> None:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def set_type(self, type: str) -> None:
        raise NotImplementedError
    def value_type(self) -> str:
        raise NotImplementedError
    def set_value_type(self, value_type: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class TransitionEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def property_name(self) -> str:
        raise NotImplementedError
    def elapsed_time(self) -> float:
        raise NotImplementedError
    def pseudo_element(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class TransitionEventInit:
    property_name: Optional[str]
    elapsed_time: Optional[float]
    pseudo_element: Optional[str]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class Algorithm:
    name: str

@dataclass
class AesCbcParams:
    iv: BufferSource
    name: str

@dataclass
class AesCtrParams:
    counter: BufferSource
    length: int
    name: str

@dataclass
class AesGcmParams:
    iv: BufferSource
    additional_data: Optional[BufferSource]
    tag_length: Optional[int]
    name: str

@dataclass
class AesKeyGenParams:
    length: int
    name: str

@dataclass
class RsaOaepParams:
    label: Optional[BufferSource]
    name: str

@dataclass
class RsaPssParams:
    salt_length: int
    name: str

@dataclass
class DhKeyGenParams:
    prime: Uint8Array
    generator: Uint8Array
    name: str

@dataclass
class EcKeyGenParams:
    named_curve: str
    name: str

@dataclass
class AesDerivedKeyParams:
    length: int
    name: str

@dataclass
class DhImportKeyParams:
    prime: Uint8Array
    generator: Uint8Array
    name: str

@dataclass
class EcKeyImportParams:
    named_curve: Optional[str]
    name: str

@dataclass
class RsaOtherPrimesInfo:
    r: str
    d: str
    t: str

@dataclass
class JsonWebKey:
    kty: str
    use: Optional[str]
    key_ops: Optional[List[str]]
    alg: Optional[str]
    ext: Optional[bool]
    crv: Optional[str]
    x: Optional[str]
    y: Optional[str]
    d: Optional[str]
    n: Optional[str]
    e: Optional[str]
    p: Optional[str]
    q: Optional[str]
    dp: Optional[str]
    dq: Optional[str]
    qi: Optional[str]
    oth: Optional[List[RsaOtherPrimesInfo]]
    k: Optional[str]

@dataclass
class EcdhKeyDeriveParams:
    public: CryptoKey
    name: str

@dataclass
class DhKeyDeriveParams:
    public: CryptoKey
    name: str

@dataclass
class CryptoKeyPair:
    public_key: CryptoKey
    private_key: CryptoKey

@dataclass
class HmacImportParams:
    hash: ObjectOrString
    name: str

@dataclass
class Pbkdf2Params:
    salt: BufferSource
    iterations: int
    hash: ObjectOrString
    name: str

@dataclass
class RsaHashedImportParams:
    hash: ObjectOrString

@dataclass
class HmacKeyGenParams:
    hash: ObjectOrString
    length: Optional[int]
    name: str

@dataclass
class RsaHashedKeyGenParams:
    modulus_length: int
    public_exponent: Uint8Array
    hash: ObjectOrString
    name: str

@dataclass
class HmacDerivedKeyParams:
    length: Optional[int]
    hash: ObjectOrString
    name: str

@dataclass
class EcdsaParams:
    hash: ObjectOrString
    name: str

@dataclass
class HkdfParams:
    hash: ObjectOrString
    salt: BufferSource
    info: BufferSource
    name: str

class SvgLineElement:
    
    def as_svg_geometry_element(self) -> SvgGeometryElement:
        raise NotImplementedError
    def x1(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y1(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def x2(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y2(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlHtmlElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def version(self) -> str:
        raise NotImplementedError
    def set_version(self, version: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlDialogElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def open(self) -> bool:
        raise NotImplementedError
    def set_open(self, open: bool) -> None:
        raise NotImplementedError
    def return_value(self) -> str:
        raise NotImplementedError
    def set_return_value(self, return_value: str) -> None:
        raise NotImplementedError
    def show(self) -> None:
        raise NotImplementedError
    def show_modal(self) -> None:
        raise NotImplementedError
    def close(self, return_value: Optional[str]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class RecordingState(Enum):
    INACTIVE = 0
    RECORDING = 1
    PAUSED = 2

class MediaRecorder:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def stream(self) -> MediaStream:
        raise NotImplementedError
    def state(self) -> RecordingState:
        raise NotImplementedError
    def mime_type(self) -> str:
        raise NotImplementedError
    def ondataavailable(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondataavailable(self, ondataavailable: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onstart(self, onstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onstop(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onstop(self, onstop: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onwarning(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onwarning(self, onwarning: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def start(self, time_slice: Optional[int]) -> None:
        raise NotImplementedError
    def stop(self) -> None:
        raise NotImplementedError
    def pause(self) -> None:
        raise NotImplementedError
    def resume(self) -> None:
        raise NotImplementedError
    def request_data(self) -> None:
        raise NotImplementedError
    @classmethod
    def is_type_supported(cls, type: str) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class MediaRecorderOptions:
    mime_type: Optional[str]
    audio_bits_per_second: Optional[int]
    video_bits_per_second: Optional[int]
    bits_per_second: Optional[int]

class SubmitEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def submitter(self) -> Optional[HtmlElement]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class SubmitEventInit:
    submitter: Optional[Some[Optional[HtmlElement]]]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class MediaEncryptedEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def init_data_type(self) -> str:
        raise NotImplementedError
    def init_data(self) -> ArrayBuffer:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class MediaKeyNeededEventInit:
    init_data_type: Optional[str]
    init_data: Optional[ArrayBuffer]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class DeviceOrientationEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def alpha(self) -> float:
        raise NotImplementedError
    def beta(self) -> float:
        raise NotImplementedError
    def gamma(self) -> float:
        raise NotImplementedError
    def absolute(self) -> bool:
        raise NotImplementedError
    def init_device_orientation_event(self, type: str, can_bubble: Optional[bool], cancelable: Optional[bool], alpha: Optional[float], beta: Optional[float], gamma: Optional[float], absolute: Optional[bool]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class DeviceOrientationEventInit:
    alpha: Optional[float]
    beta: Optional[float]
    gamma: Optional[float]
    absolute: Optional[bool]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class SvgMetadataElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgStopElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def offset(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PointerEvent:
    
    def as_mouse_event(self) -> MouseEvent:
        raise NotImplementedError
    def pointer_id(self) -> int:
        raise NotImplementedError
    def width(self) -> int:
        raise NotImplementedError
    def height(self) -> int:
        raise NotImplementedError
    def pressure(self) -> float:
        raise NotImplementedError
    def tangential_pressure(self) -> float:
        raise NotImplementedError
    def tilt_x(self) -> int:
        raise NotImplementedError
    def tilt_y(self) -> int:
        raise NotImplementedError
    def twist(self) -> int:
        raise NotImplementedError
    def pointer_type(self) -> str:
        raise NotImplementedError
    def is_primary(self) -> bool:
        raise NotImplementedError
    def get_coalesced_events(self) -> List[Self]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class XmlHttpRequestResponseType(Enum):
    DEFAULT = 0
    ARRAYBUFFER = 1
    BLOB = 2
    DOCUMENT = 3
    JSON = 4
    TEXT = 5


@dataclass
class XmlHttpRequestOpenParams_MethodUrl:
    value: Tuple[str, str]


@dataclass
class XmlHttpRequestOpenParams_MethodUrlAsyncUserPassword:
    value: Tuple[str, str, bool, Optional[str], Optional[str]]


XmlHttpRequestOpenParams = Union[XmlHttpRequestOpenParams_MethodUrl, XmlHttpRequestOpenParams_MethodUrlAsyncUserPassword]



@dataclass
class BodyInitOrDocument_BodyInit:
    value: BlobOrBufferSourceOrFormDataOrReadableStreamOrStringOrUrlSearchParams


@dataclass
class BodyInitOrDocument_Document:
    value: Document


BodyInitOrDocument = Union[BodyInitOrDocument_BodyInit, BodyInitOrDocument_Document]


class XmlHttpRequest:
    
    def as_xml_http_request_event_target(self) -> XmlHttpRequestEventTarget:
        raise NotImplementedError
    def onreadystatechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onreadystatechange(self, onreadystatechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    @classmethod
    def unsent(cls) -> int:
        raise NotImplementedError
    @classmethod
    def opened(cls) -> int:
        raise NotImplementedError
    @classmethod
    def headers_received(cls) -> int:
        raise NotImplementedError
    @classmethod
    def loading(cls) -> int:
        raise NotImplementedError
    @classmethod
    def done(cls) -> int:
        raise NotImplementedError
    def ready_state(self) -> int:
        raise NotImplementedError
    def open(self, params: XmlHttpRequestOpenParams) -> None:
        raise NotImplementedError
    def set_request_header(self, header: str, value: str) -> None:
        raise NotImplementedError
    def timeout(self) -> int:
        raise NotImplementedError
    def set_timeout(self, timeout: int) -> None:
        raise NotImplementedError
    def with_credentials(self) -> bool:
        raise NotImplementedError
    def set_with_credentials(self, with_credentials: bool) -> None:
        raise NotImplementedError
    def upload(self) -> XmlHttpRequestUpload:
        raise NotImplementedError
    def send(self, body: Optional[BodyInitOrDocument]) -> None:
        raise NotImplementedError
    def abort(self) -> None:
        raise NotImplementedError
    def response_url(self) -> str:
        raise NotImplementedError
    def status(self) -> int:
        raise NotImplementedError
    def status_text(self) -> str:
        raise NotImplementedError
    def get_response_header(self, header: str) -> str:
        raise NotImplementedError
    def get_all_response_headers(self) -> str:
        raise NotImplementedError
    def override_mime_type(self, mime: str) -> None:
        raise NotImplementedError
    def response_type(self) -> XmlHttpRequestResponseType:
        raise NotImplementedError
    def set_response_type(self, response_type: XmlHttpRequestResponseType) -> None:
        raise NotImplementedError
    def response(self) -> Any:
        raise NotImplementedError
    def response_text(self) -> str:
        raise NotImplementedError
    def response_xml(self) -> Optional[Document]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlMenuElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def set_type(self, type: str) -> None:
        raise NotImplementedError
    def label(self) -> str:
        raise NotImplementedError
    def set_label(self, label: str) -> None:
        raise NotImplementedError
    def compact(self) -> bool:
        raise NotImplementedError
    def set_compact(self, compact: bool) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PerformanceNavigation:
    
    @classmethod
    def type_navigate(cls) -> int:
        raise NotImplementedError
    @classmethod
    def type_reload(cls) -> int:
        raise NotImplementedError
    @classmethod
    def type_back_forward(cls) -> int:
        raise NotImplementedError
    @classmethod
    def type_reserved(cls) -> int:
        raise NotImplementedError
    def type(self) -> int:
        raise NotImplementedError
    def redirect_count(self) -> int:
        raise NotImplementedError
    def to_json(self) -> Object:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlDirectoryElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def compact(self) -> bool:
        raise NotImplementedError
    def set_compact(self, compact: bool) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class InputEvent:
    
    def as_ui_event(self) -> UiEvent:
        raise NotImplementedError
    def is_composing(self) -> bool:
        raise NotImplementedError
    def input_type(self) -> str:
        raise NotImplementedError
    def data(self) -> str:
        raise NotImplementedError
    def data_transfer(self) -> Optional[DataTransfer]:
        raise NotImplementedError
    def get_target_ranges(self) -> List[StaticRange]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class InputEventInit:
    is_composing: Optional[bool]
    input_type: Optional[str]
    data: Optional[str]
    view: Optional[Some[Optional[Window]]]
    detail: Optional[int]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class Exception:
    
    def name(self) -> str:
        raise NotImplementedError
    def message(self) -> str:
        raise NotImplementedError
    def result(self) -> int:
        raise NotImplementedError
    def filename(self) -> str:
        raise NotImplementedError
    def line_number(self) -> int:
        raise NotImplementedError
    def column_number(self) -> int:
        raise NotImplementedError
    def location(self) -> Optional[StackFrame]:
        raise NotImplementedError
    def data(self) -> Optional[Object]:
        raise NotImplementedError
    def stack(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class MediaRecorderErrorEventInit:
    error: DomException
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class CssFontFaceRule:
    
    def as_css_rule(self) -> CssRule:
        raise NotImplementedError
    def style(self) -> CssStyleDeclaration:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class PushSubscriptionInit:
    endpoint: str
    scope: str
    p256dh_key: Optional[ArrayBuffer]
    auth_secret: Optional[ArrayBuffer]
    app_server_key: Optional[BufferSource]

class AudioContextLatencyCategory(Enum):
    BALANCED = 0
    INTERACTIVE = 1
    PLAYBACK = 2


@dataclass
class AudioContextLatencyCategoryOrF64_AudioContextLatencyCategory:
    value: AudioContextLatencyCategory


@dataclass
class AudioContextLatencyCategoryOrF64_F64:
    value: float


AudioContextLatencyCategoryOrF64 = Union[AudioContextLatencyCategoryOrF64_AudioContextLatencyCategory, AudioContextLatencyCategoryOrF64_F64]


@dataclass
class AudioContextOptions:
    latency_hint: Optional[AudioContextLatencyCategoryOrF64]
    sample_rate: Optional[float]

class MediaElementAudioSourceNode:
    
    def as_audio_node(self) -> AudioNode:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MediaStreamAudioDestinationNode:
    
    def as_audio_node(self) -> AudioNode:
        raise NotImplementedError
    def stream(self) -> MediaStream:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class AudioContext:
    
    def as_base_audio_context(self) -> BaseAudioContext:
        raise NotImplementedError
    def suspend(self) -> None:
        raise NotImplementedError
    def close(self) -> None:
        raise NotImplementedError
    def create_media_element_source(self, media_element: HtmlMediaElement) -> MediaElementAudioSourceNode:
        raise NotImplementedError
    def create_media_stream_source(self, media_stream: MediaStream) -> MediaStreamAudioSourceNode:
        raise NotImplementedError
    def create_media_stream_destination(self) -> MediaStreamAudioDestinationNode:
        raise NotImplementedError
    def destination(self) -> AudioDestinationNode:
        raise NotImplementedError
    def sample_rate(self) -> float:
        raise NotImplementedError
    def current_time(self) -> float:
        raise NotImplementedError
    def listener(self) -> AudioListener:
        raise NotImplementedError
    def state(self) -> AudioContextState:
        raise NotImplementedError
    def audio_worklet(self) -> AudioWorklet:
        raise NotImplementedError
    def resume(self) -> None:
        raise NotImplementedError
    def onstatechange(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onstatechange(self, onstatechange: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def create_buffer(self, number_of_channels: int, length: int, sample_rate: float) -> AudioBuffer:
        raise NotImplementedError
    def decode_audio_data(self, audio_data: ArrayBuffer, success_callback: Optional[DecodeSuccessCallback], error_callback: Optional[DecodeErrorCallback]) -> AudioBuffer:
        raise NotImplementedError
    def create_buffer_source(self) -> AudioBufferSourceNode:
        raise NotImplementedError
    def create_constant_source(self) -> ConstantSourceNode:
        raise NotImplementedError
    def create_script_processor(self, buffer_size: Optional[int], number_of_input_channels: Optional[int], number_of_output_channels: Optional[int]) -> ScriptProcessorNode:
        raise NotImplementedError
    def create_analyser(self) -> AnalyserNode:
        raise NotImplementedError
    def create_gain(self) -> GainNode:
        raise NotImplementedError
    def create_delay(self, max_delay_time: Optional[float]) -> DelayNode:
        raise NotImplementedError
    def create_biquad_filter(self) -> BiquadFilterNode:
        raise NotImplementedError
    def create_iir_filter(self, feedforward: List[float], feedback: List[float]) -> IirFilterNode:
        raise NotImplementedError
    def create_wave_shaper(self) -> WaveShaperNode:
        raise NotImplementedError
    def create_panner(self) -> PannerNode:
        raise NotImplementedError
    def create_stereo_panner(self) -> StereoPannerNode:
        raise NotImplementedError
    def create_convolver(self) -> ConvolverNode:
        raise NotImplementedError
    def create_channel_splitter(self, number_of_outputs: Optional[int]) -> ChannelSplitterNode:
        raise NotImplementedError
    def create_channel_merger(self, number_of_inputs: Optional[int]) -> ChannelMergerNode:
        raise NotImplementedError
    def create_dynamics_compressor(self) -> DynamicsCompressorNode:
        raise NotImplementedError
    def create_oscillator(self) -> OscillatorNode:
        raise NotImplementedError
    def create_periodic_wave(self, real: Float32Array, imag: Float32Array, constraints: Optional[PeriodicWaveConstraints]) -> PeriodicWave:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CompositeOperation(Enum):
    REPLACE = 0
    ADD = 1
    ACCUMULATE = 2


@dataclass
class ListOptionCompositeOperationOrOptionCompositeOperation_ListOptionCompositeOperation:
    value: List[Optional[CompositeOperation]]


@dataclass
class ListOptionCompositeOperationOrOptionCompositeOperation_OptionCompositeOperation:
    value: Optional[CompositeOperation]


ListOptionCompositeOperationOrOptionCompositeOperation = Union[ListOptionCompositeOperationOrOptionCompositeOperation_ListOptionCompositeOperation, ListOptionCompositeOperationOrOptionCompositeOperation_OptionCompositeOperation]


@dataclass
class BasePropertyIndexedKeyframe:
    offset: Optional[F64OrListF64]
    easing: Optional[ListStringOrString]
    composite: Optional[ListOptionCompositeOperationOrOptionCompositeOperation]

@dataclass
class BaseKeyframe:
    offset: Optional[float]
    easing: Optional[str]
    composite: Optional[Some[Optional[CompositeOperation]]]
    simulate_compute_values_failure: Optional[bool]

@dataclass
class BaseComputedKeyframe:
    computed_offset: Optional[float]
    offset: Optional[float]
    easing: Optional[str]
    composite: Optional[Some[Optional[CompositeOperation]]]
    simulate_compute_values_failure: Optional[bool]

class MidiConnectionEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def port(self) -> Optional[MidiPort]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class MidiConnectionEventInit:
    port: Optional[Some[Optional[MidiPort]]]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class HtmlDetailsElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def open(self) -> bool:
        raise NotImplementedError
    def set_open(self, open: bool) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgMarkerElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    @classmethod
    def svg_markerunits_unknown(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_markerunits_userspaceonuse(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_markerunits_strokewidth(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_marker_orient_unknown(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_marker_orient_auto(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_marker_orient_angle(cls) -> int:
        raise NotImplementedError
    def ref_x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def ref_y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def marker_units(self) -> SvgAnimatedEnumeration:
        raise NotImplementedError
    def marker_width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def marker_height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def orient_type(self) -> SvgAnimatedEnumeration:
        raise NotImplementedError
    def orient_angle(self) -> SvgAnimatedAngle:
        raise NotImplementedError
    def set_orient_to_auto(self) -> None:
        raise NotImplementedError
    def set_orient_to_angle(self, angle: SvgAngle) -> None:
        raise NotImplementedError
    def view_box(self) -> SvgAnimatedRect:
        raise NotImplementedError
    def preserve_aspect_ratio(self) -> SvgAnimatedPreserveAspectRatio:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlAllCollection:
    
    def length(self) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlDocument:
    
    def as_document(self) -> Document:
        raise NotImplementedError
    def domain(self) -> str:
        raise NotImplementedError
    def set_domain(self, domain: str) -> None:
        raise NotImplementedError
    def cookie(self) -> str:
        raise NotImplementedError
    def set_cookie(self, cookie: str) -> None:
        raise NotImplementedError
    def close(self) -> None:
        raise NotImplementedError
    def write(self, text: List[str]) -> None:
        raise NotImplementedError
    def writeln(self, text: List[str]) -> None:
        raise NotImplementedError
    def design_mode(self) -> str:
        raise NotImplementedError
    def set_design_mode(self, design_mode: str) -> None:
        raise NotImplementedError
    def exec_command(self, command_id: str, show_ui: Optional[bool], value: Optional[str]) -> bool:
        raise NotImplementedError
    def query_command_enabled(self, command_id: str) -> bool:
        raise NotImplementedError
    def query_command_indeterm(self, command_id: str) -> bool:
        raise NotImplementedError
    def query_command_state(self, command_id: str) -> bool:
        raise NotImplementedError
    def query_command_supported(self, command_id: str) -> bool:
        raise NotImplementedError
    def query_command_value(self, command_id: str) -> str:
        raise NotImplementedError
    def fg_color(self) -> str:
        raise NotImplementedError
    def set_fg_color(self, fg_color: str) -> None:
        raise NotImplementedError
    def link_color(self) -> str:
        raise NotImplementedError
    def set_link_color(self, link_color: str) -> None:
        raise NotImplementedError
    def vlink_color(self) -> str:
        raise NotImplementedError
    def set_vlink_color(self, vlink_color: str) -> None:
        raise NotImplementedError
    def alink_color(self) -> str:
        raise NotImplementedError
    def set_alink_color(self, alink_color: str) -> None:
        raise NotImplementedError
    def bg_color(self) -> str:
        raise NotImplementedError
    def set_bg_color(self, bg_color: str) -> None:
        raise NotImplementedError
    def clear(self) -> None:
        raise NotImplementedError
    def all(self) -> HtmlAllCollection:
        raise NotImplementedError
    def capture_events(self) -> None:
        raise NotImplementedError
    def release_events(self) -> None:
        raise NotImplementedError
    def blocked_tracking_node_count(self) -> int:
        raise NotImplementedError
    def blocked_tracking_nodes(self) -> NodeList:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PushEvent:
    
    def as_extendable_event(self) -> ExtendableEvent:
        raise NotImplementedError
    def data(self) -> Optional[PushMessageData]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class PushEventInit:
    data: Optional[BufferSourceOrString]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class BinaryType(Enum):
    BLOB = 0
    ARRAYBUFFER = 1


@dataclass
class WebSocketSendParams_Data:
    value: str


WebSocketSendParams = Union[WebSocketSendParams_Data]


class WebSocket:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def url(self) -> str:
        raise NotImplementedError
    @classmethod
    def connecting(cls) -> int:
        raise NotImplementedError
    @classmethod
    def open(cls) -> int:
        raise NotImplementedError
    @classmethod
    def closing(cls) -> int:
        raise NotImplementedError
    @classmethod
    def closed(cls) -> int:
        raise NotImplementedError
    def ready_state(self) -> int:
        raise NotImplementedError
    def buffered_amount(self) -> int:
        raise NotImplementedError
    def onopen(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onopen(self, onopen: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onclose(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onclose(self, onclose: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def extensions(self) -> str:
        raise NotImplementedError
    def protocol(self) -> str:
        raise NotImplementedError
    def close(self, code: Optional[int], reason: Optional[str]) -> None:
        raise NotImplementedError
    def onmessage(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmessage(self, onmessage: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def binary_type(self) -> BinaryType:
        raise NotImplementedError
    def set_binary_type(self, binary_type: BinaryType) -> None:
        raise NotImplementedError
    def send(self, params: WebSocketSendParams) -> None:
        raise NotImplementedError
    @classmethod
    def create_server_web_socket(cls, url: str, protocols: List[str], transport_provider: NsITransportProvider, negotiated_extensions: str) -> Self:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgUnitTypes:
    
    @classmethod
    def svg_unit_type_unknown(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_unit_type_userspaceonuse(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_unit_type_objectboundingbox(cls) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class RtcDataChannelEventInit:
    channel: RtcDataChannel
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class RtcDataChannelEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def channel(self) -> RtcDataChannel:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class HtmlCanvasElementOrOffscreenCanvas_HtmlCanvasElement:
    value: HtmlCanvasElement


@dataclass
class HtmlCanvasElementOrOffscreenCanvas_OffscreenCanvas:
    value: OffscreenCanvas


HtmlCanvasElementOrOffscreenCanvas = Union[HtmlCanvasElementOrOffscreenCanvas_HtmlCanvasElement, HtmlCanvasElementOrOffscreenCanvas_OffscreenCanvas]


class SvgfeCompositeElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    @classmethod
    def svg_fecomposite_operator_unknown(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_fecomposite_operator_over(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_fecomposite_operator_in(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_fecomposite_operator_out(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_fecomposite_operator_atop(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_fecomposite_operator_xor(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_fecomposite_operator_arithmetic(cls) -> int:
        raise NotImplementedError
    def in1(self) -> SvgAnimatedString:
        raise NotImplementedError
    def in2(self) -> SvgAnimatedString:
        raise NotImplementedError
    def operator(self) -> SvgAnimatedEnumeration:
        raise NotImplementedError
    def k1(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def k2(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def k3(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def k4(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def result(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class RtcRtpSourceEntryType(Enum):
    CONTRIBUTING = 0
    SYNCHRONIZATION = 1

@dataclass
class RtcRtpSourceEntry:
    source_type: RtcRtpSourceEntryType
    voice_activity_flag: Optional[bool]
    timestamp: float
    source: int
    audio_level: Optional[float]

class SvgMaskElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    @classmethod
    def svg_masktype_luminance(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_masktype_alpha(cls) -> int:
        raise NotImplementedError
    def mask_units(self) -> SvgAnimatedEnumeration:
        raise NotImplementedError
    def mask_content_units(self) -> SvgAnimatedEnumeration:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class VideoFacingModeEnum(Enum):
    USER = 0
    ENVIRONMENT = 1
    LEFT = 2
    RIGHT = 3

class MediaSourceEnum(Enum):
    CAMERA = 0
    SCREEN = 1
    APPLICATION = 2
    WINDOW = 3
    BROWSER = 4
    MICROPHONE = 5
    AUDIO_CAPTURE = 6
    OTHER = 7

@dataclass
class RtcTrackEventInit:
    receiver: RtcRtpReceiver
    track: MediaStreamTrack
    streams: Optional[List[MediaStream]]
    transceiver: RtcRtpTransceiver
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class MediaStreamTrackEventInit:
    track: MediaStreamTrack
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class SpeechGrammarList:
    
    def length(self) -> int:
        raise NotImplementedError
    def item(self, index: int) -> SpeechGrammar:
        raise NotImplementedError
    def add_from_uri(self, src: str, weight: Optional[float]) -> None:
        raise NotImplementedError
    def add_from_string(self, string: str, weight: Optional[float]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SpeechRecognition:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def grammars(self) -> SpeechGrammarList:
        raise NotImplementedError
    def set_grammars(self, grammars: SpeechGrammarList) -> None:
        raise NotImplementedError
    def lang(self) -> str:
        raise NotImplementedError
    def set_lang(self, lang: str) -> None:
        raise NotImplementedError
    def continuous(self) -> bool:
        raise NotImplementedError
    def set_continuous(self, continuous: bool) -> None:
        raise NotImplementedError
    def interim_results(self) -> bool:
        raise NotImplementedError
    def set_interim_results(self, interim_results: bool) -> None:
        raise NotImplementedError
    def max_alternatives(self) -> int:
        raise NotImplementedError
    def set_max_alternatives(self, max_alternatives: int) -> None:
        raise NotImplementedError
    def service_uri(self) -> str:
        raise NotImplementedError
    def set_service_uri(self, service_uri: str) -> None:
        raise NotImplementedError
    def start(self, stream: Optional[MediaStream]) -> None:
        raise NotImplementedError
    def stop(self) -> None:
        raise NotImplementedError
    def abort(self) -> None:
        raise NotImplementedError
    def onaudiostart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onaudiostart(self, onaudiostart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onsoundstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onsoundstart(self, onsoundstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onspeechstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onspeechstart(self, onspeechstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onspeechend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onspeechend(self, onspeechend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onsoundend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onsoundend(self, onsoundend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onaudioend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onaudioend(self, onaudioend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onresult(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onresult(self, onresult: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onnomatch(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onnomatch(self, onnomatch: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onstart(self, onstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onend(self, onend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlTemplateElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def content(self) -> DocumentFragment:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class BeforeUnloadEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def return_value(self) -> str:
        raise NotImplementedError
    def set_return_value(self, return_value: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgAnimateTransformElement:
    
    def as_svg_animation_element(self) -> SvgAnimationElement:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class Int32ArrayOrListGLsizei_Int32Array:
    value: Int32Array


@dataclass
class Int32ArrayOrListGLsizei_ListGLsizei:
    value: List[int]


Int32ArrayOrListGLsizei = Union[Int32ArrayOrListGLsizei_Int32Array, Int32ArrayOrListGLsizei_ListGLsizei]


class WebglMultiDraw:
    
    def multi_draw_arrays_webgl(self, mode: int, firsts_list: Int32ArrayOrListGLint, firsts_offset: int, counts_list: Int32ArrayOrListGLsizei, counts_offset: int, drawcount: int) -> None:
        raise NotImplementedError
    def multi_draw_elements_webgl(self, mode: int, counts_list: Int32ArrayOrListGLint, counts_offset: int, type: int, offsets_list: Int32ArrayOrListGLsizei, offsets_offset: int, drawcount: int) -> None:
        raise NotImplementedError
    def multi_draw_arrays_instanced_webgl(self, mode: int, firsts_list: Int32ArrayOrListGLint, firsts_offset: int, counts_list: Int32ArrayOrListGLsizei, counts_offset: int, instance_counts_list: Int32ArrayOrListGLsizei, instance_counts_offset: int, drawcount: int) -> None:
        raise NotImplementedError
    def multi_draw_elements_instanced_webgl(self, mode: int, counts_list: Int32ArrayOrListGLint, counts_offset: int, type: int, offsets_list: Int32ArrayOrListGLsizei, offsets_offset: int, instance_counts_list: Int32ArrayOrListGLsizei, instance_counts_offset: int, drawcount: int) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PaintWorkletGlobalScope:
    
    def as_worklet_global_scope(self) -> WorkletGlobalScope:
        raise NotImplementedError
    def register_paint(self, name: str, paint_ctor: VoidFunction) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class MediaElementAudioSourceOptions:
    media_element: HtmlMediaElement

class HtmlTitleElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def text(self) -> str:
        raise NotImplementedError
    def set_text(self, text: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DeviceLightEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def value(self) -> float:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class DeviceLightEventInit:
    value: Optional[float]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class HtmlOutputElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def html_for(self) -> DomTokenList:
        raise NotImplementedError
    def form(self) -> Optional[HtmlFormElement]:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def set_name(self, name: str) -> None:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def default_value(self) -> str:
        raise NotImplementedError
    def set_default_value(self, default_value: str) -> None:
        raise NotImplementedError
    def value(self) -> str:
        raise NotImplementedError
    def set_value(self, value: str) -> None:
        raise NotImplementedError
    def will_validate(self) -> bool:
        raise NotImplementedError
    def validity(self) -> ValidityState:
        raise NotImplementedError
    def validation_message(self) -> str:
        raise NotImplementedError
    def check_validity(self) -> bool:
        raise NotImplementedError
    def report_validity(self) -> bool:
        raise NotImplementedError
    def set_custom_validity(self, error: str) -> None:
        raise NotImplementedError
    def labels(self) -> NodeList:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class BasicCardType(Enum):
    CREDIT = 0
    DEBIT = 1
    PREPAID = 2

@dataclass
class BasicCardRequest:
    supported_networks: Optional[List[str]]
    supported_types: Optional[List[BasicCardType]]

@dataclass
class BasicCardResponse:
    cardholder_name: Optional[str]
    card_number: str
    expiry_month: Optional[str]
    expiry_year: Optional[str]
    card_security_code: Optional[str]
    billing_address: Optional[Some[Optional[PaymentAddress]]]

class PageTransitionEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def persisted(self) -> bool:
        raise NotImplementedError
    def in_frame_swap(self) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class PageTransitionEventInit:
    persisted: Optional[bool]
    in_frame_swap: Optional[bool]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class HtmlAnchorElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def target(self) -> str:
        raise NotImplementedError
    def set_target(self, target: str) -> None:
        raise NotImplementedError
    def download(self) -> str:
        raise NotImplementedError
    def set_download(self, download: str) -> None:
        raise NotImplementedError
    def ping(self) -> str:
        raise NotImplementedError
    def set_ping(self, ping: str) -> None:
        raise NotImplementedError
    def rel(self) -> str:
        raise NotImplementedError
    def set_rel(self, rel: str) -> None:
        raise NotImplementedError
    def referrer_policy(self) -> str:
        raise NotImplementedError
    def set_referrer_policy(self, referrer_policy: str) -> None:
        raise NotImplementedError
    def rel_list(self) -> DomTokenList:
        raise NotImplementedError
    def hreflang(self) -> str:
        raise NotImplementedError
    def set_hreflang(self, hreflang: str) -> None:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def set_type(self, type: str) -> None:
        raise NotImplementedError
    def text(self) -> str:
        raise NotImplementedError
    def set_text(self, text: str) -> None:
        raise NotImplementedError
    def href(self) -> str:
        raise NotImplementedError
    def set_href(self, href: str) -> None:
        raise NotImplementedError
    def origin(self) -> str:
        raise NotImplementedError
    def protocol(self) -> str:
        raise NotImplementedError
    def set_protocol(self, protocol: str) -> None:
        raise NotImplementedError
    def username(self) -> str:
        raise NotImplementedError
    def set_username(self, username: str) -> None:
        raise NotImplementedError
    def password(self) -> str:
        raise NotImplementedError
    def set_password(self, password: str) -> None:
        raise NotImplementedError
    def host(self) -> str:
        raise NotImplementedError
    def set_host(self, host: str) -> None:
        raise NotImplementedError
    def hostname(self) -> str:
        raise NotImplementedError
    def set_hostname(self, hostname: str) -> None:
        raise NotImplementedError
    def port(self) -> str:
        raise NotImplementedError
    def set_port(self, port: str) -> None:
        raise NotImplementedError
    def pathname(self) -> str:
        raise NotImplementedError
    def set_pathname(self, pathname: str) -> None:
        raise NotImplementedError
    def search(self) -> str:
        raise NotImplementedError
    def set_search(self, search: str) -> None:
        raise NotImplementedError
    def hash(self) -> str:
        raise NotImplementedError
    def set_hash(self, hash: str) -> None:
        raise NotImplementedError
    def coords(self) -> str:
        raise NotImplementedError
    def set_coords(self, coords: str) -> None:
        raise NotImplementedError
    def charset(self) -> str:
        raise NotImplementedError
    def set_charset(self, charset: str) -> None:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def set_name(self, name: str) -> None:
        raise NotImplementedError
    def rev(self) -> str:
        raise NotImplementedError
    def set_rev(self, rev: str) -> None:
        raise NotImplementedError
    def shape(self) -> str:
        raise NotImplementedError
    def set_shape(self, shape: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MutationEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    @classmethod
    def modification(cls) -> int:
        raise NotImplementedError
    @classmethod
    def addition(cls) -> int:
        raise NotImplementedError
    @classmethod
    def removal(cls) -> int:
        raise NotImplementedError
    @classmethod
    def smil(cls) -> int:
        raise NotImplementedError
    def related_node(self) -> Optional[Node]:
        raise NotImplementedError
    def prev_value(self) -> str:
        raise NotImplementedError
    def new_value(self) -> str:
        raise NotImplementedError
    def attr_name(self) -> str:
        raise NotImplementedError
    def attr_change(self) -> int:
        raise NotImplementedError
    def init_mutation_event(self, type: str, can_bubble: Optional[bool], cancelable: Optional[bool], related_node: Optional[Some[Optional[Node]]], prev_value: Optional[str], new_value: Optional[str], attr_name: Optional[str], attr_change: Optional[int]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PopupBlockedEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def requesting_window(self) -> Optional[Window]:
        raise NotImplementedError
    def popup_window_uri(self) -> Optional[Uri]:
        raise NotImplementedError
    def popup_window_name(self) -> str:
        raise NotImplementedError
    def popup_window_features(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class PopupBlockedEventInit:
    requesting_window: Optional[Some[Optional[Window]]]
    popup_window_uri: Optional[Some[Optional[Uri]]]
    popup_window_name: Optional[str]
    popup_window_features: Optional[str]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class HtmlbrElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def clear(self) -> str:
        raise NotImplementedError
    def set_clear(self, clear: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PromiseNativeHandler:
    
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class DomMatrixInit:
    m13: Optional[float]
    m14: Optional[float]
    m23: Optional[float]
    m24: Optional[float]
    m31: Optional[float]
    m32: Optional[float]
    m33: Optional[float]
    m34: Optional[float]
    m43: Optional[float]
    m44: Optional[float]
    is2_d: Optional[bool]
    a: Optional[float]
    b: Optional[float]
    c: Optional[float]
    d: Optional[float]
    e: Optional[float]
    f: Optional[float]
    m11: Optional[float]
    m12: Optional[float]
    m21: Optional[float]
    m22: Optional[float]
    m41: Optional[float]
    m42: Optional[float]

class SvgSymbolElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def view_box(self) -> SvgAnimatedRect:
        raise NotImplementedError
    def preserve_aspect_ratio(self) -> SvgAnimatedPreserveAspectRatio:
        raise NotImplementedError
    def required_features(self) -> SvgStringList:
        raise NotImplementedError
    def required_extensions(self) -> SvgStringList:
        raise NotImplementedError
    def system_language(self) -> SvgStringList:
        raise NotImplementedError
    def has_extension(self, extension: str) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class PeriodicWaveOptions:
    real: Optional[List[float]]
    imag: Optional[List[float]]
    disable_normalization: Optional[bool]

class SpeechRecognitionEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def result_index(self) -> int:
        raise NotImplementedError
    def results(self) -> Optional[SpeechRecognitionResultList]:
        raise NotImplementedError
    def interpretation(self) -> Any:
        raise NotImplementedError
    def emma(self) -> Optional[Document]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class TcpSocketErrorEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def message(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class TcpSocketErrorEventInit:
    name: Optional[str]
    message: Optional[str]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class RtcIdentityProvider:
    generate_assertion: GenerateAssertionCallback
    validate_assertion: ValidateAssertionCallback

@dataclass
class RtcIdentityProviderDetails:
    domain: str
    protocol: Optional[str]

@dataclass
class RtcIdentityAssertionResult:
    idp: RtcIdentityProviderDetails
    assertion: str

@dataclass
class RtcIdentityValidationResult:
    identity: str
    contents: str

class RtcIdentityProviderRegistrar:
    
    def register(self, idp: RtcIdentityProvider) -> None:
        raise NotImplementedError
    def has_idp(self) -> bool:
        raise NotImplementedError
    def generate_assertion(self, contents: str, origin: str, options: Optional[RtcIdentityProviderOptions]) -> RtcIdentityAssertionResult:
        raise NotImplementedError
    def validate_assertion(self, assertion: str, origin: str) -> RtcIdentityValidationResult:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class LocalMediaStream:
    
    def as_media_stream(self) -> MediaStream:
        raise NotImplementedError
    def stop(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class MediaConfiguration:
    video: Optional[VideoConfiguration]
    audio: Optional[AudioConfiguration]

class CssFontFeatureValuesRule:
    
    def as_css_rule(self) -> CssRule:
        raise NotImplementedError
    def font_family(self) -> str:
        raise NotImplementedError
    def set_font_family(self, font_family: str) -> None:
        raise NotImplementedError
    def value_text(self) -> str:
        raise NotImplementedError
    def set_value_text(self, value_text: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class MessagePortOrServiceWorkerOrWindowProxy_MessagePort:
    value: MessagePort


@dataclass
class MessagePortOrServiceWorkerOrWindowProxy_ServiceWorker:
    value: ServiceWorker


@dataclass
class MessagePortOrServiceWorkerOrWindowProxy_WindowProxy:
    value: WindowProxy


MessagePortOrServiceWorkerOrWindowProxy = Union[MessagePortOrServiceWorkerOrWindowProxy_MessagePort, MessagePortOrServiceWorkerOrWindowProxy_ServiceWorker, MessagePortOrServiceWorkerOrWindowProxy_WindowProxy]


class MessageEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def data(self) -> Any:
        raise NotImplementedError
    def origin(self) -> str:
        raise NotImplementedError
    def last_event_id(self) -> str:
        raise NotImplementedError
    def ports(self) -> List[MessagePort]:
        """
        source: func() -> option<message-event-source>;
        """
        raise NotImplementedError
    def init_message_event(self, type: str, bubbles: Optional[bool], cancelable: Optional[bool], data: Any, origin: Optional[str], last_event_id: Optional[str], source: Optional[Some[Optional[MessagePortOrServiceWorkerOrWindowProxy]]], ports: Optional[List[MessagePort]]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class MessageEventInit:
    data: Any
    origin: Optional[str]
    last_event_id: Optional[str]
    source: Optional[Some[Optional[MessagePortOrServiceWorkerOrWindowProxy]]]
    ports: Optional[List[MessagePort]]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class TcpServerSocketEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def socket(self) -> TcpSocket:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class TcpServerSocketEventInit:
    socket: Optional[Some[Optional[TcpSocket]]]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class SvgUseElement:
    
    def as_svg_graphics_element(self) -> SvgGraphicsElement:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def href(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class AudioWorkletNodeOptions:
    number_of_inputs: Optional[int]
    number_of_outputs: Optional[int]
    output_channel_count: Optional[List[int]]
    parameter_data: Optional[RecordF64]
    processor_options: Optional[Object]
    channel_count: Optional[int]
    channel_count_mode: Optional[ChannelCountMode]
    channel_interpretation: Optional[ChannelInterpretation]

@dataclass
class ChannelSplitterOptions:
    number_of_outputs: Optional[int]
    channel_count: Optional[int]
    channel_count_mode: Optional[ChannelCountMode]
    channel_interpretation: Optional[ChannelInterpretation]

@dataclass
class DynamicsCompressorOptions:
    attack: Optional[float]
    knee: Optional[float]
    ratio: Optional[float]
    release: Optional[float]
    threshold: Optional[float]
    channel_count: Optional[int]
    channel_count_mode: Optional[ChannelCountMode]
    channel_interpretation: Optional[ChannelInterpretation]

@dataclass
class AnalyserOptions:
    fft_size: Optional[int]
    max_decibels: Optional[float]
    min_decibels: Optional[float]
    smoothing_time_constant: Optional[float]
    channel_count: Optional[int]
    channel_count_mode: Optional[ChannelCountMode]
    channel_interpretation: Optional[ChannelInterpretation]

@dataclass
class OscillatorOptions:
    type: Optional[OscillatorType]
    frequency: Optional[float]
    detune: Optional[float]
    periodic_wave: Optional[PeriodicWave]
    channel_count: Optional[int]
    channel_count_mode: Optional[ChannelCountMode]
    channel_interpretation: Optional[ChannelInterpretation]

@dataclass
class StereoPannerOptions:
    pan: Optional[float]
    channel_count: Optional[int]
    channel_count_mode: Optional[ChannelCountMode]
    channel_interpretation: Optional[ChannelInterpretation]

@dataclass
class IirFilterOptions:
    feedforward: List[float]
    feedback: List[float]
    channel_count: Optional[int]
    channel_count_mode: Optional[ChannelCountMode]
    channel_interpretation: Optional[ChannelInterpretation]

@dataclass
class AudioNodeOptions:
    channel_count: Optional[int]
    channel_count_mode: Optional[ChannelCountMode]
    channel_interpretation: Optional[ChannelInterpretation]

@dataclass
class ConvolverOptions:
    buffer: Optional[Some[Optional[AudioBuffer]]]
    disable_normalization: Optional[bool]
    channel_count: Optional[int]
    channel_count_mode: Optional[ChannelCountMode]
    channel_interpretation: Optional[ChannelInterpretation]

@dataclass
class PerformanceEntryEventInit:
    name: Optional[str]
    entry_type: Optional[str]
    start_time: Optional[float]
    duration: Optional[float]
    epoch: Optional[float]
    origin: Optional[str]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class PerformanceEntryEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def entry_type(self) -> str:
        raise NotImplementedError
    def start_time(self) -> float:
        raise NotImplementedError
    def duration(self) -> float:
        raise NotImplementedError
    def epoch(self) -> float:
        raise NotImplementedError
    def origin(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgfeTurbulenceElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    @classmethod
    def svg_turbulence_type_unknown(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_turbulence_type_fractalnoise(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_turbulence_type_turbulence(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_stitchtype_unknown(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_stitchtype_stitch(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_stitchtype_nostitch(cls) -> int:
        raise NotImplementedError
    def base_frequency_x(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def base_frequency_y(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def num_octaves(self) -> SvgAnimatedInteger:
        raise NotImplementedError
    def seed(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def stitch_tiles(self) -> SvgAnimatedEnumeration:
        raise NotImplementedError
    def type(self) -> SvgAnimatedEnumeration:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def result(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class PannerOptions:
    panning_model: Optional[PanningModelType]
    distance_model: Optional[DistanceModelType]
    position_x: Optional[float]
    position_y: Optional[float]
    position_z: Optional[float]
    orientation_x: Optional[float]
    orientation_y: Optional[float]
    orientation_z: Optional[float]
    ref_distance: Optional[float]
    max_distance: Optional[float]
    rolloff_factor: Optional[float]
    cone_inner_angle: Optional[float]
    cone_outer_angle: Optional[float]
    cone_outer_gain: Optional[float]
    channel_count: Optional[int]
    channel_count_mode: Optional[ChannelCountMode]
    channel_interpretation: Optional[ChannelInterpretation]

class Directory:
    
    def name(self) -> str:
        raise NotImplementedError
    def path(self) -> str:
        raise NotImplementedError
    def get_files(self, recursive_flag: Optional[bool]) -> List[File]:
        """
        get-files-and-directories: func() -> list<directory-or-file>;
        """
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class BrowserFeedWriter:
    
    def write_content(self) -> None:
        raise NotImplementedError
    def close(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class FuzzingFunctions:
    
    @classmethod
    def garbage_collect(cls) -> None:
        raise NotImplementedError
    @classmethod
    def cycle_collect(cls) -> None:
        raise NotImplementedError
    @classmethod
    def enable_accessibility(cls) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class FetchEventInit:
    request: Request
    client_id: Optional[str]
    is_reload: Optional[bool]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class CacheBatchOperation:
    type: Optional[str]
    request: Optional[Request]
    response: Optional[Response]
    options: Optional[CacheQueryOptions]

@dataclass
class ClientRectsAndTexts:
    rect_list: DomRectList
    text_list: List[str]

class SvgfeImageElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def preserve_aspect_ratio(self) -> SvgAnimatedPreserveAspectRatio:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def result(self) -> SvgAnimatedString:
        raise NotImplementedError
    def href(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class FileSystemFileEntry:
    
    def as_file_system_entry(self) -> FileSystemEntry:
        raise NotImplementedError
    def file(self, success_callback: FileCallback, error_callback: Optional[ErrorCallback]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgfeFuncAElement:
    
    def as_svg_component_transfer_function_element(self) -> SvgComponentTransferFunctionElement:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgfeSpotLightElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def x(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def y(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def z(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def points_at_x(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def points_at_y(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def points_at_z(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def specular_exponent(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def limiting_cone_angle(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class HtmlCollectionOrNode_HtmlCollection:
    value: HtmlCollection


@dataclass
class HtmlCollectionOrNode_Node:
    value: Node


HtmlCollectionOrNode = Union[HtmlCollectionOrNode_HtmlCollection, HtmlCollectionOrNode_Node]


@dataclass
class PresentationConnectionAvailableEventInit:
    connection: PresentationConnection
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class SvggElement:
    
    def as_svg_graphics_element(self) -> SvgGraphicsElement:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class OffscreenCanvasRenderingContext2DSetTransformParams_ABCDEF:
    value: Tuple[float, float, float, float, float, float]


@dataclass
class OffscreenCanvasRenderingContext2DSetTransformParams_Transform:
    value: Optional[DomMatrix2DInit]


OffscreenCanvasRenderingContext2DSetTransformParams = Union[OffscreenCanvasRenderingContext2DSetTransformParams_ABCDEF, OffscreenCanvasRenderingContext2DSetTransformParams_Transform]



@dataclass
class OffscreenCanvasRenderingContext2DFillParams_Winding:
    value: Optional[CanvasWindingRule]


@dataclass
class OffscreenCanvasRenderingContext2DFillParams_PathWinding:
    value: Tuple[Path2D, Optional[CanvasWindingRule]]


OffscreenCanvasRenderingContext2DFillParams = Union[OffscreenCanvasRenderingContext2DFillParams_Winding, OffscreenCanvasRenderingContext2DFillParams_PathWinding]



@dataclass
class OffscreenCanvasRenderingContext2DStrokeParams_Path:
    value: Path2D


OffscreenCanvasRenderingContext2DStrokeParams = Union[OffscreenCanvasRenderingContext2DStrokeParams_Path]



@dataclass
class OffscreenCanvasRenderingContext2DClipParams_Winding:
    value: Optional[CanvasWindingRule]


@dataclass
class OffscreenCanvasRenderingContext2DClipParams_PathWinding:
    value: Tuple[Path2D, Optional[CanvasWindingRule]]


OffscreenCanvasRenderingContext2DClipParams = Union[OffscreenCanvasRenderingContext2DClipParams_Winding, OffscreenCanvasRenderingContext2DClipParams_PathWinding]



@dataclass
class OffscreenCanvasRenderingContext2DIsPointInPathParams_XYWinding:
    value: Tuple[float, float, Optional[CanvasWindingRule]]


@dataclass
class OffscreenCanvasRenderingContext2DIsPointInPathParams_PathXYWinding:
    value: Tuple[Path2D, float, float, Optional[CanvasWindingRule]]


OffscreenCanvasRenderingContext2DIsPointInPathParams = Union[OffscreenCanvasRenderingContext2DIsPointInPathParams_XYWinding, OffscreenCanvasRenderingContext2DIsPointInPathParams_PathXYWinding]



@dataclass
class OffscreenCanvasRenderingContext2DIsPointInStrokeParams_XY:
    value: Tuple[float, float]


@dataclass
class OffscreenCanvasRenderingContext2DIsPointInStrokeParams_PathXY:
    value: Tuple[Path2D, float, float]


OffscreenCanvasRenderingContext2DIsPointInStrokeParams = Union[OffscreenCanvasRenderingContext2DIsPointInStrokeParams_XY, OffscreenCanvasRenderingContext2DIsPointInStrokeParams_PathXY]



@dataclass
class OffscreenCanvasRenderingContext2DDrawImageParams_ImageDxDy:
    value: Tuple[HtmlCanvasElementOrHtmlOrSvgImageElementOrHtmlVideoElementOrImageBitmapOrOffscreenCanvasOrVideoFrame, float, float]


@dataclass
class OffscreenCanvasRenderingContext2DDrawImageParams_ImageDxDyDwDh:
    value: Tuple[HtmlCanvasElementOrHtmlOrSvgImageElementOrHtmlVideoElementOrImageBitmapOrOffscreenCanvasOrVideoFrame, float, float, float, float]


@dataclass
class OffscreenCanvasRenderingContext2DDrawImageParams_ImageSxSySwShDxDyDwDh:
    value: Tuple[HtmlCanvasElementOrHtmlOrSvgImageElementOrHtmlVideoElementOrImageBitmapOrOffscreenCanvasOrVideoFrame, float, float, float, float, float, float, float, float]


OffscreenCanvasRenderingContext2DDrawImageParams = Union[OffscreenCanvasRenderingContext2DDrawImageParams_ImageDxDy, OffscreenCanvasRenderingContext2DDrawImageParams_ImageDxDyDwDh, OffscreenCanvasRenderingContext2DDrawImageParams_ImageSxSySwShDxDyDwDh]



@dataclass
class OffscreenCanvasRenderingContext2DCreateImageDataParams_SwSh:
    value: Tuple[float, float]


@dataclass
class OffscreenCanvasRenderingContext2DCreateImageDataParams_Imagedata:
    value: ImageData


OffscreenCanvasRenderingContext2DCreateImageDataParams = Union[OffscreenCanvasRenderingContext2DCreateImageDataParams_SwSh, OffscreenCanvasRenderingContext2DCreateImageDataParams_Imagedata]



@dataclass
class OffscreenCanvasRenderingContext2DPutImageDataParams_ImagedataDxDy:
    value: Tuple[ImageData, float, float]


@dataclass
class OffscreenCanvasRenderingContext2DPutImageDataParams_ImagedataDxDyDirtyXDirtyYDirtyWidthDirtyHeight:
    value: Tuple[ImageData, float, float, float, float, float, float]


OffscreenCanvasRenderingContext2DPutImageDataParams = Union[OffscreenCanvasRenderingContext2DPutImageDataParams_ImagedataDxDy, OffscreenCanvasRenderingContext2DPutImageDataParams_ImagedataDxDyDirtyXDirtyYDirtyWidthDirtyHeight]


class OffscreenCanvasRenderingContext2D:
    
    def canvas(self) -> OffscreenCanvas:
        raise NotImplementedError
    def save(self) -> None:
        raise NotImplementedError
    def restore(self) -> None:
        raise NotImplementedError
    def reset(self) -> None:
        raise NotImplementedError
    def scale(self, x: float, y: float) -> None:
        raise NotImplementedError
    def rotate(self, angle: float) -> None:
        raise NotImplementedError
    def translate(self, x: float, y: float) -> None:
        raise NotImplementedError
    def transform(self, a: float, b: float, c: float, d: float, e: float, f: float) -> None:
        raise NotImplementedError
    def set_transform(self, params: OffscreenCanvasRenderingContext2DSetTransformParams) -> None:
        raise NotImplementedError
    def reset_transform(self) -> None:
        raise NotImplementedError
    def get_transform(self) -> DomMatrix:
        raise NotImplementedError
    def global_alpha(self) -> float:
        raise NotImplementedError
    def set_global_alpha(self, global_alpha: float) -> None:
        raise NotImplementedError
    def global_composite_operation(self) -> str:
        raise NotImplementedError
    def set_global_composite_operation(self, global_composite_operation: str) -> None:
        raise NotImplementedError
    def image_smoothing_enabled(self) -> bool:
        raise NotImplementedError
    def set_image_smoothing_enabled(self, image_smoothing_enabled: bool) -> None:
        raise NotImplementedError
    def set_stroke_style(self, stroke_style: CanvasGradientOrCanvasPatternOrString) -> None:
        """
        stroke-style: func() -> canvas-gradient-or-canvas-pattern-or-string;
        """
        raise NotImplementedError
    def set_fill_style(self, fill_style: CanvasGradientOrCanvasPatternOrString) -> None:
        """
        fill-style: func() -> canvas-gradient-or-canvas-pattern-or-string;
        """
        raise NotImplementedError
    def create_linear_gradient(self, x0: float, y0: float, x1: float, y1: float) -> CanvasGradient:
        raise NotImplementedError
    def create_radial_gradient(self, x0: float, y0: float, r0: float, x1: float, y1: float, r1: float) -> CanvasGradient:
        raise NotImplementedError
    def create_pattern(self, image: HtmlCanvasElementOrHtmlOrSvgImageElementOrHtmlVideoElementOrImageBitmapOrOffscreenCanvasOrVideoFrame, repetition: str) -> Optional[CanvasPattern]:
        raise NotImplementedError
    def shadow_offset_x(self) -> float:
        raise NotImplementedError
    def set_shadow_offset_x(self, shadow_offset_x: float) -> None:
        raise NotImplementedError
    def shadow_offset_y(self) -> float:
        raise NotImplementedError
    def set_shadow_offset_y(self, shadow_offset_y: float) -> None:
        raise NotImplementedError
    def shadow_blur(self) -> float:
        raise NotImplementedError
    def set_shadow_blur(self, shadow_blur: float) -> None:
        raise NotImplementedError
    def shadow_color(self) -> str:
        raise NotImplementedError
    def set_shadow_color(self, shadow_color: str) -> None:
        raise NotImplementedError
    def filter(self) -> str:
        raise NotImplementedError
    def set_filter(self, filter: str) -> None:
        raise NotImplementedError
    def clear_rect(self, x: float, y: float, w: float, h: float) -> None:
        raise NotImplementedError
    def fill_rect(self, x: float, y: float, w: float, h: float) -> None:
        raise NotImplementedError
    def stroke_rect(self, x: float, y: float, w: float, h: float) -> None:
        raise NotImplementedError
    def begin_path(self) -> None:
        raise NotImplementedError
    def fill(self, params: OffscreenCanvasRenderingContext2DFillParams) -> None:
        raise NotImplementedError
    def stroke(self, params: Optional[OffscreenCanvasRenderingContext2DStrokeParams]) -> None:
        raise NotImplementedError
    def clip(self, params: OffscreenCanvasRenderingContext2DClipParams) -> None:
        raise NotImplementedError
    def is_point_in_path(self, params: OffscreenCanvasRenderingContext2DIsPointInPathParams) -> bool:
        raise NotImplementedError
    def is_point_in_stroke(self, params: OffscreenCanvasRenderingContext2DIsPointInStrokeParams) -> bool:
        raise NotImplementedError
    def fill_text(self, text: str, x: float, y: float, max_width: Optional[float]) -> None:
        raise NotImplementedError
    def stroke_text(self, text: str, x: float, y: float, max_width: Optional[float]) -> None:
        raise NotImplementedError
    def measure_text(self, text: str) -> TextMetrics:
        raise NotImplementedError
    def draw_image(self, params: OffscreenCanvasRenderingContext2DDrawImageParams) -> None:
        raise NotImplementedError
    def create_image_data(self, params: OffscreenCanvasRenderingContext2DCreateImageDataParams) -> ImageData:
        raise NotImplementedError
    def get_image_data(self, sx: float, sy: float, sw: float, sh: float) -> ImageData:
        raise NotImplementedError
    def put_image_data(self, params: OffscreenCanvasRenderingContext2DPutImageDataParams) -> None:
        raise NotImplementedError
    def line_width(self) -> float:
        raise NotImplementedError
    def set_line_width(self, line_width: float) -> None:
        raise NotImplementedError
    def line_cap(self) -> str:
        raise NotImplementedError
    def set_line_cap(self, line_cap: str) -> None:
        raise NotImplementedError
    def line_join(self) -> str:
        raise NotImplementedError
    def set_line_join(self, line_join: str) -> None:
        raise NotImplementedError
    def miter_limit(self) -> float:
        raise NotImplementedError
    def set_miter_limit(self, miter_limit: float) -> None:
        raise NotImplementedError
    def set_line_dash(self, segments: List[float]) -> None:
        raise NotImplementedError
    def get_line_dash(self) -> List[float]:
        raise NotImplementedError
    def line_dash_offset(self) -> float:
        raise NotImplementedError
    def set_line_dash_offset(self, line_dash_offset: float) -> None:
        raise NotImplementedError
    def font(self) -> str:
        raise NotImplementedError
    def set_font(self, font: str) -> None:
        raise NotImplementedError
    def text_align(self) -> str:
        raise NotImplementedError
    def set_text_align(self, text_align: str) -> None:
        raise NotImplementedError
    def text_baseline(self) -> str:
        raise NotImplementedError
    def set_text_baseline(self, text_baseline: str) -> None:
        raise NotImplementedError
    def close_path(self) -> None:
        raise NotImplementedError
    def move_to(self, x: float, y: float) -> None:
        raise NotImplementedError
    def line_to(self, x: float, y: float) -> None:
        raise NotImplementedError
    def quadratic_curve_to(self, cpx: float, cpy: float, x: float, y: float) -> None:
        raise NotImplementedError
    def bezier_curve_to(self, cp1x: float, cp1y: float, cp2x: float, cp2y: float, x: float, y: float) -> None:
        raise NotImplementedError
    def arc_to(self, x1: float, y1: float, x2: float, y2: float, radius: float) -> None:
        raise NotImplementedError
    def rect(self, x: float, y: float, w: float, h: float) -> None:
        raise NotImplementedError
    def round_rect(self, x: float, y: float, w: float, h: float, radii: Optional[DomPointInitOrF64OrListDomPointInitOrF64]) -> None:
        raise NotImplementedError
    def arc(self, x: float, y: float, radius: float, start_angle: float, end_angle: float, anticlockwise: Optional[bool]) -> None:
        raise NotImplementedError
    def ellipse(self, x: float, y: float, radius_x: float, radius_y: float, rotation: float, start_angle: float, end_angle: float, anticlockwise: Optional[bool]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CheckerboardReason(Enum):
    SEVERE = 0
    RECENT = 1

@dataclass
class CheckerboardReport:
    severity: Optional[int]
    timestamp: Optional[DomTimeStamp]
    log: Optional[str]
    reason: Optional[CheckerboardReason]

class CheckerboardReportService:
    
    def is_recording_enabled(self) -> bool:
        """
        get-reports: func() -> list<checkerboard-report>;
        """
        raise NotImplementedError
    def set_recording_enabled(self, a_enabled: bool) -> None:
        raise NotImplementedError
    def flush_active_reports(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CssSupportsRule:
    
    def as_css_condition_rule(self) -> CssConditionRule:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class FileReader:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def read_as_array_buffer(self, blob: Blob) -> None:
        raise NotImplementedError
    def read_as_binary_string(self, filedata: Blob) -> None:
        raise NotImplementedError
    def read_as_text(self, blob: Blob, label: Optional[str]) -> None:
        raise NotImplementedError
    def read_as_data_url(self, blob: Blob) -> None:
        raise NotImplementedError
    def abort(self) -> None:
        raise NotImplementedError
    @classmethod
    def empty(cls) -> int:
        raise NotImplementedError
    @classmethod
    def loading(cls) -> int:
        raise NotImplementedError
    @classmethod
    def done(cls) -> int:
        raise NotImplementedError
    def ready_state(self) -> int:
        raise NotImplementedError
    def result(self) -> Any:
        raise NotImplementedError
    def error(self) -> Optional[DomException]:
        raise NotImplementedError
    def onloadstart(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onloadstart(self, onloadstart: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onprogress(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onprogress(self, onprogress: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onload(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onload(self, onload: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onabort(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onabort(self, onabort: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onloadend(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onloadend(self, onloadend: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class TrackEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class AudioTrackOrTextTrackOrVideoTrack_AudioTrack:
    value: AudioTrack


@dataclass
class AudioTrackOrTextTrackOrVideoTrack_TextTrack:
    value: TextTrack


@dataclass
class AudioTrackOrTextTrackOrVideoTrack_VideoTrack:
    value: VideoTrack


AudioTrackOrTextTrackOrVideoTrack = Union[AudioTrackOrTextTrackOrVideoTrack_AudioTrack, AudioTrackOrTextTrackOrVideoTrack_TextTrack, AudioTrackOrTextTrackOrVideoTrack_VideoTrack]


@dataclass
class TrackEventInit:
    track: Optional[AudioTrackOrTextTrackOrVideoTrack]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class XsltProcessor:
    
    def import_stylesheet(self, style: Node) -> None:
        raise NotImplementedError
    def transform_to_fragment(self, source: Node, output: Document) -> DocumentFragment:
        raise NotImplementedError
    def transform_to_document(self, source: Node) -> Document:
        raise NotImplementedError
    def set_parameter(self, namespace_uri: str, local_name: str, value: Any) -> None:
        raise NotImplementedError
    def get_parameter(self, namespace_uri: str, local_name: str) -> Optional[NsIVariant]:
        raise NotImplementedError
    def remove_parameter(self, namespace_uri: str, local_name: str) -> None:
        raise NotImplementedError
    def clear_parameters(self) -> None:
        raise NotImplementedError
    def reset(self) -> None:
        raise NotImplementedError
    @classmethod
    def disable_all_loads(cls) -> int:
        raise NotImplementedError
    def flags(self) -> int:
        raise NotImplementedError
    def set_flags(self, flags: int) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgfeComponentTransferElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def in1(self) -> SvgAnimatedString:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def result(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class UserProximityEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def near(self) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class UserProximityEventInit:
    near: Optional[bool]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class ReadableStreamReaderMode(Enum):
    BYOB = 0

@dataclass
class ReadableStreamGetReaderOptions:
    mode: Optional[ReadableStreamReaderMode]

@dataclass
class ReadableStreamIteratorOptions:
    prevent_cancel: Optional[bool]

class ReadableStreamType(Enum):
    BYTES = 0

@dataclass
class UnderlyingSource:
    start: Optional[UnderlyingSourceStartCallback]
    pull: Optional[UnderlyingSourcePullCallback]
    cancel: Optional[UnderlyingSourceCancelCallback]
    type: Optional[ReadableStreamType]
    auto_allocate_chunk_size: Optional[int]

@dataclass
class ReadableStreamReadResult:
    value: Any
    done: Optional[bool]

class ReadableStreamDefaultReader:
    
    def __init__(self, stream: ReadableStream):
        raise NotImplementedError

    def read(self) -> ReadableStreamReadResult:
        raise NotImplementedError
    def release_lock(self) -> None:
        raise NotImplementedError
    def cancel(self, reason: Any) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ReadableStreamByobReader:
    
    def __init__(self, stream: ReadableStream):
        raise NotImplementedError

    def read(self, view: ArrayBufferView) -> ReadableStreamReadResult:
        raise NotImplementedError
    def release_lock(self) -> None:
        raise NotImplementedError
    def cancel(self, reason: Any) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class ReadableStreamByobReaderOrReadableStreamDefaultReader_ReadableStreamByobReader:
    value: ReadableStreamByobReader


@dataclass
class ReadableStreamByobReaderOrReadableStreamDefaultReader_ReadableStreamDefaultReader:
    value: ReadableStreamDefaultReader


ReadableStreamByobReaderOrReadableStreamDefaultReader = Union[ReadableStreamByobReaderOrReadableStreamDefaultReader_ReadableStreamByobReader, ReadableStreamByobReaderOrReadableStreamDefaultReader_ReadableStreamDefaultReader]


class ReadableStreamDefaultController:
    
    def desired_size(self) -> float:
        raise NotImplementedError
    def close(self) -> None:
        raise NotImplementedError
    def enqueue(self, chunk: Any) -> None:
        raise NotImplementedError
    def error(self, e: Any) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ReadableStreamByobRequest:
    
    def view(self) -> ArrayBufferView:
        raise NotImplementedError
    def respond(self, bytes_written: int) -> None:
        raise NotImplementedError
    def respond_with_new_view(self, view: ArrayBufferView) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class ReadableByteStreamController:
    
    def byob_request(self) -> Optional[ReadableStreamByobRequest]:
        raise NotImplementedError
    def desired_size(self) -> float:
        raise NotImplementedError
    def close(self) -> None:
        raise NotImplementedError
    def enqueue(self, chunk: ArrayBufferView) -> None:
        raise NotImplementedError
    def error(self, e: Any) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class ReadableByteStreamControllerOrReadableStreamDefaultController_ReadableByteStreamController:
    value: ReadableByteStreamController


@dataclass
class ReadableByteStreamControllerOrReadableStreamDefaultController_ReadableStreamDefaultController:
    value: ReadableStreamDefaultController


ReadableByteStreamControllerOrReadableStreamDefaultController = Union[ReadableByteStreamControllerOrReadableStreamDefaultController_ReadableByteStreamController, ReadableByteStreamControllerOrReadableStreamDefaultController_ReadableStreamDefaultController]


@dataclass
class UnderlyingSink:
    start: Optional[UnderlyingSinkStartCallback]
    write: Optional[UnderlyingSinkWriteCallback]
    close: Optional[UnderlyingSinkCloseCallback]
    abort: Optional[UnderlyingSinkAbortCallback]
    type: Any

class WritableStreamDefaultController:
    
    def signal(self) -> AbortSignal:
        raise NotImplementedError
    def error(self, e: Any) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class TransformStream:
    
    def __init__(self, transformer: Optional[Object], writable_strategy: Optional[QueuingStrategy], readable_strategy: Optional[QueuingStrategy]):
        raise NotImplementedError

    def readable(self) -> ReadableStream:
        raise NotImplementedError
    def writable(self) -> WritableStream:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class Transformer:
    start: Optional[TransformerStartCallback]
    transform: Optional[TransformerTransformCallback]
    flush: Optional[TransformerFlushCallback]
    readable_type: Any
    writable_type: Any

class TransformStreamDefaultController:
    
    def desired_size(self) -> float:
        raise NotImplementedError
    def enqueue(self, chunk: Any) -> None:
        raise NotImplementedError
    def error(self, reason: Any) -> None:
        raise NotImplementedError
    def terminate(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class QueuingStrategyInit:
    high_water_mark: float

class ByteLengthQueuingStrategy:
    
    def __init__(self, init: QueuingStrategyInit):
        raise NotImplementedError

    def high_water_mark(self) -> float:
        raise NotImplementedError
    def size(self) -> Function:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CountQueuingStrategy:
    
    def __init__(self, init: QueuingStrategyInit):
        raise NotImplementedError

    def high_water_mark(self) -> float:
        raise NotImplementedError
    def size(self) -> Function:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgTextPathElement:
    
    def as_svg_text_content_element(self) -> SvgTextContentElement:
        raise NotImplementedError
    @classmethod
    def textpath_methodtype_unknown(cls) -> int:
        raise NotImplementedError
    @classmethod
    def textpath_methodtype_align(cls) -> int:
        raise NotImplementedError
    @classmethod
    def textpath_methodtype_stretch(cls) -> int:
        raise NotImplementedError
    @classmethod
    def textpath_spacingtype_unknown(cls) -> int:
        raise NotImplementedError
    @classmethod
    def textpath_spacingtype_auto(cls) -> int:
        raise NotImplementedError
    @classmethod
    def textpath_spacingtype_exact(cls) -> int:
        raise NotImplementedError
    def start_offset(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def method(self) -> SvgAnimatedEnumeration:
        raise NotImplementedError
    def spacing(self) -> SvgAnimatedEnumeration:
        raise NotImplementedError
    def href(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlliElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def value(self) -> int:
        raise NotImplementedError
    def set_value(self, value: int) -> None:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def set_type(self, type: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PerformanceMeasure:
    
    def as_performance_entry(self) -> PerformanceEntry:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MidiMessageEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def data(self) -> Uint8Array:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class MidiMessageEventInit:
    data: Optional[Uint8Array]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class CssCounterStyleRule:
    
    def as_css_rule(self) -> CssRule:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def set_name(self, name: str) -> None:
        raise NotImplementedError
    def system(self) -> str:
        raise NotImplementedError
    def set_system(self, system: str) -> None:
        raise NotImplementedError
    def symbols(self) -> str:
        raise NotImplementedError
    def set_symbols(self, symbols: str) -> None:
        raise NotImplementedError
    def additive_symbols(self) -> str:
        raise NotImplementedError
    def set_additive_symbols(self, additive_symbols: str) -> None:
        raise NotImplementedError
    def negative(self) -> str:
        raise NotImplementedError
    def set_negative(self, negative: str) -> None:
        raise NotImplementedError
    def prefix(self) -> str:
        raise NotImplementedError
    def set_prefix(self, prefix: str) -> None:
        raise NotImplementedError
    def suffix(self) -> str:
        raise NotImplementedError
    def set_suffix(self, suffix: str) -> None:
        raise NotImplementedError
    def range(self) -> str:
        raise NotImplementedError
    def set_range(self, range: str) -> None:
        raise NotImplementedError
    def pad(self) -> str:
        raise NotImplementedError
    def set_pad(self, pad: str) -> None:
        raise NotImplementedError
    def speak_as(self) -> str:
        raise NotImplementedError
    def set_speak_as(self, speak_as: str) -> None:
        raise NotImplementedError
    def fallback(self) -> str:
        raise NotImplementedError
    def set_fallback(self, fallback: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgPolylineElement:
    
    def as_svg_geometry_element(self) -> SvgGeometryElement:
        raise NotImplementedError
    def points(self) -> SvgPointList:
        raise NotImplementedError
    def animated_points(self) -> SvgPointList:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgSetElement:
    
    def as_svg_animation_element(self) -> SvgAnimationElement:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class GainOptions:
    gain: Optional[float]
    channel_count: Optional[int]
    channel_count_mode: Optional[ChannelCountMode]
    channel_interpretation: Optional[ChannelInterpretation]

class ExtendableMessageEvent:
    
    def as_extendable_event(self) -> ExtendableEvent:
        raise NotImplementedError
    def data(self) -> Any:
        raise NotImplementedError
    def origin(self) -> str:
        raise NotImplementedError
    def last_event_id(self) -> str:
        raise NotImplementedError
    def ports(self) -> List[MessagePort]:
        """
        source: func() -> client-or-message-port-or-service-worker;
        """
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class ClientOrMessagePortOrServiceWorker_Client:
    value: Client


@dataclass
class ClientOrMessagePortOrServiceWorker_MessagePort:
    value: MessagePort


@dataclass
class ClientOrMessagePortOrServiceWorker_ServiceWorker:
    value: ServiceWorker


ClientOrMessagePortOrServiceWorker = Union[ClientOrMessagePortOrServiceWorker_Client, ClientOrMessagePortOrServiceWorker_MessagePort, ClientOrMessagePortOrServiceWorker_ServiceWorker]


@dataclass
class ExtendableMessageEventInit:
    data: Any
    origin: Optional[str]
    last_event_id: Optional[str]
    source: Optional[ClientOrMessagePortOrServiceWorker]
    ports: Optional[List[MessagePort]]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class BrowserFindCaseSensitivity(Enum):
    CASE_SENSITIVE = 0
    CASE_INSENSITIVE = 1

class BrowserFindDirection(Enum):
    FORWARD = 0
    BACKWARD = 1

@dataclass
class BrowserElementDownloadOptions:
    filename: Optional[str]
    referrer: Optional[str]

@dataclass
class BrowserElementExecuteScriptOptions:
    url: Optional[str]
    origin: Optional[str]

@dataclass
class SpeechSynthesisEventInit:
    utterance: SpeechSynthesisUtterance
    char_index: Optional[int]
    char_length: Optional[int]
    elapsed_time: Optional[float]
    name: Optional[str]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class PresentationConnectionClosedReason(Enum):
    ERROR = 0
    CLOSED = 1
    WENTAWAY = 2

class PresentationConnectionCloseEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def reason(self) -> PresentationConnectionClosedReason:
        raise NotImplementedError
    def message(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class PresentationConnectionCloseEventInit:
    reason: PresentationConnectionClosedReason
    message: Optional[str]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class StyleSheetChangeEventInit:
    stylesheet: Optional[Some[Optional[CssStyleSheet]]]
    document_sheet: Optional[bool]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class StyleSheetApplicableStateChangeEventInit:
    stylesheet: Optional[Some[Optional[CssStyleSheet]]]
    applicable: Optional[bool]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class HtmlhrElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def align(self) -> str:
        raise NotImplementedError
    def set_align(self, align: str) -> None:
        raise NotImplementedError
    def color(self) -> str:
        raise NotImplementedError
    def set_color(self, color: str) -> None:
        raise NotImplementedError
    def no_shade(self) -> bool:
        raise NotImplementedError
    def set_no_shade(self, no_shade: bool) -> None:
        raise NotImplementedError
    def size(self) -> str:
        raise NotImplementedError
    def set_size(self, size: str) -> None:
        raise NotImplementedError
    def width(self) -> str:
        raise NotImplementedError
    def set_width(self, width: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class RtcCertificateExpiration:
    expires: Optional[DomTimeStamp]

@dataclass
class RtcConfiguration:
    ice_servers: Optional[List[RtcIceServer]]
    ice_transport_policy: Optional[RtcIceTransportPolicy]
    bundle_policy: Optional[RtcBundlePolicy]
    peer_identity: Optional[str]
    certificates: Optional[List[RtcCertificate]]


@dataclass
class DirectoryOrFile_Directory:
    value: Directory


@dataclass
class DirectoryOrFile_File:
    value: File


DirectoryOrFile = Union[DirectoryOrFile_Directory, DirectoryOrFile_File]


@dataclass
class FilePropertyBag:
    type: Optional[str]
    last_modified: Optional[int]

@dataclass
class ChromeFilePropertyBag:
    name: Optional[str]
    existence_check: Optional[bool]
    type: Optional[str]
    last_modified: Optional[int]

class HtmlLegendElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def form(self) -> Optional[HtmlFormElement]:
        raise NotImplementedError
    def align(self) -> str:
        raise NotImplementedError
    def set_align(self, align: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class WaveShaperOptions:
    curve: Optional[List[float]]
    oversample: Optional[OverSampleType]
    channel_count: Optional[int]
    channel_count_mode: Optional[ChannelCountMode]
    channel_interpretation: Optional[ChannelInterpretation]

@dataclass
class GamepadAxisMoveEventInit:
    axis: Optional[int]
    value: Optional[float]
    gamepad: Optional[Some[Optional[Gamepad]]]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class GamepadButtonEventInit:
    button: Optional[int]
    gamepad: Optional[Some[Optional[Gamepad]]]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class GamepadEventInit:
    gamepad: Optional[Some[Optional[Gamepad]]]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class ChannelMergerOptions:
    number_of_inputs: Optional[int]
    channel_count: Optional[int]
    channel_count_mode: Optional[ChannelCountMode]
    channel_interpretation: Optional[ChannelInterpretation]

class SvgZoomAndPan:
    
    @classmethod
    def svg_zoomandpan_unknown(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_zoomandpan_disable(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_zoomandpan_magnify(cls) -> int:
        raise NotImplementedError
    def zoom_and_pan(self) -> int:
        raise NotImplementedError
    def set_zoom_and_pan(self, zoom_and_pan: int) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SecurityPolicyViolationEventDisposition(Enum):
    ENFORCE = 0
    REPORT = 1

class SecurityPolicyViolationEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def document_uri(self) -> str:
        raise NotImplementedError
    def referrer(self) -> str:
        raise NotImplementedError
    def blocked_uri(self) -> str:
        raise NotImplementedError
    def violated_directive(self) -> str:
        raise NotImplementedError
    def effective_directive(self) -> str:
        raise NotImplementedError
    def original_policy(self) -> str:
        raise NotImplementedError
    def source_file(self) -> str:
        raise NotImplementedError
    def sample(self) -> str:
        raise NotImplementedError
    def disposition(self) -> SecurityPolicyViolationEventDisposition:
        raise NotImplementedError
    def status_code(self) -> int:
        raise NotImplementedError
    def line_number(self) -> int:
        raise NotImplementedError
    def column_number(self) -> int:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class SecurityPolicyViolationEventInit:
    document_uri: Optional[str]
    referrer: Optional[str]
    blocked_uri: Optional[str]
    violated_directive: Optional[str]
    effective_directive: Optional[str]
    original_policy: Optional[str]
    source_file: Optional[str]
    sample: Optional[str]
    disposition: Optional[SecurityPolicyViolationEventDisposition]
    status_code: Optional[int]
    line_number: Optional[int]
    column_number: Optional[int]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class StyleRuleChangeEventInit:
    stylesheet: Optional[Some[Optional[CssStyleSheet]]]
    rule: Optional[Some[Optional[CssRule]]]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class HtmlFieldSetElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def disabled(self) -> bool:
        raise NotImplementedError
    def set_disabled(self, disabled: bool) -> None:
        raise NotImplementedError
    def form(self) -> Optional[HtmlFormElement]:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def set_name(self, name: str) -> None:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def elements(self) -> HtmlCollection:
        raise NotImplementedError
    def will_validate(self) -> bool:
        raise NotImplementedError
    def validity(self) -> ValidityState:
        raise NotImplementedError
    def validation_message(self) -> str:
        raise NotImplementedError
    def check_validity(self) -> bool:
        raise NotImplementedError
    def report_validity(self) -> bool:
        raise NotImplementedError
    def set_custom_validity(self, error: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class AudioWorkletProcessor:
    
    def port(self) -> MessagePort:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlPictureElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PerformanceTiming:
    
    def navigation_start(self) -> int:
        raise NotImplementedError
    def unload_event_start(self) -> int:
        raise NotImplementedError
    def unload_event_end(self) -> int:
        raise NotImplementedError
    def redirect_start(self) -> int:
        raise NotImplementedError
    def redirect_end(self) -> int:
        raise NotImplementedError
    def fetch_start(self) -> int:
        raise NotImplementedError
    def domain_lookup_start(self) -> int:
        raise NotImplementedError
    def domain_lookup_end(self) -> int:
        raise NotImplementedError
    def connect_start(self) -> int:
        raise NotImplementedError
    def connect_end(self) -> int:
        raise NotImplementedError
    def secure_connection_start(self) -> int:
        raise NotImplementedError
    def request_start(self) -> int:
        raise NotImplementedError
    def response_start(self) -> int:
        raise NotImplementedError
    def response_end(self) -> int:
        raise NotImplementedError
    def dom_loading(self) -> int:
        raise NotImplementedError
    def dom_interactive(self) -> int:
        raise NotImplementedError
    def dom_content_loaded_event_start(self) -> int:
        raise NotImplementedError
    def dom_content_loaded_event_end(self) -> int:
        raise NotImplementedError
    def dom_complete(self) -> int:
        raise NotImplementedError
    def load_event_start(self) -> int:
        raise NotImplementedError
    def load_event_end(self) -> int:
        raise NotImplementedError
    def time_to_non_blank_paint(self) -> int:
        raise NotImplementedError
    def time_to_dom_content_flushed(self) -> int:
        raise NotImplementedError
    def to_json(self) -> Object:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgTitleElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PcImplSignalingState(Enum):
    SIGNALING_INVALID = 0
    SIGNALING_STABLE = 1
    SIGNALING_HAVE_LOCAL_OFFER = 2
    SIGNALING_HAVE_REMOTE_OFFER = 3
    SIGNALING_HAVE_LOCAL_PRANSWER = 4
    SIGNALING_HAVE_REMOTE_PRANSWER = 5
    SIGNALING_CLOSED = 6

class PcImplIceConnectionState(Enum):
    NEW = 0
    CHECKING = 1
    CONNECTED = 2
    COMPLETED = 3
    FAILED = 4
    DISCONNECTED = 5
    CLOSED = 6

class PcImplIceGatheringState(Enum):
    NEW = 0
    GATHERING = 1
    COMPLETE = 2

class NotificationEvent:
    
    def as_extendable_event(self) -> ExtendableEvent:
        raise NotImplementedError
    def notification(self) -> Notification:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class NotificationEventInit:
    notification: Notification
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class ClipboardEventInit:
    clipboard_data: Optional[Some[Optional[DataTransfer]]]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class ClipboardEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def __init__(self, type: str, event_init_dict: Optional[ClipboardEventInit]):
        raise NotImplementedError

    def clipboard_data(self) -> Optional[DataTransfer]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HashChangeEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def old_url(self) -> str:
        raise NotImplementedError
    def new_url(self) -> str:
        raise NotImplementedError
    def init_hash_change_event(self, type_arg: str, can_bubble_arg: Optional[bool], cancelable_arg: Optional[bool], old_url_arg: Optional[str], new_url_arg: Optional[str]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class HashChangeEventInit:
    old_url: Optional[str]
    new_url: Optional[str]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class HtmlBaseElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def href(self) -> str:
        raise NotImplementedError
    def set_href(self, href: str) -> None:
        raise NotImplementedError
    def target(self) -> str:
        raise NotImplementedError
    def set_target(self, target: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DeviceAcceleration:
    
    def x(self) -> float:
        raise NotImplementedError
    def y(self) -> float:
        raise NotImplementedError
    def z(self) -> float:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DeviceRotationRate:
    
    def alpha(self) -> float:
        raise NotImplementedError
    def beta(self) -> float:
        raise NotImplementedError
    def gamma(self) -> float:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class DeviceMotionEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def acceleration(self) -> Optional[DeviceAcceleration]:
        raise NotImplementedError
    def acceleration_including_gravity(self) -> Optional[DeviceAcceleration]:
        raise NotImplementedError
    def rotation_rate(self) -> Optional[DeviceRotationRate]:
        raise NotImplementedError
    def interval(self) -> float:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class DeviceAccelerationInit:
    x: Optional[float]
    y: Optional[float]
    z: Optional[float]

@dataclass
class DeviceRotationRateInit:
    alpha: Optional[float]
    beta: Optional[float]
    gamma: Optional[float]

@dataclass
class DeviceMotionEventInit:
    acceleration: Optional[DeviceAccelerationInit]
    acceleration_including_gravity: Optional[DeviceAccelerationInit]
    rotation_rate: Optional[DeviceRotationRateInit]
    interval: Optional[float]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class CustomEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def detail(self) -> Any:
        raise NotImplementedError
    def init_custom_event(self, type: str, can_bubble: Optional[bool], cancelable: Optional[bool], detail: Any) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class CustomEventInit:
    detail: Any
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class TouchEventInit:
    touches: Optional[List[Touch]]
    target_touches: Optional[List[Touch]]
    changed_touches: Optional[List[Touch]]
    ctrl_key: Optional[bool]
    shift_key: Optional[bool]
    alt_key: Optional[bool]
    meta_key: Optional[bool]
    modifier_alt_graph: Optional[bool]
    modifier_caps_lock: Optional[bool]
    modifier_fn: Optional[bool]
    modifier_fn_lock: Optional[bool]
    modifier_num_lock: Optional[bool]
    modifier_os: Optional[bool]
    modifier_scroll_lock: Optional[bool]
    modifier_symbol: Optional[bool]
    modifier_symbol_lock: Optional[bool]
    view: Optional[Some[Optional[Window]]]
    detail: Optional[int]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class TouchEvent:
    
    def as_ui_event(self) -> UiEvent:
        raise NotImplementedError
    def touches(self) -> TouchList:
        raise NotImplementedError
    def target_touches(self) -> TouchList:
        raise NotImplementedError
    def changed_touches(self) -> TouchList:
        raise NotImplementedError
    def alt_key(self) -> bool:
        raise NotImplementedError
    def meta_key(self) -> bool:
        raise NotImplementedError
    def ctrl_key(self) -> bool:
        raise NotImplementedError
    def shift_key(self) -> bool:
        raise NotImplementedError
    def init_touch_event(self, type: str, can_bubble: Optional[bool], cancelable: Optional[bool], view: Optional[Some[Optional[Window]]], detail: Optional[int], ctrl_key: Optional[bool], alt_key: Optional[bool], shift_key: Optional[bool], meta_key: Optional[bool], touches: Optional[Some[Optional[TouchList]]], target_touches: Optional[Some[Optional[TouchList]]], changed_touches: Optional[Some[Optional[TouchList]]]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlObjectElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def data(self) -> str:
        raise NotImplementedError
    def set_data(self, data: str) -> None:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def set_type(self, type: str) -> None:
        raise NotImplementedError
    def type_must_match(self) -> bool:
        raise NotImplementedError
    def set_type_must_match(self, type_must_match: bool) -> None:
        raise NotImplementedError
    def name(self) -> str:
        raise NotImplementedError
    def set_name(self, name: str) -> None:
        raise NotImplementedError
    def use_map(self) -> str:
        raise NotImplementedError
    def set_use_map(self, use_map: str) -> None:
        raise NotImplementedError
    def form(self) -> Optional[HtmlFormElement]:
        raise NotImplementedError
    def width(self) -> str:
        raise NotImplementedError
    def set_width(self, width: str) -> None:
        raise NotImplementedError
    def height(self) -> str:
        raise NotImplementedError
    def set_height(self, height: str) -> None:
        raise NotImplementedError
    def content_document(self) -> Optional[Document]:
        raise NotImplementedError
    def content_window(self) -> Optional[WindowProxy]:
        raise NotImplementedError
    def will_validate(self) -> bool:
        raise NotImplementedError
    def validity(self) -> ValidityState:
        raise NotImplementedError
    def validation_message(self) -> str:
        raise NotImplementedError
    def check_validity(self) -> bool:
        raise NotImplementedError
    def report_validity(self) -> bool:
        raise NotImplementedError
    def set_custom_validity(self, error: str) -> None:
        raise NotImplementedError
    def align(self) -> str:
        raise NotImplementedError
    def set_align(self, align: str) -> None:
        raise NotImplementedError
    def archive(self) -> str:
        raise NotImplementedError
    def set_archive(self, archive: str) -> None:
        raise NotImplementedError
    def code(self) -> str:
        raise NotImplementedError
    def set_code(self, code: str) -> None:
        raise NotImplementedError
    def declare(self) -> bool:
        raise NotImplementedError
    def set_declare(self, declare: bool) -> None:
        raise NotImplementedError
    def hspace(self) -> int:
        raise NotImplementedError
    def set_hspace(self, hspace: int) -> None:
        raise NotImplementedError
    def standby(self) -> str:
        raise NotImplementedError
    def set_standby(self, standby: str) -> None:
        raise NotImplementedError
    def vspace(self) -> int:
        raise NotImplementedError
    def set_vspace(self, vspace: int) -> None:
        raise NotImplementedError
    def code_base(self) -> str:
        raise NotImplementedError
    def set_code_base(self, code_base: str) -> None:
        raise NotImplementedError
    def code_type(self) -> str:
        raise NotImplementedError
    def set_code_type(self, code_type: str) -> None:
        raise NotImplementedError
    def border(self) -> str:
        raise NotImplementedError
    def set_border(self, border: str) -> None:
        raise NotImplementedError
    def get_svg_document(self) -> Optional[Document]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CssStyleRule:
    
    def as_css_rule(self) -> CssRule:
        raise NotImplementedError
    def selector_text(self) -> str:
        raise NotImplementedError
    def set_selector_text(self, selector_text: str) -> None:
        raise NotImplementedError
    def style(self) -> CssStyleDeclaration:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgfeGaussianBlurElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def in1(self) -> SvgAnimatedString:
        raise NotImplementedError
    def std_deviation_x(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def std_deviation_y(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def set_std_deviation(self, std_deviation_x: float, std_deviation_y: float) -> None:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def result(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SpeechSynthesisErrorCode(Enum):
    CANCELED = 0
    INTERRUPTED = 1
    AUDIO_BUSY = 2
    AUDIO_HARDWARE = 3
    NETWORK = 4
    SYNTHESIS_UNAVAILABLE = 5
    SYNTHESIS_FAILED = 6
    LANGUAGE_UNAVAILABLE = 7
    VOICE_UNAVAILABLE = 8
    TEXT_TOO_LONG = 9
    INVALID_ARGUMENT = 10

class SpeechSynthesisErrorEvent:
    
    def as_speech_synthesis_event(self) -> SpeechSynthesisEvent:
        raise NotImplementedError
    def error(self) -> SpeechSynthesisErrorCode:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class SpeechSynthesisErrorEventInit:
    error: SpeechSynthesisErrorCode
    utterance: SpeechSynthesisUtterance
    char_index: Optional[int]
    char_length: Optional[int]
    elapsed_time: Optional[float]
    name: Optional[str]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class SvgPolygonElement:
    
    def as_svg_geometry_element(self) -> SvgGeometryElement:
        raise NotImplementedError
    def points(self) -> SvgPointList:
        raise NotImplementedError
    def animated_points(self) -> SvgPointList:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class KeyIdsInitData:
    kids: List[str]

class OfflineResourceList:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    @classmethod
    def uncached(cls) -> int:
        raise NotImplementedError
    @classmethod
    def idle(cls) -> int:
        raise NotImplementedError
    @classmethod
    def checking(cls) -> int:
        raise NotImplementedError
    @classmethod
    def downloading(cls) -> int:
        raise NotImplementedError
    @classmethod
    def updateready(cls) -> int:
        raise NotImplementedError
    @classmethod
    def obsolete(cls) -> int:
        raise NotImplementedError
    def status(self) -> int:
        raise NotImplementedError
    def update(self) -> None:
        raise NotImplementedError
    def swap_cache(self) -> None:
        raise NotImplementedError
    def onchecking(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onchecking(self, onchecking: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onnoupdate(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onnoupdate(self, onnoupdate: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def ondownloading(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_ondownloading(self, ondownloading: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onprogress(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onprogress(self, onprogress: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onupdateready(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onupdateready(self, onupdateready: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def oncached(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_oncached(self, oncached: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onobsolete(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onobsolete(self, onobsolete: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgfeDisplacementMapElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    @classmethod
    def svg_channel_unknown(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_channel_r(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_channel_g(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_channel_b(cls) -> int:
        raise NotImplementedError
    @classmethod
    def svg_channel_a(cls) -> int:
        raise NotImplementedError
    def in1(self) -> SvgAnimatedString:
        raise NotImplementedError
    def in2(self) -> SvgAnimatedString:
        raise NotImplementedError
    def scale(self) -> SvgAnimatedNumber:
        raise NotImplementedError
    def x_channel_selector(self) -> SvgAnimatedEnumeration:
        raise NotImplementedError
    def y_channel_selector(self) -> SvgAnimatedEnumeration:
        raise NotImplementedError
    def x(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def y(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def width(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def height(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def result(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgScriptElement:
    
    def as_svg_element(self) -> SvgElement:
        raise NotImplementedError
    def type(self) -> str:
        raise NotImplementedError
    def set_type(self, type: str) -> None:
        raise NotImplementedError
    def cross_origin(self) -> str:
        raise NotImplementedError
    def set_cross_origin(self, cross_origin: str) -> None:
        raise NotImplementedError
    def href(self) -> SvgAnimatedString:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class MediaSourceReadyState(Enum):
    CLOSED = 0
    OPEN = 1
    ENDED = 2

class MediaSourceEndOfStreamError(Enum):
    NETWORK = 0
    DECODE = 1

class MediaSource:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def source_buffers(self) -> SourceBufferList:
        raise NotImplementedError
    def active_source_buffers(self) -> SourceBufferList:
        raise NotImplementedError
    def ready_state(self) -> MediaSourceReadyState:
        raise NotImplementedError
    def duration(self) -> float:
        raise NotImplementedError
    def set_duration(self, duration: float) -> None:
        raise NotImplementedError
    def onsourceopen(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onsourceopen(self, onsourceopen: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onsourceended(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onsourceended(self, onsourceended: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onsourceclose(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onsourceclose(self, onsourceclose: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def add_source_buffer(self, type: str) -> SourceBuffer:
        raise NotImplementedError
    def remove_source_buffer(self, source_buffer: SourceBuffer) -> None:
        raise NotImplementedError
    def end_of_stream(self, error: Optional[MediaSourceEndOfStreamError]) -> None:
        raise NotImplementedError
    def set_live_seekable_range(self, start: float, end: float) -> None:
        raise NotImplementedError
    def clear_live_seekable_range(self) -> None:
        raise NotImplementedError
    @classmethod
    def is_type_supported(cls, type: str) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class TcpSocketEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def data(self) -> Any:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class TcpSocketEventInit:
    data: Any
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class MediaStreamEventInit:
    stream: Optional[Some[Optional[MediaStream]]]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class MediaStreamEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def stream(self) -> Optional[MediaStream]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class BlobEventInit:
    data: Optional[Some[Optional[Blob]]]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]


@dataclass
class BlobOrDirectoryOrString_Blob:
    value: Blob


@dataclass
class BlobOrDirectoryOrString_Directory:
    value: Directory


@dataclass
class BlobOrDirectoryOrString_String:
    value: str


BlobOrDirectoryOrString = Union[BlobOrDirectoryOrString_Blob, BlobOrDirectoryOrString_Directory, BlobOrDirectoryOrString_String]


@dataclass
class RequestInit:
    method: Optional[str]
    headers: Optional[HeadersOrListListStringOrRecordString]
    body: Optional[Some[Optional[BlobOrBufferSourceOrFormDataOrReadableStreamOrStringOrUrlSearchParams]]]
    referrer: Optional[str]
    referrer_policy: Optional[ReferrerPolicy]
    mode: Optional[RequestMode]
    credentials: Optional[RequestCredentials]
    cache: Optional[RequestCache]
    redirect: Optional[RequestRedirect]
    integrity: Optional[str]
    signal: Optional[Some[Optional[AbortSignal]]]
    observe: Optional[ObserverCallback]

class EndingTypes(Enum):
    TRANSPARENT = 0
    NATIVE = 1

@dataclass
class BlobPropertyBag:
    type: Optional[str]
    endings: Optional[EndingTypes]

class CaretChangedReason(Enum):
    VISIBILITYCHANGE = 0
    UPDATEPOSITION = 1
    LONGPRESSONEMPTYCONTENT = 2
    TAPONCARET = 3
    PRESSCARET = 4
    RELEASECARET = 5
    SCROLL = 6

@dataclass
class CaretStateChangedEventInit:
    collapsed: Optional[bool]
    bounding_client_rect: Optional[Some[Optional[DomRectReadOnly]]]
    reason: Optional[CaretChangedReason]
    caret_visible: Optional[bool]
    caret_visually_visible: Optional[bool]
    selection_visible: Optional[bool]
    selection_editable: Optional[bool]
    selected_text_content: Optional[str]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class CaretStateChangedEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def collapsed(self) -> bool:
        raise NotImplementedError
    def bounding_client_rect(self) -> Optional[DomRectReadOnly]:
        raise NotImplementedError
    def reason(self) -> CaretChangedReason:
        raise NotImplementedError
    def caret_visible(self) -> bool:
        raise NotImplementedError
    def caret_visually_visible(self) -> bool:
        raise NotImplementedError
    def selection_visible(self) -> bool:
        raise NotImplementedError
    def selection_editable(self) -> bool:
        raise NotImplementedError
    def selected_text_content(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class DelayOptions:
    max_delay_time: Optional[float]
    delay_time: Optional[float]
    channel_count: Optional[int]
    channel_count_mode: Optional[ChannelCountMode]
    channel_interpretation: Optional[ChannelInterpretation]


@dataclass
class IdbCursorOrIdbIndexOrIdbObjectStore_IdbCursor:
    value: IdbCursor


@dataclass
class IdbCursorOrIdbIndexOrIdbObjectStore_IdbIndex:
    value: IdbIndex


@dataclass
class IdbCursorOrIdbIndexOrIdbObjectStore_IdbObjectStore:
    value: IdbObjectStore


IdbCursorOrIdbIndexOrIdbObjectStore = Union[IdbCursorOrIdbIndexOrIdbObjectStore_IdbCursor, IdbCursorOrIdbIndexOrIdbObjectStore_IdbIndex, IdbCursorOrIdbIndexOrIdbObjectStore_IdbObjectStore]



@dataclass
class IdbIndexOrIdbObjectStore_IdbIndex:
    value: IdbIndex


@dataclass
class IdbIndexOrIdbObjectStore_IdbObjectStore:
    value: IdbObjectStore


IdbIndexOrIdbObjectStore = Union[IdbIndexOrIdbObjectStore_IdbIndex, IdbIndexOrIdbObjectStore_IdbObjectStore]


@dataclass
class FakePluginMimeEntry:
    type: str
    description: Optional[str]
    extension: Optional[str]

@dataclass
class FakePluginTagInit:
    handler_uri: str
    mime_entries: List[FakePluginMimeEntry]
    nice_name: Optional[str]
    full_path: Optional[str]
    name: Optional[str]
    description: Optional[str]
    file_name: Optional[str]
    version: Optional[str]
    sandbox_script: Optional[str]

class SvgEllipseElement:
    
    def as_svg_geometry_element(self) -> SvgGeometryElement:
        raise NotImplementedError
    def cx(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def cy(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def rx(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def ry(self) -> SvgAnimatedLength:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class IterationCompositeOperation(Enum):
    REPLACE = 0
    ACCUMULATE = 1

@dataclass
class KeyframeEffectOptions:
    iteration_composite: Optional[IterationCompositeOperation]
    composite: Optional[CompositeOperation]
    delay: Optional[float]
    end_delay: Optional[float]
    fill: Optional[FillMode]
    iteration_start: Optional[float]
    iterations: Optional[float]
    duration: Optional[F64OrString]
    direction: Optional[PlaybackDirection]
    easing: Optional[str]


@dataclass
class CssPseudoElementOrElement_CssPseudoElement:
    value: CssPseudoElement


@dataclass
class CssPseudoElementOrElement_Element:
    value: Element


CssPseudoElementOrElement = Union[CssPseudoElementOrElement_CssPseudoElement, CssPseudoElementOrElement_Element]


@dataclass
class AnimationPropertyValueDetails:
    offset: float
    value: Optional[str]
    easing: Optional[str]
    composite: CompositeOperation

@dataclass
class AnimationPropertyDetails:
    property: str
    running_on_compositor: bool
    warning: Optional[str]
    values: List[AnimationPropertyValueDetails]

class KeyframeEffect:
    
    def as_animation_effect(self) -> AnimationEffect:
        raise NotImplementedError
    def set_target(self, target: CssPseudoElementOrElement) -> None:
        """
        target: func() -> css-pseudo-element-or-element;
        """
        raise NotImplementedError
    def iteration_composite(self) -> IterationCompositeOperation:
        raise NotImplementedError
    def set_iteration_composite(self, iteration_composite: IterationCompositeOperation) -> None:
        raise NotImplementedError
    def composite(self) -> CompositeOperation:
        raise NotImplementedError
    def set_composite(self, composite: CompositeOperation) -> None:
        raise NotImplementedError
    def get_keyframes(self) -> List[Object]:
        raise NotImplementedError
    def set_keyframes(self, keyframes: Object) -> None:
        raise NotImplementedError
    def get_properties(self) -> List[AnimationPropertyDetails]:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlAreaElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def alt(self) -> str:
        raise NotImplementedError
    def set_alt(self, alt: str) -> None:
        raise NotImplementedError
    def coords(self) -> str:
        raise NotImplementedError
    def set_coords(self, coords: str) -> None:
        raise NotImplementedError
    def shape(self) -> str:
        raise NotImplementedError
    def set_shape(self, shape: str) -> None:
        raise NotImplementedError
    def target(self) -> str:
        raise NotImplementedError
    def set_target(self, target: str) -> None:
        raise NotImplementedError
    def download(self) -> str:
        raise NotImplementedError
    def set_download(self, download: str) -> None:
        raise NotImplementedError
    def ping(self) -> str:
        raise NotImplementedError
    def set_ping(self, ping: str) -> None:
        raise NotImplementedError
    def rel(self) -> str:
        raise NotImplementedError
    def set_rel(self, rel: str) -> None:
        raise NotImplementedError
    def referrer_policy(self) -> str:
        raise NotImplementedError
    def set_referrer_policy(self, referrer_policy: str) -> None:
        raise NotImplementedError
    def rel_list(self) -> DomTokenList:
        raise NotImplementedError
    def href(self) -> str:
        raise NotImplementedError
    def set_href(self, href: str) -> None:
        raise NotImplementedError
    def origin(self) -> str:
        raise NotImplementedError
    def protocol(self) -> str:
        raise NotImplementedError
    def set_protocol(self, protocol: str) -> None:
        raise NotImplementedError
    def username(self) -> str:
        raise NotImplementedError
    def set_username(self, username: str) -> None:
        raise NotImplementedError
    def password(self) -> str:
        raise NotImplementedError
    def set_password(self, password: str) -> None:
        raise NotImplementedError
    def host(self) -> str:
        raise NotImplementedError
    def set_host(self, host: str) -> None:
        raise NotImplementedError
    def hostname(self) -> str:
        raise NotImplementedError
    def set_hostname(self, hostname: str) -> None:
        raise NotImplementedError
    def port(self) -> str:
        raise NotImplementedError
    def set_port(self, port: str) -> None:
        raise NotImplementedError
    def pathname(self) -> str:
        raise NotImplementedError
    def set_pathname(self, pathname: str) -> None:
        raise NotImplementedError
    def search(self) -> str:
        raise NotImplementedError
    def set_search(self, search: str) -> None:
        raise NotImplementedError
    def hash(self) -> str:
        raise NotImplementedError
    def set_hash(self, hash: str) -> None:
        raise NotImplementedError
    def no_href(self) -> bool:
        raise NotImplementedError
    def set_no_href(self, no_href: bool) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlProgressElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def value(self) -> float:
        raise NotImplementedError
    def set_value(self, value: float) -> None:
        raise NotImplementedError
    def max(self) -> float:
        raise NotImplementedError
    def set_max(self, max: float) -> None:
        raise NotImplementedError
    def position(self) -> float:
        raise NotImplementedError
    def labels(self) -> NodeList:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class SvgtSpanElement:
    
    def as_svg_text_positioning_element(self) -> SvgTextPositioningElement:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class FocusEventInit:
    related_target: Optional[Some[Optional[EventTarget]]]
    view: Optional[Some[Optional[Window]]]
    detail: Optional[int]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class WheelEventInit:
    delta_x: Optional[float]
    delta_y: Optional[float]
    delta_z: Optional[float]
    delta_mode: Optional[int]
    screen_x: Optional[int]
    screen_y: Optional[int]
    client_x: Optional[int]
    client_y: Optional[int]
    button: Optional[int]
    buttons: Optional[int]
    related_target: Optional[Some[Optional[EventTarget]]]
    movement_x: Optional[int]
    movement_y: Optional[int]

@dataclass
class PointerEventInit:
    pointer_id: Optional[int]
    width: Optional[int]
    height: Optional[int]
    pressure: Optional[float]
    tangential_pressure: Optional[float]
    tilt_x: Optional[int]
    tilt_y: Optional[int]
    twist: Optional[int]
    pointer_type: Optional[str]
    is_primary: Optional[bool]
    coalesced_events: Optional[List[PointerEvent]]
    screen_x: Optional[int]
    screen_y: Optional[int]
    client_x: Optional[int]
    client_y: Optional[int]
    button: Optional[int]
    buttons: Optional[int]
    related_target: Optional[Some[Optional[EventTarget]]]
    movement_x: Optional[int]
    movement_y: Optional[int]

@dataclass
class TouchInit:
    identifier: int
    target: EventTarget
    client_x: Optional[int]
    client_y: Optional[int]
    screen_x: Optional[int]
    screen_y: Optional[int]
    page_x: Optional[int]
    page_y: Optional[int]
    radius_x: Optional[float]
    radius_y: Optional[float]
    rotation_angle: Optional[float]
    force: Optional[float]

@dataclass
class MouseEventInit:
    screen_x: Optional[int]
    screen_y: Optional[int]
    client_x: Optional[int]
    client_y: Optional[int]
    button: Optional[int]
    buttons: Optional[int]
    related_target: Optional[Some[Optional[EventTarget]]]
    movement_x: Optional[int]
    movement_y: Optional[int]
    ctrl_key: Optional[bool]
    shift_key: Optional[bool]
    alt_key: Optional[bool]
    meta_key: Optional[bool]
    modifier_alt_graph: Optional[bool]
    modifier_caps_lock: Optional[bool]
    modifier_fn: Optional[bool]
    modifier_fn_lock: Optional[bool]
    modifier_num_lock: Optional[bool]
    modifier_os: Optional[bool]
    modifier_scroll_lock: Optional[bool]
    modifier_symbol: Optional[bool]
    modifier_symbol_lock: Optional[bool]
    view: Optional[Some[Optional[Window]]]
    detail: Optional[int]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class PushManagerImpl:
    
    def subscribe(self, options: Optional[PushSubscriptionOptionsInit]) -> PushSubscription:
        raise NotImplementedError
    def get_subscription(self) -> Optional[PushSubscription]:
        raise NotImplementedError
    def permission_state(self, options: Optional[PushSubscriptionOptionsInit]) -> PushPermissionState:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PcObserverStateType(Enum):
    NONE = 0
    ICE_CONNECTION_STATE = 1
    ICE_GATHERING_STATE = 2
    SIGNALING_STATE = 3

class DragEvent:
    
    def as_mouse_event(self) -> MouseEvent:
        raise NotImplementedError
    def data_transfer(self) -> Optional[DataTransfer]:
        raise NotImplementedError
    def init_drag_event(self, type: str, can_bubble: Optional[bool], cancelable: Optional[bool], a_view: Optional[Some[Optional[Window]]], a_detail: Optional[int], a_screen_x: Optional[int], a_screen_y: Optional[int], a_client_x: Optional[int], a_client_y: Optional[int], a_ctrl_key: Optional[bool], a_alt_key: Optional[bool], a_shift_key: Optional[bool], a_meta_key: Optional[bool], a_button: Optional[int], a_related_target: Optional[Some[Optional[EventTarget]]], a_data_transfer: Optional[Some[Optional[DataTransfer]]]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class DragEventInit:
    data_transfer: Optional[Some[Optional[DataTransfer]]]
    screen_x: Optional[int]
    screen_y: Optional[int]
    client_x: Optional[int]
    client_y: Optional[int]
    button: Optional[int]
    buttons: Optional[int]
    related_target: Optional[Some[Optional[EventTarget]]]
    movement_x: Optional[int]
    movement_y: Optional[int]

class NotifyPaintEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def client_rects(self) -> DomRectList:
        raise NotImplementedError
    def bounding_client_rect(self) -> DomRect:
        raise NotImplementedError
    def paint_requests(self) -> PaintRequestList:
        raise NotImplementedError
    def transaction_id(self) -> int:
        raise NotImplementedError
    def paint_time_stamp(self) -> float:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class HtmlDataListElement:
    
    def as_html_element(self) -> HtmlElement:
        raise NotImplementedError
    def options(self) -> HtmlCollection:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PluginCrashedEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def plugin_id(self) -> int:
        raise NotImplementedError
    def plugin_dump_id(self) -> str:
        raise NotImplementedError
    def plugin_name(self) -> str:
        raise NotImplementedError
    def browser_dump_id(self) -> str:
        raise NotImplementedError
    def plugin_filename(self) -> str:
        raise NotImplementedError
    def submitted_crash_report(self) -> bool:
        raise NotImplementedError
    def gmp_plugin(self) -> bool:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class PluginCrashedEventInit:
    plugin_id: Optional[int]
    plugin_dump_id: Optional[str]
    plugin_name: Optional[str]
    browser_dump_id: Optional[str]
    plugin_filename: Optional[str]
    submitted_crash_report: Optional[bool]
    gmp_plugin: Optional[bool]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class ImageDocument:
    
    def as_html_document(self) -> HtmlDocument:
        raise NotImplementedError
    def image_is_overflowing(self) -> bool:
        raise NotImplementedError
    def image_is_resized(self) -> bool:
        raise NotImplementedError
    def image_request(self) -> Optional[ImgIRequest]:
        raise NotImplementedError
    def shrink_to_fit(self) -> None:
        raise NotImplementedError
    def restore_image(self) -> None:
        raise NotImplementedError
    def restore_image_to(self, x: int, y: int) -> None:
        raise NotImplementedError
    def toggle_image_size(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class RadioNodeList:
    
    def as_node_list(self) -> NodeList:
        raise NotImplementedError
    def value(self) -> str:
        raise NotImplementedError
    def set_value(self, value: str) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



@dataclass
class ElementOrRadioNodeList_Element:
    value: Element


@dataclass
class ElementOrRadioNodeList_RadioNodeList:
    value: RadioNodeList


ElementOrRadioNodeList = Union[ElementOrRadioNodeList_Element, ElementOrRadioNodeList_RadioNodeList]


class CompositionEvent:
    
    def as_ui_event(self) -> UiEvent:
        raise NotImplementedError
    def data(self) -> str:
        raise NotImplementedError
    def locale(self) -> str:
        raise NotImplementedError
    def ranges(self) -> List[TextClause]:
        raise NotImplementedError
    def init_composition_event(self, type_arg: str, can_bubble_arg: Optional[bool], cancelable_arg: Optional[bool], view_arg: Optional[Some[Optional[Window]]], data_arg: Optional[str], locale_arg: Optional[str]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class CompositionEventInit:
    data: Optional[str]
    view: Optional[Some[Optional[Window]]]
    detail: Optional[int]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class UiEventInit:
    view: Optional[Some[Optional[Window]]]
    detail: Optional[int]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class EventModifierInit:
    ctrl_key: Optional[bool]
    shift_key: Optional[bool]
    alt_key: Optional[bool]
    meta_key: Optional[bool]
    modifier_alt_graph: Optional[bool]
    modifier_caps_lock: Optional[bool]
    modifier_fn: Optional[bool]
    modifier_fn_lock: Optional[bool]
    modifier_num_lock: Optional[bool]
    modifier_os: Optional[bool]
    modifier_scroll_lock: Optional[bool]
    modifier_symbol: Optional[bool]
    modifier_symbol_lock: Optional[bool]
    view: Optional[Some[Optional[Window]]]
    detail: Optional[int]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class DocumentTimelineOptions:
    origin_time: Optional[float]

class RtcPeerConnectionIceErrorEvent:
    
    def as_event(self) -> Event:
        raise NotImplementedError
    def __init__(self, type: str, event_init_dict: RtcPeerConnectionIceErrorEventInit):
        raise NotImplementedError

    def address(self) -> str:
        raise NotImplementedError
    def port(self) -> int:
        raise NotImplementedError
    def url(self) -> str:
        raise NotImplementedError
    def error_code(self) -> int:
        raise NotImplementedError
    def error_text(self) -> str:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class BiquadFilterOptions:
    type: Optional[BiquadFilterType]
    q: Optional[float]
    detune: Optional[float]
    frequency: Optional[float]
    gain: Optional[float]
    channel_count: Optional[int]
    channel_count_mode: Optional[ChannelCountMode]
    channel_interpretation: Optional[ChannelInterpretation]

@dataclass
class SpeechRecognitionEventInit:
    result_index: Optional[int]
    results: Optional[Some[Optional[SpeechRecognitionResultList]]]
    interpretation: Any
    emma: Optional[Some[Optional[Document]]]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

@dataclass
class BlockParsingOptions:
    block_script_created: Optional[bool]

class Worker:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def terminate(self) -> None:
        raise NotImplementedError
    def post_message(self, message: Any, transfer: Optional[List[Object]]) -> None:
        raise NotImplementedError
    def onmessage(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmessage(self, onmessage: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onmessageerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onmessageerror(self, onmessageerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def onerror(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onerror(self, onerror: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class WorkerType(Enum):
    CLASSIC = 0
    MODULE = 1

@dataclass
class WorkerOptions:
    type: Optional[WorkerType]
    credentials: Optional[RequestCredentials]
    name: Optional[str]

class ChromeWorker:
    
    def as_worker(self) -> Worker:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class CanvasCaptureMediaStream:
    
    def as_media_stream(self) -> MediaStream:
        raise NotImplementedError
    def canvas(self) -> HtmlCanvasElement:
        raise NotImplementedError
    def request_frame(self) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


class PaymentMethodChangeEvent:
    
    def as_payment_request_update_event(self) -> PaymentRequestUpdateEvent:
        raise NotImplementedError
    def method_name(self) -> str:
        raise NotImplementedError
    def method_details(self) -> Object:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError


@dataclass
class PaymentMethodChangeEventInit:
    method_name: str
    method_details: Optional[Object]
    bubbles: Optional[bool]
    cancelable: Optional[bool]
    composed: Optional[bool]

class Performance:
    
    def as_event_target(self) -> EventTarget:
        raise NotImplementedError
    def now(self) -> float:
        raise NotImplementedError
    def time_origin(self) -> float:
        raise NotImplementedError
    def timing(self) -> PerformanceTiming:
        raise NotImplementedError
    def navigation(self) -> PerformanceNavigation:
        raise NotImplementedError
    def to_json(self) -> Object:
        raise NotImplementedError
    def get_entries(self) -> List[PerformanceEntry]:
        raise NotImplementedError
    def get_entries_by_type(self, entry_type: str) -> List[PerformanceEntry]:
        raise NotImplementedError
    def get_entries_by_name(self, name: str, entry_type: Optional[str]) -> List[PerformanceEntry]:
        raise NotImplementedError
    def clear_resource_timings(self) -> None:
        raise NotImplementedError
    def set_resource_timing_buffer_size(self, max_size: int) -> None:
        raise NotImplementedError
    def onresourcetimingbufferfull(self) -> Optional[EventHandlerNonNull]:
        raise NotImplementedError
    def set_onresourcetimingbufferfull(self, onresourcetimingbufferfull: Optional[EventHandlerNonNull]) -> None:
        raise NotImplementedError
    def mark(self, mark_name: str) -> None:
        raise NotImplementedError
    def clear_marks(self, mark_name: Optional[str]) -> None:
        raise NotImplementedError
    def measure(self, measure_name: str, start_mark: Optional[str], end_mark: Optional[str]) -> None:
        raise NotImplementedError
    def clear_measures(self, measure_name: Optional[str]) -> None:
        raise NotImplementedError
    def __enter__(self):
        """Returns self"""
        return self
                                
    def __exit__(self, *args):
        """
        Release this resource.
        """
        raise NotImplementedError



def get_service_worker_global_scope() -> ServiceWorkerGlobalScope:
    raise NotImplementedError

def get_shared_worker_global_scope() -> SharedWorkerGlobalScope:
    raise NotImplementedError

def get_worker_global_scope() -> WorkerGlobalScope:
    raise NotImplementedError

def get_dedicated_worker_global_scope() -> DedicatedWorkerGlobalScope:
    raise NotImplementedError

def get_window() -> Window:
    raise NotImplementedError

