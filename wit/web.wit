package webidl:browser;

world service-worker-global-scope {
  import global;
}

world shared-worker-global-scope {
  import global;
}

world worker-global-scope {
  import global;
}

world dedicated-worker-global-scope {
  import global;
}

world window {
  import global;
}

interface global {
  use wasi:io/poll@0.2.2.{ pollable };
  resource lifecycle-connected-callback {
  }
  resource lifecycle-disconnected-callback {
  }
  resource lifecycle-adopted-callback {
  }
  resource lifecycle-attribute-changed-callback {
  }
  resource video-frame {
  }
  resource event-handler-non-null {
  }
  resource on-before-unload-event-handler-non-null {
  }
  resource on-error-event-handler-non-null {
  }
  resource tree-column {
  }
  resource principal {
  }
  resource keyframe-animation-options {
  }
  resource console-instance-dump-callback {
  }
  resource plugin-tag {
  }
  resource uri {
  }
  resource generate-assertion-callback {
  }
  resource validate-assertion-callback {
  }
  resource window-proxy {
  }
  resource observer-callback {
  }
  resource dom-time-stamp {
  }
  resource underlying-source-start-callback {
  }
  resource underlying-source-pull-callback {
  }
  resource underlying-source-cancel-callback {
  }
  resource underlying-sink-start-callback {
  }
  resource underlying-sink-write-callback {
  }
  resource underlying-sink-close-callback {
  }
  resource underlying-sink-abort-callback {
  }
  resource transformer-start-callback {
  }
  resource transformer-transform-callback {
  }
  resource transformer-flush-callback {
  }
  resource queuing-strategy-size {
  }
  resource function {
  }
  resource payment-details-update {
  }
  resource notification-permission-callback {
  }
  resource mutation-callback {
  }
  resource any-callback {
  }
  resource u2f-register-callback {
  }
  resource u2f-sign-callback {
  }
  resource void-function {
  }
  resource node-filter {
  }
  resource resize-observer-callback {
  }
  resource intersection-callback {
  }
  resource box-object {
    as-tree-box-object: func() -> option<tree-box-object>;
    as-scroll-box-object: func() -> option<scroll-box-object>;
    as-list-box-object: func() -> option<list-box-object>;
  }
  resource tree-columns {
  }
  resource ns-i-scriptable-region {
  }
  resource position-callback {
  }
  resource position-error-callback {
  }
  resource ns-i-selection-listener {
  }
  resource decode-success-callback {
  }
  resource decode-error-callback {
  }
  resource file-mode {
  }
  resource blob-callback {
  }
  resource file-system-entry-callback {
  }
  resource error-callback {
  }
  resource ns-i-tree-selection {
  }
  resource frame-request-callback {
  }
  resource application-cache {
  }
  resource idle-request-callback {
  }
  resource flex {
  }
  resource grid {
  }
  resource static-range {
  }
  resource stack-frame {
  }
  resource ns-i-transport-provider {
  }
  resource event-listener {
  }
  resource date {
  }
  resource file-callback {
  }
  resource get-notification-options {
  }
  resource ns-i-variant {
  }
  resource function-string-callback {
  }
  resource font-face-set-for-each-callback {
  }
  resource custom-element-creation-callback {
  }
  resource file-system-entries-callback {
  }
  resource img-i-request {
  }
  resource rtc-peer-connection-ice-error-event-init {
  }
  resource anonymous-content {
  }
  resource x-path-ns-resolver {
  }
  resource presentation-availability {
    as-event-target: func() -> event-target;
    value: func() -> bool;
    onchange-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  record audio-buffer-options {
    number-of-channels: option<u32>,
    length: u32,
    sample-rate: f32,
  }
  resource audio-buffer {
    sample-rate: func() -> f32;
    length: func() -> u32;
    duration: func() -> f64;
    number-of-channels: func() -> u32;
    get-channel-data: func(channel: u32) -> float32-array;
    copy-from-channel: func(destination: float32-array, channel-number: s32, start-in-channel: option<u32>);
    copy-to-channel: func(source: float32-array, channel-number: s32, start-in-channel: option<u32>);
  }
  record array-buffer-constructor-options {
    max-byte-length: u32,
  }
  resource array-buffer {
    constructor(length: u32, options: option<array-buffer-constructor-options>);
    byte-length: func() -> u32;
    slice: func(begin: u32, end: option<u32>) -> array-buffer;
  }
  variant float32-array-constructor-options {
    float32-array(float32-array),
    length(u32),
    array-buffer(tuple<array-buffer, option<u32>, option<u32>>),
  }
  variant float32-array-set-src {
    %list(list<f32>),
    float32-array(float32-array),
  }
  resource float32-array {
    constructor(options: option<float32-array-constructor-options>);
    fill: func(value: f32, start: option<u32>, end: option<u32>) -> float32-array;
    buffer: func() -> array-buffer;
    length: func() -> u32;
    byte-offset: func() -> u32;
    byte-length: func() -> u32;
    at: func(index: s32) -> option<f32>;
    copy-within: func(target: u32, start: u32, end: option<u32>) -> float32-array;
    set: func(src: float32-array-set-src, offset: u32);
    slice: func(begin: u32, end: u32) -> float32-array;
    subarray: func(begin: u32, end: u32) -> float32-array;
    values: func() -> list<f32>;
    get-index: func(index: u32) -> f32;
    set-index: func(index: u32, value: f32);
  }
  enum connection-type {
    cellular,
    bluetooth,
    ethernet,
    wifi,
    other,
    none,
    unknown,
  }
  resource network-information {
    as-event-target: func() -> event-target;
    %type: func() -> connection-type;
    ontypechange-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource svg-path-seg {
    PATHSEG-UNKNOWN: static func() -> u16;
    PATHSEG-CLOSEPATH: static func() -> u16;
    PATHSEG-MOVETO-ABS: static func() -> u16;
    PATHSEG-MOVETO-REL: static func() -> u16;
    PATHSEG-LINETO-ABS: static func() -> u16;
    PATHSEG-LINETO-REL: static func() -> u16;
    PATHSEG-CURVETO-CUBIC-ABS: static func() -> u16;
    PATHSEG-CURVETO-CUBIC-REL: static func() -> u16;
    PATHSEG-CURVETO-QUADRATIC-ABS: static func() -> u16;
    PATHSEG-CURVETO-QUADRATIC-REL: static func() -> u16;
    PATHSEG-ARC-ABS: static func() -> u16;
    PATHSEG-ARC-REL: static func() -> u16;
    PATHSEG-LINETO-HORIZONTAL-ABS: static func() -> u16;
    PATHSEG-LINETO-HORIZONTAL-REL: static func() -> u16;
    PATHSEG-LINETO-VERTICAL-ABS: static func() -> u16;
    PATHSEG-LINETO-VERTICAL-REL: static func() -> u16;
    PATHSEG-CURVETO-CUBIC-SMOOTH-ABS: static func() -> u16;
    PATHSEG-CURVETO-CUBIC-SMOOTH-REL: static func() -> u16;
    PATHSEG-CURVETO-QUADRATIC-SMOOTH-ABS: static func() -> u16;
    PATHSEG-CURVETO-QUADRATIC-SMOOTH-REL: static func() -> u16;
    path-seg-type: func() -> u16;
    path-seg-type-as-letter: func() -> string;
    as-svg-path-seg-close-path: func() -> option<svg-path-seg-close-path>;
    as-svg-path-seg-moveto-abs: func() -> option<svg-path-seg-moveto-abs>;
    as-svg-path-seg-moveto-rel: func() -> option<svg-path-seg-moveto-rel>;
    as-svg-path-seg-lineto-abs: func() -> option<svg-path-seg-lineto-abs>;
    as-svg-path-seg-lineto-rel: func() -> option<svg-path-seg-lineto-rel>;
    as-svg-path-seg-curveto-cubic-abs: func() -> option<svg-path-seg-curveto-cubic-abs>;
    as-svg-path-seg-curveto-cubic-rel: func() -> option<svg-path-seg-curveto-cubic-rel>;
    as-svg-path-seg-curveto-quadratic-abs: func() -> option<svg-path-seg-curveto-quadratic-abs>;
    as-svg-path-seg-curveto-quadratic-rel: func() -> option<svg-path-seg-curveto-quadratic-rel>;
    as-svg-path-seg-arc-abs: func() -> option<svg-path-seg-arc-abs>;
    as-svg-path-seg-arc-rel: func() -> option<svg-path-seg-arc-rel>;
    as-svg-path-seg-lineto-horizontal-abs: func() -> option<svg-path-seg-lineto-horizontal-abs>;
    as-svg-path-seg-lineto-horizontal-rel: func() -> option<svg-path-seg-lineto-horizontal-rel>;
    as-svg-path-seg-lineto-vertical-abs: func() -> option<svg-path-seg-lineto-vertical-abs>;
    as-svg-path-seg-lineto-vertical-rel: func() -> option<svg-path-seg-lineto-vertical-rel>;
    as-svg-path-seg-curveto-cubic-smooth-abs: func() -> option<svg-path-seg-curveto-cubic-smooth-abs>;
    as-svg-path-seg-curveto-cubic-smooth-rel: func() -> option<svg-path-seg-curveto-cubic-smooth-rel>;
    as-svg-path-seg-curveto-quadratic-smooth-abs: func() -> option<svg-path-seg-curveto-quadratic-smooth-abs>;
    as-svg-path-seg-curveto-quadratic-smooth-rel: func() -> option<svg-path-seg-curveto-quadratic-smooth-rel>;
  }
  resource svg-path-seg-close-path {
    as-svg-path-seg: func() -> svg-path-seg;
  }
  resource svg-path-seg-moveto-abs {
    as-svg-path-seg: func() -> svg-path-seg;
    x: func() -> f32;
    set-x: func(x: f32);
    y: func() -> f32;
    set-y: func(y: f32);
  }
  resource svg-path-seg-moveto-rel {
    as-svg-path-seg: func() -> svg-path-seg;
    x: func() -> f32;
    set-x: func(x: f32);
    y: func() -> f32;
    set-y: func(y: f32);
  }
  resource svg-path-seg-lineto-abs {
    as-svg-path-seg: func() -> svg-path-seg;
    x: func() -> f32;
    set-x: func(x: f32);
    y: func() -> f32;
    set-y: func(y: f32);
  }
  resource svg-path-seg-lineto-rel {
    as-svg-path-seg: func() -> svg-path-seg;
    x: func() -> f32;
    set-x: func(x: f32);
    y: func() -> f32;
    set-y: func(y: f32);
  }
  resource svg-path-seg-curveto-cubic-abs {
    as-svg-path-seg: func() -> svg-path-seg;
    x: func() -> f32;
    set-x: func(x: f32);
    y: func() -> f32;
    set-y: func(y: f32);
    x1: func() -> f32;
    set-x1: func(x1: f32);
    y1: func() -> f32;
    set-y1: func(y1: f32);
    x2: func() -> f32;
    set-x2: func(x2: f32);
    y2: func() -> f32;
    set-y2: func(y2: f32);
  }
  resource svg-path-seg-curveto-cubic-rel {
    as-svg-path-seg: func() -> svg-path-seg;
    x: func() -> f32;
    set-x: func(x: f32);
    y: func() -> f32;
    set-y: func(y: f32);
    x1: func() -> f32;
    set-x1: func(x1: f32);
    y1: func() -> f32;
    set-y1: func(y1: f32);
    x2: func() -> f32;
    set-x2: func(x2: f32);
    y2: func() -> f32;
    set-y2: func(y2: f32);
  }
  resource svg-path-seg-curveto-quadratic-abs {
    as-svg-path-seg: func() -> svg-path-seg;
    x: func() -> f32;
    set-x: func(x: f32);
    y: func() -> f32;
    set-y: func(y: f32);
    x1: func() -> f32;
    set-x1: func(x1: f32);
    y1: func() -> f32;
    set-y1: func(y1: f32);
  }
  resource svg-path-seg-curveto-quadratic-rel {
    as-svg-path-seg: func() -> svg-path-seg;
    x: func() -> f32;
    set-x: func(x: f32);
    y: func() -> f32;
    set-y: func(y: f32);
    x1: func() -> f32;
    set-x1: func(x1: f32);
    y1: func() -> f32;
    set-y1: func(y1: f32);
  }
  resource svg-path-seg-arc-abs {
    as-svg-path-seg: func() -> svg-path-seg;
    x: func() -> f32;
    set-x: func(x: f32);
    y: func() -> f32;
    set-y: func(y: f32);
    r1: func() -> f32;
    set-r1: func(r1: f32);
    r2: func() -> f32;
    set-r2: func(r2: f32);
    angle: func() -> f32;
    set-angle: func(angle: f32);
    large-arc-flag: func() -> bool;
    set-large-arc-flag: func(large-arc-flag: bool);
    sweep-flag: func() -> bool;
    set-sweep-flag: func(sweep-flag: bool);
  }
  resource svg-path-seg-arc-rel {
    as-svg-path-seg: func() -> svg-path-seg;
    x: func() -> f32;
    set-x: func(x: f32);
    y: func() -> f32;
    set-y: func(y: f32);
    r1: func() -> f32;
    set-r1: func(r1: f32);
    r2: func() -> f32;
    set-r2: func(r2: f32);
    angle: func() -> f32;
    set-angle: func(angle: f32);
    large-arc-flag: func() -> bool;
    set-large-arc-flag: func(large-arc-flag: bool);
    sweep-flag: func() -> bool;
    set-sweep-flag: func(sweep-flag: bool);
  }
  resource svg-path-seg-lineto-horizontal-abs {
    as-svg-path-seg: func() -> svg-path-seg;
    x: func() -> f32;
    set-x: func(x: f32);
  }
  resource svg-path-seg-lineto-horizontal-rel {
    as-svg-path-seg: func() -> svg-path-seg;
    x: func() -> f32;
    set-x: func(x: f32);
  }
  resource svg-path-seg-lineto-vertical-abs {
    as-svg-path-seg: func() -> svg-path-seg;
    y: func() -> f32;
    set-y: func(y: f32);
  }
  resource svg-path-seg-lineto-vertical-rel {
    as-svg-path-seg: func() -> svg-path-seg;
    y: func() -> f32;
    set-y: func(y: f32);
  }
  resource svg-path-seg-curveto-cubic-smooth-abs {
    as-svg-path-seg: func() -> svg-path-seg;
    x: func() -> f32;
    set-x: func(x: f32);
    y: func() -> f32;
    set-y: func(y: f32);
    x2: func() -> f32;
    set-x2: func(x2: f32);
    y2: func() -> f32;
    set-y2: func(y2: f32);
  }
  resource svg-path-seg-curveto-cubic-smooth-rel {
    as-svg-path-seg: func() -> svg-path-seg;
    x: func() -> f32;
    set-x: func(x: f32);
    y: func() -> f32;
    set-y: func(y: f32);
    x2: func() -> f32;
    set-x2: func(x2: f32);
    y2: func() -> f32;
    set-y2: func(y2: f32);
  }
  resource svg-path-seg-curveto-quadratic-smooth-abs {
    as-svg-path-seg: func() -> svg-path-seg;
    x: func() -> f32;
    set-x: func(x: f32);
    y: func() -> f32;
    set-y: func(y: f32);
  }
  resource svg-path-seg-curveto-quadratic-smooth-rel {
    as-svg-path-seg: func() -> svg-path-seg;
    x: func() -> f32;
    set-x: func(x: f32);
    y: func() -> f32;
    set-y: func(y: f32);
  }
  resource html-mod-element {
    as-html-element: func() -> html-element;
    cite: func() -> string;
    set-cite: func(cite: string);
    date-time: func() -> string;
    set-date-time: func(date-time: string);
    title: func() -> string;
    set-title: func(title: string);
    scroll-height: func() -> s32;
    set-scroll-height: func(scroll-height: s32);
    scroll-top: func() -> s32;
    set-scroll-top: func(scroll-top: s32);
    lang: func() -> string;
    set-lang: func(lang: string);
    dir: func() -> string;
    set-dir: func(dir: string);
    dataset: func() -> dom-string-map;
    inner-text: func() -> string;
    set-inner-text: func(inner-text: string);
    hidden: func() -> bool;
    set-hidden: func(hidden: bool);
    inert: func() -> bool;
    set-inert: func(inert: bool);
    click: func();
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func(options: option<focus-options>);
    blur: func();
    access-key: func() -> string;
    set-access-key: func(access-key: string);
    access-key-label: func() -> string;
    draggable: func() -> bool;
    set-draggable: func(draggable: bool);
    content-editable: func() -> string;
    set-content-editable: func(content-editable: string);
    is-content-editable: func() -> bool;
    spellcheck: func() -> bool;
    set-spellcheck: func(spellcheck: bool);
    style: func() -> css-style-declaration;
  }
  resource svgfe-merge-element {
    as-svg-element: func() -> svg-element;
    x: func() -> svg-animated-length;
    y: func() -> svg-animated-length;
    width: func() -> svg-animated-length;
    height: func() -> svg-animated-length;
    %result: func() -> svg-animated-string;
    id: func() -> string;
    set-id: func(id: string);
    class-name: func() -> svg-animated-string;
    dataset: func() -> dom-string-map;
    style: func() -> css-style-declaration;
    owner-svg-element: func() -> option<svgsvg-element>;
    viewport-element: func() -> option<svg-element>;
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func();
    blur: func();
  }
  record media-track-supported-constraints {
    width: option<bool>,
    height: option<bool>,
    aspect-ratio: option<bool>,
    frame-rate: option<bool>,
    facing-mode: option<bool>,
    volume: option<bool>,
    sample-rate: option<bool>,
    sample-size: option<bool>,
    echo-cancellation: option<bool>,
    noise-suppression: option<bool>,
    auto-gain-control: option<bool>,
    latency: option<bool>,
    channel-count: option<bool>,
    device-id: option<bool>,
    group-id: option<bool>,
  }
  variant any {
    %bool(bool),
    %s8(s8),
    %s16(s16),
    %s32(s32),
    %s64(s64),
    %u8(u8),
    %u16(u16),
    %u32(u32),
    %u64(u64),
    %f32(f32),
    %f64(f64),
    %string(string),
  }
  record iterable-key-or-value-result {
    value: any,
    done: option<bool>,
  }
  record iterable-key-and-value-result {
    value: option<list<any>>,
    done: option<bool>,
  }
  resource html-select-element {
    as-html-element: func() -> html-element;
    autofocus: func() -> bool;
    set-autofocus: func(autofocus: bool);
    autocomplete: func() -> string;
    set-autocomplete: func(autocomplete: string);
    disabled: func() -> bool;
    set-disabled: func(disabled: bool);
    form: func() -> option<html-form-element>;
    multiple: func() -> bool;
    set-multiple: func(multiple: bool);
    name: func() -> string;
    set-name: func(name: string);
    required: func() -> bool;
    set-required: func(required: bool);
    size: func() -> u32;
    set-size: func(size: u32);
    %type: func() -> string;
    options: func() -> html-options-collection;
    length: func() -> u32;
    set-length: func(length: u32);
    item: func(index: u32) -> option<element>;
    named-item: func(name: string) -> option<html-option-element>;
    add: func(element: html-opt-group-element-or-html-option-element, before: option<html-element-or-s32>);
    selected-options: func() -> html-collection;
    selected-index: func() -> s32;
    set-selected-index: func(selected-index: s32);
    value: func() -> string;
    set-value: func(value: string);
    will-validate: func() -> bool;
    validity: func() -> validity-state;
    validation-message: func() -> string;
    check-validity: func() -> bool;
    report-validity: func() -> bool;
    set-custom-validity: func(error: string);
    labels: func() -> node-list;
    remove: func(params: option<html-select-element-remove-params>);
    open-in-parent-process: func() -> bool;
    set-open-in-parent-process: func(open-in-parent-process: bool);
    get-autocomplete-info: func() -> autocomplete-info;
    preview-value: func() -> string;
    set-preview-value: func(preview-value: string);
    title: func() -> string;
    set-title: func(title: string);
    scroll-height: func() -> s32;
    set-scroll-height: func(scroll-height: s32);
    scroll-top: func() -> s32;
    set-scroll-top: func(scroll-top: s32);
    lang: func() -> string;
    set-lang: func(lang: string);
    dir: func() -> string;
    set-dir: func(dir: string);
    dataset: func() -> dom-string-map;
    inner-text: func() -> string;
    set-inner-text: func(inner-text: string);
    hidden: func() -> bool;
    set-hidden: func(hidden: bool);
    inert: func() -> bool;
    set-inert: func(inert: bool);
    click: func();
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func(options: option<focus-options>);
    blur: func();
    access-key: func() -> string;
    set-access-key: func(access-key: string);
    access-key-label: func() -> string;
    draggable: func() -> bool;
    set-draggable: func(draggable: bool);
    content-editable: func() -> string;
    set-content-editable: func(content-editable: string);
    is-content-editable: func() -> bool;
    spellcheck: func() -> bool;
    set-spellcheck: func(spellcheck: bool);
    style: func() -> css-style-declaration;
  }
  variant html-opt-group-element-or-html-option-element {
    html-opt-group-element(borrow<html-opt-group-element>),
    html-option-element(borrow<html-option-element>),
  }
  variant html-element-or-s32 {
    html-element(borrow<html-element>),
    %s32(s32),
  }
  variant html-select-element-remove-params {
    index(s32),
  }
  resource svg-animation-element {
    as-svg-element: func() -> svg-element;
    target-element: func() -> option<svg-element>;
    get-start-time: func() -> f32;
    get-current-time: func() -> f32;
    get-simple-duration: func() -> f32;
    begin-element: func();
    begin-element-at: func(offset: f32);
    end-element: func();
    end-element-at: func(offset: f32);
    as-svg-animate-motion-element: func() -> option<svg-animate-motion-element>;
    id: func() -> string;
    set-id: func(id: string);
    class-name: func() -> svg-animated-string;
    dataset: func() -> dom-string-map;
    style: func() -> css-style-declaration;
    owner-svg-element: func() -> option<svgsvg-element>;
    viewport-element: func() -> option<svg-element>;
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func();
    blur: func();
    as-svg-animate-element: func() -> option<svg-animate-element>;
    required-features: func() -> svg-string-list;
    required-extensions: func() -> svg-string-list;
    system-language: func() -> svg-string-list;
    has-extension: func(extension: string) -> bool;
    as-svg-animate-transform-element: func() -> option<svg-animate-transform-element>;
    as-svg-set-element: func() -> option<svg-set-element>;
  }
  enum idb-request-ready-state {
    pending,
    done,
  }
  resource idb-request {
    as-event-target: func() -> event-target;
    %result: func() -> any;
    error: func() -> option<dom-exception>;
    // source: func() -> idb-cursor-or-idb-index-or-idb-object-store;
    transaction: func() -> option<idb-transaction>;
    ready-state: func() -> idb-request-ready-state;
    onsuccess-subscribe: func() -> pollable;
    onerror-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
    as-idb-open-db-request: func() -> option<idb-open-db-request>;
  }
  variant idb-cursor-or-idb-index-or-idb-object-store {
    idb-cursor(borrow<idb-cursor>),
    idb-index(borrow<idb-index>),
    idb-object-store(borrow<idb-object-store>),
  }
  resource html-image-element {
    as-html-element: func() -> html-element;
    alt: func() -> string;
    set-alt: func(alt: string);
    src: func() -> string;
    set-src: func(src: string);
    srcset: func() -> string;
    set-srcset: func(srcset: string);
    cross-origin: func() -> string;
    set-cross-origin: func(cross-origin: string);
    use-map: func() -> string;
    set-use-map: func(use-map: string);
    referrer-policy: func() -> string;
    set-referrer-policy: func(referrer-policy: string);
    is-map: func() -> bool;
    set-is-map: func(is-map: bool);
    width: func() -> u32;
    set-width: func(width: u32);
    height: func() -> u32;
    set-height: func(height: u32);
    decoding: func() -> string;
    set-decoding: func(decoding: string);
    natural-width: func() -> u32;
    natural-height: func() -> u32;
    complete: func() -> bool;
    decode: func();
    name: func() -> string;
    set-name: func(name: string);
    align: func() -> string;
    set-align: func(align: string);
    hspace: func() -> u32;
    set-hspace: func(hspace: u32);
    vspace: func() -> u32;
    set-vspace: func(vspace: u32);
    long-desc: func() -> string;
    set-long-desc: func(long-desc: string);
    border: func() -> string;
    set-border: func(border: string);
    sizes: func() -> string;
    set-sizes: func(sizes: string);
    current-src: func() -> string;
    title: func() -> string;
    set-title: func(title: string);
    scroll-height: func() -> s32;
    set-scroll-height: func(scroll-height: s32);
    scroll-top: func() -> s32;
    set-scroll-top: func(scroll-top: s32);
    lang: func() -> string;
    set-lang: func(lang: string);
    dir: func() -> string;
    set-dir: func(dir: string);
    dataset: func() -> dom-string-map;
    inner-text: func() -> string;
    set-inner-text: func(inner-text: string);
    hidden: func() -> bool;
    set-hidden: func(hidden: bool);
    inert: func() -> bool;
    set-inert: func(inert: bool);
    click: func();
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func(options: option<focus-options>);
    blur: func();
    access-key: func() -> string;
    set-access-key: func(access-key: string);
    access-key-label: func() -> string;
    draggable: func() -> bool;
    set-draggable: func(draggable: bool);
    content-editable: func() -> string;
    set-content-editable: func(content-editable: string);
    is-content-editable: func() -> bool;
    spellcheck: func() -> bool;
    set-spellcheck: func(spellcheck: bool);
    style: func() -> css-style-declaration;
  }
  resource event-source {
    as-event-target: func() -> event-target;
    url: func() -> string;
    with-credentials: func() -> bool;
    CONNECTING: static func() -> u16;
    OPEN: static func() -> u16;
    CLOSED: static func() -> u16;
    ready-state: func() -> u16;
    onopen-subscribe: func() -> pollable;
    onmessage-subscribe: func() -> pollable;
    onerror-subscribe: func() -> pollable;
    close: func();
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  record event-source-init {
    with-credentials: option<bool>,
  }
  resource svg-matrix {
    a: func() -> f32;
    set-a: func(a: f32);
    b: func() -> f32;
    set-b: func(b: f32);
    c: func() -> f32;
    set-c: func(c: f32);
    d: func() -> f32;
    set-d: func(d: f32);
    e: func() -> f32;
    set-e: func(e: f32);
    f: func() -> f32;
    set-f: func(f: f32);
    multiply: func(second-matrix: borrow<svg-matrix>) -> svg-matrix;
    inverse: func() -> svg-matrix;
    translate: func(x: f32, y: f32) -> svg-matrix;
    scale: func(scale-factor: f32) -> svg-matrix;
    scale-non-uniform: func(scale-factor-x: f32, scale-factor-y: f32) -> svg-matrix;
    rotate: func(angle: f32) -> svg-matrix;
    rotate-from-vector: func(x: f32, y: f32) -> svg-matrix;
    flip-x: func() -> svg-matrix;
    flip-y: func() -> svg-matrix;
    skew-x: func(angle: f32) -> svg-matrix;
    skew-y: func(angle: f32) -> svg-matrix;
  }
  resource payment-request-update-event {
    as-event: func() -> event;
    update-with: func(details-promise: borrow<payment-details-update>);
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
    as-payment-method-change-event: func() -> option<payment-method-change-event>;
  }
  record payment-request-update-event-init {
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  record constrain-long-range {
    min: option<s32>,
    max: option<s32>,
    exact: option<s32>,
    ideal: option<s32>,
  }
  record constrain-double-range {
    min: option<f64>,
    max: option<f64>,
    exact: option<f64>,
    ideal: option<f64>,
  }
  record constrain-boolean-parameters {
    exact: option<bool>,
    ideal: option<bool>,
  }
  variant list-string-or-string {
    list-string(list<string>),
    %string(string),
  }
  record constrain-dom-string-parameters {
    exact: option<list-string-or-string>,
    ideal: option<list-string-or-string>,
  }
  resource error-event {
    as-event: func() -> event;
    message: func() -> string;
    filename: func() -> string;
    lineno: func() -> u32;
    colno: func() -> u32;
    error: func() -> any;
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
  }
  record error-event-init {
    message: option<string>,
    filename: option<string>,
    lineno: option<u32>,
    colno: option<u32>,
    error: any,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  enum storage-type {
    persistent,
    temporary,
    default,
  }
  resource speech-synthesis-event {
    as-event: func() -> event;
    utterance: func() -> speech-synthesis-utterance;
    char-index: func() -> u32;
    char-length: func() -> u32;
    elapsed-time: func() -> f32;
    name: func() -> string;
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
    as-speech-synthesis-error-event: func() -> option<speech-synthesis-error-event>;
  }
  record speech-synthesis-event-init {
    utterance: borrow<speech-synthesis-utterance>,
    char-index: option<u32>,
    char-length: option<u32>,
    elapsed-time: option<f32>,
    name: option<string>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource svg-linear-gradient-element {
    as-svg-gradient-element: func() -> svg-gradient-element;
    x1: func() -> svg-animated-length;
    y1: func() -> svg-animated-length;
    x2: func() -> svg-animated-length;
    y2: func() -> svg-animated-length;
    SVG-SPREADMETHOD-UNKNOWN: static func() -> u16;
    SVG-SPREADMETHOD-PAD: static func() -> u16;
    SVG-SPREADMETHOD-REFLECT: static func() -> u16;
    SVG-SPREADMETHOD-REPEAT: static func() -> u16;
    gradient-units: func() -> svg-animated-enumeration;
    gradient-transform: func() -> svg-animated-transform-list;
    spread-method: func() -> svg-animated-enumeration;
  }
  resource url {
    href: func() -> string;
    set-href: func(href: string);
    origin: func() -> string;
    protocol: func() -> string;
    set-protocol: func(protocol: string);
    username: func() -> string;
    set-username: func(username: string);
    password: func() -> string;
    set-password: func(password: string);
    host: func() -> string;
    set-host: func(host: string);
    hostname: func() -> string;
    set-hostname: func(hostname: string);
    port: func() -> string;
    set-port: func(port: string);
    pathname: func() -> string;
    set-pathname: func(pathname: string);
    search: func() -> string;
    set-search: func(search: string);
    search-params: func() -> url-search-params;
    hash: func() -> string;
    set-hash: func(hash: string);
    to-json: func() -> string;
    create-object-url: static func(blob: borrow<blob>) -> string;
    revoke-object-url: static func(url: string);
    is-valid-url: static func(url: string) -> bool;
    // create-object-url: static func(source: borrow<media-source>) -> string;
  }
  resource web-gl-context-event {
    as-event: func() -> event;
    status-message: func() -> string;
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
  }
  record web-gl-context-event-init {
    status-message: option<string>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  enum speech-recognition-error-code {
    no-speech,
    aborted,
    audio-capture,
    network,
    not-allowed,
    service-not-allowed,
    bad-grammar,
    language-not-supported,
  }
  resource speech-recognition-error {
    as-event: func() -> event;
    error: func() -> speech-recognition-error-code;
    message: func() -> string;
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
  }
  record speech-recognition-error-init {
    error: option<speech-recognition-error-code>,
    message: option<string>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  record lifecycle-callbacks {
    connected-callback: option<borrow<lifecycle-connected-callback>>,
    disconnected-callback: option<borrow<lifecycle-disconnected-callback>>,
    adopted-callback: option<borrow<lifecycle-adopted-callback>>,
    attribute-changed-callback: option<borrow<lifecycle-attribute-changed-callback>>,
  }
  enum canvas-winding-rule {
    nonzero,
    evenodd,
  }
  record context-attributes2-d {
    will-read-frequently: option<bool>,
    alpha: option<bool>,
  }
  record hit-region-options {
    path: option<option<borrow<path2-d>>>,
    id: option<string>,
    control: option<option<borrow<element>>>,
  }
  variant html-image-element-or-svg-image-element {
    html-image-element(borrow<html-image-element>),
    svg-image-element(borrow<svg-image-element>),
  }
  type html-or-svg-image-element = html-image-element-or-svg-image-element;
  variant html-canvas-element-or-html-or-svg-image-element-or-html-video-element-or-image-bitmap-or-offscreen-canvas-or-video-frame {
    html-canvas-element(borrow<html-canvas-element>),
    html-or-svg-image-element(html-or-svg-image-element),
    html-video-element(borrow<html-video-element>),
    image-bitmap(borrow<image-bitmap>),
    offscreen-canvas(borrow<offscreen-canvas>),
    video-frame(borrow<video-frame>),
  }
  type canvas-image-source = html-canvas-element-or-html-or-svg-image-element-or-html-video-element-or-image-bitmap-or-offscreen-canvas-or-video-frame;
  resource canvas-rendering-context2-d {
    canvas: func() -> option<html-canvas-element>;
    DRAWWINDOW-DRAW-CARET: static func() -> u32;
    DRAWWINDOW-DO-NOT-FLUSH: static func() -> u32;
    DRAWWINDOW-DRAW-VIEW: static func() -> u32;
    DRAWWINDOW-USE-WIDGET-LAYERS: static func() -> u32;
    DRAWWINDOW-ASYNC-DECODE-IMAGES: static func() -> u32;
    draw-window: func(window: borrow<window>, x: f64, y: f64, w: f64, h: f64, bg-color: string, %flags: option<u32>);
    demote: func();
    save: func();
    restore: func();
    reset: func();
    scale: func(x: f64, y: f64);
    rotate: func(angle: f64);
    translate: func(x: f64, y: f64);
    transform: func(a: f64, b: f64, c: f64, d: f64, e: f64, f: f64);
    set-transform: func(params: canvas-rendering-context2-d-set-transform-params);
    reset-transform: func();
    get-transform: func() -> dom-matrix;
    global-alpha: func() -> f64;
    set-global-alpha: func(global-alpha: f64);
    global-composite-operation: func() -> string;
    set-global-composite-operation: func(global-composite-operation: string);
    image-smoothing-enabled: func() -> bool;
    set-image-smoothing-enabled: func(image-smoothing-enabled: bool);
    // stroke-style: func() -> canvas-gradient-or-canvas-pattern-or-string;
    set-stroke-style: func(stroke-style: canvas-gradient-or-canvas-pattern-or-string);
    // fill-style: func() -> canvas-gradient-or-canvas-pattern-or-string;
    set-fill-style: func(fill-style: canvas-gradient-or-canvas-pattern-or-string);
    create-linear-gradient: func(x0: f64, y0: f64, x1: f64, y1: f64) -> canvas-gradient;
    create-radial-gradient: func(x0: f64, y0: f64, r0: f64, x1: f64, y1: f64, r1: f64) -> canvas-gradient;
    create-pattern: func(image: canvas-image-source, repetition: string) -> option<canvas-pattern>;
    shadow-offset-x: func() -> f64;
    set-shadow-offset-x: func(shadow-offset-x: f64);
    shadow-offset-y: func() -> f64;
    set-shadow-offset-y: func(shadow-offset-y: f64);
    shadow-blur: func() -> f64;
    set-shadow-blur: func(shadow-blur: f64);
    shadow-color: func() -> string;
    set-shadow-color: func(shadow-color: string);
    filter: func() -> string;
    set-filter: func(filter: string);
    clear-rect: func(x: f64, y: f64, w: f64, h: f64);
    fill-rect: func(x: f64, y: f64, w: f64, h: f64);
    stroke-rect: func(x: f64, y: f64, w: f64, h: f64);
    begin-path: func();
    fill: func(params: canvas-rendering-context2-d-fill-params);
    stroke: func(params: option<canvas-rendering-context2-d-stroke-params>);
    clip: func(params: canvas-rendering-context2-d-clip-params);
    is-point-in-path: func(params: canvas-rendering-context2-d-is-point-in-path-params) -> bool;
    is-point-in-stroke: func(params: canvas-rendering-context2-d-is-point-in-stroke-params) -> bool;
    draw-focus-if-needed: func(element: borrow<element>);
    draw-custom-focus-ring: func(element: borrow<element>) -> bool;
    fill-text: func(text: string, x: f64, y: f64, max-width: option<f64>);
    stroke-text: func(text: string, x: f64, y: f64, max-width: option<f64>);
    measure-text: func(text: string) -> text-metrics;
    draw-image: func(params: canvas-rendering-context2-d-draw-image-params);
    create-image-data: func(params: canvas-rendering-context2-d-create-image-data-params) -> image-data;
    get-image-data: func(sx: f64, sy: f64, sw: f64, sh: f64) -> image-data;
    put-image-data: func(params: canvas-rendering-context2-d-put-image-data-params);
    line-width: func() -> f64;
    set-line-width: func(line-width: f64);
    line-cap: func() -> string;
    set-line-cap: func(line-cap: string);
    line-join: func() -> string;
    set-line-join: func(line-join: string);
    miter-limit: func() -> f64;
    set-miter-limit: func(miter-limit: f64);
    set-line-dash: func(segments: list<f64>);
    get-line-dash: func() -> list<f64>;
    line-dash-offset: func() -> f64;
    set-line-dash-offset: func(line-dash-offset: f64);
    font: func() -> string;
    set-font: func(font: string);
    text-align: func() -> string;
    set-text-align: func(text-align: string);
    text-baseline: func() -> string;
    set-text-baseline: func(text-baseline: string);
    close-path: func();
    move-to: func(x: f64, y: f64);
    line-to: func(x: f64, y: f64);
    quadratic-curve-to: func(cpx: f64, cpy: f64, x: f64, y: f64);
    bezier-curve-to: func(cp1x: f64, cp1y: f64, cp2x: f64, cp2y: f64, x: f64, y: f64);
    arc-to: func(x1: f64, y1: f64, x2: f64, y2: f64, radius: f64);
    rect: func(x: f64, y: f64, w: f64, h: f64);
    round-rect: func(x: f64, y: f64, w: f64, h: f64, radii: option<dom-point-init-or-f64-or-list-dom-point-init-or-f64>);
    arc: func(x: f64, y: f64, radius: f64, start-angle: f64, end-angle: f64, anticlockwise: option<bool>);
    ellipse: func(x: f64, y: f64, radius-x: f64, radius-y: f64, rotation: f64, start-angle: f64, end-angle: f64, anticlockwise: option<bool>);
    add-hit-region: func(options: option<hit-region-options>);
    remove-hit-region: func(id: string);
    clear-hit-regions: func();
  }
  variant canvas-rendering-context2-d-set-transform-params {
    a-b-c-d-e-f(tuple<f64, f64, f64, f64, f64, f64>),
    transform(option<dom-matrix2-d-init>),
  }
  variant canvas-gradient-or-canvas-pattern-or-string {
    canvas-gradient(borrow<canvas-gradient>),
    canvas-pattern(borrow<canvas-pattern>),
    %string(string),
  }
  variant canvas-rendering-context2-d-fill-params {
    winding(option<canvas-winding-rule>),
    path-winding(tuple<borrow<path2-d>, option<canvas-winding-rule>>),
  }
  variant canvas-rendering-context2-d-stroke-params {
    path(borrow<path2-d>),
  }
  variant canvas-rendering-context2-d-clip-params {
    winding(option<canvas-winding-rule>),
    path-winding(tuple<borrow<path2-d>, option<canvas-winding-rule>>),
  }
  variant canvas-rendering-context2-d-is-point-in-path-params {
    x-y-winding(tuple<f64, f64, option<canvas-winding-rule>>),
    path-x-y-winding(tuple<borrow<path2-d>, f64, f64, option<canvas-winding-rule>>),
  }
  variant canvas-rendering-context2-d-is-point-in-stroke-params {
    x-y(tuple<f64, f64>),
    path-x-y(tuple<borrow<path2-d>, f64, f64>),
  }
  variant canvas-rendering-context2-d-draw-image-params {
    image-dx-dy(tuple<canvas-image-source, f64, f64>),
    image-dx-dy-dw-dh(tuple<canvas-image-source, f64, f64, f64, f64>),
    image-sx-sy-sw-sh-dx-dy-dw-dh(tuple<canvas-image-source, f64, f64, f64, f64, f64, f64, f64, f64>),
  }
  variant canvas-rendering-context2-d-create-image-data-params {
    sw-sh(tuple<f64, f64>),
    imagedata(borrow<image-data>),
  }
  variant canvas-rendering-context2-d-put-image-data-params {
    imagedata-dx-dy(tuple<borrow<image-data>, f64, f64>),
    imagedata-dx-dy-dirty-x-dirty-y-dirty-width-dirty-height(tuple<borrow<image-data>, f64, f64, f64, f64, f64, f64>),
  }
  variant dom-point-init-or-f64 {
    dom-point-init(dom-point-init),
    %f64(f64),
  }
  variant dom-point-init-or-f64-or-list-dom-point-init-or-f64 {
    dom-point-init(dom-point-init),
    %f64(f64),
    list-dom-point-init-or-f64(list<dom-point-init-or-f64>),
  }
  resource canvas-gradient {
    add-color-stop: func(offset: f32, color: string);
  }
  resource canvas-pattern {
    set-transform: func(matrix: borrow<svg-matrix>);
  }
  resource text-metrics {
    width: func() -> f64;
    actual-bounding-box-left: func() -> f64;
    actual-bounding-box-right: func() -> f64;
    font-bounding-box-ascent: func() -> f64;
    font-bounding-box-descent: func() -> f64;
    actual-bounding-box-ascent: func() -> f64;
    actual-bounding-box-descent: func() -> f64;
  }
  resource path2-d {
    add-path: func(path: borrow<path2-d>, transformation: option<borrow<svg-matrix>>);
    close-path: func();
    move-to: func(x: f64, y: f64);
    line-to: func(x: f64, y: f64);
    quadratic-curve-to: func(cpx: f64, cpy: f64, x: f64, y: f64);
    bezier-curve-to: func(cp1x: f64, cp1y: f64, cp2x: f64, cp2y: f64, x: f64, y: f64);
    arc-to: func(x1: f64, y1: f64, x2: f64, y2: f64, radius: f64);
    rect: func(x: f64, y: f64, w: f64, h: f64);
    round-rect: func(x: f64, y: f64, w: f64, h: f64, radii: option<dom-point-init-or-f64-or-list-dom-point-init-or-f64>);
    arc: func(x: f64, y: f64, radius: f64, start-angle: f64, end-angle: f64, anticlockwise: option<bool>);
    ellipse: func(x: f64, y: f64, radius-x: f64, radius-y: f64, rotation: f64, start-angle: f64, end-angle: f64, anticlockwise: option<bool>);
  }
  resource svg-radial-gradient-element {
    as-svg-gradient-element: func() -> svg-gradient-element;
    cx: func() -> svg-animated-length;
    cy: func() -> svg-animated-length;
    r: func() -> svg-animated-length;
    fx: func() -> svg-animated-length;
    fy: func() -> svg-animated-length;
    fr: func() -> svg-animated-length;
    SVG-SPREADMETHOD-UNKNOWN: static func() -> u16;
    SVG-SPREADMETHOD-PAD: static func() -> u16;
    SVG-SPREADMETHOD-REFLECT: static func() -> u16;
    SVG-SPREADMETHOD-REPEAT: static func() -> u16;
    gradient-units: func() -> svg-animated-enumeration;
    gradient-transform: func() -> svg-animated-transform-list;
    spread-method: func() -> svg-animated-enumeration;
  }
  resource url-search-params {
    append: func(name: string, value: string);
    delete: func(name: string);
    get: func(name: string) -> string;
    get-all: func(name: string) -> list<string>;
    has: func(name: string) -> bool;
    set: func(name: string, value: string);
    sort: func();
  }
  resource notification {
    as-event-target: func() -> event-target;
    constructor(title: string, options: option<notification-options>);
    permission: static func() -> notification-permission;
    request-permission: static func(permission-callback: option<borrow<notification-permission-callback>>) -> notification-permission;
    max-actions: static func() -> u32;
    onclick-subscribe: func() -> pollable;
    onshow-subscribe: func() -> pollable;
    onerror-subscribe: func() -> pollable;
    onclose-subscribe: func() -> pollable;
    title: func() -> string;
    dir: func() -> notification-direction;
    lang: func() -> string;
    body: func() -> string;
    tag: func() -> string;
    image: func() -> string;
    icon: func() -> string;
    badge: func() -> string;
    vibrate: func() -> list<u32>;
    timestamp: func() -> u64;
    renotify: func() -> bool;
    silent: func() -> bool;
    require-interaction: func() -> bool;
    data: func() -> any;
    actions: func() -> list<notification-action>;
    close: func();
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  record notification-options {
    dir: option<notification-direction>,
    lang: option<string>,
    body: option<string>,
    tag: option<string>,
    image: option<string>,
    icon: option<string>,
    badge: option<string>,
    timestamp: option<u64>,
    renotify: option<bool>,
    silent: option<bool>,
    require-interaction: option<bool>,
    data: any,
    actions: option<list<notification-action>>,
  }
  enum notification-permission {
    default,
    denied,
    granted,
  }
  enum notification-direction {
    auto,
    ltr,
    rtl,
  }
  record notification-action {
    action: string,
    title: string,
    icon: option<string>,
  }
  resource data-view {
    constructor(buffer: borrow<array-buffer>, byte-offset: option<u32>, byte-length: option<u32>);
    buffer: func() -> array-buffer;
    byte-length: func() -> u32;
    byte-offset: func() -> u32;
    get-int8: func(byte-offset: u32) -> s8;
    set-int8: func(byte-offset: u32, value: s8);
    get-int16: func(byte-offset: u32, little-endian: option<bool>) -> s16;
    set-int16: func(byte-offset: u32, value: s16, little-endian: option<bool>);
    get-int32: func(byte-offset: u32, little-endian: option<bool>) -> s32;
    set-int32: func(byte-offset: u32, value: s32, little-endian: option<bool>);
    get-uint8: func(byte-offset: u32) -> u8;
    set-uint8: func(byte-offset: u32, value: u8);
    get-uint16: func(byte-offset: u32, little-endian: option<bool>) -> u16;
    set-uint16: func(byte-offset: u32, value: u16, little-endian: option<bool>);
    get-uint32: func(byte-offset: u32, little-endian: option<bool>) -> u32;
    set-uint32: func(byte-offset: u32, value: u32, little-endian: option<bool>);
    get-float32: func(byte-offset: u32, little-endian: option<bool>) -> f32;
    set-float32: func(byte-offset: u32, value: f32, little-endian: option<bool>);
    get-float64: func(byte-offset: u32, little-endian: option<bool>) -> f64;
    set-float64: func(byte-offset: u32, value: f64, little-endian: option<bool>);
  }
  variant uint8-array-constructor-options {
    uint8-array(uint8-array),
    length(u32),
    array-buffer(tuple<array-buffer, option<u32>, option<u32>>),
  }
  variant uint8-array-set-src {
    %list(list<u8>),
    uint8-array(uint8-array),
  }
  resource uint8-array {
    constructor(options: option<uint8-array-constructor-options>);
    fill: func(value: u8, start: option<u32>, end: option<u32>) -> uint8-array;
    buffer: func() -> array-buffer;
    length: func() -> u32;
    byte-offset: func() -> u32;
    byte-length: func() -> u32;
    at: func(index: s32) -> option<u8>;
    copy-within: func(target: u32, start: u32, end: option<u32>) -> uint8-array;
    set: func(src: uint8-array-set-src, offset: u32);
    slice: func(begin: u32, end: u32) -> uint8-array;
    subarray: func(begin: u32, end: u32) -> uint8-array;
    values: func() -> list<u8>;
    get-index: func(index: u32) -> u8;
    set-index: func(index: u32, value: u8);
  }
  variant uint8-clamped-array-constructor-options {
    uint8-clamped-array(uint8-clamped-array),
    length(u32),
    array-buffer(tuple<array-buffer, option<u32>, option<u32>>),
  }
  variant uint8-clamped-array-set-src {
    %list(list<u8>),
    uint8-clamped-array(uint8-clamped-array),
  }
  resource uint8-clamped-array {
    constructor(options: option<uint8-clamped-array-constructor-options>);
    fill: func(value: u8, start: option<u32>, end: option<u32>) -> uint8-clamped-array;
    buffer: func() -> array-buffer;
    length: func() -> u32;
    byte-offset: func() -> u32;
    byte-length: func() -> u32;
    at: func(index: s32) -> option<u8>;
    copy-within: func(target: u32, start: u32, end: option<u32>) -> uint8-clamped-array;
    set: func(src: uint8-clamped-array-set-src, offset: u32);
    slice: func(begin: u32, end: u32) -> uint8-clamped-array;
    subarray: func(begin: u32, end: u32) -> uint8-clamped-array;
    values: func() -> list<u8>;
    get-index: func(index: u32) -> u8;
    set-index: func(index: u32, value: u8);
  }
  variant uint16-array-constructor-options {
    uint16-array(uint16-array),
    length(u32),
    array-buffer(tuple<array-buffer, option<u32>, option<u32>>),
  }
  variant uint16-array-set-src {
    %list(list<u16>),
    uint16-array(uint16-array),
  }
  resource uint16-array {
    constructor(options: option<uint16-array-constructor-options>);
    fill: func(value: u16, start: option<u32>, end: option<u32>) -> uint16-array;
    buffer: func() -> array-buffer;
    length: func() -> u32;
    byte-offset: func() -> u32;
    byte-length: func() -> u32;
    at: func(index: s32) -> option<u16>;
    copy-within: func(target: u32, start: u32, end: option<u32>) -> uint16-array;
    set: func(src: uint16-array-set-src, offset: u32);
    slice: func(begin: u32, end: u32) -> uint16-array;
    subarray: func(begin: u32, end: u32) -> uint16-array;
    values: func() -> list<u16>;
    get-index: func(index: u32) -> u16;
    set-index: func(index: u32, value: u16);
  }
  variant uint32-array-constructor-options {
    uint32-array(uint32-array),
    length(u32),
    array-buffer(tuple<array-buffer, option<u32>, option<u32>>),
  }
  variant uint32-array-set-src {
    %list(list<u32>),
    uint32-array(uint32-array),
  }
  resource uint32-array {
    constructor(options: option<uint32-array-constructor-options>);
    fill: func(value: u32, start: option<u32>, end: option<u32>) -> uint32-array;
    buffer: func() -> array-buffer;
    length: func() -> u32;
    byte-offset: func() -> u32;
    byte-length: func() -> u32;
    at: func(index: s32) -> option<u32>;
    copy-within: func(target: u32, start: u32, end: option<u32>) -> uint32-array;
    set: func(src: uint32-array-set-src, offset: u32);
    slice: func(begin: u32, end: u32) -> uint32-array;
    subarray: func(begin: u32, end: u32) -> uint32-array;
    values: func() -> list<u32>;
    get-index: func(index: u32) -> u32;
    set-index: func(index: u32, value: u32);
  }
  variant int8-array-constructor-options {
    int8-array(int8-array),
    length(u32),
    array-buffer(tuple<array-buffer, option<u32>, option<u32>>),
  }
  variant int8-array-set-src {
    %list(list<s8>),
    int8-array(int8-array),
  }
  resource int8-array {
    constructor(options: option<int8-array-constructor-options>);
    fill: func(value: s8, start: option<u32>, end: option<u32>) -> int8-array;
    buffer: func() -> array-buffer;
    length: func() -> u32;
    byte-offset: func() -> u32;
    byte-length: func() -> u32;
    at: func(index: s32) -> option<s8>;
    copy-within: func(target: u32, start: u32, end: option<u32>) -> int8-array;
    set: func(src: int8-array-set-src, offset: u32);
    slice: func(begin: u32, end: u32) -> int8-array;
    subarray: func(begin: u32, end: u32) -> int8-array;
    values: func() -> list<s8>;
    get-index: func(index: u32) -> s8;
    set-index: func(index: u32, value: s8);
  }
  variant int16-array-constructor-options {
    int16-array(int16-array),
    length(u32),
    array-buffer(tuple<array-buffer, option<u32>, option<u32>>),
  }
  variant int16-array-set-src {
    %list(list<s16>),
    int16-array(int16-array),
  }
  resource int16-array {
    constructor(options: option<int16-array-constructor-options>);
    fill: func(value: s16, start: option<u32>, end: option<u32>) -> int16-array;
    buffer: func() -> array-buffer;
    length: func() -> u32;
    byte-offset: func() -> u32;
    byte-length: func() -> u32;
    at: func(index: s32) -> option<s16>;
    copy-within: func(target: u32, start: u32, end: option<u32>) -> int16-array;
    set: func(src: int16-array-set-src, offset: u32);
    slice: func(begin: u32, end: u32) -> int16-array;
    subarray: func(begin: u32, end: u32) -> int16-array;
    values: func() -> list<s16>;
    get-index: func(index: u32) -> s16;
    set-index: func(index: u32, value: s16);
  }
  variant int32-array-constructor-options {
    int32-array(int32-array),
    length(u32),
    array-buffer(tuple<array-buffer, option<u32>, option<u32>>),
  }
  variant int32-array-set-src {
    %list(list<s32>),
    int32-array(int32-array),
  }
  resource int32-array {
    constructor(options: option<int32-array-constructor-options>);
    fill: func(value: s32, start: option<u32>, end: option<u32>) -> int32-array;
    buffer: func() -> array-buffer;
    length: func() -> u32;
    byte-offset: func() -> u32;
    byte-length: func() -> u32;
    at: func(index: s32) -> option<s32>;
    copy-within: func(target: u32, start: u32, end: option<u32>) -> int32-array;
    set: func(src: int32-array-set-src, offset: u32);
    slice: func(begin: u32, end: u32) -> int32-array;
    subarray: func(begin: u32, end: u32) -> int32-array;
    values: func() -> list<s32>;
    get-index: func(index: u32) -> s32;
    set-index: func(index: u32, value: s32);
  }
  variant float64-array-constructor-options {
    float64-array(float64-array),
    length(u32),
    array-buffer(tuple<array-buffer, option<u32>, option<u32>>),
  }
  variant float64-array-set-src {
    %list(list<f64>),
    float64-array(float64-array),
  }
  resource float64-array {
    constructor(options: option<float64-array-constructor-options>);
    fill: func(value: f64, start: option<u32>, end: option<u32>) -> float64-array;
    buffer: func() -> array-buffer;
    length: func() -> u32;
    byte-offset: func() -> u32;
    byte-length: func() -> u32;
    at: func(index: s32) -> option<f64>;
    copy-within: func(target: u32, start: u32, end: option<u32>) -> float64-array;
    set: func(src: float64-array-set-src, offset: u32);
    slice: func(begin: u32, end: u32) -> float64-array;
    subarray: func(begin: u32, end: u32) -> float64-array;
    values: func() -> list<f64>;
    get-index: func(index: u32) -> f64;
    set-index: func(index: u32, value: f64);
  }
  variant array-buffer-view {
    data-view(data-view),
    uint8-array(uint8-array),
    uint8-clamped-array(uint8-clamped-array),
    uint16-array(uint16-array),
    uint32-array(uint32-array),
    int8-array(int8-array),
    int16-array(int16-array),
    int32-array(int32-array),
    float32-array(float32-array),
    float64-array(float64-array),
  }
  variant array-buffer-or-array-buffer-view {
    array-buffer(array-buffer),
    array-buffer-view(array-buffer-view),
  }
  type binary-data = array-buffer-or-array-buffer-view;
  record font-face-descriptors {
    style: option<string>,
    weight: option<string>,
    stretch: option<string>,
    unicode-range: option<string>,
    %variant: option<string>,
    feature-settings: option<string>,
    variation-settings: option<string>,
    display: option<string>,
  }
  enum font-face-load-status {
    unloaded,
    loading,
    loaded,
    error,
  }
  resource font-face {
    family: func() -> string;
    set-family: func(family: string);
    style: func() -> string;
    set-style: func(style: string);
    weight: func() -> string;
    set-weight: func(weight: string);
    stretch: func() -> string;
    set-stretch: func(stretch: string);
    unicode-range: func() -> string;
    set-unicode-range: func(unicode-range: string);
    %variant: func() -> string;
    set-variant: func(%variant: string);
    feature-settings: func() -> string;
    set-feature-settings: func(feature-settings: string);
    variation-settings: func() -> string;
    set-variation-settings: func(variation-settings: string);
    display: func() -> string;
    set-display: func(display: string);
    status: func() -> font-face-load-status;
    load: func() -> font-face;
    loaded: func() -> font-face;
  }
  resource html-embed-element {
    as-html-element: func() -> html-element;
    src: func() -> string;
    set-src: func(src: string);
    %type: func() -> string;
    set-type: func(%type: string);
    width: func() -> string;
    set-width: func(width: string);
    height: func() -> string;
    set-height: func(height: string);
    align: func() -> string;
    set-align: func(align: string);
    name: func() -> string;
    set-name: func(name: string);
    get-svg-document: func() -> option<document>;
    title: func() -> string;
    set-title: func(title: string);
    scroll-height: func() -> s32;
    set-scroll-height: func(scroll-height: s32);
    scroll-top: func() -> s32;
    set-scroll-top: func(scroll-top: s32);
    lang: func() -> string;
    set-lang: func(lang: string);
    dir: func() -> string;
    set-dir: func(dir: string);
    dataset: func() -> dom-string-map;
    inner-text: func() -> string;
    set-inner-text: func(inner-text: string);
    hidden: func() -> bool;
    set-hidden: func(hidden: bool);
    inert: func() -> bool;
    set-inert: func(inert: bool);
    click: func();
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func(options: option<focus-options>);
    blur: func();
    access-key: func() -> string;
    set-access-key: func(access-key: string);
    access-key-label: func() -> string;
    draggable: func() -> bool;
    set-draggable: func(draggable: bool);
    content-editable: func() -> string;
    set-content-editable: func(content-editable: string);
    is-content-editable: func() -> bool;
    spellcheck: func() -> bool;
    set-spellcheck: func(spellcheck: bool);
    style: func() -> css-style-declaration;
  }
  resource html-table-col-element {
    as-html-element: func() -> html-element;
    span: func() -> u32;
    set-span: func(span: u32);
    align: func() -> string;
    set-align: func(align: string);
    ch: func() -> string;
    set-ch: func(ch: string);
    ch-off: func() -> string;
    set-ch-off: func(ch-off: string);
    v-align: func() -> string;
    set-v-align: func(v-align: string);
    width: func() -> string;
    set-width: func(width: string);
    title: func() -> string;
    set-title: func(title: string);
    scroll-height: func() -> s32;
    set-scroll-height: func(scroll-height: s32);
    scroll-top: func() -> s32;
    set-scroll-top: func(scroll-top: s32);
    lang: func() -> string;
    set-lang: func(lang: string);
    dir: func() -> string;
    set-dir: func(dir: string);
    dataset: func() -> dom-string-map;
    inner-text: func() -> string;
    set-inner-text: func(inner-text: string);
    hidden: func() -> bool;
    set-hidden: func(hidden: bool);
    inert: func() -> bool;
    set-inert: func(inert: bool);
    click: func();
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func(options: option<focus-options>);
    blur: func();
    access-key: func() -> string;
    set-access-key: func(access-key: string);
    access-key-label: func() -> string;
    draggable: func() -> bool;
    set-draggable: func(draggable: bool);
    content-editable: func() -> string;
    set-content-editable: func(content-editable: string);
    is-content-editable: func() -> bool;
    spellcheck: func() -> bool;
    set-spellcheck: func(spellcheck: bool);
    style: func() -> css-style-declaration;
  }
  resource service-worker-global-scope {
    as-worker-global-scope: func() -> worker-global-scope;
    clients: func() -> clients;
    registration: func() -> service-worker-registration;
    skip-waiting: func();
    oninstall-subscribe: func() -> pollable;
    onactivate-subscribe: func() -> pollable;
    onfetch-subscribe: func() -> pollable;
    onmessage-subscribe: func() -> pollable;
    onpush-subscribe: func() -> pollable;
    onpushsubscriptionchange-subscribe: func() -> pollable;
    onnotificationclick-subscribe: func() -> pollable;
    onnotificationclose-subscribe: func() -> pollable;
    self: func() -> worker-global-scope;
    location: func() -> worker-location;
    navigator: func() -> worker-navigator;
    import-scripts: func(urls: list<string>);
    onerror: func() -> on-error-event-handler;
    set-onerror: func(onerror: on-error-event-handler);
    onoffline-subscribe: func() -> pollable;
    ononline-subscribe: func() -> pollable;
  }
  resource public-key-credential {
    as-credential: func() -> credential;
    raw-id: func() -> array-buffer;
    response: func() -> authenticator-response;
    get-client-extension-results: func() -> authentication-extensions-client-outputs;
    is-user-verifying-platform-authenticator-available: static func() -> bool;
    id: func() -> string;
    %type: func() -> string;
  }
  resource authenticator-response {
    client-data-json: func() -> array-buffer;
    as-authenticator-attestation-response: func() -> option<authenticator-attestation-response>;
    as-authenticator-assertion-response: func() -> option<authenticator-assertion-response>;
  }
  resource authenticator-attestation-response {
    as-authenticator-response: func() -> authenticator-response;
    attestation-object: func() -> array-buffer;
  }
  resource authenticator-assertion-response {
    as-authenticator-response: func() -> authenticator-response;
    authenticator-data: func() -> array-buffer;
    signature: func() -> array-buffer;
    user-handle: func() -> array-buffer;
  }
  record public-key-credential-parameters {
    %type: public-key-credential-type,
    alg: cose-algorithm-identifier,
  }
  variant buffer-source {
    array-buffer(array-buffer),
    array-buffer-view(array-buffer-view),
  }
  record public-key-credential-creation-options {
    rp: public-key-credential-rp-entity,
    user: public-key-credential-user-entity,
    challenge: buffer-source,
    pub-key-cred-params: list<public-key-credential-parameters>,
    timeout: option<u32>,
    exclude-credentials: option<list<public-key-credential-descriptor>>,
    authenticator-selection: option<authenticator-selection-criteria>,
    attestation: option<attestation-conveyance-preference>,
    extensions: option<authentication-extensions-client-inputs>,
  }
  record public-key-credential-entity {
    name: string,
    icon: option<string>,
  }
  record public-key-credential-rp-entity {
    id: option<string>,
    name: string,
    icon: option<string>,
  }
  record public-key-credential-user-entity {
    id: buffer-source,
    display-name: string,
    name: string,
    icon: option<string>,
  }
  record authenticator-selection-criteria {
    authenticator-attachment: option<authenticator-attachment>,
    require-resident-key: option<bool>,
    user-verification: option<user-verification-requirement>,
  }
  enum authenticator-attachment {
    platform,
    cross-platform,
  }
  enum attestation-conveyance-preference {
    none,
    indirect,
    direct,
  }
  enum user-verification-requirement {
    required,
    preferred,
    discouraged,
  }
  record public-key-credential-request-options {
    challenge: buffer-source,
    timeout: option<u32>,
    rp-id: option<string>,
    allow-credentials: option<list<public-key-credential-descriptor>>,
    user-verification: option<user-verification-requirement>,
    extensions: option<authentication-extensions-client-inputs>,
  }
  record authentication-extensions-client-inputs {
    appid: option<string>,
  }
  record authentication-extensions-client-outputs {
    appid: option<bool>,
  }
  resource record-string {
    constructor();
    add: func(key: string, value: string);
    get: func(key: string) -> option<string>;
    has: func(key: string) -> bool;
    remove: func(key: string);
    keys: func() -> list<string>;
    values: func() -> list<string>;
    entries: func() -> list<tuple<string, string>>;
  }
  type authentication-extensions-authenticator-inputs = record-string;
  record collected-client-data {
    %type: string,
    challenge: string,
    origin: string,
    hash-algorithm: string,
    token-binding-id: option<string>,
    client-extensions: option<authentication-extensions-client-inputs>,
    authenticator-extensions: option<authentication-extensions-authenticator-inputs>,
  }
  enum public-key-credential-type {
    public-key,
  }
  record public-key-credential-descriptor {
    %type: public-key-credential-type,
    id: buffer-source,
    transports: option<list<authenticator-transport>>,
  }
  enum authenticator-transport {
    usb,
    nfc,
    ble,
  }
  type cose-algorithm-identifier = s32;
  type authenticator-selection-list = list<aaguid>;
  type aaguid = buffer-source;
  resource promise-rejection-event {
    as-event: func() -> event;
    promise: func() -> any;
    reason: func() -> any;
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
  }
  record promise-rejection-event-init {
    promise: any,
    reason: any,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource audio-worklet {
    as-worklet: func() -> worklet;
    add-module: func(module-url: string, options: option<worklet-options>);
  }
  enum source-buffer-append-mode {
    segments,
    sequence,
  }
  resource source-buffer {
    as-event-target: func() -> event-target;
    mode: func() -> source-buffer-append-mode;
    set-mode: func(mode: source-buffer-append-mode);
    updating: func() -> bool;
    buffered: func() -> time-ranges;
    timestamp-offset: func() -> f64;
    set-timestamp-offset: func(timestamp-offset: f64);
    audio-tracks: func() -> audio-track-list;
    video-tracks: func() -> video-track-list;
    text-tracks: func() -> text-track-list;
    append-window-start: func() -> f64;
    set-append-window-start: func(append-window-start: f64);
    append-window-end: func() -> f64;
    set-append-window-end: func(append-window-end: f64);
    onupdatestart-subscribe: func() -> pollable;
    onupdate-subscribe: func() -> pollable;
    onupdateend-subscribe: func() -> pollable;
    onerror-subscribe: func() -> pollable;
    onabort-subscribe: func() -> pollable;
    append-buffer: func(params: source-buffer-append-buffer-params);
    append-buffer-async: func(params: source-buffer-append-buffer-async-params);
    abort: func();
    remove: func(start: f64, end: f64);
    remove-async: func(start: f64, end: f64);
    change-type: func(%type: string);
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  variant source-buffer-append-buffer-params {
    data(array-buffer),
    // data(array-buffer-view),
  }
  variant source-buffer-append-buffer-async-params {
    data(array-buffer),
    // data(array-buffer-view),
  }
  resource media-query-list-event {
    as-event: func() -> event;
    media: func() -> string;
    matches: func() -> bool;
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
  }
  record media-query-list-event-init {
    media: option<string>,
    matches: option<bool>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource mutation-record {
    %type: func() -> string;
    target: func() -> option<node>;
    added-nodes: func() -> node-list;
    removed-nodes: func() -> node-list;
    previous-sibling: func() -> option<node>;
    next-sibling: func() -> option<node>;
    attribute-name: func() -> string;
    attribute-namespace: func() -> string;
    old-value: func() -> string;
    added-animations: func() -> list<animation>;
    changed-animations: func() -> list<animation>;
    removed-animations: func() -> list<animation>;
  }
  resource mutation-observer {
    observe: func(target: borrow<node>, options: option<mutation-observer-init>);
    disconnect: func();
    take-records: func() -> list<mutation-record>;
    // get-observing-info: func() -> list<option<mutation-observing-info>>;
    mutation-callback: func() -> mutation-callback;
    merge-attribute-records: func() -> bool;
    set-merge-attribute-records: func(merge-attribute-records: bool);
  }
  record mutation-observer-init {
    child-list: option<bool>,
    attributes: option<bool>,
    character-data: option<bool>,
    subtree: option<bool>,
    attribute-old-value: option<bool>,
    character-data-old-value: option<bool>,
    native-anonymous-child-list: option<bool>,
    animations: option<bool>,
    attribute-filter: option<list<string>>,
  }
  record mutation-observing-info {
    observed-node: option<option<borrow<node>>>,
    child-list: option<bool>,
    attributes: option<bool>,
    character-data: option<bool>,
    subtree: option<bool>,
    attribute-old-value: option<bool>,
    character-data-old-value: option<bool>,
    native-anonymous-child-list: option<bool>,
    animations: option<bool>,
    attribute-filter: option<list<string>>,
  }
  enum file-system-handle-kind {
    file,
    directory,
  }
  resource file-system-handle {
    kind: func() -> file-system-handle-kind;
    name: func() -> string;
    is-same-entry: func(other: borrow<file-system-handle>) -> bool;
    as-file-system-file-handle: func() -> option<file-system-file-handle>;
    as-file-system-directory-handle: func() -> option<file-system-directory-handle>;
  }
  record file-system-create-writable-options {
    keep-existing-data: option<bool>,
  }
  resource file-system-file-handle {
    as-file-system-handle: func() -> file-system-handle;
    get-file: func() -> file;
    create-writable: func(options: option<file-system-create-writable-options>) -> file-system-writable-file-stream;
    create-sync-access-handle: func() -> file-system-sync-access-handle;
  }
  record file-system-get-file-options {
    create: option<bool>,
  }
  record file-system-get-directory-options {
    create: option<bool>,
  }
  record file-system-remove-options {
    recursive: option<bool>,
  }
  resource file-system-directory-handle {
    as-file-system-handle: func() -> file-system-handle;
    get-file-handle: func(name: string, options: option<file-system-get-file-options>) -> file-system-file-handle;
    get-directory-handle: func(name: string, options: option<file-system-get-directory-options>) -> file-system-directory-handle;
    remove-entry: func(name: string, options: option<file-system-remove-options>);
    resolve: func(possible-descendant: borrow<file-system-handle>) -> list<option<string>>;
  }
  enum write-command-type {
    write,
    seek,
    truncate,
  }
  variant blob-or-buffer-source-or-string {
    blob(borrow<blob>),
    buffer-source(buffer-source),
    %string(string),
  }
  record write-params {
    %type: write-command-type,
    size: option<u64>,
    position: option<u64>,
    data: option<blob-or-buffer-source-or-string>,
  }
  variant blob-or-buffer-source-or-string-or-write-params {
    blob(borrow<blob>),
    buffer-source(buffer-source),
    %string(string),
    write-params(write-params),
  }
  type file-system-write-chunk-type = blob-or-buffer-source-or-string-or-write-params;
  resource file-system-writable-file-stream {
    as-writable-stream: func() -> writable-stream;
    write: func(data: file-system-write-chunk-type);
    seek: func(position: u64);
    truncate: func(size: u64);
    constructor(underlying-sink: option<object>, strategy: option<queuing-strategy>);
    locked: func() -> bool;
    abort: func(reason: any);
    close: func();
    get-writer: func() -> writable-stream-default-writer;
  }
  record file-system-read-write-options {
    at: option<u64>,
  }
  resource file-system-sync-access-handle {
    read: func(buffer: buffer-source, options: option<file-system-read-write-options>) -> u64;
    write: func(buffer: buffer-source, options: option<file-system-read-write-options>) -> u64;
    truncate: func(new-size: u64);
    get-size: func() -> u64;
    flush: func();
    close: func();
  }
  enum tcp-socket-binary-type {
    arraybuffer,
    %string,
  }
  record socket-options {
    use-secure-transport: option<bool>,
    binary-type: option<tcp-socket-binary-type>,
  }
  enum tcp-ready-state {
    connecting,
    open,
    closing,
    closed,
  }
  resource tcp-socket {
    as-event-target: func() -> event-target;
    upgrade-to-secure: func();
    host: func() -> string;
    port: func() -> u16;
    ssl: func() -> bool;
    buffered-amount: func() -> u64;
    suspend: func();
    resume: func();
    close: func();
    close-immediately: func();
    send: func(params: tcp-socket-send-params) -> bool;
    ready-state: func() -> tcp-ready-state;
    binary-type: func() -> tcp-socket-binary-type;
    onopen-subscribe: func() -> pollable;
    ondrain-subscribe: func() -> pollable;
    ondata-subscribe: func() -> pollable;
    onerror-subscribe: func() -> pollable;
    onclose-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  variant tcp-socket-send-params {
    data(string),
    data-byte-offset-byte-length(tuple<array-buffer, option<u32>, option<u32>>),
  }
  record media-recorder-error-event-init {
    error: borrow<dom-exception>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource media-recorder-error-event {
    as-event: func() -> event;
    error: func() -> dom-exception;
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
  }
  resource shared-worker-global-scope {
    as-worker-global-scope: func() -> worker-global-scope;
    name: func() -> string;
    close: func();
    onconnect-subscribe: func() -> pollable;
    self: func() -> worker-global-scope;
    location: func() -> worker-location;
    navigator: func() -> worker-navigator;
    import-scripts: func(urls: list<string>);
    onerror: func() -> on-error-event-handler;
    set-onerror: func(onerror: on-error-event-handler);
    onoffline-subscribe: func() -> pollable;
    ononline-subscribe: func() -> pollable;
  }
  enum media-key-status {
    usable,
    expired,
    released,
    output-restricted,
    output-downscaled,
    status-pending,
    internal-error,
  }
  resource media-key-status-map {
    size: func() -> u32;
    has: func(key-id: buffer-source) -> bool;
    get: func(key-id: buffer-source) -> any;
  }
  resource abort-signal {
    as-event-target: func() -> event-target;
    aborted: func() -> bool;
    onabort-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource worker-debugger-global-scope {
    as-event-target: func() -> event-target;
    global: func() -> object;
    create-sandbox: func(name: string, prototype: object) -> object;
    load-sub-script: func(url: string, sandbox: option<object>);
    enter-event-loop: func();
    leave-event-loop: func();
    post-message: func(message: string);
    onmessage-subscribe: func() -> pollable;
    set-immediate: func(handler: borrow<function>);
    report-error: func(message: string);
    retrieve-console-events: func() -> list<any>;
    set-console-event-handler: func(handler: option<borrow<any-callback>>);
    dump: func(%string: option<string>);
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource object {
    constructor();
    add: func(key: string, value: any);
    get: func(key: string) -> option<any>;
    has: func(key: string) -> bool;
    remove: func(key: string);
    keys: func() -> list<string>;
    values: func() -> list<any>;
    entries: func() -> list<tuple<string, any>>;
  }
  resource css-style-declaration {
    css-text: func() -> string;
    set-css-text: func(css-text: string);
    length: func() -> u32;
    item: func(index: u32) -> string;
    get-css-image-ur-ls: func(property: string) -> list<string>;
    get-property-value: func(property: string) -> string;
    get-property-priority: func(property: string) -> string;
    set-property: func(property: string, value: string, priority: option<string>);
    remove-property: func(property: string) -> string;
    parent-rule: func() -> option<css-rule>;
  }
  resource svg-view-element {
    as-svg-element: func() -> svg-element;
    id: func() -> string;
    set-id: func(id: string);
    class-name: func() -> svg-animated-string;
    dataset: func() -> dom-string-map;
    style: func() -> css-style-declaration;
    owner-svg-element: func() -> option<svgsvg-element>;
    viewport-element: func() -> option<svg-element>;
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func();
    blur: func();
    SVG-ZOOMANDPAN-UNKNOWN: static func() -> u16;
    SVG-ZOOMANDPAN-DISABLE: static func() -> u16;
    SVG-ZOOMANDPAN-MAGNIFY: static func() -> u16;
    zoom-and-pan: func() -> u16;
    set-zoom-and-pan: func(zoom-and-pan: u16);
    view-box: func() -> svg-animated-rect;
    preserve-aspect-ratio: func() -> svg-animated-preserve-aspect-ratio;
  }
  resource html-slot-element {
    as-html-element: func() -> html-element;
    name: func() -> string;
    set-name: func(name: string);
    assigned-nodes: func(options: option<assigned-nodes-options>) -> list<node>;
    title: func() -> string;
    set-title: func(title: string);
    scroll-height: func() -> s32;
    set-scroll-height: func(scroll-height: s32);
    scroll-top: func() -> s32;
    set-scroll-top: func(scroll-top: s32);
    lang: func() -> string;
    set-lang: func(lang: string);
    dir: func() -> string;
    set-dir: func(dir: string);
    dataset: func() -> dom-string-map;
    inner-text: func() -> string;
    set-inner-text: func(inner-text: string);
    hidden: func() -> bool;
    set-hidden: func(hidden: bool);
    inert: func() -> bool;
    set-inert: func(inert: bool);
    click: func();
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func(options: option<focus-options>);
    blur: func();
    access-key: func() -> string;
    set-access-key: func(access-key: string);
    access-key-label: func() -> string;
    draggable: func() -> bool;
    set-draggable: func(draggable: bool);
    content-editable: func() -> string;
    set-content-editable: func(content-editable: string);
    is-content-editable: func() -> bool;
    spellcheck: func() -> bool;
    set-spellcheck: func(spellcheck: bool);
    style: func() -> css-style-declaration;
  }
  record assigned-nodes-options {
    flatten: option<bool>,
  }
  enum media-keys-requirement {
    required,
    optional,
    not-allowed,
  }
  record media-key-system-media-capability {
    content-type: option<string>,
    robustness: option<string>,
  }
  record media-key-system-configuration {
    label: option<string>,
    init-data-types: option<list<string>>,
    audio-capabilities: option<list<media-key-system-media-capability>>,
    video-capabilities: option<list<media-key-system-media-capability>>,
    distinctive-identifier: option<media-keys-requirement>,
    persistent-state: option<media-keys-requirement>,
    session-types: option<list<string>>,
  }
  resource media-key-system-access {
    key-system: func() -> string;
    get-configuration: func() -> media-key-system-configuration;
    create-media-keys: func() -> media-keys;
  }
  resource get-user-media-request {
    window-id: func() -> u64;
    inner-window-id: func() -> u64;
    call-id: func() -> string;
    raw-id: func() -> string;
    media-source: func() -> string;
    get-constraints: func() -> media-stream-constraints;
    is-secure: func() -> bool;
    is-handling-user-input: func() -> bool;
  }
  record media-stream-audio-source-options {
    media-stream: borrow<media-stream>,
  }
  resource media-stream-audio-source-node {
    as-audio-node: func() -> audio-node;
    disconnect: func(params: option<media-stream-audio-source-node-disconnect-params>);
    context: func() -> base-audio-context;
    number-of-inputs: func() -> u32;
    number-of-outputs: func() -> u32;
    channel-count: func() -> u32;
    set-channel-count: func(channel-count: u32);
    channel-count-mode: func() -> channel-count-mode;
    set-channel-count-mode: func(channel-count-mode: channel-count-mode);
    channel-interpretation: func() -> channel-interpretation;
    set-channel-interpretation: func(channel-interpretation: channel-interpretation);
  }
  resource validity-state {
    value-missing: func() -> bool;
    type-mismatch: func() -> bool;
    pattern-mismatch: func() -> bool;
    too-long: func() -> bool;
    too-short: func() -> bool;
    range-underflow: func() -> bool;
    range-overflow: func() -> bool;
    step-mismatch: func() -> bool;
    bad-input: func() -> bool;
    custom-error: func() -> bool;
    valid: func() -> bool;
  }
  resource css-transition {
    as-animation: func() -> animation;
    transition-property: func() -> string;
    id: func() -> string;
    set-id: func(id: string);
    effect: func() -> option<animation-effect>;
    set-effect: func(effect: option<animation-effect>);
    timeline: func() -> option<animation-timeline>;
    set-timeline: func(timeline: option<animation-timeline>);
    start-time: func() -> f64;
    set-start-time: func(start-time: f64);
    current-time: func() -> f64;
    set-current-time: func(current-time: f64);
    playback-rate: func() -> f64;
    set-playback-rate: func(playback-rate: f64);
    play-state: func() -> animation-play-state;
    pending: func() -> bool;
    ready: func() -> animation;
    finished: func() -> animation;
    onfinish-subscribe: func() -> pollable;
    oncancel-subscribe: func() -> pollable;
    cancel: func();
    finish: func();
    play: func();
    pause: func();
    update-playback-rate: func(playback-rate: f64);
    reverse: func();
  }
  resource svga-element {
    as-svg-graphics-element: func() -> svg-graphics-element;
    target: func() -> svg-animated-string;
    download: func() -> string;
    set-download: func(download: string);
    ping: func() -> string;
    set-ping: func(ping: string);
    rel: func() -> string;
    set-rel: func(rel: string);
    referrer-policy: func() -> string;
    set-referrer-policy: func(referrer-policy: string);
    rel-list: func() -> dom-token-list;
    hreflang: func() -> string;
    set-hreflang: func(hreflang: string);
    %type: func() -> string;
    set-type: func(%type: string);
    text: func() -> string;
    set-text: func(text: string);
    href: func() -> svg-animated-string;
    transform: func() -> svg-animated-transform-list;
    nearest-viewport-element: func() -> option<svg-element>;
    farthest-viewport-element: func() -> option<svg-element>;
    get-b-box: func(a-options: option<svg-bounding-box-options>) -> svg-rect;
    get-ctm: func() -> option<svg-matrix>;
    get-screen-ctm: func() -> option<svg-matrix>;
    get-transform-to-element: func(element: borrow<svg-graphics-element>) -> svg-matrix;
  }
  resource coordinates {
    latitude: func() -> f64;
    longitude: func() -> f64;
    altitude: func() -> f64;
    accuracy: func() -> f64;
    altitude-accuracy: func() -> f64;
    heading: func() -> f64;
    speed: func() -> f64;
  }
  resource midi-input {
    as-midi-port: func() -> midi-port;
    onmidimessage-subscribe: func() -> pollable;
    id: func() -> string;
    manufacturer: func() -> string;
    name: func() -> string;
    version: func() -> string;
    %type: func() -> midi-port-type;
    state: func() -> midi-port-device-state;
    connection: func() -> midi-port-connection-state;
    onstatechange-subscribe: func() -> pollable;
    open: func() -> midi-port;
    close: func() -> midi-port;
  }
  type error-code = u16;
  type transports = list<transport>;
  enum transport {
    bt,
    ble,
    nfc,
    usb,
  }
  record u2f-client-data {
    typ: option<string>,
    challenge: option<string>,
    origin: option<string>,
  }
  record register-request {
    version: option<string>,
    challenge: option<string>,
  }
  record register-response {
    version: option<string>,
    registration-data: option<string>,
    client-data: option<string>,
    error-code: option<option<error-code>>,
    error-message: option<string>,
  }
  record registered-key {
    version: option<string>,
    key-handle: option<string>,
    transports: option<option<transports>>,
    app-id: option<string>,
  }
  record sign-response {
    key-handle: option<string>,
    signature-data: option<string>,
    client-data: option<string>,
    error-code: option<option<error-code>>,
    error-message: option<string>,
  }
  resource u2f {
    OK: static func() -> u16;
    OTHER-ERROR: static func() -> u16;
    BAD-REQUEST: static func() -> u16;
    CONFIGURATION-UNSUPPORTED: static func() -> u16;
    DEVICE-INELIGIBLE: static func() -> u16;
    TIMEOUT: static func() -> u16;
    register: func(app-id: string, register-requests: list<register-request>, registered-keys: list<registered-key>, callback: borrow<u2f-register-callback>, opt-timeout-seconds: option<s32>);
    sign: func(app-id: string, challenge: string, registered-keys: list<registered-key>, callback: borrow<u2f-sign-callback>, opt-timeout-seconds: option<s32>);
  }
  record constant-source-options {
    offset: option<f32>,
  }
  resource constant-source-node {
    as-audio-scheduled-source-node: func() -> audio-scheduled-source-node;
    offset: func() -> audio-param;
    onended-subscribe: func() -> pollable;
    start: func(when: option<f64>);
    stop: func(when: option<f64>);
  }
  resource battery-manager {
    as-event-target: func() -> event-target;
    charging: func() -> bool;
    charging-time: func() -> f64;
    discharging-time: func() -> f64;
    level: func() -> f64;
    onchargingchange-subscribe: func() -> pollable;
    onchargingtimechange-subscribe: func() -> pollable;
    ondischargingtimechange-subscribe: func() -> pollable;
    onlevelchange-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource audio-worklet-global-scope {
    as-worklet-global-scope: func() -> worklet-global-scope;
    register-processor: func(name: string, processor-ctor: borrow<void-function>);
    current-frame: func() -> u64;
    current-time: func() -> f64;
    sample-rate: func() -> f32;
  }
  resource visual-viewport {
    as-event-target: func() -> event-target;
    offset-left: func() -> f64;
    offset-top: func() -> f64;
    page-left: func() -> f64;
    page-top: func() -> f64;
    width: func() -> f64;
    height: func() -> f64;
    scale: func() -> f64;
    onresize-subscribe: func() -> pollable;
    onscroll-subscribe: func() -> pollable;
    onscrollend-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  record network-command-options {
    id: option<s32>,
    cmd: option<string>,
    ifname: option<string>,
    ip: option<string>,
    prefix-length: option<u32>,
    domain: option<string>,
    dnses: option<list<string>>,
    gateway: option<string>,
    gateways: option<list<string>>,
    mode: option<string>,
    report: option<bool>,
    enabled: option<bool>,
    wifictrlinterfacename: option<string>,
    internal-ifname: option<string>,
    external-ifname: option<string>,
    enable: option<bool>,
    ssid: option<string>,
    security: option<string>,
    key: option<string>,
    prefix: option<string>,
    link: option<string>,
    interface-list: option<list<string>>,
    wifi-start-ip: option<string>,
    wifi-end-ip: option<string>,
    usb-start-ip: option<string>,
    usb-end-ip: option<string>,
    dns1: option<string>,
    dns2: option<string>,
    threshold: option<s64>,
    start-ip: option<string>,
    end-ip: option<string>,
    server-ip: option<string>,
    mask-length: option<string>,
    pre-internal-ifname: option<string>,
    pre-external-ifname: option<string>,
    cur-internal-ifname: option<string>,
    cur-external-ifname: option<string>,
    ipaddr: option<s32>,
    mask: option<s32>,
    gateway-long: option<s32>,
    dns1-long: option<s32>,
    dns2-long: option<s32>,
    mtu: option<s32>,
  }
  record network-result-options {
    id: option<s32>,
    ret: option<bool>,
    broadcast: option<bool>,
    topic: option<string>,
    reason: option<string>,
    result-code: option<s32>,
    result-reason: option<string>,
    error: option<bool>,
    enable: option<bool>,
    %result: option<bool>,
    success: option<bool>,
    cur-external-ifname: option<string>,
    cur-internal-ifname: option<string>,
    reply: option<string>,
    route: option<string>,
    ipaddr-str: option<string>,
    gateway-str: option<string>,
    dns1-str: option<string>,
    dns2-str: option<string>,
    mask-str: option<string>,
    server-str: option<string>,
    vendor-str: option<string>,
    lease: option<s32>,
    prefix-length: option<s32>,
    mask: option<s32>,
    ipaddr: option<s32>,
    gateway: option<s32>,
    dns1: option<s32>,
    dns2: option<s32>,
    server: option<s32>,
    net-id: option<string>,
    interface-list: option<list<string>>,
    flag: option<string>,
    mac-addr: option<string>,
    ip-addr: option<string>,
  }
  resource file-list {
    item: func(index: u32) -> option<file>;
    length: func() -> u32;
  }
  resource pop-state-event {
    as-event: func() -> event;
    state: func() -> any;
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
  }
  record pop-state-event-init {
    state: any,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource named-node-map {
    get-named-item: func(name: string) -> option<attr>;
    set-named-item: func(arg: borrow<attr>) -> option<attr>;
    remove-named-item: func(name: string) -> attr;
    item: func(index: u32) -> option<attr>;
    length: func() -> u32;
    get-named-item-ns: func(namespace-uri: string, local-name: string) -> option<attr>;
    set-named-item-ns: func(arg: borrow<attr>) -> option<attr>;
    remove-named-item-ns: func(namespace-uri: string, local-name: string) -> attr;
  }
  resource css-media-rule {
    as-css-condition-rule: func() -> css-condition-rule;
    media: func() -> media-list;
    condition-text: func() -> string;
    set-condition-text: func(condition-text: string);
  }
  resource svg-geometry-element {
    as-svg-graphics-element: func() -> svg-graphics-element;
    path-length: func() -> svg-animated-number;
    get-total-length: func() -> f32;
    get-point-at-length: func(distance: f32) -> svg-point;
    as-svg-rect-element: func() -> option<svg-rect-element>;
    as-svg-circle-element: func() -> option<svg-circle-element>;
    as-svg-path-element: func() -> option<svg-path-element>;
    as-svg-line-element: func() -> option<svg-line-element>;
    transform: func() -> svg-animated-transform-list;
    nearest-viewport-element: func() -> option<svg-element>;
    farthest-viewport-element: func() -> option<svg-element>;
    get-b-box: func(a-options: option<svg-bounding-box-options>) -> svg-rect;
    get-ctm: func() -> option<svg-matrix>;
    get-screen-ctm: func() -> option<svg-matrix>;
    get-transform-to-element: func(element: borrow<svg-graphics-element>) -> svg-matrix;
    as-svg-polyline-element: func() -> option<svg-polyline-element>;
    as-svg-polygon-element: func() -> option<svg-polygon-element>;
    as-svg-ellipse-element: func() -> option<svg-ellipse-element>;
  }
  resource xml-http-request-event-target {
    as-event-target: func() -> event-target;
    onloadstart-subscribe: func() -> pollable;
    onprogress-subscribe: func() -> pollable;
    onabort-subscribe: func() -> pollable;
    onerror-subscribe: func() -> pollable;
    onload-subscribe: func() -> pollable;
    ontimeout-subscribe: func() -> pollable;
    onloadend-subscribe: func() -> pollable;
    as-xml-http-request-upload: func() -> option<xml-http-request-upload>;
    as-xml-http-request: func() -> option<xml-http-request>;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource media-key-error {
    as-event: func() -> event;
    system-code: func() -> u32;
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
  }
  resource svgfe-distant-light-element {
    as-svg-element: func() -> svg-element;
    azimuth: func() -> svg-animated-number;
    elevation: func() -> svg-animated-number;
    id: func() -> string;
    set-id: func(id: string);
    class-name: func() -> svg-animated-string;
    dataset: func() -> dom-string-map;
    style: func() -> css-style-declaration;
    owner-svg-element: func() -> option<svgsvg-element>;
    viewport-element: func() -> option<svg-element>;
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func();
    blur: func();
  }
  resource svg-animated-number-list {
    base-val: func() -> svg-number-list;
    anim-val: func() -> svg-number-list;
  }
  resource svgfe-tile-element {
    as-svg-element: func() -> svg-element;
    in1: func() -> svg-animated-string;
    x: func() -> svg-animated-length;
    y: func() -> svg-animated-length;
    width: func() -> svg-animated-length;
    height: func() -> svg-animated-length;
    %result: func() -> svg-animated-string;
    id: func() -> string;
    set-id: func(id: string);
    class-name: func() -> svg-animated-string;
    dataset: func() -> dom-string-map;
    style: func() -> css-style-declaration;
    owner-svg-element: func() -> option<svgsvg-element>;
    viewport-element: func() -> option<svg-element>;
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func();
    blur: func();
  }
  record media-track-settings {
    width: option<s32>,
    height: option<s32>,
    frame-rate: option<f64>,
    facing-mode: option<string>,
    device-id: option<string>,
    echo-cancellation: option<bool>,
    noise-suppression: option<bool>,
    auto-gain-control: option<bool>,
    channel-count: option<s32>,
  }
  resource file-reader-sync {
    read-as-array-buffer: func(blob: borrow<blob>) -> array-buffer;
    read-as-binary-string: func(blob: borrow<blob>) -> string;
    read-as-text: func(blob: borrow<blob>, encoding: option<string>) -> string;
    read-as-data-url: func(blob: borrow<blob>) -> string;
  }
  resource svgfe-diffuse-lighting-element {
    as-svg-element: func() -> svg-element;
    in1: func() -> svg-animated-string;
    surface-scale: func() -> svg-animated-number;
    diffuse-constant: func() -> svg-animated-number;
    kernel-unit-length-x: func() -> svg-animated-number;
    kernel-unit-length-y: func() -> svg-animated-number;
    x: func() -> svg-animated-length;
    y: func() -> svg-animated-length;
    width: func() -> svg-animated-length;
    height: func() -> svg-animated-length;
    %result: func() -> svg-animated-string;
    id: func() -> string;
    set-id: func(id: string);
    class-name: func() -> svg-animated-string;
    dataset: func() -> dom-string-map;
    style: func() -> css-style-declaration;
    owner-svg-element: func() -> option<svgsvg-element>;
    viewport-element: func() -> option<svg-element>;
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func();
    blur: func();
  }
  enum socket-ready-state {
    opening,
    open,
    closing,
    closed,
    halfclosed,
  }
  resource svg-point {
    x: func() -> f32;
    set-x: func(x: f32);
    y: func() -> f32;
    set-y: func(y: f32);
    matrix-transform: func(matrix: borrow<svg-matrix>) -> svg-point;
  }
  resource fetch-event {
    as-extendable-event: func() -> extendable-event;
    request: func() -> request;
    client-id: func() -> string;
    is-reload: func() -> bool;
    respond-with: func(r: borrow<response>);
    wait-until: func(p: any);
  }
  record fetch-event-init {
    request: borrow<request>,
    client-id: option<string>,
    is-reload: option<bool>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  enum dom-request-ready-state {
    pending,
    done,
  }
  resource dom-request {
    as-event-target: func() -> event-target;
    then: func(fulfill-callback: option<option<borrow<any-callback>>>, reject-callback: option<option<borrow<any-callback>>>) -> any;
    fire-detailed-error: func(a-error: borrow<dom-exception>);
    ready-state: func() -> dom-request-ready-state;
    %result: func() -> any;
    error: func() -> option<dom-exception>;
    onsuccess-subscribe: func() -> pollable;
    onerror-subscribe: func() -> pollable;
    as-idb-file-request: func() -> option<idb-file-request>;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource svg-text-element {
    as-svg-text-positioning-element: func() -> svg-text-positioning-element;
    x: func() -> svg-animated-length-list;
    y: func() -> svg-animated-length-list;
    dx: func() -> svg-animated-length-list;
    dy: func() -> svg-animated-length-list;
    rotate: func() -> svg-animated-number-list;
  }
  resource html-table-cell-element {
    as-html-element: func() -> html-element;
    col-span: func() -> u32;
    set-col-span: func(col-span: u32);
    row-span: func() -> u32;
    set-row-span: func(row-span: u32);
    headers: func() -> string;
    set-headers: func(headers: string);
    cell-index: func() -> s32;
    align: func() -> string;
    set-align: func(align: string);
    axis: func() -> string;
    set-axis: func(axis: string);
    height: func() -> string;
    set-height: func(height: string);
    width: func() -> string;
    set-width: func(width: string);
    ch: func() -> string;
    set-ch: func(ch: string);
    ch-off: func() -> string;
    set-ch-off: func(ch-off: string);
    no-wrap: func() -> bool;
    set-no-wrap: func(no-wrap: bool);
    v-align: func() -> string;
    set-v-align: func(v-align: string);
    bg-color: func() -> string;
    set-bg-color: func(bg-color: string);
    title: func() -> string;
    set-title: func(title: string);
    scroll-height: func() -> s32;
    set-scroll-height: func(scroll-height: s32);
    scroll-top: func() -> s32;
    set-scroll-top: func(scroll-top: s32);
    lang: func() -> string;
    set-lang: func(lang: string);
    dir: func() -> string;
    set-dir: func(dir: string);
    dataset: func() -> dom-string-map;
    inner-text: func() -> string;
    set-inner-text: func(inner-text: string);
    hidden: func() -> bool;
    set-hidden: func(hidden: bool);
    inert: func() -> bool;
    set-inert: func(inert: bool);
    click: func();
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func(options: option<focus-options>);
    blur: func();
    access-key: func() -> string;
    set-access-key: func(access-key: string);
    access-key-label: func() -> string;
    draggable: func() -> bool;
    set-draggable: func(draggable: bool);
    content-editable: func() -> string;
    set-content-editable: func(content-editable: string);
    is-content-editable: func() -> bool;
    spellcheck: func() -> bool;
    set-spellcheck: func(spellcheck: bool);
    style: func() -> css-style-declaration;
  }
  resource html-span-element {
    as-html-element: func() -> html-element;
    title: func() -> string;
    set-title: func(title: string);
    scroll-height: func() -> s32;
    set-scroll-height: func(scroll-height: s32);
    scroll-top: func() -> s32;
    set-scroll-top: func(scroll-top: s32);
    lang: func() -> string;
    set-lang: func(lang: string);
    dir: func() -> string;
    set-dir: func(dir: string);
    dataset: func() -> dom-string-map;
    inner-text: func() -> string;
    set-inner-text: func(inner-text: string);
    hidden: func() -> bool;
    set-hidden: func(hidden: bool);
    inert: func() -> bool;
    set-inert: func(inert: bool);
    click: func();
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func(options: option<focus-options>);
    blur: func();
    access-key: func() -> string;
    set-access-key: func(access-key: string);
    access-key-label: func() -> string;
    draggable: func() -> bool;
    set-draggable: func(draggable: bool);
    content-editable: func() -> string;
    set-content-editable: func(content-editable: string);
    is-content-editable: func() -> bool;
    spellcheck: func() -> bool;
    set-spellcheck: func(spellcheck: bool);
    style: func() -> css-style-declaration;
  }
  resource svg-switch-element {
    as-svg-graphics-element: func() -> svg-graphics-element;
    transform: func() -> svg-animated-transform-list;
    nearest-viewport-element: func() -> option<svg-element>;
    farthest-viewport-element: func() -> option<svg-element>;
    get-b-box: func(a-options: option<svg-bounding-box-options>) -> svg-rect;
    get-ctm: func() -> option<svg-matrix>;
    get-screen-ctm: func() -> option<svg-matrix>;
    get-transform-to-element: func(element: borrow<svg-graphics-element>) -> svg-matrix;
  }
  record rtc-peer-connection-ice-event-init {
    candidate: option<option<borrow<rtc-ice-candidate>>>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource rtc-peer-connection-ice-event {
    as-event: func() -> event;
    candidate: func() -> option<rtc-ice-candidate>;
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
  }
  resource svg-clip-path-element {
    as-svg-element: func() -> svg-element;
    clip-path-units: func() -> svg-animated-enumeration;
    transform: func() -> svg-animated-transform-list;
    id: func() -> string;
    set-id: func(id: string);
    class-name: func() -> svg-animated-string;
    dataset: func() -> dom-string-map;
    style: func() -> css-style-declaration;
    owner-svg-element: func() -> option<svgsvg-element>;
    viewport-element: func() -> option<svg-element>;
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func();
    blur: func();
  }
  resource text-decoder {
    encoding: func() -> string;
    fatal: func() -> bool;
    decode: func(input: option<buffer-source>, options: option<text-decode-options>) -> string;
  }
  record text-decoder-options {
    fatal: option<bool>,
  }
  record text-decode-options {
    %stream: option<bool>,
  }
  resource image-capture-error-event {
    as-event: func() -> event;
    image-capture-error: func() -> option<image-capture-error>;
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
  }
  record image-capture-error-event-init {
    image-capture-error: option<option<borrow<image-capture-error>>>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource image-capture-error {
    FRAME-GRAB-ERROR: static func() -> u16;
    SETTINGS-ERROR: static func() -> u16;
    PHOTO-ERROR: static func() -> u16;
    ERROR-UNKNOWN: static func() -> u16;
    code: func() -> u16;
    message: func() -> string;
  }
  type g-lenum = u32;
  type g-lboolean = bool;
  type g-lbitfield = u32;
  type g-lbyte = s8;
  type g-lshort = s16;
  type g-lint = s32;
  type g-lsizei = s32;
  type g-lintptr = s64;
  type g-lsizeiptr = s64;
  type g-lubyte = u8;
  type g-lushort = u16;
  type g-luint = u32;
  type g-lfloat = f32;
  type g-lclampf = f32;
  type g-luint64-ext = u64;
  enum web-gl-power-preference {
    default,
    low-power,
    high-performance,
  }
  record web-gl-context-attributes {
    alpha: option<g-lboolean>,
    depth: option<g-lboolean>,
    stencil: option<g-lboolean>,
    antialias: option<g-lboolean>,
    premultiplied-alpha: option<g-lboolean>,
    preserve-drawing-buffer: option<g-lboolean>,
    fail-if-major-performance-caveat: option<g-lboolean>,
    power-preference: option<web-gl-power-preference>,
  }
  resource web-gl-buffer {
  }
  resource web-gl-framebuffer {
  }
  resource web-gl-program {
  }
  resource web-gl-renderbuffer {
  }
  resource web-gl-shader {
  }
  resource web-gl-texture {
  }
  resource web-gl-uniform-location {
  }
  resource web-gl-vertex-array-object {
  }
  resource web-gl-active-info {
    size: func() -> g-lint;
    %type: func() -> g-lenum;
    name: func() -> string;
  }
  resource web-gl-shader-precision-format {
    range-min: func() -> g-lint;
    range-max: func() -> g-lint;
    precision: func() -> g-lint;
  }
  variant float32-array-or-list-g-lfloat {
    float32-array(float32-array),
    list-g-lfloat(list<g-lfloat>),
  }
  type float32-list = float32-array-or-list-g-lfloat;
  variant int32-array-or-list-g-lint {
    int32-array(int32-array),
    list-g-lint(list<g-lint>),
  }
  type int32-list = int32-array-or-list-g-lint;
  resource web-gl-rendering-context {
    buffer-data: func(params: web-gl-rendering-context-buffer-data-params);
    buffer-sub-data: func(params: web-gl-rendering-context-buffer-sub-data-params);
    compressed-tex-image2-d: func(target: g-lenum, level: g-lint, internalformat: g-lenum, width: g-lsizei, height: g-lsizei, border: g-lint, data: array-buffer-view);
    compressed-tex-sub-image2-d: func(target: g-lenum, level: g-lint, xoffset: g-lint, yoffset: g-lint, width: g-lsizei, height: g-lsizei, format: g-lenum, data: array-buffer-view);
    read-pixels: func(x: g-lint, y: g-lint, width: g-lsizei, height: g-lsizei, format: g-lenum, %type: g-lenum, pixels: array-buffer-view);
    tex-image2-d: func(params: web-gl-rendering-context-tex-image2-d-params);
    tex-sub-image2-d: func(params: web-gl-rendering-context-tex-sub-image2-d-params);
    uniform1fv: func(location: option<borrow<web-gl-uniform-location>>, data: float32-list);
    uniform2fv: func(location: option<borrow<web-gl-uniform-location>>, data: float32-list);
    uniform3fv: func(location: option<borrow<web-gl-uniform-location>>, data: float32-list);
    uniform4fv: func(location: option<borrow<web-gl-uniform-location>>, data: float32-list);
    uniform1iv: func(location: option<borrow<web-gl-uniform-location>>, data: int32-list);
    uniform2iv: func(location: option<borrow<web-gl-uniform-location>>, data: int32-list);
    uniform3iv: func(location: option<borrow<web-gl-uniform-location>>, data: int32-list);
    uniform4iv: func(location: option<borrow<web-gl-uniform-location>>, data: int32-list);
    uniform-matrix2fv: func(location: option<borrow<web-gl-uniform-location>>, transpose: g-lboolean, data: float32-list);
    uniform-matrix3fv: func(location: option<borrow<web-gl-uniform-location>>, transpose: g-lboolean, data: float32-list);
    uniform-matrix4fv: func(location: option<borrow<web-gl-uniform-location>>, transpose: g-lboolean, data: float32-list);
    DEPTH-BUFFER-BIT: static func() -> g-lenum;
    STENCIL-BUFFER-BIT: static func() -> g-lenum;
    COLOR-BUFFER-BIT: static func() -> g-lenum;
    POINTS: static func() -> g-lenum;
    LINES: static func() -> g-lenum;
    LINE-LOOP: static func() -> g-lenum;
    LINE-STRIP: static func() -> g-lenum;
    TRIANGLES: static func() -> g-lenum;
    TRIANGLE-STRIP: static func() -> g-lenum;
    TRIANGLE-FAN: static func() -> g-lenum;
    ZERO: static func() -> g-lenum;
    ONE: static func() -> g-lenum;
    SRC-COLOR: static func() -> g-lenum;
    ONE-MINUS-SRC-COLOR: static func() -> g-lenum;
    SRC-ALPHA: static func() -> g-lenum;
    ONE-MINUS-SRC-ALPHA: static func() -> g-lenum;
    DST-ALPHA: static func() -> g-lenum;
    ONE-MINUS-DST-ALPHA: static func() -> g-lenum;
    DST-COLOR: static func() -> g-lenum;
    ONE-MINUS-DST-COLOR: static func() -> g-lenum;
    SRC-ALPHA-SATURATE: static func() -> g-lenum;
    FUNC-ADD: static func() -> g-lenum;
    BLEND-EQUATION: static func() -> g-lenum;
    BLEND-EQUATION-RGB: static func() -> g-lenum;
    BLEND-EQUATION-ALPHA: static func() -> g-lenum;
    FUNC-SUBTRACT: static func() -> g-lenum;
    FUNC-REVERSE-SUBTRACT: static func() -> g-lenum;
    BLEND-DST-RGB: static func() -> g-lenum;
    BLEND-SRC-RGB: static func() -> g-lenum;
    BLEND-DST-ALPHA: static func() -> g-lenum;
    BLEND-SRC-ALPHA: static func() -> g-lenum;
    CONSTANT-COLOR: static func() -> g-lenum;
    ONE-MINUS-CONSTANT-COLOR: static func() -> g-lenum;
    CONSTANT-ALPHA: static func() -> g-lenum;
    ONE-MINUS-CONSTANT-ALPHA: static func() -> g-lenum;
    BLEND-COLOR: static func() -> g-lenum;
    ARRAY-BUFFER: static func() -> g-lenum;
    ELEMENT-ARRAY-BUFFER: static func() -> g-lenum;
    ARRAY-BUFFER-BINDING: static func() -> g-lenum;
    ELEMENT-ARRAY-BUFFER-BINDING: static func() -> g-lenum;
    STREAM-DRAW: static func() -> g-lenum;
    STATIC-DRAW: static func() -> g-lenum;
    DYNAMIC-DRAW: static func() -> g-lenum;
    BUFFER-SIZE: static func() -> g-lenum;
    BUFFER-USAGE: static func() -> g-lenum;
    CURRENT-VERTEX-ATTRIB: static func() -> g-lenum;
    FRONT: static func() -> g-lenum;
    BACK: static func() -> g-lenum;
    FRONT-AND-BACK: static func() -> g-lenum;
    CULL-FACE: static func() -> g-lenum;
    BLEND: static func() -> g-lenum;
    DITHER: static func() -> g-lenum;
    STENCIL-TEST: static func() -> g-lenum;
    DEPTH-TEST: static func() -> g-lenum;
    SCISSOR-TEST: static func() -> g-lenum;
    POLYGON-OFFSET-FILL: static func() -> g-lenum;
    SAMPLE-ALPHA-TO-COVERAGE: static func() -> g-lenum;
    SAMPLE-COVERAGE: static func() -> g-lenum;
    NO-ERROR: static func() -> g-lenum;
    INVALID-ENUM: static func() -> g-lenum;
    INVALID-VALUE: static func() -> g-lenum;
    INVALID-OPERATION: static func() -> g-lenum;
    OUT-OF-MEMORY: static func() -> g-lenum;
    CW: static func() -> g-lenum;
    CCW: static func() -> g-lenum;
    LINE-WIDTH: static func() -> g-lenum;
    ALIASED-POINT-SIZE-RANGE: static func() -> g-lenum;
    ALIASED-LINE-WIDTH-RANGE: static func() -> g-lenum;
    CULL-FACE-MODE: static func() -> g-lenum;
    FRONT-FACE: static func() -> g-lenum;
    DEPTH-RANGE: static func() -> g-lenum;
    DEPTH-WRITEMASK: static func() -> g-lenum;
    DEPTH-CLEAR-VALUE: static func() -> g-lenum;
    DEPTH-FUNC: static func() -> g-lenum;
    STENCIL-CLEAR-VALUE: static func() -> g-lenum;
    STENCIL-FUNC: static func() -> g-lenum;
    STENCIL-FAIL: static func() -> g-lenum;
    STENCIL-PASS-DEPTH-FAIL: static func() -> g-lenum;
    STENCIL-PASS-DEPTH-PASS: static func() -> g-lenum;
    STENCIL-REF: static func() -> g-lenum;
    STENCIL-VALUE-MASK: static func() -> g-lenum;
    STENCIL-WRITEMASK: static func() -> g-lenum;
    STENCIL-BACK-FUNC: static func() -> g-lenum;
    STENCIL-BACK-FAIL: static func() -> g-lenum;
    STENCIL-BACK-PASS-DEPTH-FAIL: static func() -> g-lenum;
    STENCIL-BACK-PASS-DEPTH-PASS: static func() -> g-lenum;
    STENCIL-BACK-REF: static func() -> g-lenum;
    STENCIL-BACK-VALUE-MASK: static func() -> g-lenum;
    STENCIL-BACK-WRITEMASK: static func() -> g-lenum;
    VIEWPORT: static func() -> g-lenum;
    SCISSOR-BOX: static func() -> g-lenum;
    COLOR-CLEAR-VALUE: static func() -> g-lenum;
    COLOR-WRITEMASK: static func() -> g-lenum;
    UNPACK-ALIGNMENT: static func() -> g-lenum;
    PACK-ALIGNMENT: static func() -> g-lenum;
    MAX-TEXTURE-SIZE: static func() -> g-lenum;
    MAX-VIEWPORT-DIMS: static func() -> g-lenum;
    SUBPIXEL-BITS: static func() -> g-lenum;
    RED-BITS: static func() -> g-lenum;
    GREEN-BITS: static func() -> g-lenum;
    BLUE-BITS: static func() -> g-lenum;
    ALPHA-BITS: static func() -> g-lenum;
    DEPTH-BITS: static func() -> g-lenum;
    STENCIL-BITS: static func() -> g-lenum;
    POLYGON-OFFSET-UNITS: static func() -> g-lenum;
    POLYGON-OFFSET-FACTOR: static func() -> g-lenum;
    TEXTURE-BINDING2D: static func() -> g-lenum;
    SAMPLE-BUFFERS: static func() -> g-lenum;
    SAMPLES: static func() -> g-lenum;
    SAMPLE-COVERAGE-VALUE: static func() -> g-lenum;
    SAMPLE-COVERAGE-INVERT: static func() -> g-lenum;
    COMPRESSED-TEXTURE-FORMATS: static func() -> g-lenum;
    DONT-CARE: static func() -> g-lenum;
    FASTEST: static func() -> g-lenum;
    NICEST: static func() -> g-lenum;
    GENERATE-MIPMAP-HINT: static func() -> g-lenum;
    BYTE: static func() -> g-lenum;
    UNSIGNED-BYTE: static func() -> g-lenum;
    SHORT: static func() -> g-lenum;
    UNSIGNED-SHORT: static func() -> g-lenum;
    INT: static func() -> g-lenum;
    UNSIGNED-INT: static func() -> g-lenum;
    FLOAT: static func() -> g-lenum;
    DEPTH-COMPONENT: static func() -> g-lenum;
    ALPHA: static func() -> g-lenum;
    RGB: static func() -> g-lenum;
    RGBA: static func() -> g-lenum;
    LUMINANCE: static func() -> g-lenum;
    LUMINANCE-ALPHA: static func() -> g-lenum;
    UNSIGNED-SHORT4444: static func() -> g-lenum;
    UNSIGNED-SHORT5551: static func() -> g-lenum;
    UNSIGNED-SHORT565: static func() -> g-lenum;
    FRAGMENT-SHADER: static func() -> g-lenum;
    VERTEX-SHADER: static func() -> g-lenum;
    MAX-VERTEX-ATTRIBS: static func() -> g-lenum;
    MAX-VERTEX-UNIFORM-VECTORS: static func() -> g-lenum;
    MAX-VARYING-VECTORS: static func() -> g-lenum;
    MAX-COMBINED-TEXTURE-IMAGE-UNITS: static func() -> g-lenum;
    MAX-VERTEX-TEXTURE-IMAGE-UNITS: static func() -> g-lenum;
    MAX-TEXTURE-IMAGE-UNITS: static func() -> g-lenum;
    MAX-FRAGMENT-UNIFORM-VECTORS: static func() -> g-lenum;
    SHADER-TYPE: static func() -> g-lenum;
    DELETE-STATUS: static func() -> g-lenum;
    LINK-STATUS: static func() -> g-lenum;
    VALIDATE-STATUS: static func() -> g-lenum;
    ATTACHED-SHADERS: static func() -> g-lenum;
    ACTIVE-UNIFORMS: static func() -> g-lenum;
    ACTIVE-ATTRIBUTES: static func() -> g-lenum;
    SHADING-LANGUAGE-VERSION: static func() -> g-lenum;
    CURRENT-PROGRAM: static func() -> g-lenum;
    NEVER: static func() -> g-lenum;
    LESS: static func() -> g-lenum;
    EQUAL: static func() -> g-lenum;
    LEQUAL: static func() -> g-lenum;
    GREATER: static func() -> g-lenum;
    NOTEQUAL: static func() -> g-lenum;
    GEQUAL: static func() -> g-lenum;
    ALWAYS: static func() -> g-lenum;
    KEEP: static func() -> g-lenum;
    REPLACE: static func() -> g-lenum;
    INCR: static func() -> g-lenum;
    DECR: static func() -> g-lenum;
    INVERT: static func() -> g-lenum;
    INCR-WRAP: static func() -> g-lenum;
    DECR-WRAP: static func() -> g-lenum;
    VENDOR: static func() -> g-lenum;
    RENDERER: static func() -> g-lenum;
    VERSION: static func() -> g-lenum;
    NEAREST: static func() -> g-lenum;
    LINEAR: static func() -> g-lenum;
    NEAREST-MIPMAP-NEAREST: static func() -> g-lenum;
    LINEAR-MIPMAP-NEAREST: static func() -> g-lenum;
    NEAREST-MIPMAP-LINEAR: static func() -> g-lenum;
    LINEAR-MIPMAP-LINEAR: static func() -> g-lenum;
    TEXTURE-MAG-FILTER: static func() -> g-lenum;
    TEXTURE-MIN-FILTER: static func() -> g-lenum;
    TEXTURE-WRAP-S: static func() -> g-lenum;
    TEXTURE-WRAP-T: static func() -> g-lenum;
    TEXTURE2D: static func() -> g-lenum;
    TEXTURE: static func() -> g-lenum;
    TEXTURE-CUBE-MAP: static func() -> g-lenum;
    TEXTURE-BINDING-CUBE-MAP: static func() -> g-lenum;
    TEXTURE-CUBE-MAP-POSITIVE-X: static func() -> g-lenum;
    TEXTURE-CUBE-MAP-NEGATIVE-X: static func() -> g-lenum;
    TEXTURE-CUBE-MAP-POSITIVE-Y: static func() -> g-lenum;
    TEXTURE-CUBE-MAP-NEGATIVE-Y: static func() -> g-lenum;
    TEXTURE-CUBE-MAP-POSITIVE-Z: static func() -> g-lenum;
    TEXTURE-CUBE-MAP-NEGATIVE-Z: static func() -> g-lenum;
    MAX-CUBE-MAP-TEXTURE-SIZE: static func() -> g-lenum;
    TEXTURE0: static func() -> g-lenum;
    TEXTURE1: static func() -> g-lenum;
    TEXTURE2: static func() -> g-lenum;
    TEXTURE3: static func() -> g-lenum;
    TEXTURE4: static func() -> g-lenum;
    TEXTURE5: static func() -> g-lenum;
    TEXTURE6: static func() -> g-lenum;
    TEXTURE7: static func() -> g-lenum;
    TEXTURE8: static func() -> g-lenum;
    TEXTURE9: static func() -> g-lenum;
    TEXTURE10: static func() -> g-lenum;
    TEXTURE11: static func() -> g-lenum;
    TEXTURE12: static func() -> g-lenum;
    TEXTURE13: static func() -> g-lenum;
    TEXTURE14: static func() -> g-lenum;
    TEXTURE15: static func() -> g-lenum;
    TEXTURE16: static func() -> g-lenum;
    TEXTURE17: static func() -> g-lenum;
    TEXTURE18: static func() -> g-lenum;
    TEXTURE19: static func() -> g-lenum;
    TEXTURE20: static func() -> g-lenum;
    TEXTURE21: static func() -> g-lenum;
    TEXTURE22: static func() -> g-lenum;
    TEXTURE23: static func() -> g-lenum;
    TEXTURE24: static func() -> g-lenum;
    TEXTURE25: static func() -> g-lenum;
    TEXTURE26: static func() -> g-lenum;
    TEXTURE27: static func() -> g-lenum;
    TEXTURE28: static func() -> g-lenum;
    TEXTURE29: static func() -> g-lenum;
    TEXTURE30: static func() -> g-lenum;
    TEXTURE31: static func() -> g-lenum;
    ACTIVE-TEXTURE: static func() -> g-lenum;
    REPEAT: static func() -> g-lenum;
    CLAMP-TO-EDGE: static func() -> g-lenum;
    MIRRORED-REPEAT: static func() -> g-lenum;
    FLOAT-VEC2: static func() -> g-lenum;
    FLOAT-VEC3: static func() -> g-lenum;
    FLOAT-VEC4: static func() -> g-lenum;
    INT-VEC2: static func() -> g-lenum;
    INT-VEC3: static func() -> g-lenum;
    INT-VEC4: static func() -> g-lenum;
    %BOOL: static func() -> g-lenum;
    BOOL-VEC2: static func() -> g-lenum;
    BOOL-VEC3: static func() -> g-lenum;
    BOOL-VEC4: static func() -> g-lenum;
    FLOAT-MAT2: static func() -> g-lenum;
    FLOAT-MAT3: static func() -> g-lenum;
    FLOAT-MAT4: static func() -> g-lenum;
    SAMPLER2D: static func() -> g-lenum;
    SAMPLER-CUBE: static func() -> g-lenum;
    VERTEX-ATTRIB-ARRAY-ENABLED: static func() -> g-lenum;
    VERTEX-ATTRIB-ARRAY-SIZE: static func() -> g-lenum;
    VERTEX-ATTRIB-ARRAY-STRIDE: static func() -> g-lenum;
    VERTEX-ATTRIB-ARRAY-TYPE: static func() -> g-lenum;
    VERTEX-ATTRIB-ARRAY-NORMALIZED: static func() -> g-lenum;
    VERTEX-ATTRIB-ARRAY-POINTER: static func() -> g-lenum;
    VERTEX-ATTRIB-ARRAY-BUFFER-BINDING: static func() -> g-lenum;
    IMPLEMENTATION-COLOR-READ-TYPE: static func() -> g-lenum;
    IMPLEMENTATION-COLOR-READ-FORMAT: static func() -> g-lenum;
    COMPILE-STATUS: static func() -> g-lenum;
    LOW-FLOAT: static func() -> g-lenum;
    MEDIUM-FLOAT: static func() -> g-lenum;
    HIGH-FLOAT: static func() -> g-lenum;
    LOW-INT: static func() -> g-lenum;
    MEDIUM-INT: static func() -> g-lenum;
    HIGH-INT: static func() -> g-lenum;
    FRAMEBUFFER: static func() -> g-lenum;
    RENDERBUFFER: static func() -> g-lenum;
    RGBA4: static func() -> g-lenum;
    RGB5-A1: static func() -> g-lenum;
    RGB565: static func() -> g-lenum;
    DEPTH-COMPONENT16: static func() -> g-lenum;
    STENCIL-INDEX8: static func() -> g-lenum;
    DEPTH-STENCIL: static func() -> g-lenum;
    RENDERBUFFER-WIDTH: static func() -> g-lenum;
    RENDERBUFFER-HEIGHT: static func() -> g-lenum;
    RENDERBUFFER-INTERNAL-FORMAT: static func() -> g-lenum;
    RENDERBUFFER-RED-SIZE: static func() -> g-lenum;
    RENDERBUFFER-GREEN-SIZE: static func() -> g-lenum;
    RENDERBUFFER-BLUE-SIZE: static func() -> g-lenum;
    RENDERBUFFER-ALPHA-SIZE: static func() -> g-lenum;
    RENDERBUFFER-DEPTH-SIZE: static func() -> g-lenum;
    RENDERBUFFER-STENCIL-SIZE: static func() -> g-lenum;
    FRAMEBUFFER-ATTACHMENT-OBJECT-TYPE: static func() -> g-lenum;
    FRAMEBUFFER-ATTACHMENT-OBJECT-NAME: static func() -> g-lenum;
    FRAMEBUFFER-ATTACHMENT-TEXTURE-LEVEL: static func() -> g-lenum;
    FRAMEBUFFER-ATTACHMENT-TEXTURE-CUBE-MAP-FACE: static func() -> g-lenum;
    COLOR-ATTACHMENT0: static func() -> g-lenum;
    DEPTH-ATTACHMENT: static func() -> g-lenum;
    STENCIL-ATTACHMENT: static func() -> g-lenum;
    DEPTH-STENCIL-ATTACHMENT: static func() -> g-lenum;
    NONE: static func() -> g-lenum;
    FRAMEBUFFER-COMPLETE: static func() -> g-lenum;
    FRAMEBUFFER-INCOMPLETE-ATTACHMENT: static func() -> g-lenum;
    FRAMEBUFFER-INCOMPLETE-MISSING-ATTACHMENT: static func() -> g-lenum;
    FRAMEBUFFER-INCOMPLETE-DIMENSIONS: static func() -> g-lenum;
    FRAMEBUFFER-UNSUPPORTED: static func() -> g-lenum;
    FRAMEBUFFER-BINDING: static func() -> g-lenum;
    RENDERBUFFER-BINDING: static func() -> g-lenum;
    MAX-RENDERBUFFER-SIZE: static func() -> g-lenum;
    INVALID-FRAMEBUFFER-OPERATION: static func() -> g-lenum;
    UNPACK-FLIP-Y-WEBGL: static func() -> g-lenum;
    UNPACK-PREMULTIPLY-ALPHA-WEBGL: static func() -> g-lenum;
    CONTEXT-LOST-WEBGL: static func() -> g-lenum;
    UNPACK-COLORSPACE-CONVERSION-WEBGL: static func() -> g-lenum;
    BROWSER-DEFAULT-WEBGL: static func() -> g-lenum;
    // canvas: func() -> html-canvas-element-or-offscreen-canvas;
    drawing-buffer-width: func() -> g-lsizei;
    drawing-buffer-height: func() -> g-lsizei;
    get-context-attributes: func() -> option<web-gl-context-attributes>;
    is-context-lost: func() -> bool;
    get-supported-extensions: func() -> list<option<string>>;
    get-extension: func(name: string) -> object;
    // active-texture: func(texture: g-lenum);
    attach-shader: func(program: borrow<web-gl-program>, shader: borrow<web-gl-shader>);
    bind-attrib-location: func(program: borrow<web-gl-program>, index: g-luint, name: string);
    bind-buffer: func(target: g-lenum, buffer: option<borrow<web-gl-buffer>>);
    bind-framebuffer: func(target: g-lenum, framebuffer: option<borrow<web-gl-framebuffer>>);
    bind-renderbuffer: func(target: g-lenum, renderbuffer: option<borrow<web-gl-renderbuffer>>);
    bind-texture: func(target: g-lenum, texture: option<borrow<web-gl-texture>>);
    // blend-color: func(red: g-lfloat, green: g-lfloat, blue: g-lfloat, alpha: g-lfloat);
    // blend-equation: func(mode: g-lenum);
    blend-equation-separate: func(mode-rgb: g-lenum, mode-alpha: g-lenum);
    blend-func: func(sfactor: g-lenum, dfactor: g-lenum);
    blend-func-separate: func(src-rgb: g-lenum, dst-rgb: g-lenum, src-alpha: g-lenum, dst-alpha: g-lenum);
    check-framebuffer-status: func(target: g-lenum) -> g-lenum;
    clear: func(mask: g-lbitfield);
    clear-color: func(red: g-lfloat, green: g-lfloat, blue: g-lfloat, alpha: g-lfloat);
    clear-depth: func(depth: g-lclampf);
    clear-stencil: func(s: g-lint);
    color-mask: func(red: g-lboolean, green: g-lboolean, blue: g-lboolean, alpha: g-lboolean);
    compile-shader: func(shader: borrow<web-gl-shader>);
    copy-tex-image2-d: func(target: g-lenum, level: g-lint, internalformat: g-lenum, x: g-lint, y: g-lint, width: g-lsizei, height: g-lsizei, border: g-lint);
    copy-tex-sub-image2-d: func(target: g-lenum, level: g-lint, xoffset: g-lint, yoffset: g-lint, x: g-lint, y: g-lint, width: g-lsizei, height: g-lsizei);
    create-buffer: func() -> option<web-gl-buffer>;
    create-framebuffer: func() -> option<web-gl-framebuffer>;
    create-program: func() -> option<web-gl-program>;
    create-renderbuffer: func() -> option<web-gl-renderbuffer>;
    create-shader: func(%type: g-lenum) -> option<web-gl-shader>;
    create-texture: func() -> option<web-gl-texture>;
    // cull-face: func(mode: g-lenum);
    delete-buffer: func(buffer: option<borrow<web-gl-buffer>>);
    delete-framebuffer: func(framebuffer: option<borrow<web-gl-framebuffer>>);
    delete-program: func(program: option<borrow<web-gl-program>>);
    delete-renderbuffer: func(renderbuffer: option<borrow<web-gl-renderbuffer>>);
    delete-shader: func(shader: option<borrow<web-gl-shader>>);
    delete-texture: func(texture: option<borrow<web-gl-texture>>);
    // depth-func: func(%func: g-lenum);
    depth-mask: func(flag: g-lboolean);
    // depth-range: func(z-near: g-lclampf, z-far: g-lclampf);
    detach-shader: func(program: borrow<web-gl-program>, shader: borrow<web-gl-shader>);
    disable: func(cap: g-lenum);
    disable-vertex-attrib-array: func(index: g-luint);
    draw-arrays: func(mode: g-lenum, first: g-lint, count: g-lsizei);
    draw-elements: func(mode: g-lenum, count: g-lsizei, %type: g-lenum, offset: g-lintptr);
    enable: func(cap: g-lenum);
    enable-vertex-attrib-array: func(index: g-luint);
    finish: func();
    flush: func();
    framebuffer-renderbuffer: func(target: g-lenum, attachment: g-lenum, renderbuffertarget: g-lenum, renderbuffer: option<borrow<web-gl-renderbuffer>>);
    framebuffer-texture2-d: func(target: g-lenum, attachment: g-lenum, textarget: g-lenum, texture: option<borrow<web-gl-texture>>, level: g-lint);
    // front-face: func(mode: g-lenum);
    generate-mipmap: func(target: g-lenum);
    get-active-attrib: func(program: borrow<web-gl-program>, index: g-luint) -> option<web-gl-active-info>;
    get-active-uniform: func(program: borrow<web-gl-program>, index: g-luint) -> option<web-gl-active-info>;
    get-attached-shaders: func(program: borrow<web-gl-program>) -> list<option<web-gl-shader>>;
    get-attrib-location: func(program: borrow<web-gl-program>, name: string) -> g-lint;
    get-buffer-parameter: func(target: g-lenum, pname: g-lenum) -> any;
    get-parameter: func(pname: g-lenum) -> any;
    get-error: func() -> g-lenum;
    get-framebuffer-attachment-parameter: func(target: g-lenum, attachment: g-lenum, pname: g-lenum) -> any;
    get-program-parameter: func(program: borrow<web-gl-program>, pname: g-lenum) -> any;
    get-program-info-log: func(program: borrow<web-gl-program>) -> string;
    get-renderbuffer-parameter: func(target: g-lenum, pname: g-lenum) -> any;
    get-shader-parameter: func(shader: borrow<web-gl-shader>, pname: g-lenum) -> any;
    get-shader-precision-format: func(shadertype: g-lenum, precisiontype: g-lenum) -> option<web-gl-shader-precision-format>;
    get-shader-info-log: func(shader: borrow<web-gl-shader>) -> string;
    get-shader-source: func(shader: borrow<web-gl-shader>) -> string;
    get-tex-parameter: func(target: g-lenum, pname: g-lenum) -> any;
    get-uniform: func(program: borrow<web-gl-program>, location: borrow<web-gl-uniform-location>) -> any;
    get-uniform-location: func(program: borrow<web-gl-program>, name: string) -> option<web-gl-uniform-location>;
    get-vertex-attrib: func(index: g-luint, pname: g-lenum) -> any;
    get-vertex-attrib-offset: func(index: g-luint, pname: g-lenum) -> g-lintptr;
    hint: func(target: g-lenum, mode: g-lenum);
    is-buffer: func(buffer: option<borrow<web-gl-buffer>>) -> g-lboolean;
    is-enabled: func(cap: g-lenum) -> g-lboolean;
    is-framebuffer: func(framebuffer: option<borrow<web-gl-framebuffer>>) -> g-lboolean;
    is-program: func(program: option<borrow<web-gl-program>>) -> g-lboolean;
    is-renderbuffer: func(renderbuffer: option<borrow<web-gl-renderbuffer>>) -> g-lboolean;
    is-shader: func(shader: option<borrow<web-gl-shader>>) -> g-lboolean;
    is-texture: func(texture: option<borrow<web-gl-texture>>) -> g-lboolean;
    // line-width: func(width: g-lfloat);
    link-program: func(program: borrow<web-gl-program>);
    pixel-storei: func(pname: g-lenum, param: g-lint);
    polygon-offset: func(factor: g-lfloat, units: g-lfloat);
    renderbuffer-storage: func(target: g-lenum, internalformat: g-lenum, width: g-lsizei, height: g-lsizei);
    // sample-coverage: func(value: g-lclampf, invert: g-lboolean);
    scissor: func(x: g-lint, y: g-lint, width: g-lsizei, height: g-lsizei);
    shader-source: func(shader: borrow<web-gl-shader>, source: string);
    // stencil-func: func(%func: g-lenum, ref: g-lint, mask: g-luint);
    stencil-func-separate: func(face: g-lenum, %func: g-lenum, ref: g-lint, mask: g-luint);
    stencil-mask: func(mask: g-luint);
    stencil-mask-separate: func(face: g-lenum, mask: g-luint);
    stencil-op: func(fail: g-lenum, zfail: g-lenum, zpass: g-lenum);
    stencil-op-separate: func(face: g-lenum, fail: g-lenum, zfail: g-lenum, zpass: g-lenum);
    tex-parameterf: func(target: g-lenum, pname: g-lenum, param: g-lfloat);
    tex-parameteri: func(target: g-lenum, pname: g-lenum, param: g-lint);
    uniform1f: func(location: option<borrow<web-gl-uniform-location>>, x: g-lfloat);
    uniform2f: func(location: option<borrow<web-gl-uniform-location>>, x: g-lfloat, y: g-lfloat);
    uniform3f: func(location: option<borrow<web-gl-uniform-location>>, x: g-lfloat, y: g-lfloat, z: g-lfloat);
    uniform4f: func(location: option<borrow<web-gl-uniform-location>>, x: g-lfloat, y: g-lfloat, z: g-lfloat, w: g-lfloat);
    uniform1i: func(location: option<borrow<web-gl-uniform-location>>, x: g-lint);
    uniform2i: func(location: option<borrow<web-gl-uniform-location>>, x: g-lint, y: g-lint);
    uniform3i: func(location: option<borrow<web-gl-uniform-location>>, x: g-lint, y: g-lint, z: g-lint);
    uniform4i: func(location: option<borrow<web-gl-uniform-location>>, x: g-lint, y: g-lint, z: g-lint, w: g-lint);
    use-program: func(program: option<borrow<web-gl-program>>);
    validate-program: func(program: borrow<web-gl-program>);
    vertex-attrib1f: func(indx: g-luint, x: g-lfloat);
    vertex-attrib1fv: func(indx: g-luint, values: float32-list);
    vertex-attrib2f: func(indx: g-luint, x: g-lfloat, y: g-lfloat);
    vertex-attrib2fv: func(indx: g-luint, values: float32-list);
    vertex-attrib3f: func(indx: g-luint, x: g-lfloat, y: g-lfloat, z: g-lfloat);
    vertex-attrib3fv: func(indx: g-luint, values: float32-list);
    vertex-attrib4f: func(indx: g-luint, x: g-lfloat, y: g-lfloat, z: g-lfloat, w: g-lfloat);
    vertex-attrib4fv: func(indx: g-luint, values: float32-list);
    vertex-attrib-pointer: func(indx: g-luint, size: g-lint, %type: g-lenum, normalized: g-lboolean, stride: g-lsizei, offset: g-lintptr);
    // viewport: func(x: g-lint, y: g-lint, width: g-lsizei, height: g-lsizei);
    commit: func();
  }
  variant web-gl-rendering-context-buffer-data-params {
    target-size-usage(tuple<g-lenum, g-lsizeiptr, g-lenum>),
    // target-data-usage(tuple<g-lenum, array-buffer, g-lenum>),
    // target-data-usage(tuple<g-lenum, array-buffer-view, g-lenum>),
  }
  variant web-gl-rendering-context-buffer-sub-data-params {
    target-offset-data(tuple<g-lenum, g-lintptr, array-buffer>),
    // target-offset-data(tuple<g-lenum, g-lintptr, array-buffer-view>),
  }
  variant web-gl-rendering-context-tex-image2-d-params {
    target-level-internalformat-width-height-border-format-type-pixels(tuple<g-lenum, g-lint, g-lint, g-lsizei, g-lsizei, g-lint, g-lenum, g-lenum, array-buffer-view>),
    target-level-internalformat-format-type-pixels(tuple<g-lenum, g-lint, g-lint, g-lenum, g-lenum, borrow<image-bitmap>>),
    // target-level-internalformat-format-type-pixels(tuple<g-lenum, g-lint, g-lint, g-lenum, g-lenum, borrow<image-data>>),
    target-level-internalformat-format-type-image(tuple<g-lenum, g-lint, g-lint, g-lenum, g-lenum, borrow<html-image-element>>),
    target-level-internalformat-format-type-canvas(tuple<g-lenum, g-lint, g-lint, g-lenum, g-lenum, borrow<html-canvas-element>>),
    target-level-internalformat-format-type-video(tuple<g-lenum, g-lint, g-lint, g-lenum, g-lenum, borrow<html-video-element>>),
    target-level-internalformat-format-type-video-frame(tuple<g-lenum, g-lint, g-lint, g-lenum, g-lenum, borrow<video-frame>>),
  }
  variant web-gl-rendering-context-tex-sub-image2-d-params {
    target-level-xoffset-yoffset-width-height-format-type-pixels(tuple<g-lenum, g-lint, g-lint, g-lint, g-lsizei, g-lsizei, g-lenum, g-lenum, array-buffer-view>),
    target-level-xoffset-yoffset-format-type-pixels(tuple<g-lenum, g-lint, g-lint, g-lint, g-lenum, g-lenum, borrow<image-bitmap>>),
    // target-level-xoffset-yoffset-format-type-pixels(tuple<g-lenum, g-lint, g-lint, g-lint, g-lenum, g-lenum, borrow<image-data>>),
    target-level-xoffset-yoffset-format-type-image(tuple<g-lenum, g-lint, g-lint, g-lint, g-lenum, g-lenum, borrow<html-image-element>>),
    target-level-xoffset-yoffset-format-type-canvas(tuple<g-lenum, g-lint, g-lint, g-lint, g-lenum, g-lenum, borrow<html-canvas-element>>),
    target-level-xoffset-yoffset-format-type-video(tuple<g-lenum, g-lint, g-lint, g-lint, g-lenum, g-lenum, borrow<html-video-element>>),
    target-level-xoffset-yoffset-format-type-video-frame(tuple<g-lenum, g-lint, g-lint, g-lint, g-lenum, g-lenum, borrow<video-frame>>),
  }
  variant html-canvas-element-or-offscreen-canvas {
    html-canvas-element(borrow<html-canvas-element>),
    offscreen-canvas(borrow<offscreen-canvas>),
  }
  resource webgl-compressed-texture-s3tc {
    COMPRESSED-RGB-S3TC-DXT1-EXT: static func() -> g-lenum;
    COMPRESSED-RGBA-S3TC-DXT1-EXT: static func() -> g-lenum;
    COMPRESSED-RGBA-S3TC-DXT3-EXT: static func() -> g-lenum;
    COMPRESSED-RGBA-S3TC-DXT5-EXT: static func() -> g-lenum;
  }
  resource webgl-compressed-texture-s3tc-srgb {
    COMPRESSED-SRGB-S3TC-DXT1-EXT: static func() -> g-lenum;
    COMPRESSED-SRGB-ALPHA-S3TC-DXT1-EXT: static func() -> g-lenum;
    COMPRESSED-SRGB-ALPHA-S3TC-DXT3-EXT: static func() -> g-lenum;
    COMPRESSED-SRGB-ALPHA-S3TC-DXT5-EXT: static func() -> g-lenum;
  }
  resource webgl-compressed-texture-astc {
    COMPRESSED-RGBA-ASTC4X4-KHR: static func() -> g-lenum;
    COMPRESSED-RGBA-ASTC5X4-KHR: static func() -> g-lenum;
    COMPRESSED-RGBA-ASTC5X5-KHR: static func() -> g-lenum;
    COMPRESSED-RGBA-ASTC6X5-KHR: static func() -> g-lenum;
    COMPRESSED-RGBA-ASTC6X6-KHR: static func() -> g-lenum;
    COMPRESSED-RGBA-ASTC8X5-KHR: static func() -> g-lenum;
    COMPRESSED-RGBA-ASTC8X6-KHR: static func() -> g-lenum;
    COMPRESSED-RGBA-ASTC8X8-KHR: static func() -> g-lenum;
    COMPRESSED-RGBA-ASTC10X5-KHR: static func() -> g-lenum;
    COMPRESSED-RGBA-ASTC10X6-KHR: static func() -> g-lenum;
    COMPRESSED-RGBA-ASTC10X8-KHR: static func() -> g-lenum;
    COMPRESSED-RGBA-ASTC10X10-KHR: static func() -> g-lenum;
    COMPRESSED-RGBA-ASTC12X10-KHR: static func() -> g-lenum;
    COMPRESSED-RGBA-ASTC12X12-KHR: static func() -> g-lenum;
    COMPRESSED-SRGB8-ALPHA8-ASTC4X4-KHR: static func() -> g-lenum;
    COMPRESSED-SRGB8-ALPHA8-ASTC5X4-KHR: static func() -> g-lenum;
    COMPRESSED-SRGB8-ALPHA8-ASTC5X5-KHR: static func() -> g-lenum;
    COMPRESSED-SRGB8-ALPHA8-ASTC6X5-KHR: static func() -> g-lenum;
    COMPRESSED-SRGB8-ALPHA8-ASTC6X6-KHR: static func() -> g-lenum;
    COMPRESSED-SRGB8-ALPHA8-ASTC8X5-KHR: static func() -> g-lenum;
    COMPRESSED-SRGB8-ALPHA8-ASTC8X6-KHR: static func() -> g-lenum;
    COMPRESSED-SRGB8-ALPHA8-ASTC8X8-KHR: static func() -> g-lenum;
    COMPRESSED-SRGB8-ALPHA8-ASTC10X5-KHR: static func() -> g-lenum;
    COMPRESSED-SRGB8-ALPHA8-ASTC10X6-KHR: static func() -> g-lenum;
    COMPRESSED-SRGB8-ALPHA8-ASTC10X8-KHR: static func() -> g-lenum;
    COMPRESSED-SRGB8-ALPHA8-ASTC10X10-KHR: static func() -> g-lenum;
    COMPRESSED-SRGB8-ALPHA8-ASTC12X10-KHR: static func() -> g-lenum;
    COMPRESSED-SRGB8-ALPHA8-ASTC12X12-KHR: static func() -> g-lenum;
    get-supported-profiles: func() -> list<option<string>>;
  }
  resource webgl-compressed-texture-atc {
    COMPRESSED-RGB-ATC-WEBGL: static func() -> g-lenum;
    COMPRESSED-RGBA-ATC-EXPLICIT-ALPHA-WEBGL: static func() -> g-lenum;
    COMPRESSED-RGBA-ATC-INTERPOLATED-ALPHA-WEBGL: static func() -> g-lenum;
  }
  resource webgl-compressed-texture-etc {
    COMPRESSED-R11-EAC: static func() -> g-lenum;
    COMPRESSED-SIGNED-R11-EAC: static func() -> g-lenum;
    COMPRESSED-RG11-EAC: static func() -> g-lenum;
    COMPRESSED-SIGNED-RG11-EAC: static func() -> g-lenum;
    COMPRESSED-RGB8-ETC2: static func() -> g-lenum;
    COMPRESSED-SRGB8-ETC2: static func() -> g-lenum;
    COMPRESSED-RGB8-PUNCHTHROUGH-ALPHA1-ETC2: static func() -> g-lenum;
    COMPRESSED-SRGB8-PUNCHTHROUGH-ALPHA1-ETC2: static func() -> g-lenum;
    COMPRESSED-RGBA8-ETC2-EAC: static func() -> g-lenum;
    COMPRESSED-SRGB8-ALPHA8-ETC2-EAC: static func() -> g-lenum;
  }
  resource webgl-compressed-texture-etc1 {
    COMPRESSED-RGB-ETC1-WEBGL: static func() -> g-lenum;
  }
  resource webgl-compressed-texture-pvrtc {
    COMPRESSED-RGB-PVRTC4BPPV1-IMG: static func() -> g-lenum;
    COMPRESSED-RGB-PVRTC2BPPV1-IMG: static func() -> g-lenum;
    COMPRESSED-RGBA-PVRTC4BPPV1-IMG: static func() -> g-lenum;
    COMPRESSED-RGBA-PVRTC2BPPV1-IMG: static func() -> g-lenum;
  }
  resource webgl-debug-renderer-info {
    UNMASKED-VENDOR-WEBGL: static func() -> g-lenum;
    UNMASKED-RENDERER-WEBGL: static func() -> g-lenum;
  }
  resource webgl-debug-shaders {
    get-translated-shader-source: func(shader: borrow<web-gl-shader>) -> string;
  }
  resource webgl-depth-texture {
    UNSIGNED-INT248-WEBGL: static func() -> g-lenum;
  }
  resource oes-element-index-uint {
  }
  resource ext-frag-depth {
  }
  resource webgl-lose-context {
    lose-context: func();
    restore-context: func();
  }
  resource ext-texture-filter-anisotropic {
    TEXTURE-MAX-ANISOTROPY-EXT: static func() -> g-lenum;
    MAX-TEXTURE-MAX-ANISOTROPY-EXT: static func() -> g-lenum;
  }
  resource ext-s-rgb {
    SRGB-EXT: static func() -> g-lenum;
    SRGB-ALPHA-EXT: static func() -> g-lenum;
    SRGB8-ALPHA8-EXT: static func() -> g-lenum;
    FRAMEBUFFER-ATTACHMENT-COLOR-ENCODING-EXT: static func() -> g-lenum;
  }
  resource oes-standard-derivatives {
    FRAGMENT-SHADER-DERIVATIVE-HINT-OES: static func() -> g-lenum;
  }
  resource oes-texture-float {
  }
  resource webgl-draw-buffers {
    COLOR-ATTACHMENT0-WEBGL: static func() -> g-lenum;
    COLOR-ATTACHMENT1-WEBGL: static func() -> g-lenum;
    COLOR-ATTACHMENT2-WEBGL: static func() -> g-lenum;
    COLOR-ATTACHMENT3-WEBGL: static func() -> g-lenum;
    COLOR-ATTACHMENT4-WEBGL: static func() -> g-lenum;
    COLOR-ATTACHMENT5-WEBGL: static func() -> g-lenum;
    COLOR-ATTACHMENT6-WEBGL: static func() -> g-lenum;
    COLOR-ATTACHMENT7-WEBGL: static func() -> g-lenum;
    COLOR-ATTACHMENT8-WEBGL: static func() -> g-lenum;
    COLOR-ATTACHMENT9-WEBGL: static func() -> g-lenum;
    COLOR-ATTACHMENT10-WEBGL: static func() -> g-lenum;
    COLOR-ATTACHMENT11-WEBGL: static func() -> g-lenum;
    COLOR-ATTACHMENT12-WEBGL: static func() -> g-lenum;
    COLOR-ATTACHMENT13-WEBGL: static func() -> g-lenum;
    COLOR-ATTACHMENT14-WEBGL: static func() -> g-lenum;
    COLOR-ATTACHMENT15-WEBGL: static func() -> g-lenum;
    DRAW-BUFFER0-WEBGL: static func() -> g-lenum;
    DRAW-BUFFER1-WEBGL: static func() -> g-lenum;
    DRAW-BUFFER2-WEBGL: static func() -> g-lenum;
    DRAW-BUFFER3-WEBGL: static func() -> g-lenum;
    DRAW-BUFFER4-WEBGL: static func() -> g-lenum;
    DRAW-BUFFER5-WEBGL: static func() -> g-lenum;
    DRAW-BUFFER6-WEBGL: static func() -> g-lenum;
    DRAW-BUFFER7-WEBGL: static func() -> g-lenum;
    DRAW-BUFFER8-WEBGL: static func() -> g-lenum;
    DRAW-BUFFER9-WEBGL: static func() -> g-lenum;
    DRAW-BUFFER10-WEBGL: static func() -> g-lenum;
    DRAW-BUFFER11-WEBGL: static func() -> g-lenum;
    DRAW-BUFFER12-WEBGL: static func() -> g-lenum;
    DRAW-BUFFER13-WEBGL: static func() -> g-lenum;
    DRAW-BUFFER14-WEBGL: static func() -> g-lenum;
    DRAW-BUFFER15-WEBGL: static func() -> g-lenum;
    MAX-COLOR-ATTACHMENTS-WEBGL: static func() -> g-lenum;
    MAX-DRAW-BUFFERS-WEBGL: static func() -> g-lenum;
    draw-buffers-webgl: func(buffers: list<g-lenum>);
  }
  resource oes-texture-float-linear {
  }
  resource ext-shader-texture-lod {
  }
  resource oes-texture-half-float {
    HALF-FLOAT-OES: static func() -> g-lenum;
  }
  resource oes-texture-half-float-linear {
  }
  resource webgl-color-buffer-float {
    RGBA32F-EXT: static func() -> g-lenum;
    RGB32F-EXT: static func() -> g-lenum;
    FRAMEBUFFER-ATTACHMENT-COMPONENT-TYPE-EXT: static func() -> g-lenum;
    UNSIGNED-NORMALIZED-EXT: static func() -> g-lenum;
  }
  resource ext-color-buffer-half-float {
    RGBA16F-EXT: static func() -> g-lenum;
    RGB16F-EXT: static func() -> g-lenum;
    FRAMEBUFFER-ATTACHMENT-COMPONENT-TYPE-EXT: static func() -> g-lenum;
    UNSIGNED-NORMALIZED-EXT: static func() -> g-lenum;
  }
  resource oes-vertex-array-object {
    VERTEX-ARRAY-BINDING-OES: static func() -> g-lenum;
    create-vertex-array-oes: func() -> option<web-gl-vertex-array-object>;
    delete-vertex-array-oes: func(array-object: option<borrow<web-gl-vertex-array-object>>);
    is-vertex-array-oes: func(array-object: option<borrow<web-gl-vertex-array-object>>) -> g-lboolean;
    bind-vertex-array-oes: func(array-object: option<borrow<web-gl-vertex-array-object>>);
  }
  resource angle-instanced-arrays {
    VERTEX-ATTRIB-ARRAY-DIVISOR-ANGLE: static func() -> g-lenum;
    draw-arrays-instanced-angle: func(mode: g-lenum, first: g-lint, count: g-lsizei, primcount: g-lsizei);
    draw-elements-instanced-angle: func(mode: g-lenum, count: g-lsizei, %type: g-lenum, offset: g-lintptr, primcount: g-lsizei);
    vertex-attrib-divisor-angle: func(index: g-luint, divisor: g-luint);
  }
  resource ext-blend-minmax {
    MIN-EXT: static func() -> g-lenum;
    MAX-EXT: static func() -> g-lenum;
  }
  resource web-gl-query {
  }
  resource ext-disjoint-timer-query {
    QUERY-COUNTER-BITS-EXT: static func() -> g-lenum;
    CURRENT-QUERY-EXT: static func() -> g-lenum;
    QUERY-RESULT-EXT: static func() -> g-lenum;
    QUERY-RESULT-AVAILABLE-EXT: static func() -> g-lenum;
    TIME-ELAPSED-EXT: static func() -> g-lenum;
    TIMESTAMP-EXT: static func() -> g-lenum;
    GPU-DISJOINT-EXT: static func() -> g-lenum;
    create-query-ext: func() -> option<web-gl-query>;
    delete-query-ext: func(query: option<borrow<web-gl-query>>);
    is-query-ext: func(query: option<borrow<web-gl-query>>) -> bool;
    begin-query-ext: func(target: g-lenum, query: borrow<web-gl-query>);
    end-query-ext: func(target: g-lenum);
    query-counter-ext: func(query: borrow<web-gl-query>, target: g-lenum);
    get-query-ext: func(target: g-lenum, pname: g-lenum) -> any;
    get-query-object-ext: func(query: borrow<web-gl-query>, pname: g-lenum) -> any;
  }
  resource moz-debug {
    EXTENSIONS: static func() -> g-lenum;
    WSI-INFO: static func() -> g-lenum;
    UNPACK-REQUIRE-FASTPATH: static func() -> g-lenum;
    get-parameter: func(pname: g-lenum) -> any;
  }
  resource media-key-session {
    as-event-target: func() -> event-target;
    error: func() -> option<media-key-error>;
    session-id: func() -> string;
    expiration: func() -> f64;
    key-statuses: func() -> media-key-status-map;
    onkeystatuseschange-subscribe: func() -> pollable;
    onmessage-subscribe: func() -> pollable;
    generate-request: func(init-data-type: string, init-data: buffer-source);
    load: func(session-id: string) -> bool;
    update: func(response: buffer-source);
    close: func();
    remove: func();
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource message-channel {
    port1: func() -> message-port;
    port2: func() -> message-port;
  }
  resource svgfe-morphology-element {
    as-svg-element: func() -> svg-element;
    SVG-MORPHOLOGY-OPERATOR-UNKNOWN: static func() -> u16;
    SVG-MORPHOLOGY-OPERATOR-ERODE: static func() -> u16;
    SVG-MORPHOLOGY-OPERATOR-DILATE: static func() -> u16;
    in1: func() -> svg-animated-string;
    operator: func() -> svg-animated-enumeration;
    radius-x: func() -> svg-animated-number;
    radius-y: func() -> svg-animated-number;
    x: func() -> svg-animated-length;
    y: func() -> svg-animated-length;
    width: func() -> svg-animated-length;
    height: func() -> svg-animated-length;
    %result: func() -> svg-animated-string;
    id: func() -> string;
    set-id: func(id: string);
    class-name: func() -> svg-animated-string;
    dataset: func() -> dom-string-map;
    style: func() -> css-style-declaration;
    owner-svg-element: func() -> option<svgsvg-element>;
    viewport-element: func() -> option<svg-element>;
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func();
    blur: func();
  }
  enum media-key-message-type {
    license-request,
    license-renewal,
    license-release,
    individualization-request,
  }
  resource media-key-message-event {
    as-event: func() -> event;
    message-type: func() -> media-key-message-type;
    message: func() -> array-buffer;
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
  }
  record media-key-message-event-init {
    message-type: media-key-message-type,
    message: array-buffer,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  record performance-observer-init {
    entry-types: list<string>,
    buffered: option<bool>,
  }
  resource performance-observer {
    observe: func(options: performance-observer-init);
    disconnect: func();
    take-records: func() -> performance-entry-list;
  }
  resource dom-error {
    name: func() -> string;
    message: func() -> string;
  }
  resource external {
    add-search-provider: func(a-description-url: string);
    is-search-provider-installed: func(a-search-url: string) -> u32;
  }
  record profile-timeline-stack-frame {
    line: option<s32>,
    column: option<s32>,
    source: option<string>,
    function-display-name: option<string>,
    parent: option<object>,
    async-parent: option<object>,
    async-cause: option<string>,
  }
  record profile-timeline-layer-rect {
    x: option<s32>,
    y: option<s32>,
    width: option<s32>,
    height: option<s32>,
  }
  enum profile-timeline-message-port-operation-type {
    serialize-data,
    deserialize-data,
  }
  enum profile-timeline-worker-operation-type {
    serialize-data-off-main-thread,
    serialize-data-on-main-thread,
    deserialize-data-off-main-thread,
    deserialize-data-on-main-thread,
  }
  record profile-timeline-marker {
    name: option<string>,
    start: option<dom-high-res-time-stamp>,
    end: option<dom-high-res-time-stamp>,
    stack: option<object>,
    process-type: option<u16>,
    is-off-main-thread: option<bool>,
    cause-name: option<string>,
    end-stack: option<object>,
    %type: option<string>,
    event-phase: option<u16>,
    unix-time: option<u64>,
    rectangles: option<list<profile-timeline-layer-rect>>,
    is-animation-only: option<bool>,
    message-port-operation: option<profile-timeline-message-port-operation-type>,
    worker-operation: option<profile-timeline-worker-operation-type>,
  }
  resource svg-animated-angle {
    base-val: func() -> svg-angle;
    anim-val: func() -> svg-angle;
  }
  resource grouped-history-event {
    as-event: func() -> event;
    other-browser: func() -> option<element>;
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
  }
  record grouped-history-event-init {
    other-browser: option<option<borrow<element>>>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource cache-storage {
    match: func(request: request-info, options: option<cache-query-options>) -> response;
    has: func(cache-name: string) -> bool;
    open: func(cache-name: string) -> cache;
    delete: func(cache-name: string) -> bool;
    keys: func() -> list<string>;
  }
  enum cache-storage-namespace {
    content,
    chrome,
  }
  enum rtc-sdp-type {
    offer,
    pranswer,
    answer,
    rollback,
  }
  record rtc-session-description-init {
    %type: rtc-sdp-type,
    sdp: option<string>,
  }
  resource rtc-session-description {
    %type: func() -> rtc-sdp-type;
    set-type: func(%type: rtc-sdp-type);
    sdp: func() -> string;
    set-sdp: func(sdp: string);
    to-json: func() -> object;
  }
  type json = object;
  variant blob-or-buffer-source-or-form-data-or-readable-stream-or-string-or-url-search-params {
    blob(borrow<blob>),
    buffer-source(buffer-source),
    form-data(borrow<form-data>),
    readable-stream(borrow<readable-stream>),
    %string(string),
    url-search-params(borrow<url-search-params>),
  }
  type body-init = blob-or-buffer-source-or-form-data-or-readable-stream-or-string-or-url-search-params;
  record fetch-readable-stream-read-data-done {
    done: option<bool>,
  }
  record fetch-readable-stream-read-data-array {
    value: option<uint8-array>,
  }
  record share-data {
    files: option<list<borrow<file>>>,
    title: option<string>,
    text: option<string>,
    url: option<string>,
  }
  resource gamepad-axis-move-event {
    as-gamepad-event: func() -> gamepad-event;
    axis: func() -> u32;
    value: func() -> f64;
    gamepad: func() -> option<gamepad>;
  }
  record gamepad-axis-move-event-init {
    axis: option<u32>,
    value: option<f64>,
    gamepad: option<option<borrow<gamepad>>>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource svg-rect-element {
    as-svg-geometry-element: func() -> svg-geometry-element;
    x: func() -> svg-animated-length;
    y: func() -> svg-animated-length;
    width: func() -> svg-animated-length;
    height: func() -> svg-animated-length;
    rx: func() -> svg-animated-length;
    ry: func() -> svg-animated-length;
  }
  resource xml-serializer {
    serialize-to-string: func(root: borrow<node>) -> string;
  }
  enum auto-keyword {
    auto,
  }
  enum line-align-setting {
    start,
    center,
    end,
  }
  enum position-align-setting {
    line-left,
    center,
    line-right,
    auto,
  }
  enum align-setting {
    start,
    center,
    end,
    left,
    right,
  }
  enum direction-setting {
    default,
    rl,
    lr,
  }
  resource vtt-cue {
    as-text-track-cue: func() -> text-track-cue;
    region: func() -> option<vtt-region>;
    set-region: func(region: option<vtt-region>);
    vertical: func() -> direction-setting;
    set-vertical: func(vertical: direction-setting);
    snap-to-lines: func() -> bool;
    set-snap-to-lines: func(snap-to-lines: bool);
    line: func() -> auto-keyword-or-f64;
    set-line: func(line: auto-keyword-or-f64);
    line-align: func() -> line-align-setting;
    set-line-align: func(line-align: line-align-setting);
    position: func() -> auto-keyword-or-f64;
    set-position: func(position: auto-keyword-or-f64);
    position-align: func() -> position-align-setting;
    set-position-align: func(position-align: position-align-setting);
    size: func() -> f64;
    set-size: func(size: f64);
    align: func() -> align-setting;
    set-align: func(align: align-setting);
    text: func() -> string;
    set-text: func(text: string);
    get-cue-as-html: func() -> document-fragment;
    track: func() -> option<text-track>;
    id: func() -> string;
    set-id: func(id: string);
    start-time: func() -> f64;
    set-start-time: func(start-time: f64);
    end-time: func() -> f64;
    set-end-time: func(end-time: f64);
    pause-on-exit: func() -> bool;
    set-pause-on-exit: func(pause-on-exit: bool);
    onenter-subscribe: func() -> pollable;
    onexit-subscribe: func() -> pollable;
  }
  variant auto-keyword-or-f64 {
    auto-keyword(auto-keyword),
    %f64(f64),
  }
  resource mime-type-array {
    length: func() -> u32;
    item: func(index: u32) -> option<mime-type>;
    named-item: func(name: string) -> option<mime-type>;
  }
  resource svgfe-func-g-element {
    as-svg-component-transfer-function-element: func() -> svg-component-transfer-function-element;
    SVG-FECOMPONENTTRANSFER-TYPE-UNKNOWN: static func() -> u16;
    SVG-FECOMPONENTTRANSFER-TYPE-IDENTITY: static func() -> u16;
    SVG-FECOMPONENTTRANSFER-TYPE-TABLE: static func() -> u16;
    SVG-FECOMPONENTTRANSFER-TYPE-DISCRETE: static func() -> u16;
    SVG-FECOMPONENTTRANSFER-TYPE-LINEAR: static func() -> u16;
    SVG-FECOMPONENTTRANSFER-TYPE-GAMMA: static func() -> u16;
    %type: func() -> svg-animated-enumeration;
    table-values: func() -> svg-animated-number-list;
    slope: func() -> svg-animated-number;
    intercept: func() -> svg-animated-number;
    amplitude: func() -> svg-animated-number;
    exponent: func() -> svg-animated-number;
    offset: func() -> svg-animated-number;
  }
  resource svgfe-convolve-matrix-element {
    as-svg-element: func() -> svg-element;
    SVG-EDGEMODE-UNKNOWN: static func() -> u16;
    SVG-EDGEMODE-DUPLICATE: static func() -> u16;
    SVG-EDGEMODE-WRAP: static func() -> u16;
    SVG-EDGEMODE-NONE: static func() -> u16;
    in1: func() -> svg-animated-string;
    order-x: func() -> svg-animated-integer;
    order-y: func() -> svg-animated-integer;
    kernel-matrix: func() -> svg-animated-number-list;
    divisor: func() -> svg-animated-number;
    bias: func() -> svg-animated-number;
    target-x: func() -> svg-animated-integer;
    target-y: func() -> svg-animated-integer;
    edge-mode: func() -> svg-animated-enumeration;
    kernel-unit-length-x: func() -> svg-animated-number;
    kernel-unit-length-y: func() -> svg-animated-number;
    preserve-alpha: func() -> svg-animated-boolean;
    x: func() -> svg-animated-length;
    y: func() -> svg-animated-length;
    width: func() -> svg-animated-length;
    height: func() -> svg-animated-length;
    %result: func() -> svg-animated-string;
    id: func() -> string;
    set-id: func(id: string);
    class-name: func() -> svg-animated-string;
    dataset: func() -> dom-string-map;
    style: func() -> css-style-declaration;
    owner-svg-element: func() -> option<svgsvg-element>;
    viewport-element: func() -> option<svg-element>;
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func();
    blur: func();
  }
  resource svg-animated-enumeration {
    base-val: func() -> u16;
    set-base-val: func(base-val: u16);
    anim-val: func() -> u16;
  }
  resource canvas-capture-media-stream-track {
    as-media-stream-track: func() -> media-stream-track;
    canvas: func() -> html-canvas-element;
    request-frame: func();
    kind: func() -> string;
    id: func() -> string;
    label: func() -> string;
    enabled: func() -> bool;
    set-enabled: func(enabled: bool);
    muted: func() -> bool;
    onmute-subscribe: func() -> pollable;
    onunmute-subscribe: func() -> pollable;
    ready-state: func() -> media-stream-track-state;
    onended-subscribe: func() -> pollable;
    clone: func() -> media-stream-track;
    stop: func();
    get-constraints: func() -> media-track-constraints;
    get-settings: func() -> media-track-settings;
    apply-constraints: func(constraints: option<media-track-constraints>);
    muted-changed: func(muted: bool);
  }
  enum animation-play-state {
    idle,
    running,
    paused,
    finished,
  }
  resource animation {
    as-event-target: func() -> event-target;
    as-css-transition: func() -> option<css-transition>;
    id: func() -> string;
    set-id: func(id: string);
    effect: func() -> option<animation-effect>;
    set-effect: func(effect: option<animation-effect>);
    timeline: func() -> option<animation-timeline>;
    set-timeline: func(timeline: option<animation-timeline>);
    start-time: func() -> f64;
    set-start-time: func(start-time: f64);
    current-time: func() -> f64;
    set-current-time: func(current-time: f64);
    playback-rate: func() -> f64;
    set-playback-rate: func(playback-rate: f64);
    play-state: func() -> animation-play-state;
    pending: func() -> bool;
    ready: func() -> animation;
    finished: func() -> animation;
    onfinish-subscribe: func() -> pollable;
    oncancel-subscribe: func() -> pollable;
    cancel: func();
    finish: func();
    play: func();
    pause: func();
    update-playback-rate: func(playback-rate: f64);
    reverse: func();
    is-running-on-compositor: func() -> bool;
    as-css-animation: func() -> option<css-animation>;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource html-options-collection {
    as-html-collection: func() -> html-collection;
    length: func() -> u32;
    set-length: func(length: u32);
    add: func(element: html-opt-group-element-or-html-option-element, before: option<html-element-or-s32>);
    remove: func(index: s32);
    selected-index: func() -> s32;
    set-selected-index: func(selected-index: s32);
    // length: func() -> u32;
    item: func(index: u32) -> option<element>;
    named-item: func(name: string) -> option<element>;
  }
  resource x-path-result {
    ANY-TYPE: static func() -> u16;
    NUMBER-TYPE: static func() -> u16;
    STRING-TYPE: static func() -> u16;
    BOOLEAN-TYPE: static func() -> u16;
    UNORDERED-NODE-ITERATOR-TYPE: static func() -> u16;
    ORDERED-NODE-ITERATOR-TYPE: static func() -> u16;
    UNORDERED-NODE-SNAPSHOT-TYPE: static func() -> u16;
    ORDERED-NODE-SNAPSHOT-TYPE: static func() -> u16;
    ANY-UNORDERED-NODE-TYPE: static func() -> u16;
    FIRST-ORDERED-NODE-TYPE: static func() -> u16;
    result-type: func() -> u16;
    number-value: func() -> f64;
    string-value: func() -> string;
    boolean-value: func() -> bool;
    single-node-value: func() -> option<node>;
    invalid-iterator-state: func() -> bool;
    snapshot-length: func() -> u32;
    iterate-next: func() -> option<node>;
    snapshot-item: func(index: u32) -> option<node>;
  }
  resource media-stream-error {
    name: func() -> string;
    message: func() -> string;
    constraint: func() -> string;
  }
  resource css-pseudo-element {
    %type: func() -> string;
    parent-element: func() -> element;
  }
  resource tree-walker {
    root: func() -> node;
    what-to-show: func() -> u32;
    filter: func() -> option<node-filter>;
    current-node: func() -> node;
    set-current-node: func(current-node: node);
    parent-node: func() -> option<node>;
    first-child: func() -> option<node>;
    last-child: func() -> option<node>;
    previous-sibling: func() -> option<node>;
    next-sibling: func() -> option<node>;
    previous-node: func() -> option<node>;
    next-node: func() -> option<node>;
  }
  resource svg-gradient-element {
    as-svg-element: func() -> svg-element;
    as-svg-radial-gradient-element: func() -> option<svg-radial-gradient-element>;
    as-svg-linear-gradient-element: func() -> option<svg-linear-gradient-element>;
    SVG-SPREADMETHOD-UNKNOWN: static func() -> u16;
    SVG-SPREADMETHOD-PAD: static func() -> u16;
    SVG-SPREADMETHOD-REFLECT: static func() -> u16;
    SVG-SPREADMETHOD-REPEAT: static func() -> u16;
    gradient-units: func() -> svg-animated-enumeration;
    gradient-transform: func() -> svg-animated-transform-list;
    spread-method: func() -> svg-animated-enumeration;
    href: func() -> svg-animated-string;
    id: func() -> string;
    set-id: func(id: string);
    class-name: func() -> svg-animated-string;
    dataset: func() -> dom-string-map;
    style: func() -> css-style-declaration;
    owner-svg-element: func() -> option<svgsvg-element>;
    viewport-element: func() -> option<svg-element>;
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func();
    blur: func();
  }
  record key-algorithm {
    name: string,
  }
  record aes-key-algorithm {
    length: u16,
    name: string,
  }
  record ec-key-algorithm {
    named-curve: string,
    name: string,
  }
  record hmac-key-algorithm {
    hash: key-algorithm,
    length: u32,
    name: string,
  }
  record rsa-hashed-key-algorithm {
    modulus-length: u16,
    public-exponent: uint8-array,
    hash: key-algorithm,
    name: string,
  }
  record dh-key-algorithm {
    prime: uint8-array,
    generator: uint8-array,
    name: string,
  }
  type g-lint64 = s64;
  type g-luint64 = u64;
  resource web-gl-sampler {
  }
  resource web-gl-sync {
  }
  resource web-gl-transform-feedback {
  }
  variant list-g-luint-or-uint32-array {
    list-g-luint(list<g-luint>),
    uint32-array(uint32-array),
  }
  type uint32-list = list-g-luint-or-uint32-array;
  resource web-gl2-rendering-context {
    READ-BUFFER: static func() -> g-lenum;
    UNPACK-ROW-LENGTH: static func() -> g-lenum;
    UNPACK-SKIP-ROWS: static func() -> g-lenum;
    UNPACK-SKIP-PIXELS: static func() -> g-lenum;
    PACK-ROW-LENGTH: static func() -> g-lenum;
    PACK-SKIP-ROWS: static func() -> g-lenum;
    PACK-SKIP-PIXELS: static func() -> g-lenum;
    COLOR: static func() -> g-lenum;
    DEPTH: static func() -> g-lenum;
    STENCIL: static func() -> g-lenum;
    RED: static func() -> g-lenum;
    RGB8: static func() -> g-lenum;
    RGBA8: static func() -> g-lenum;
    RGB10-A2: static func() -> g-lenum;
    TEXTURE-BINDING3D: static func() -> g-lenum;
    UNPACK-SKIP-IMAGES: static func() -> g-lenum;
    UNPACK-IMAGE-HEIGHT: static func() -> g-lenum;
    TEXTURE3D: static func() -> g-lenum;
    TEXTURE-WRAP-R: static func() -> g-lenum;
    MAX3D-TEXTURE-SIZE: static func() -> g-lenum;
    UNSIGNED-INT2101010-REV: static func() -> g-lenum;
    MAX-ELEMENTS-VERTICES: static func() -> g-lenum;
    MAX-ELEMENTS-INDICES: static func() -> g-lenum;
    TEXTURE-MIN-LOD: static func() -> g-lenum;
    TEXTURE-MAX-LOD: static func() -> g-lenum;
    TEXTURE-BASE-LEVEL: static func() -> g-lenum;
    TEXTURE-MAX-LEVEL: static func() -> g-lenum;
    MIN: static func() -> g-lenum;
    MAX: static func() -> g-lenum;
    DEPTH-COMPONENT24: static func() -> g-lenum;
    MAX-TEXTURE-LOD-BIAS: static func() -> g-lenum;
    TEXTURE-COMPARE-MODE: static func() -> g-lenum;
    TEXTURE-COMPARE-FUNC: static func() -> g-lenum;
    CURRENT-QUERY: static func() -> g-lenum;
    QUERY-RESULT: static func() -> g-lenum;
    QUERY-RESULT-AVAILABLE: static func() -> g-lenum;
    STREAM-READ: static func() -> g-lenum;
    STREAM-COPY: static func() -> g-lenum;
    STATIC-READ: static func() -> g-lenum;
    STATIC-COPY: static func() -> g-lenum;
    DYNAMIC-READ: static func() -> g-lenum;
    DYNAMIC-COPY: static func() -> g-lenum;
    MAX-DRAW-BUFFERS: static func() -> g-lenum;
    DRAW-BUFFER0: static func() -> g-lenum;
    DRAW-BUFFER1: static func() -> g-lenum;
    DRAW-BUFFER2: static func() -> g-lenum;
    DRAW-BUFFER3: static func() -> g-lenum;
    DRAW-BUFFER4: static func() -> g-lenum;
    DRAW-BUFFER5: static func() -> g-lenum;
    DRAW-BUFFER6: static func() -> g-lenum;
    DRAW-BUFFER7: static func() -> g-lenum;
    DRAW-BUFFER8: static func() -> g-lenum;
    DRAW-BUFFER9: static func() -> g-lenum;
    DRAW-BUFFER10: static func() -> g-lenum;
    DRAW-BUFFER11: static func() -> g-lenum;
    DRAW-BUFFER12: static func() -> g-lenum;
    DRAW-BUFFER13: static func() -> g-lenum;
    DRAW-BUFFER14: static func() -> g-lenum;
    DRAW-BUFFER15: static func() -> g-lenum;
    MAX-FRAGMENT-UNIFORM-COMPONENTS: static func() -> g-lenum;
    MAX-VERTEX-UNIFORM-COMPONENTS: static func() -> g-lenum;
    SAMPLER3D: static func() -> g-lenum;
    SAMPLER2D-SHADOW: static func() -> g-lenum;
    FRAGMENT-SHADER-DERIVATIVE-HINT: static func() -> g-lenum;
    PIXEL-PACK-BUFFER: static func() -> g-lenum;
    PIXEL-UNPACK-BUFFER: static func() -> g-lenum;
    PIXEL-PACK-BUFFER-BINDING: static func() -> g-lenum;
    PIXEL-UNPACK-BUFFER-BINDING: static func() -> g-lenum;
    FLOAT-MAT2X3: static func() -> g-lenum;
    FLOAT-MAT2X4: static func() -> g-lenum;
    FLOAT-MAT3X2: static func() -> g-lenum;
    FLOAT-MAT3X4: static func() -> g-lenum;
    FLOAT-MAT4X2: static func() -> g-lenum;
    FLOAT-MAT4X3: static func() -> g-lenum;
    SRGB: static func() -> g-lenum;
    SRGB8: static func() -> g-lenum;
    SRGB8-ALPHA8: static func() -> g-lenum;
    COMPARE-REF-TO-TEXTURE: static func() -> g-lenum;
    RGBA32F: static func() -> g-lenum;
    RGB32F: static func() -> g-lenum;
    RGBA16F: static func() -> g-lenum;
    RGB16F: static func() -> g-lenum;
    VERTEX-ATTRIB-ARRAY-INTEGER: static func() -> g-lenum;
    MAX-ARRAY-TEXTURE-LAYERS: static func() -> g-lenum;
    MIN-PROGRAM-TEXEL-OFFSET: static func() -> g-lenum;
    MAX-PROGRAM-TEXEL-OFFSET: static func() -> g-lenum;
    MAX-VARYING-COMPONENTS: static func() -> g-lenum;
    TEXTURE2D-ARRAY: static func() -> g-lenum;
    TEXTURE-BINDING2D-ARRAY: static func() -> g-lenum;
    R11F-G11F-B10F: static func() -> g-lenum;
    UNSIGNED-INT10F11F11F-REV: static func() -> g-lenum;
    RGB9-E5: static func() -> g-lenum;
    UNSIGNED-INT5999-REV: static func() -> g-lenum;
    TRANSFORM-FEEDBACK-BUFFER-MODE: static func() -> g-lenum;
    MAX-TRANSFORM-FEEDBACK-SEPARATE-COMPONENTS: static func() -> g-lenum;
    TRANSFORM-FEEDBACK-VARYINGS: static func() -> g-lenum;
    TRANSFORM-FEEDBACK-BUFFER-START: static func() -> g-lenum;
    TRANSFORM-FEEDBACK-BUFFER-SIZE: static func() -> g-lenum;
    TRANSFORM-FEEDBACK-PRIMITIVES-WRITTEN: static func() -> g-lenum;
    RASTERIZER-DISCARD: static func() -> g-lenum;
    MAX-TRANSFORM-FEEDBACK-INTERLEAVED-COMPONENTS: static func() -> g-lenum;
    MAX-TRANSFORM-FEEDBACK-SEPARATE-ATTRIBS: static func() -> g-lenum;
    INTERLEAVED-ATTRIBS: static func() -> g-lenum;
    SEPARATE-ATTRIBS: static func() -> g-lenum;
    TRANSFORM-FEEDBACK-BUFFER: static func() -> g-lenum;
    TRANSFORM-FEEDBACK-BUFFER-BINDING: static func() -> g-lenum;
    RGBA32UI: static func() -> g-lenum;
    RGB32UI: static func() -> g-lenum;
    RGBA16UI: static func() -> g-lenum;
    RGB16UI: static func() -> g-lenum;
    RGBA8UI: static func() -> g-lenum;
    RGB8UI: static func() -> g-lenum;
    RGBA32I: static func() -> g-lenum;
    RGB32I: static func() -> g-lenum;
    RGBA16I: static func() -> g-lenum;
    RGB16I: static func() -> g-lenum;
    RGBA8I: static func() -> g-lenum;
    RGB8I: static func() -> g-lenum;
    RED-INTEGER: static func() -> g-lenum;
    RGB-INTEGER: static func() -> g-lenum;
    RGBA-INTEGER: static func() -> g-lenum;
    SAMPLER2D-ARRAY: static func() -> g-lenum;
    SAMPLER2D-ARRAY-SHADOW: static func() -> g-lenum;
    SAMPLER-CUBE-SHADOW: static func() -> g-lenum;
    UNSIGNED-INT-VEC2: static func() -> g-lenum;
    UNSIGNED-INT-VEC3: static func() -> g-lenum;
    UNSIGNED-INT-VEC4: static func() -> g-lenum;
    INT-SAMPLER2D: static func() -> g-lenum;
    INT-SAMPLER3D: static func() -> g-lenum;
    INT-SAMPLER-CUBE: static func() -> g-lenum;
    INT-SAMPLER2D-ARRAY: static func() -> g-lenum;
    UNSIGNED-INT-SAMPLER2D: static func() -> g-lenum;
    UNSIGNED-INT-SAMPLER3D: static func() -> g-lenum;
    UNSIGNED-INT-SAMPLER-CUBE: static func() -> g-lenum;
    UNSIGNED-INT-SAMPLER2D-ARRAY: static func() -> g-lenum;
    DEPTH-COMPONENT32F: static func() -> g-lenum;
    DEPTH32F-STENCIL8: static func() -> g-lenum;
    FLOAT32-UNSIGNED-INT248-REV: static func() -> g-lenum;
    FRAMEBUFFER-ATTACHMENT-COLOR-ENCODING: static func() -> g-lenum;
    FRAMEBUFFER-ATTACHMENT-COMPONENT-TYPE: static func() -> g-lenum;
    FRAMEBUFFER-ATTACHMENT-RED-SIZE: static func() -> g-lenum;
    FRAMEBUFFER-ATTACHMENT-GREEN-SIZE: static func() -> g-lenum;
    FRAMEBUFFER-ATTACHMENT-BLUE-SIZE: static func() -> g-lenum;
    FRAMEBUFFER-ATTACHMENT-ALPHA-SIZE: static func() -> g-lenum;
    FRAMEBUFFER-ATTACHMENT-DEPTH-SIZE: static func() -> g-lenum;
    FRAMEBUFFER-ATTACHMENT-STENCIL-SIZE: static func() -> g-lenum;
    FRAMEBUFFER-DEFAULT: static func() -> g-lenum;
    UNSIGNED-INT248: static func() -> g-lenum;
    DEPTH24-STENCIL8: static func() -> g-lenum;
    UNSIGNED-NORMALIZED: static func() -> g-lenum;
    DRAW-FRAMEBUFFER-BINDING: static func() -> g-lenum;
    READ-FRAMEBUFFER: static func() -> g-lenum;
    DRAW-FRAMEBUFFER: static func() -> g-lenum;
    READ-FRAMEBUFFER-BINDING: static func() -> g-lenum;
    RENDERBUFFER-SAMPLES: static func() -> g-lenum;
    FRAMEBUFFER-ATTACHMENT-TEXTURE-LAYER: static func() -> g-lenum;
    MAX-COLOR-ATTACHMENTS: static func() -> g-lenum;
    COLOR-ATTACHMENT1: static func() -> g-lenum;
    COLOR-ATTACHMENT2: static func() -> g-lenum;
    COLOR-ATTACHMENT3: static func() -> g-lenum;
    COLOR-ATTACHMENT4: static func() -> g-lenum;
    COLOR-ATTACHMENT5: static func() -> g-lenum;
    COLOR-ATTACHMENT6: static func() -> g-lenum;
    COLOR-ATTACHMENT7: static func() -> g-lenum;
    COLOR-ATTACHMENT8: static func() -> g-lenum;
    COLOR-ATTACHMENT9: static func() -> g-lenum;
    COLOR-ATTACHMENT10: static func() -> g-lenum;
    COLOR-ATTACHMENT11: static func() -> g-lenum;
    COLOR-ATTACHMENT12: static func() -> g-lenum;
    COLOR-ATTACHMENT13: static func() -> g-lenum;
    COLOR-ATTACHMENT14: static func() -> g-lenum;
    COLOR-ATTACHMENT15: static func() -> g-lenum;
    FRAMEBUFFER-INCOMPLETE-MULTISAMPLE: static func() -> g-lenum;
    MAX-SAMPLES: static func() -> g-lenum;
    HALF-FLOAT: static func() -> g-lenum;
    RG: static func() -> g-lenum;
    RG-INTEGER: static func() -> g-lenum;
    R8: static func() -> g-lenum;
    RG8: static func() -> g-lenum;
    R16F: static func() -> g-lenum;
    R32F: static func() -> g-lenum;
    RG16F: static func() -> g-lenum;
    RG32F: static func() -> g-lenum;
    R8I: static func() -> g-lenum;
    R8UI: static func() -> g-lenum;
    R16I: static func() -> g-lenum;
    R16UI: static func() -> g-lenum;
    R32I: static func() -> g-lenum;
    R32UI: static func() -> g-lenum;
    RG8I: static func() -> g-lenum;
    RG8UI: static func() -> g-lenum;
    RG16I: static func() -> g-lenum;
    RG16UI: static func() -> g-lenum;
    RG32I: static func() -> g-lenum;
    RG32UI: static func() -> g-lenum;
    VERTEX-ARRAY-BINDING: static func() -> g-lenum;
    R8-SNORM: static func() -> g-lenum;
    RG8-SNORM: static func() -> g-lenum;
    RGB8-SNORM: static func() -> g-lenum;
    RGBA8-SNORM: static func() -> g-lenum;
    SIGNED-NORMALIZED: static func() -> g-lenum;
    COPY-READ-BUFFER: static func() -> g-lenum;
    COPY-WRITE-BUFFER: static func() -> g-lenum;
    COPY-READ-BUFFER-BINDING: static func() -> g-lenum;
    COPY-WRITE-BUFFER-BINDING: static func() -> g-lenum;
    UNIFORM-BUFFER: static func() -> g-lenum;
    UNIFORM-BUFFER-BINDING: static func() -> g-lenum;
    UNIFORM-BUFFER-START: static func() -> g-lenum;
    UNIFORM-BUFFER-SIZE: static func() -> g-lenum;
    MAX-VERTEX-UNIFORM-BLOCKS: static func() -> g-lenum;
    MAX-FRAGMENT-UNIFORM-BLOCKS: static func() -> g-lenum;
    MAX-COMBINED-UNIFORM-BLOCKS: static func() -> g-lenum;
    MAX-UNIFORM-BUFFER-BINDINGS: static func() -> g-lenum;
    MAX-UNIFORM-BLOCK-SIZE: static func() -> g-lenum;
    MAX-COMBINED-VERTEX-UNIFORM-COMPONENTS: static func() -> g-lenum;
    MAX-COMBINED-FRAGMENT-UNIFORM-COMPONENTS: static func() -> g-lenum;
    UNIFORM-BUFFER-OFFSET-ALIGNMENT: static func() -> g-lenum;
    ACTIVE-UNIFORM-BLOCKS: static func() -> g-lenum;
    UNIFORM-TYPE: static func() -> g-lenum;
    UNIFORM-SIZE: static func() -> g-lenum;
    UNIFORM-BLOCK-INDEX: static func() -> g-lenum;
    UNIFORM-OFFSET: static func() -> g-lenum;
    UNIFORM-ARRAY-STRIDE: static func() -> g-lenum;
    UNIFORM-MATRIX-STRIDE: static func() -> g-lenum;
    UNIFORM-IS-ROW-MAJOR: static func() -> g-lenum;
    UNIFORM-BLOCK-BINDING: static func() -> g-lenum;
    UNIFORM-BLOCK-DATA-SIZE: static func() -> g-lenum;
    UNIFORM-BLOCK-ACTIVE-UNIFORMS: static func() -> g-lenum;
    UNIFORM-BLOCK-ACTIVE-UNIFORM-INDICES: static func() -> g-lenum;
    UNIFORM-BLOCK-REFERENCED-BY-VERTEX-SHADER: static func() -> g-lenum;
    UNIFORM-BLOCK-REFERENCED-BY-FRAGMENT-SHADER: static func() -> g-lenum;
    INVALID-INDEX: static func() -> g-lenum;
    MAX-VERTEX-OUTPUT-COMPONENTS: static func() -> g-lenum;
    MAX-FRAGMENT-INPUT-COMPONENTS: static func() -> g-lenum;
    MAX-SERVER-WAIT-TIMEOUT: static func() -> g-lenum;
    OBJECT-TYPE: static func() -> g-lenum;
    SYNC-CONDITION: static func() -> g-lenum;
    SYNC-STATUS: static func() -> g-lenum;
    SYNC-FLAGS: static func() -> g-lenum;
    SYNC-FENCE: static func() -> g-lenum;
    SYNC-GPU-COMMANDS-COMPLETE: static func() -> g-lenum;
    UNSIGNALED: static func() -> g-lenum;
    SIGNALED: static func() -> g-lenum;
    ALREADY-SIGNALED: static func() -> g-lenum;
    TIMEOUT-EXPIRED: static func() -> g-lenum;
    CONDITION-SATISFIED: static func() -> g-lenum;
    WAIT-FAILED: static func() -> g-lenum;
    SYNC-FLUSH-COMMANDS-BIT: static func() -> g-lenum;
    VERTEX-ATTRIB-ARRAY-DIVISOR: static func() -> g-lenum;
    ANY-SAMPLES-PASSED: static func() -> g-lenum;
    ANY-SAMPLES-PASSED-CONSERVATIVE: static func() -> g-lenum;
    SAMPLER-BINDING: static func() -> g-lenum;
    RGB10-A2UI: static func() -> g-lenum;
    INT2101010-REV: static func() -> g-lenum;
    TRANSFORM-FEEDBACK: static func() -> g-lenum;
    TRANSFORM-FEEDBACK-PAUSED: static func() -> g-lenum;
    TRANSFORM-FEEDBACK-ACTIVE: static func() -> g-lenum;
    TRANSFORM-FEEDBACK-BINDING: static func() -> g-lenum;
    TEXTURE-IMMUTABLE-FORMAT: static func() -> g-lenum;
    MAX-ELEMENT-INDEX: static func() -> g-lenum;
    TEXTURE-IMMUTABLE-LEVELS: static func() -> g-lenum;
    TIMEOUT-IGNORED: static func() -> g-lint64;
    MAX-CLIENT-WAIT-TIMEOUT-WEBGL: static func() -> g-lenum;
    buffer-data: func(params: web-gl2-rendering-context-buffer-data-params);
    buffer-sub-data: func(params: web-gl2-rendering-context-buffer-sub-data-params);
    copy-buffer-sub-data: func(read-target: g-lenum, write-target: g-lenum, read-offset: g-lintptr, write-offset: g-lintptr, size: g-lsizeiptr);
    get-buffer-sub-data: func(target: g-lenum, src-byte-offset: g-lintptr, dst-data: array-buffer-view, dst-offset: option<g-luint>, length: option<g-luint>);
    blit-framebuffer: func(src-x0: g-lint, src-y0: g-lint, src-x1: g-lint, src-y1: g-lint, dst-x0: g-lint, dst-y0: g-lint, dst-x1: g-lint, dst-y1: g-lint, mask: g-lbitfield, filter: g-lenum);
    framebuffer-texture-layer: func(target: g-lenum, attachment: g-lenum, texture: option<borrow<web-gl-texture>>, level: g-lint, layer: g-lint);
    invalidate-framebuffer: func(target: g-lenum, attachments: list<g-lenum>);
    invalidate-sub-framebuffer: func(target: g-lenum, attachments: list<g-lenum>, x: g-lint, y: g-lint, width: g-lsizei, height: g-lsizei);
    // read-buffer: func(src: g-lenum);
    get-internalformat-parameter: func(target: g-lenum, internalformat: g-lenum, pname: g-lenum) -> any;
    renderbuffer-storage-multisample: func(target: g-lenum, samples: g-lsizei, internalformat: g-lenum, width: g-lsizei, height: g-lsizei);
    tex-storage2-d: func(target: g-lenum, levels: g-lsizei, internalformat: g-lenum, width: g-lsizei, height: g-lsizei);
    tex-storage3-d: func(target: g-lenum, levels: g-lsizei, internalformat: g-lenum, width: g-lsizei, height: g-lsizei, depth: g-lsizei);
    tex-image2-d: func(params: web-gl2-rendering-context-tex-image2-d-params);
    tex-image3-d: func(params: web-gl2-rendering-context-tex-image3-d-params);
    tex-sub-image2-d: func(params: web-gl2-rendering-context-tex-sub-image2-d-params);
    tex-sub-image3-d: func(params: web-gl2-rendering-context-tex-sub-image3-d-params);
    copy-tex-sub-image3-d: func(target: g-lenum, level: g-lint, xoffset: g-lint, yoffset: g-lint, zoffset: g-lint, x: g-lint, y: g-lint, width: g-lsizei, height: g-lsizei);
    compressed-tex-image2-d: func(params: web-gl2-rendering-context-compressed-tex-image2-d-params);
    compressed-tex-image3-d: func(params: web-gl2-rendering-context-compressed-tex-image3-d-params);
    compressed-tex-sub-image2-d: func(params: web-gl2-rendering-context-compressed-tex-sub-image2-d-params);
    compressed-tex-sub-image3-d: func(params: web-gl2-rendering-context-compressed-tex-sub-image3-d-params);
    get-frag-data-location: func(program: borrow<web-gl-program>, name: string) -> g-lint;
    uniform1ui: func(location: option<borrow<web-gl-uniform-location>>, v0: g-luint);
    uniform2ui: func(location: option<borrow<web-gl-uniform-location>>, v0: g-luint, v1: g-luint);
    uniform3ui: func(location: option<borrow<web-gl-uniform-location>>, v0: g-luint, v1: g-luint, v2: g-luint);
    uniform4ui: func(location: option<borrow<web-gl-uniform-location>>, v0: g-luint, v1: g-luint, v2: g-luint, v3: g-luint);
    uniform1fv: func(location: option<borrow<web-gl-uniform-location>>, data: float32-list, src-offset: option<g-luint>, src-length: option<g-luint>);
    uniform2fv: func(location: option<borrow<web-gl-uniform-location>>, data: float32-list, src-offset: option<g-luint>, src-length: option<g-luint>);
    uniform3fv: func(location: option<borrow<web-gl-uniform-location>>, data: float32-list, src-offset: option<g-luint>, src-length: option<g-luint>);
    uniform4fv: func(location: option<borrow<web-gl-uniform-location>>, data: float32-list, src-offset: option<g-luint>, src-length: option<g-luint>);
    uniform1iv: func(location: option<borrow<web-gl-uniform-location>>, data: int32-list, src-offset: option<g-luint>, src-length: option<g-luint>);
    uniform2iv: func(location: option<borrow<web-gl-uniform-location>>, data: int32-list, src-offset: option<g-luint>, src-length: option<g-luint>);
    uniform3iv: func(location: option<borrow<web-gl-uniform-location>>, data: int32-list, src-offset: option<g-luint>, src-length: option<g-luint>);
    uniform4iv: func(location: option<borrow<web-gl-uniform-location>>, data: int32-list, src-offset: option<g-luint>, src-length: option<g-luint>);
    uniform1uiv: func(location: option<borrow<web-gl-uniform-location>>, data: uint32-list, src-offset: option<g-luint>, src-length: option<g-luint>);
    uniform2uiv: func(location: option<borrow<web-gl-uniform-location>>, data: uint32-list, src-offset: option<g-luint>, src-length: option<g-luint>);
    uniform3uiv: func(location: option<borrow<web-gl-uniform-location>>, data: uint32-list, src-offset: option<g-luint>, src-length: option<g-luint>);
    uniform4uiv: func(location: option<borrow<web-gl-uniform-location>>, data: uint32-list, src-offset: option<g-luint>, src-length: option<g-luint>);
    uniform-matrix2fv: func(location: option<borrow<web-gl-uniform-location>>, transpose: g-lboolean, data: float32-list, src-offset: option<g-luint>, src-length: option<g-luint>);
    uniform-matrix3x2fv: func(location: option<borrow<web-gl-uniform-location>>, transpose: g-lboolean, data: float32-list, src-offset: option<g-luint>, src-length: option<g-luint>);
    uniform-matrix4x2fv: func(location: option<borrow<web-gl-uniform-location>>, transpose: g-lboolean, data: float32-list, src-offset: option<g-luint>, src-length: option<g-luint>);
    uniform-matrix2x3fv: func(location: option<borrow<web-gl-uniform-location>>, transpose: g-lboolean, data: float32-list, src-offset: option<g-luint>, src-length: option<g-luint>);
    uniform-matrix3fv: func(location: option<borrow<web-gl-uniform-location>>, transpose: g-lboolean, data: float32-list, src-offset: option<g-luint>, src-length: option<g-luint>);
    uniform-matrix4x3fv: func(location: option<borrow<web-gl-uniform-location>>, transpose: g-lboolean, data: float32-list, src-offset: option<g-luint>, src-length: option<g-luint>);
    uniform-matrix2x4fv: func(location: option<borrow<web-gl-uniform-location>>, transpose: g-lboolean, data: float32-list, src-offset: option<g-luint>, src-length: option<g-luint>);
    uniform-matrix3x4fv: func(location: option<borrow<web-gl-uniform-location>>, transpose: g-lboolean, data: float32-list, src-offset: option<g-luint>, src-length: option<g-luint>);
    uniform-matrix4fv: func(location: option<borrow<web-gl-uniform-location>>, transpose: g-lboolean, data: float32-list, src-offset: option<g-luint>, src-length: option<g-luint>);
    vertex-attrib-i4i: func(index: g-luint, x: g-lint, y: g-lint, z: g-lint, w: g-lint);
    vertex-attrib-i4iv: func(index: g-luint, values: int32-list);
    vertex-attrib-i4ui: func(index: g-luint, x: g-luint, y: g-luint, z: g-luint, w: g-luint);
    vertex-attrib-i4uiv: func(index: g-luint, values: uint32-list);
    vertex-attrib-i-pointer: func(index: g-luint, size: g-lint, %type: g-lenum, stride: g-lsizei, offset: g-lintptr);
    vertex-attrib-divisor: func(index: g-luint, divisor: g-luint);
    draw-arrays-instanced: func(mode: g-lenum, first: g-lint, count: g-lsizei, instance-count: g-lsizei);
    draw-elements-instanced: func(mode: g-lenum, count: g-lsizei, %type: g-lenum, offset: g-lintptr, instance-count: g-lsizei);
    draw-range-elements: func(mode: g-lenum, start: g-luint, end: g-luint, count: g-lsizei, %type: g-lenum, offset: g-lintptr);
    read-pixels: func(params: web-gl2-rendering-context-read-pixels-params);
    draw-buffers: func(buffers: list<g-lenum>);
    clear-bufferfv: func(buffer: g-lenum, drawbuffer: g-lint, values: float32-list, src-offset: option<g-luint>);
    clear-bufferiv: func(buffer: g-lenum, drawbuffer: g-lint, values: int32-list, src-offset: option<g-luint>);
    clear-bufferuiv: func(buffer: g-lenum, drawbuffer: g-lint, values: uint32-list, src-offset: option<g-luint>);
    clear-bufferfi: func(buffer: g-lenum, drawbuffer: g-lint, depth: g-lfloat, stencil: g-lint);
    create-query: func() -> option<web-gl-query>;
    delete-query: func(query: option<borrow<web-gl-query>>);
    is-query: func(query: option<borrow<web-gl-query>>) -> g-lboolean;
    begin-query: func(target: g-lenum, query: borrow<web-gl-query>);
    end-query: func(target: g-lenum);
    get-query: func(target: g-lenum, pname: g-lenum) -> any;
    get-query-parameter: func(query: borrow<web-gl-query>, pname: g-lenum) -> any;
    create-sampler: func() -> option<web-gl-sampler>;
    delete-sampler: func(sampler: option<borrow<web-gl-sampler>>);
    is-sampler: func(sampler: option<borrow<web-gl-sampler>>) -> g-lboolean;
    bind-sampler: func(unit: g-luint, sampler: option<borrow<web-gl-sampler>>);
    sampler-parameteri: func(sampler: borrow<web-gl-sampler>, pname: g-lenum, param: g-lint);
    sampler-parameterf: func(sampler: borrow<web-gl-sampler>, pname: g-lenum, param: g-lfloat);
    get-sampler-parameter: func(sampler: borrow<web-gl-sampler>, pname: g-lenum) -> any;
    fence-sync: func(condition: g-lenum, %flags: g-lbitfield) -> option<web-gl-sync>;
    is-sync: func(sync: option<borrow<web-gl-sync>>) -> g-lboolean;
    delete-sync: func(sync: option<borrow<web-gl-sync>>);
    client-wait-sync: func(sync: borrow<web-gl-sync>, %flags: g-lbitfield, timeout: g-luint64) -> g-lenum;
    wait-sync: func(sync: borrow<web-gl-sync>, %flags: g-lbitfield, timeout: g-lint64);
    get-sync-parameter: func(sync: borrow<web-gl-sync>, pname: g-lenum) -> any;
    create-transform-feedback: func() -> option<web-gl-transform-feedback>;
    delete-transform-feedback: func(tf: option<borrow<web-gl-transform-feedback>>);
    is-transform-feedback: func(tf: option<borrow<web-gl-transform-feedback>>) -> g-lboolean;
    bind-transform-feedback: func(target: g-lenum, tf: option<borrow<web-gl-transform-feedback>>);
    begin-transform-feedback: func(primitive-mode: g-lenum);
    end-transform-feedback: func();
    // transform-feedback-varyings: func(program: borrow<web-gl-program>, varyings: list<string>, buffer-mode: g-lenum);
    get-transform-feedback-varying: func(program: borrow<web-gl-program>, index: g-luint) -> option<web-gl-active-info>;
    pause-transform-feedback: func();
    resume-transform-feedback: func();
    bind-buffer-base: func(target: g-lenum, index: g-luint, buffer: option<borrow<web-gl-buffer>>);
    bind-buffer-range: func(target: g-lenum, index: g-luint, buffer: option<borrow<web-gl-buffer>>, offset: g-lintptr, size: g-lsizeiptr);
    get-indexed-parameter: func(target: g-lenum, index: g-luint) -> any;
    get-uniform-indices: func(program: borrow<web-gl-program>, uniform-names: list<string>) -> list<option<g-luint>>;
    get-active-uniforms: func(program: borrow<web-gl-program>, uniform-indices: list<g-luint>, pname: g-lenum) -> any;
    get-uniform-block-index: func(program: borrow<web-gl-program>, uniform-block-name: string) -> g-luint;
    get-active-uniform-block-parameter: func(program: borrow<web-gl-program>, uniform-block-index: g-luint, pname: g-lenum) -> any;
    get-active-uniform-block-name: func(program: borrow<web-gl-program>, uniform-block-index: g-luint) -> string;
    // uniform-block-binding: func(program: borrow<web-gl-program>, uniform-block-index: g-luint, uniform-block-binding: g-luint);
    create-vertex-array: func() -> option<web-gl-vertex-array-object>;
    delete-vertex-array: func(vertex-array: option<borrow<web-gl-vertex-array-object>>);
    is-vertex-array: func(vertex-array: option<borrow<web-gl-vertex-array-object>>) -> g-lboolean;
    bind-vertex-array: func(array: option<borrow<web-gl-vertex-array-object>>);
  }
  variant web-gl2-rendering-context-buffer-data-params {
    target-size-usage(tuple<g-lenum, g-lsizeiptr, g-lenum>),
    target-src-data-usage(tuple<g-lenum, array-buffer, g-lenum>),
    // target-src-data-usage(tuple<g-lenum, array-buffer-view, g-lenum>),
    target-src-data-usage-src-offset-length(tuple<g-lenum, array-buffer-view, g-lenum, g-luint, option<g-luint>>),
  }
  variant web-gl2-rendering-context-buffer-sub-data-params {
    target-offset-src-data(tuple<g-lenum, g-lintptr, array-buffer>),
    // target-offset-src-data(tuple<g-lenum, g-lintptr, array-buffer-view>),
    target-dst-byte-offset-src-data-src-offset-length(tuple<g-lenum, g-lintptr, array-buffer-view, g-luint, option<g-luint>>),
  }
  variant web-gl2-rendering-context-tex-image2-d-params {
    target-level-internalformat-width-height-border-format-type-pixels(tuple<g-lenum, g-lint, g-lint, g-lsizei, g-lsizei, g-lint, g-lenum, g-lenum, array-buffer-view>),
    target-level-internalformat-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lenum, g-lenum, borrow<html-canvas-element>>),
    // target-level-internalformat-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lenum, g-lenum, borrow<html-image-element>>),
    // target-level-internalformat-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lenum, g-lenum, borrow<html-video-element>>),
    // target-level-internalformat-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lenum, g-lenum, borrow<video-frame>>),
    // target-level-internalformat-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lenum, g-lenum, borrow<image-bitmap>>),
    // target-level-internalformat-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lenum, g-lenum, borrow<image-data>>),
    target-level-internalformat-width-height-border-format-type-pbo-offset(tuple<g-lenum, g-lint, g-lint, g-lsizei, g-lsizei, g-lint, g-lenum, g-lenum, g-lintptr>),
    target-level-internalformat-width-height-border-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lsizei, g-lsizei, g-lint, g-lenum, g-lenum, borrow<html-canvas-element>>),
    // target-level-internalformat-width-height-border-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lsizei, g-lsizei, g-lint, g-lenum, g-lenum, borrow<html-image-element>>),
    // target-level-internalformat-width-height-border-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lsizei, g-lsizei, g-lint, g-lenum, g-lenum, borrow<html-video-element>>),
    // target-level-internalformat-width-height-border-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lsizei, g-lsizei, g-lint, g-lenum, g-lenum, borrow<video-frame>>),
    // target-level-internalformat-width-height-border-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lsizei, g-lsizei, g-lint, g-lenum, g-lenum, borrow<image-bitmap>>),
    // target-level-internalformat-width-height-border-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lsizei, g-lsizei, g-lint, g-lenum, g-lenum, borrow<image-data>>),
    target-level-internalformat-width-height-border-format-type-src-data-src-offset(tuple<g-lenum, g-lint, g-lint, g-lsizei, g-lsizei, g-lint, g-lenum, g-lenum, array-buffer-view, g-luint>),
  }
  variant web-gl2-rendering-context-tex-image3-d-params {
    target-level-internalformat-width-height-depth-border-format-type-pbo-offset(tuple<g-lenum, g-lint, g-lint, g-lsizei, g-lsizei, g-lsizei, g-lint, g-lenum, g-lenum, g-lintptr>),
    target-level-internalformat-width-height-depth-border-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lsizei, g-lsizei, g-lsizei, g-lint, g-lenum, g-lenum, borrow<html-canvas-element>>),
    // target-level-internalformat-width-height-depth-border-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lsizei, g-lsizei, g-lsizei, g-lint, g-lenum, g-lenum, borrow<html-image-element>>),
    // target-level-internalformat-width-height-depth-border-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lsizei, g-lsizei, g-lsizei, g-lint, g-lenum, g-lenum, borrow<html-video-element>>),
    // target-level-internalformat-width-height-depth-border-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lsizei, g-lsizei, g-lsizei, g-lint, g-lenum, g-lenum, borrow<video-frame>>),
    // target-level-internalformat-width-height-depth-border-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lsizei, g-lsizei, g-lsizei, g-lint, g-lenum, g-lenum, borrow<image-bitmap>>),
    // target-level-internalformat-width-height-depth-border-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lsizei, g-lsizei, g-lsizei, g-lint, g-lenum, g-lenum, borrow<image-data>>),
    target-level-internalformat-width-height-depth-border-format-type-src-data(tuple<g-lenum, g-lint, g-lint, g-lsizei, g-lsizei, g-lsizei, g-lint, g-lenum, g-lenum, array-buffer-view>),
    target-level-internalformat-width-height-depth-border-format-type-src-data-src-offset(tuple<g-lenum, g-lint, g-lint, g-lsizei, g-lsizei, g-lsizei, g-lint, g-lenum, g-lenum, array-buffer-view, g-luint>),
  }
  variant web-gl2-rendering-context-tex-sub-image2-d-params {
    target-level-xoffset-yoffset-width-height-format-type-pixels(tuple<g-lenum, g-lint, g-lint, g-lint, g-lsizei, g-lsizei, g-lenum, g-lenum, array-buffer-view>),
    target-level-xoffset-yoffset-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lint, g-lenum, g-lenum, borrow<html-canvas-element>>),
    // target-level-xoffset-yoffset-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lint, g-lenum, g-lenum, borrow<html-image-element>>),
    // target-level-xoffset-yoffset-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lint, g-lenum, g-lenum, borrow<html-video-element>>),
    // target-level-xoffset-yoffset-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lint, g-lenum, g-lenum, borrow<video-frame>>),
    // target-level-xoffset-yoffset-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lint, g-lenum, g-lenum, borrow<image-bitmap>>),
    // target-level-xoffset-yoffset-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lint, g-lenum, g-lenum, borrow<image-data>>),
    target-level-xoffset-yoffset-width-height-format-type-pbo-offset(tuple<g-lenum, g-lint, g-lint, g-lint, g-lsizei, g-lsizei, g-lenum, g-lenum, g-lintptr>),
    target-level-xoffset-yoffset-width-height-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lint, g-lsizei, g-lsizei, g-lenum, g-lenum, borrow<html-canvas-element>>),
    // target-level-xoffset-yoffset-width-height-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lint, g-lsizei, g-lsizei, g-lenum, g-lenum, borrow<html-image-element>>),
    // target-level-xoffset-yoffset-width-height-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lint, g-lsizei, g-lsizei, g-lenum, g-lenum, borrow<html-video-element>>),
    // target-level-xoffset-yoffset-width-height-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lint, g-lsizei, g-lsizei, g-lenum, g-lenum, borrow<video-frame>>),
    // target-level-xoffset-yoffset-width-height-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lint, g-lsizei, g-lsizei, g-lenum, g-lenum, borrow<image-bitmap>>),
    // target-level-xoffset-yoffset-width-height-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lint, g-lsizei, g-lsizei, g-lenum, g-lenum, borrow<image-data>>),
    target-level-xoffset-yoffset-width-height-format-type-src-data-src-offset(tuple<g-lenum, g-lint, g-lint, g-lint, g-lsizei, g-lsizei, g-lenum, g-lenum, array-buffer-view, g-luint>),
  }
  variant web-gl2-rendering-context-tex-sub-image3-d-params {
    target-level-xoffset-yoffset-zoffset-width-height-depth-format-type-pbo-offset(tuple<g-lenum, g-lint, g-lint, g-lint, g-lint, g-lsizei, g-lsizei, g-lsizei, g-lenum, g-lenum, g-lintptr>),
    target-level-xoffset-yoffset-zoffset-width-height-depth-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lint, g-lint, g-lsizei, g-lsizei, g-lsizei, g-lenum, g-lenum, borrow<html-canvas-element>>),
    // target-level-xoffset-yoffset-zoffset-width-height-depth-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lint, g-lint, g-lsizei, g-lsizei, g-lsizei, g-lenum, g-lenum, borrow<html-image-element>>),
    // target-level-xoffset-yoffset-zoffset-width-height-depth-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lint, g-lint, g-lsizei, g-lsizei, g-lsizei, g-lenum, g-lenum, borrow<html-video-element>>),
    // target-level-xoffset-yoffset-zoffset-width-height-depth-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lint, g-lint, g-lsizei, g-lsizei, g-lsizei, g-lenum, g-lenum, borrow<video-frame>>),
    // target-level-xoffset-yoffset-zoffset-width-height-depth-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lint, g-lint, g-lsizei, g-lsizei, g-lsizei, g-lenum, g-lenum, borrow<image-bitmap>>),
    // target-level-xoffset-yoffset-zoffset-width-height-depth-format-type-source(tuple<g-lenum, g-lint, g-lint, g-lint, g-lint, g-lsizei, g-lsizei, g-lsizei, g-lenum, g-lenum, borrow<image-data>>),
    target-level-xoffset-yoffset-zoffset-width-height-depth-format-type-src-data-src-offset(tuple<g-lenum, g-lint, g-lint, g-lint, g-lint, g-lsizei, g-lsizei, g-lsizei, g-lenum, g-lenum, array-buffer-view, option<g-luint>>),
  }
  variant web-gl2-rendering-context-compressed-tex-image2-d-params {
    target-level-internalformat-width-height-border-image-size-offset(tuple<g-lenum, g-lint, g-lenum, g-lsizei, g-lsizei, g-lint, g-lsizei, g-lintptr>),
    target-level-internalformat-width-height-border-src-data-src-offset-src-length-override(tuple<g-lenum, g-lint, g-lenum, g-lsizei, g-lsizei, g-lint, array-buffer-view, option<g-luint>, option<g-luint>>),
  }
  variant web-gl2-rendering-context-compressed-tex-image3-d-params {
    target-level-internalformat-width-height-depth-border-image-size-offset(tuple<g-lenum, g-lint, g-lenum, g-lsizei, g-lsizei, g-lsizei, g-lint, g-lsizei, g-lintptr>),
    target-level-internalformat-width-height-depth-border-src-data-src-offset-src-length-override(tuple<g-lenum, g-lint, g-lenum, g-lsizei, g-lsizei, g-lsizei, g-lint, array-buffer-view, option<g-luint>, option<g-luint>>),
  }
  variant web-gl2-rendering-context-compressed-tex-sub-image2-d-params {
    target-level-xoffset-yoffset-width-height-format-image-size-offset(tuple<g-lenum, g-lint, g-lint, g-lint, g-lsizei, g-lsizei, g-lenum, g-lsizei, g-lintptr>),
    target-level-xoffset-yoffset-width-height-format-src-data-src-offset-src-length-override(tuple<g-lenum, g-lint, g-lint, g-lint, g-lsizei, g-lsizei, g-lenum, array-buffer-view, option<g-luint>, option<g-luint>>),
  }
  variant web-gl2-rendering-context-compressed-tex-sub-image3-d-params {
    target-level-xoffset-yoffset-zoffset-width-height-depth-format-image-size-offset(tuple<g-lenum, g-lint, g-lint, g-lint, g-lint, g-lsizei, g-lsizei, g-lsizei, g-lenum, g-lsizei, g-lintptr>),
    target-level-xoffset-yoffset-zoffset-width-height-depth-format-src-data-src-offset-src-length-override(tuple<g-lenum, g-lint, g-lint, g-lint, g-lint, g-lsizei, g-lsizei, g-lsizei, g-lenum, array-buffer-view, option<g-luint>, option<g-luint>>),
  }
  variant web-gl2-rendering-context-read-pixels-params {
    x-y-width-height-format-type-dst-data(tuple<g-lint, g-lint, g-lsizei, g-lsizei, g-lenum, g-lenum, array-buffer-view>),
    x-y-width-height-format-type-offset(tuple<g-lint, g-lint, g-lsizei, g-lsizei, g-lenum, g-lenum, g-lintptr>),
    x-y-width-height-format-type-dst-data-dst-offset(tuple<g-lint, g-lint, g-lsizei, g-lsizei, g-lenum, g-lenum, array-buffer-view, g-luint>),
  }
  resource ext-color-buffer-float {
  }
  resource ext-texture-norm16 {
    R16-EXT: static func() -> g-lenum;
    RG16-EXT: static func() -> g-lenum;
    RGB16-EXT: static func() -> g-lenum;
    RGBA16-EXT: static func() -> g-lenum;
    R16-SNORM-EXT: static func() -> g-lenum;
    RG16-SNORM-EXT: static func() -> g-lenum;
    RGB16-SNORM-EXT: static func() -> g-lenum;
    RGBA16-SNORM-EXT: static func() -> g-lenum;
  }
  resource html-style-element {
    as-html-element: func() -> html-element;
    disabled: func() -> bool;
    set-disabled: func(disabled: bool);
    media: func() -> string;
    set-media: func(media: string);
    %type: func() -> string;
    set-type: func(%type: string);
    title: func() -> string;
    set-title: func(title: string);
    scroll-height: func() -> s32;
    set-scroll-height: func(scroll-height: s32);
    scroll-top: func() -> s32;
    set-scroll-top: func(scroll-top: s32);
    lang: func() -> string;
    set-lang: func(lang: string);
    dir: func() -> string;
    set-dir: func(dir: string);
    dataset: func() -> dom-string-map;
    inner-text: func() -> string;
    set-inner-text: func(inner-text: string);
    hidden: func() -> bool;
    set-hidden: func(hidden: bool);
    inert: func() -> bool;
    set-inert: func(inert: bool);
    click: func();
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func(options: option<focus-options>);
    blur: func();
    access-key: func() -> string;
    set-access-key: func(access-key: string);
    access-key-label: func() -> string;
    draggable: func() -> bool;
    set-draggable: func(draggable: bool);
    content-editable: func() -> string;
    set-content-editable: func(content-editable: string);
    is-content-editable: func() -> bool;
    spellcheck: func() -> bool;
    set-spellcheck: func(spellcheck: bool);
    style: func() -> css-style-declaration;
    sheet: func() -> option<style-sheet>;
  }
  resource css-condition-rule {
    as-css-grouping-rule: func() -> css-grouping-rule;
    as-css-media-rule: func() -> option<css-media-rule>;
    condition-text: func() -> string;
    set-condition-text: func(condition-text: string);
    css-rules: func() -> css-rule-list;
    insert-rule: func(rule: string, index: option<u32>) -> u32;
    delete-rule: func(index: u32);
    as-css-supports-rule: func() -> option<css-supports-rule>;
  }
  resource position-error {
    PERMISSION-DENIED: static func() -> u16;
    POSITION-UNAVAILABLE: static func() -> u16;
    TIMEOUT: static func() -> u16;
    code: func() -> u16;
    message: func() -> string;
  }
  enum payment-complete {
    success,
    fail,
    unknown,
  }
  resource payment-response {
    to-json: func() -> object;
    request-id: func() -> string;
    method-name: func() -> string;
    details: func() -> object;
    shipping-address: func() -> option<payment-address>;
    shipping-option: func() -> string;
    payer-name: func() -> string;
    payer-email: func() -> string;
    payer-phone: func() -> string;
    complete: func(%result: option<payment-complete>);
  }
  resource web-kit-css-matrix {
    as-dom-matrix: func() -> dom-matrix;
    set-matrix-value: func(transform-list: string) -> web-kit-css-matrix;
    multiply: func(other: borrow<web-kit-css-matrix>) -> web-kit-css-matrix;
    inverse: func() -> web-kit-css-matrix;
    translate: func(tx: option<f64>, ty: option<f64>, tz: option<f64>) -> web-kit-css-matrix;
    scale: func(scale-x: option<f64>, scale-y: option<f64>, scale-z: option<f64>) -> web-kit-css-matrix;
    rotate: func(rot-x: option<f64>, rot-y: option<f64>, rot-z: option<f64>) -> web-kit-css-matrix;
    rotate-axis-angle: func(x: option<f64>, y: option<f64>, z: option<f64>, angle: option<f64>) -> web-kit-css-matrix;
    skew-x: func(sx: option<f64>) -> web-kit-css-matrix;
    skew-y: func(sy: option<f64>) -> web-kit-css-matrix;
    a: func() -> f64;
    set-a: func(a: f64);
    b: func() -> f64;
    set-b: func(b: f64);
    c: func() -> f64;
    set-c: func(c: f64);
    d: func() -> f64;
    set-d: func(d: f64);
    e: func() -> f64;
    set-e: func(e: f64);
    f: func() -> f64;
    set-f: func(f: f64);
    m11: func() -> f64;
    set-m11: func(m11: f64);
    m12: func() -> f64;
    set-m12: func(m12: f64);
    m13: func() -> f64;
    set-m13: func(m13: f64);
    m14: func() -> f64;
    set-m14: func(m14: f64);
    m21: func() -> f64;
    set-m21: func(m21: f64);
    m22: func() -> f64;
    set-m22: func(m22: f64);
    m23: func() -> f64;
    set-m23: func(m23: f64);
    m24: func() -> f64;
    set-m24: func(m24: f64);
    m31: func() -> f64;
    set-m31: func(m31: f64);
    m32: func() -> f64;
    set-m32: func(m32: f64);
    m33: func() -> f64;
    set-m33: func(m33: f64);
    m34: func() -> f64;
    set-m34: func(m34: f64);
    m41: func() -> f64;
    set-m41: func(m41: f64);
    m42: func() -> f64;
    set-m42: func(m42: f64);
    m43: func() -> f64;
    set-m43: func(m43: f64);
    m44: func() -> f64;
    set-m44: func(m44: f64);
    multiply-self: func(other: borrow<dom-matrix>) -> dom-matrix;
    pre-multiply-self: func(other: borrow<dom-matrix>) -> dom-matrix;
    translate-self: func(tx: f64, ty: f64, tz: option<f64>) -> dom-matrix;
    scale-self: func(scale: f64, origin-x: option<f64>, origin-y: option<f64>) -> dom-matrix;
    scale3d-self: func(scale: f64, origin-x: option<f64>, origin-y: option<f64>, origin-z: option<f64>) -> dom-matrix;
    scale-non-uniform-self: func(scale-x: f64, scale-y: option<f64>, scale-z: option<f64>, origin-x: option<f64>, origin-y: option<f64>, origin-z: option<f64>) -> dom-matrix;
    rotate-self: func(angle: f64, origin-x: option<f64>, origin-y: option<f64>) -> dom-matrix;
    rotate-from-vector-self: func(x: f64, y: f64) -> dom-matrix;
    rotate-axis-angle-self: func(x: f64, y: f64, z: f64, angle: f64) -> dom-matrix;
    skew-x-self: func(sx: f64) -> dom-matrix;
    skew-y-self: func(sy: f64) -> dom-matrix;
    invert-self: func() -> dom-matrix;
    // set-matrix-value: func(transform-list: string) -> dom-matrix;
  }
  resource css-import-rule {
    as-css-rule: func() -> css-rule;
    href: func() -> string;
    media: func() -> option<media-list>;
    style-sheet: func() -> option<css-style-sheet>;
    STYLE-RULE: static func() -> u16;
    CHARSET-RULE: static func() -> u16;
    IMPORT-RULE: static func() -> u16;
    MEDIA-RULE: static func() -> u16;
    FONT-FACE-RULE: static func() -> u16;
    PAGE-RULE: static func() -> u16;
    NAMESPACE-RULE: static func() -> u16;
    %type: func() -> u16;
    css-text: func() -> string;
    set-css-text: func(css-text: string);
    parent-rule: func() -> option<css-rule>;
    parent-style-sheet: func() -> option<css-style-sheet>;
  }
  resource html-frame-set-element {
    as-html-element: func() -> html-element;
    cols: func() -> string;
    set-cols: func(cols: string);
    rows: func() -> string;
    set-rows: func(rows: string);
    onafterprint-subscribe: func() -> pollable;
    onbeforeprint-subscribe: func() -> pollable;
    onbeforeunload: func() -> on-before-unload-event-handler;
    set-onbeforeunload: func(onbeforeunload: on-before-unload-event-handler);
    onhashchange-subscribe: func() -> pollable;
    onlanguagechange-subscribe: func() -> pollable;
    onmessage-subscribe: func() -> pollable;
    onmessageerror-subscribe: func() -> pollable;
    onoffline-subscribe: func() -> pollable;
    ononline-subscribe: func() -> pollable;
    onpagehide-subscribe: func() -> pollable;
    onpageshow-subscribe: func() -> pollable;
    onpopstate-subscribe: func() -> pollable;
    onstorage-subscribe: func() -> pollable;
    onunload-subscribe: func() -> pollable;
    title: func() -> string;
    set-title: func(title: string);
    scroll-height: func() -> s32;
    set-scroll-height: func(scroll-height: s32);
    scroll-top: func() -> s32;
    set-scroll-top: func(scroll-top: s32);
    lang: func() -> string;
    set-lang: func(lang: string);
    dir: func() -> string;
    set-dir: func(dir: string);
    dataset: func() -> dom-string-map;
    inner-text: func() -> string;
    set-inner-text: func(inner-text: string);
    hidden: func() -> bool;
    set-hidden: func(hidden: bool);
    inert: func() -> bool;
    set-inert: func(inert: bool);
    click: func();
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func(options: option<focus-options>);
    blur: func();
    access-key: func() -> string;
    set-access-key: func(access-key: string);
    access-key-label: func() -> string;
    draggable: func() -> bool;
    set-draggable: func(draggable: bool);
    content-editable: func() -> string;
    set-content-editable: func(content-editable: string);
    is-content-editable: func() -> bool;
    spellcheck: func() -> bool;
    set-spellcheck: func(spellcheck: bool);
    style: func() -> css-style-declaration;
  }
  enum resize-observer-box-options {
    border-box,
    content-box,
    device-pixel-content-box,
  }
  record resize-observer-options {
    box: option<resize-observer-box-options>,
  }
  resource resize-observer {
    constructor(callback: borrow<resize-observer-callback>);
    observe: func(target: borrow<element>, options: option<resize-observer-options>);
    unobserve: func(target: borrow<element>);
    disconnect: func();
  }
  resource resize-observer-entry {
    target: func() -> element;
    content-rect: func() -> dom-rect-read-only;
    border-box-size: func() -> list<resize-observer-size>;
    content-box-size: func() -> list<resize-observer-size>;
    device-pixel-content-box-size: func() -> list<resize-observer-size>;
  }
  resource resize-observer-size {
    inline-size: func() -> f64;
    block-size: func() -> f64;
  }
  resource svg-number-list {
    number-of-items: func() -> u32;
    clear: func();
    initialize: func(new-item: borrow<svg-number>) -> svg-number;
    get-item: func(index: u32) -> svg-number;
    insert-item-before: func(new-item: borrow<svg-number>, index: u32) -> svg-number;
    replace-item: func(new-item: borrow<svg-number>, index: u32) -> svg-number;
    remove-item: func(index: u32) -> svg-number;
    append-item: func(new-item: borrow<svg-number>) -> svg-number;
  }
  resource worker-global-scope {
    as-event-target: func() -> event-target;
    as-shared-worker-global-scope: func() -> option<shared-worker-global-scope>;
    as-service-worker-global-scope: func() -> option<service-worker-global-scope>;
    self: func() -> worker-global-scope;
    location: func() -> worker-location;
    navigator: func() -> worker-navigator;
    import-scripts: func(urls: list<string>);
    onerror: func() -> on-error-event-handler;
    set-onerror: func(onerror: on-error-event-handler);
    onoffline-subscribe: func() -> pollable;
    ononline-subscribe: func() -> pollable;
    as-dedicated-worker-global-scope: func() -> option<dedicated-worker-global-scope>;
    crypto: func() -> crypto;
    origin: func() -> string;
    btoa: func(btoa: string) -> string;
    atob: func(atob: string) -> string;
    set-timeout: func(params: worker-global-scope-set-timeout-params) -> s32;
    clear-timeout: func(handle: option<s32>);
    set-interval: func(params: worker-global-scope-set-interval-params) -> s32;
    clear-interval: func(handle: option<s32>);
    create-image-bitmap: func(params: worker-global-scope-create-image-bitmap-params) -> image-bitmap;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource css-grouping-rule {
    as-css-rule: func() -> css-rule;
    as-css-condition-rule: func() -> option<css-condition-rule>;
    css-rules: func() -> css-rule-list;
    insert-rule: func(rule: string, index: option<u32>) -> u32;
    delete-rule: func(index: u32);
    STYLE-RULE: static func() -> u16;
    CHARSET-RULE: static func() -> u16;
    IMPORT-RULE: static func() -> u16;
    MEDIA-RULE: static func() -> u16;
    FONT-FACE-RULE: static func() -> u16;
    PAGE-RULE: static func() -> u16;
    NAMESPACE-RULE: static func() -> u16;
    %type: func() -> u16;
    css-text: func() -> string;
    set-css-text: func(css-text: string);
    parent-rule: func() -> option<css-rule>;
    parent-style-sheet: func() -> option<css-style-sheet>;
  }
  resource svgfe-color-matrix-element {
    as-svg-element: func() -> svg-element;
    SVG-FECOLORMATRIX-TYPE-UNKNOWN: static func() -> u16;
    SVG-FECOLORMATRIX-TYPE-MATRIX: static func() -> u16;
    SVG-FECOLORMATRIX-TYPE-SATURATE: static func() -> u16;
    SVG-FECOLORMATRIX-TYPE-HUEROTATE: static func() -> u16;
    SVG-FECOLORMATRIX-TYPE-LUMINANCETOALPHA: static func() -> u16;
    in1: func() -> svg-animated-string;
    %type: func() -> svg-animated-enumeration;
    values: func() -> svg-animated-number-list;
    x: func() -> svg-animated-length;
    y: func() -> svg-animated-length;
    width: func() -> svg-animated-length;
    height: func() -> svg-animated-length;
    %result: func() -> svg-animated-string;
    id: func() -> string;
    set-id: func(id: string);
    class-name: func() -> svg-animated-string;
    dataset: func() -> dom-string-map;
    style: func() -> css-style-declaration;
    owner-svg-element: func() -> option<svgsvg-element>;
    viewport-element: func() -> option<svg-element>;
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func();
    blur: func();
  }
  resource performance-resource-timing {
    as-performance-entry: func() -> performance-entry;
    initiator-type: func() -> string;
    next-hop-protocol: func() -> string;
    worker-start: func() -> dom-high-res-time-stamp;
    redirect-start: func() -> dom-high-res-time-stamp;
    redirect-end: func() -> dom-high-res-time-stamp;
    fetch-start: func() -> dom-high-res-time-stamp;
    domain-lookup-start: func() -> dom-high-res-time-stamp;
    domain-lookup-end: func() -> dom-high-res-time-stamp;
    connect-start: func() -> dom-high-res-time-stamp;
    connect-end: func() -> dom-high-res-time-stamp;
    secure-connection-start: func() -> dom-high-res-time-stamp;
    request-start: func() -> dom-high-res-time-stamp;
    response-start: func() -> dom-high-res-time-stamp;
    response-end: func() -> dom-high-res-time-stamp;
    transfer-size: func() -> u64;
    encoded-body-size: func() -> u64;
    decoded-body-size: func() -> u64;
    server-timing: func() -> list<performance-server-timing>;
    to-json: func() -> object;
    as-performance-navigation-timing: func() -> option<performance-navigation-timing>;
    name: func() -> string;
    entry-type: func() -> string;
    start-time: func() -> dom-high-res-time-stamp;
    duration: func() -> dom-high-res-time-stamp;
    // to-json: func() -> object;
  }
  resource gamepad-button-event {
    as-gamepad-event: func() -> gamepad-event;
    button: func() -> u32;
    gamepad: func() -> option<gamepad>;
  }
  record gamepad-button-event-init {
    button: option<u32>,
    gamepad: option<option<borrow<gamepad>>>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource text-track-cue-list {
    length: func() -> u32;
    get-cue-by-id: func(id: string) -> option<vtt-cue>;
  }
  enum css-box-type {
    margin,
    border,
    padding,
    content,
  }
  record box-quad-options {
    box: option<css-box-type>,
    relative-to: option<geometry-node>,
  }
  record convert-coordinate-options {
    from-box: option<css-box-type>,
    to-box: option<css-box-type>,
  }
  variant document-or-element-or-text {
    document(borrow<document>),
    element(borrow<element>),
    text(borrow<text>),
  }
  type geometry-node = document-or-element-or-text;
  record file-system-flags {
    create: option<bool>,
    exclusive: option<bool>,
  }
  resource file-system {
    name: func() -> string;
    root: func() -> file-system-directory-entry;
  }
  variant bool-or-media-track-constraints {
    %bool(bool),
    media-track-constraints(media-track-constraints),
  }
  record media-stream-constraints {
    audio: option<bool-or-media-track-constraints>,
    video: option<bool-or-media-track-constraints>,
    picture: option<bool>,
    fake: option<bool>,
    peer-identity: option<string>,
  }
  record display-media-stream-constraints {
    video: option<bool-or-media-track-constraints>,
    audio: option<bool-or-media-track-constraints>,
  }
  resource media-stream {
    as-event-target: func() -> event-target;
    id: func() -> string;
    get-audio-tracks: func() -> list<audio-stream-track>;
    get-video-tracks: func() -> list<video-stream-track>;
    get-tracks: func() -> list<media-stream-track>;
    get-track-by-id: func(track-id: string) -> option<media-stream-track>;
    add-track: func(track: borrow<media-stream-track>);
    remove-track: func(track: borrow<media-stream-track>);
    clone: func() -> media-stream;
    active: func() -> bool;
    onaddtrack-subscribe: func() -> pollable;
    onremovetrack-subscribe: func() -> pollable;
    current-time: func() -> f64;
    count-underlying-streams: static func() -> s32;
    assign-id: func(id: string);
    as-local-media-stream: func() -> option<local-media-stream>;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
    as-canvas-capture-media-stream: func() -> option<canvas-capture-media-stream>;
  }
  resource svg-point-list {
    number-of-items: func() -> u32;
    clear: func();
    initialize: func(new-item: borrow<svg-point>) -> svg-point;
    get-item: func(index: u32) -> svg-point;
    insert-item-before: func(new-item: borrow<svg-point>, index: u32) -> svg-point;
    replace-item: func(new-item: borrow<svg-point>, index: u32) -> svg-point;
    remove-item: func(index: u32) -> svg-point;
    append-item: func(new-item: borrow<svg-point>) -> svg-point;
  }
  enum rtc-data-channel-state {
    connecting,
    open,
    closing,
    closed,
  }
  enum rtc-data-channel-type {
    arraybuffer,
    blob,
  }
  resource rtc-data-channel {
    as-event-target: func() -> event-target;
    label: func() -> string;
    id: func() -> u16;
    reliable: func() -> bool;
    max-packet-life-time: func() -> u16;
    max-retransmits: func() -> u16;
    ready-state: func() -> rtc-data-channel-state;
    buffered-amount: func() -> u32;
    buffered-amount-low-threshold: func() -> u32;
    set-buffered-amount-low-threshold: func(buffered-amount-low-threshold: u32);
    onopen-subscribe: func() -> pollable;
    onerror-subscribe: func() -> pollable;
    onclose-subscribe: func() -> pollable;
    close: func();
    onmessage-subscribe: func() -> pollable;
    onbufferedamountlow-subscribe: func() -> pollable;
    binary-type: func() -> rtc-data-channel-type;
    set-binary-type: func(binary-type: rtc-data-channel-type);
    send: func(params: rtc-data-channel-send-params);
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  variant rtc-data-channel-send-params {
    data(string),
    // data(borrow<blob>),
    // data(array-buffer),
    // data(array-buffer-view),
  }
  resource gamepad-pose {
    has-orientation: func() -> bool;
    has-position: func() -> bool;
    position: func() -> float32-array;
    linear-velocity: func() -> float32-array;
    linear-acceleration: func() -> float32-array;
    orientation: func() -> float32-array;
    angular-velocity: func() -> float32-array;
    angular-acceleration: func() -> float32-array;
  }
  resource paint-request-list {
    length: func() -> u32;
    item: func(index: u32) -> option<paint-request>;
  }
  resource dom-token-list {
    length: func() -> u32;
    item: func(index: u32) -> string;
    contains: func(token: string) -> bool;
    add: func(tokens: list<string>);
    remove: func(tokens: list<string>);
    replace: func(token: string, new-token: string) -> bool;
    toggle: func(token: string, force: option<bool>) -> bool;
    supports: func(token: string) -> bool;
    value: func() -> string;
    set-value: func(value: string);
  }
  record display-name-options {
    style: option<string>,
    keys: option<list<string>>,
  }
  record display-name-result {
    locale: option<string>,
    style: option<string>,
    values: option<record-string>,
  }
  record locale-info {
    locale: option<string>,
    direction: option<string>,
  }
  resource intl-utils {
    get-display-names: func(locales: list<string>, options: option<display-name-options>) -> display-name-result;
    get-locale-info: func(locales: list<string>) -> locale-info;
  }
  resource intersection-observer-entry {
    time: func() -> dom-high-res-time-stamp;
    root-bounds: func() -> option<dom-rect-read-only>;
    bounding-client-rect: func() -> dom-rect-read-only;
    intersection-rect: func() -> dom-rect-read-only;
    is-intersecting: func() -> bool;
    intersection-ratio: func() -> f64;
    target: func() -> element;
  }
  resource intersection-observer {
    root: func() -> option<element>;
    root-margin: func() -> string;
    thresholds: func() -> list<f64>;
    observe: func(target: borrow<element>);
    unobserve: func(target: borrow<element>);
    disconnect: func();
    take-records: func() -> list<intersection-observer-entry>;
    intersection-callback: func() -> intersection-callback;
  }
  record intersection-observer-entry-init {
    time: dom-high-res-time-stamp,
    root-bounds: dom-rect-init,
    bounding-client-rect: dom-rect-init,
    intersection-rect: dom-rect-init,
    target: borrow<element>,
  }
  variant f64-or-list-f64 {
    %f64(f64),
    list-f64(list<f64>),
  }
  record intersection-observer-init {
    root: option<option<borrow<element>>>,
    root-margin: option<string>,
    threshold: option<f64-or-list-f64>,
  }
  enum midi-port-type {
    input,
    output,
  }
  enum midi-port-device-state {
    disconnected,
    connected,
  }
  enum midi-port-connection-state {
    open,
    closed,
    pending,
  }
  resource midi-port {
    as-event-target: func() -> event-target;
    as-midi-input: func() -> option<midi-input>;
    id: func() -> string;
    manufacturer: func() -> string;
    name: func() -> string;
    version: func() -> string;
    %type: func() -> midi-port-type;
    state: func() -> midi-port-device-state;
    connection: func() -> midi-port-connection-state;
    onstatechange-subscribe: func() -> pollable;
    open: func() -> midi-port;
    close: func() -> midi-port;
    as-midi-output: func() -> option<midi-output>;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource svgfe-func-r-element {
    as-svg-component-transfer-function-element: func() -> svg-component-transfer-function-element;
    SVG-FECOMPONENTTRANSFER-TYPE-UNKNOWN: static func() -> u16;
    SVG-FECOMPONENTTRANSFER-TYPE-IDENTITY: static func() -> u16;
    SVG-FECOMPONENTTRANSFER-TYPE-TABLE: static func() -> u16;
    SVG-FECOMPONENTTRANSFER-TYPE-DISCRETE: static func() -> u16;
    SVG-FECOMPONENTTRANSFER-TYPE-LINEAR: static func() -> u16;
    SVG-FECOMPONENTTRANSFER-TYPE-GAMMA: static func() -> u16;
    %type: func() -> svg-animated-enumeration;
    table-values: func() -> svg-animated-number-list;
    slope: func() -> svg-animated-number;
    intercept: func() -> svg-animated-number;
    amplitude: func() -> svg-animated-number;
    exponent: func() -> svg-animated-number;
    offset: func() -> svg-animated-number;
  }
  resource svg-animate-motion-element {
    as-svg-animation-element: func() -> svg-animation-element;
  }
  resource gamepad-service-test {
    no-mapping: func() -> gamepad-mapping-type;
    standard-mapping: func() -> gamepad-mapping-type;
    no-hand: func() -> gamepad-hand;
    left-hand: func() -> gamepad-hand;
    right-hand: func() -> gamepad-hand;
    add-gamepad: func(id: string, mapping: gamepad-mapping-type, hand: gamepad-hand, num-buttons: u32, num-axes: u32, num-haptics: u32) -> u32;
    remove-gamepad: func(index: u32);
    new-button-event: func(index: u32, button: u32, pressed: bool, touched: bool);
    new-button-value-event: func(index: u32, button: u32, pressed: bool, touched: bool, value: f64);
    new-axis-move-event: func(index: u32, axis: u32, value: f64);
    new-pose-move: func(index: u32, orient: float32-array, pos: float32-array, ang-velocity: float32-array, ang-acceleration: float32-array, lin-velocity: float32-array, lin-acceleration: float32-array);
  }
  record offline-audio-completion-event-init {
    rendered-buffer: borrow<audio-buffer>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource offline-audio-completion-event {
    as-event: func() -> event;
    rendered-buffer: func() -> audio-buffer;
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
  }
  resource key-event {
    DOM-VK-CANCEL: static func() -> u32;
    DOM-VK-HELP: static func() -> u32;
    DOM-VK-BACK-SPACE: static func() -> u32;
    DOM-VK-TAB: static func() -> u32;
    DOM-VK-CLEAR: static func() -> u32;
    DOM-VK-RETURN: static func() -> u32;
    DOM-VK-SHIFT: static func() -> u32;
    DOM-VK-CONTROL: static func() -> u32;
    DOM-VK-ALT: static func() -> u32;
    DOM-VK-PAUSE: static func() -> u32;
    DOM-VK-CAPS-LOCK: static func() -> u32;
    DOM-VK-KANA: static func() -> u32;
    DOM-VK-HANGUL: static func() -> u32;
    DOM-VK-EISU: static func() -> u32;
    DOM-VK-JUNJA: static func() -> u32;
    DOM-VK-FINAL: static func() -> u32;
    DOM-VK-HANJA: static func() -> u32;
    DOM-VK-KANJI: static func() -> u32;
    DOM-VK-ESCAPE: static func() -> u32;
    DOM-VK-CONVERT: static func() -> u32;
    DOM-VK-NONCONVERT: static func() -> u32;
    DOM-VK-ACCEPT: static func() -> u32;
    DOM-VK-MODECHANGE: static func() -> u32;
    DOM-VK-SPACE: static func() -> u32;
    DOM-VK-PAGE-UP: static func() -> u32;
    DOM-VK-PAGE-DOWN: static func() -> u32;
    DOM-VK-END: static func() -> u32;
    DOM-VK-HOME: static func() -> u32;
    DOM-VK-LEFT: static func() -> u32;
    DOM-VK-UP: static func() -> u32;
    DOM-VK-RIGHT: static func() -> u32;
    DOM-VK-DOWN: static func() -> u32;
    DOM-VK-SELECT: static func() -> u32;
    DOM-VK-PRINT: static func() -> u32;
    DOM-VK-EXECUTE: static func() -> u32;
    DOM-VK-PRINTSCREEN: static func() -> u32;
    DOM-VK-INSERT: static func() -> u32;
    DOM-VK-DELETE: static func() -> u32;
    DOM-VK0: static func() -> u32;
    DOM-VK1: static func() -> u32;
    DOM-VK2: static func() -> u32;
    DOM-VK3: static func() -> u32;
    DOM-VK4: static func() -> u32;
    DOM-VK5: static func() -> u32;
    DOM-VK6: static func() -> u32;
    DOM-VK7: static func() -> u32;
    DOM-VK8: static func() -> u32;
    DOM-VK9: static func() -> u32;
    DOM-VK-COLON: static func() -> u32;
    DOM-VK-SEMICOLON: static func() -> u32;
    DOM-VK-LESS-THAN: static func() -> u32;
    DOM-VK-EQUALS: static func() -> u32;
    DOM-VK-GREATER-THAN: static func() -> u32;
    DOM-VK-QUESTION-MARK: static func() -> u32;
    DOM-VK-AT: static func() -> u32;
    DOM-VK-A: static func() -> u32;
    DOM-VK-B: static func() -> u32;
    DOM-VK-C: static func() -> u32;
    DOM-VK-D: static func() -> u32;
    DOM-VK-E: static func() -> u32;
    DOM-VK-F: static func() -> u32;
    DOM-VK-G: static func() -> u32;
    DOM-VK-H: static func() -> u32;
    DOM-VK-I: static func() -> u32;
    DOM-VK-J: static func() -> u32;
    DOM-VK-K: static func() -> u32;
    DOM-VK-L: static func() -> u32;
    DOM-VK-M: static func() -> u32;
    DOM-VK-N: static func() -> u32;
    DOM-VK-O: static func() -> u32;
    DOM-VK-P: static func() -> u32;
    DOM-VK-Q: static func() -> u32;
    DOM-VK-R: static func() -> u32;
    DOM-VK-S: static func() -> u32;
    DOM-VK-T: static func() -> u32;
    DOM-VK-U: static func() -> u32;
    DOM-VK-V: static func() -> u32;
    DOM-VK-W: static func() -> u32;
    DOM-VK-X: static func() -> u32;
    DOM-VK-Y: static func() -> u32;
    DOM-VK-Z: static func() -> u32;
    DOM-VK-WIN: static func() -> u32;
    DOM-VK-CONTEXT-MENU: static func() -> u32;
    DOM-VK-SLEEP: static func() -> u32;
    DOM-VK-NUMPAD0: static func() -> u32;
    DOM-VK-NUMPAD1: static func() -> u32;
    DOM-VK-NUMPAD2: static func() -> u32;
    DOM-VK-NUMPAD3: static func() -> u32;
    DOM-VK-NUMPAD4: static func() -> u32;
    DOM-VK-NUMPAD5: static func() -> u32;
    DOM-VK-NUMPAD6: static func() -> u32;
    DOM-VK-NUMPAD7: static func() -> u32;
    DOM-VK-NUMPAD8: static func() -> u32;
    DOM-VK-NUMPAD9: static func() -> u32;
    DOM-VK-MULTIPLY: static func() -> u32;
    DOM-VK-ADD: static func() -> u32;
    DOM-VK-SEPARATOR: static func() -> u32;
    DOM-VK-SUBTRACT: static func() -> u32;
    DOM-VK-DECIMAL: static func() -> u32;
    DOM-VK-DIVIDE: static func() -> u32;
    DOM-VK-F1: static func() -> u32;
    DOM-VK-F2: static func() -> u32;
    DOM-VK-F3: static func() -> u32;
    DOM-VK-F4: static func() -> u32;
    DOM-VK-F5: static func() -> u32;
    DOM-VK-F6: static func() -> u32;
    DOM-VK-F7: static func() -> u32;
    DOM-VK-F8: static func() -> u32;
    DOM-VK-F9: static func() -> u32;
    DOM-VK-F10: static func() -> u32;
    DOM-VK-F11: static func() -> u32;
    DOM-VK-F12: static func() -> u32;
    DOM-VK-F13: static func() -> u32;
    DOM-VK-F14: static func() -> u32;
    DOM-VK-F15: static func() -> u32;
    DOM-VK-F16: static func() -> u32;
    DOM-VK-F17: static func() -> u32;
    DOM-VK-F18: static func() -> u32;
    DOM-VK-F19: static func() -> u32;
    DOM-VK-F20: static func() -> u32;
    DOM-VK-F21: static func() -> u32;
    DOM-VK-F22: static func() -> u32;
    DOM-VK-F23: static func() -> u32;
    DOM-VK-F24: static func() -> u32;
    DOM-VK-NUM-LOCK: static func() -> u32;
    DOM-VK-SCROLL-LOCK: static func() -> u32;
    DOM-VK-WIN-OEM-FJ-JISHO: static func() -> u32;
    DOM-VK-WIN-OEM-FJ-MASSHOU: static func() -> u32;
    DOM-VK-WIN-OEM-FJ-TOUROKU: static func() -> u32;
    DOM-VK-WIN-OEM-FJ-LOYA: static func() -> u32;
    DOM-VK-WIN-OEM-FJ-ROYA: static func() -> u32;
    DOM-VK-CIRCUMFLEX: static func() -> u32;
    DOM-VK-EXCLAMATION: static func() -> u32;
    DOM-VK-DOUBLE-QUOTE: static func() -> u32;
    DOM-VK-HASH: static func() -> u32;
    DOM-VK-DOLLAR: static func() -> u32;
    DOM-VK-PERCENT: static func() -> u32;
    DOM-VK-AMPERSAND: static func() -> u32;
    DOM-VK-UNDERSCORE: static func() -> u32;
    DOM-VK-OPEN-PAREN: static func() -> u32;
    DOM-VK-CLOSE-PAREN: static func() -> u32;
    DOM-VK-ASTERISK: static func() -> u32;
    DOM-VK-PLUS: static func() -> u32;
    DOM-VK-PIPE: static func() -> u32;
    DOM-VK-HYPHEN-MINUS: static func() -> u32;
    DOM-VK-OPEN-CURLY-BRACKET: static func() -> u32;
    DOM-VK-CLOSE-CURLY-BRACKET: static func() -> u32;
    DOM-VK-TILDE: static func() -> u32;
    DOM-VK-VOLUME-MUTE: static func() -> u32;
    DOM-VK-VOLUME-DOWN: static func() -> u32;
    DOM-VK-VOLUME-UP: static func() -> u32;
    DOM-VK-COMMA: static func() -> u32;
    DOM-VK-PERIOD: static func() -> u32;
    DOM-VK-SLASH: static func() -> u32;
    DOM-VK-BACK-QUOTE: static func() -> u32;
    DOM-VK-OPEN-BRACKET: static func() -> u32;
    DOM-VK-BACK-SLASH: static func() -> u32;
    DOM-VK-CLOSE-BRACKET: static func() -> u32;
    DOM-VK-QUOTE: static func() -> u32;
    DOM-VK-META: static func() -> u32;
    DOM-VK-ALTGR: static func() -> u32;
    DOM-VK-WIN-ICO-HELP: static func() -> u32;
    DOM-VK-WIN-ICO00: static func() -> u32;
    DOM-VK-PROCESSKEY: static func() -> u32;
    DOM-VK-WIN-ICO-CLEAR: static func() -> u32;
    DOM-VK-WIN-OEM-RESET: static func() -> u32;
    DOM-VK-WIN-OEM-JUMP: static func() -> u32;
    DOM-VK-WIN-OEM-PA1: static func() -> u32;
    DOM-VK-WIN-OEM-PA2: static func() -> u32;
    DOM-VK-WIN-OEM-PA3: static func() -> u32;
    DOM-VK-WIN-OEM-WSCTRL: static func() -> u32;
    DOM-VK-WIN-OEM-CUSEL: static func() -> u32;
    DOM-VK-WIN-OEM-ATTN: static func() -> u32;
    DOM-VK-WIN-OEM-FINISH: static func() -> u32;
    DOM-VK-WIN-OEM-COPY: static func() -> u32;
    DOM-VK-WIN-OEM-AUTO: static func() -> u32;
    DOM-VK-WIN-OEM-ENLW: static func() -> u32;
    DOM-VK-WIN-OEM-BACKTAB: static func() -> u32;
    DOM-VK-ATTN: static func() -> u32;
    DOM-VK-CRSEL: static func() -> u32;
    DOM-VK-EXSEL: static func() -> u32;
    DOM-VK-EREOF: static func() -> u32;
    DOM-VK-PLAY: static func() -> u32;
    DOM-VK-ZOOM: static func() -> u32;
    DOM-VK-PA1: static func() -> u32;
    DOM-VK-WIN-OEM-CLEAR: static func() -> u32;
    init-key-event: func(%type: string, can-bubble: option<bool>, cancelable: option<bool>, view: option<option<borrow<window>>>, ctrl-key: option<bool>, alt-key: option<bool>, shift-key: option<bool>, meta-key: option<bool>, key-code: option<u32>, char-code: option<u32>);
  }
  resource audio-param-map {
  }
  resource svgfe-blend-element {
    as-svg-element: func() -> svg-element;
    SVG-FEBLEND-MODE-UNKNOWN: static func() -> u16;
    SVG-FEBLEND-MODE-NORMAL: static func() -> u16;
    SVG-FEBLEND-MODE-MULTIPLY: static func() -> u16;
    SVG-FEBLEND-MODE-SCREEN: static func() -> u16;
    SVG-FEBLEND-MODE-DARKEN: static func() -> u16;
    SVG-FEBLEND-MODE-LIGHTEN: static func() -> u16;
    SVG-FEBLEND-MODE-OVERLAY: static func() -> u16;
    SVG-FEBLEND-MODE-COLOR-DODGE: static func() -> u16;
    SVG-FEBLEND-MODE-COLOR-BURN: static func() -> u16;
    SVG-FEBLEND-MODE-HARD-LIGHT: static func() -> u16;
    SVG-FEBLEND-MODE-SOFT-LIGHT: static func() -> u16;
    SVG-FEBLEND-MODE-DIFFERENCE: static func() -> u16;
    SVG-FEBLEND-MODE-EXCLUSION: static func() -> u16;
    SVG-FEBLEND-MODE-HUE: static func() -> u16;
    SVG-FEBLEND-MODE-SATURATION: static func() -> u16;
    SVG-FEBLEND-MODE-COLOR: static func() -> u16;
    SVG-FEBLEND-MODE-LUMINOSITY: static func() -> u16;
    in1: func() -> svg-animated-string;
    in2: func() -> svg-animated-string;
    mode: func() -> svg-animated-enumeration;
    x: func() -> svg-animated-length;
    y: func() -> svg-animated-length;
    width: func() -> svg-animated-length;
    height: func() -> svg-animated-length;
    %result: func() -> svg-animated-string;
    id: func() -> string;
    set-id: func(id: string);
    class-name: func() -> svg-animated-string;
    dataset: func() -> dom-string-map;
    style: func() -> css-style-declaration;
    owner-svg-element: func() -> option<svgsvg-element>;
    viewport-element: func() -> option<svg-element>;
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func();
    blur: func();
  }
  resource time-event {
    as-event: func() -> event;
    detail: func() -> s32;
    view: func() -> option<window-proxy>;
    init-time-event: func(a-type: string, a-view: option<option<borrow<window>>>, a-detail: option<s32>);
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
  }
  resource midi-access {
    as-event-target: func() -> event-target;
    inputs: func() -> midi-input-map;
    outputs: func() -> midi-output-map;
    onstatechange-subscribe: func() -> pollable;
    sysex-enabled: func() -> bool;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  record socket-element {
    host: option<string>,
    port: option<u32>,
    active: option<bool>,
    tcp: option<bool>,
    sent: option<f64>,
    received: option<f64>,
  }
  record sockets-dict {
    sockets: option<list<socket-element>>,
    sent: option<f64>,
    received: option<f64>,
  }
  record http-conn-info {
    rtt: option<u32>,
    ttl: option<u32>,
    protocol-version: option<string>,
  }
  record half-open-info-dict {
    speculative: option<bool>,
  }
  record http-connection-element {
    host: option<string>,
    port: option<u32>,
    spdy: option<bool>,
    ssl: option<bool>,
    active: option<list<http-conn-info>>,
    idle: option<list<http-conn-info>>,
    half-opens: option<list<half-open-info-dict>>,
  }
  record http-conn-dict {
    connections: option<list<http-connection-element>>,
  }
  record web-socket-element {
    hostport: option<string>,
    msgsent: option<u32>,
    msgreceived: option<u32>,
    sentsize: option<f64>,
    receivedsize: option<f64>,
    encrypted: option<bool>,
  }
  record web-socket-dict {
    websockets: option<list<web-socket-element>>,
  }
  record dns-cache-entry {
    hostname: option<string>,
    hostaddr: option<list<string>>,
    family: option<string>,
    expiration: option<f64>,
    trr: option<bool>,
  }
  record dns-cache-dict {
    entries: option<list<dns-cache-entry>>,
  }
  record dns-lookup-dict {
    address: option<list<string>>,
    error: option<string>,
    answer: option<bool>,
  }
  record conn-status-dict {
    status: option<string>,
  }
  record rcwn-perf-stats {
    avg-short: option<u32>,
    avg-long: option<u32>,
    stddev-long: option<u32>,
  }
  record rcwn-status {
    total-network-requests: option<u32>,
    rcwn-cache-won-count: option<u32>,
    rcwn-net-won-count: option<u32>,
    cache-slow-count: option<u32>,
    cache-not-slow-count: option<u32>,
    perf-stats: option<list<rcwn-perf-stats>>,
  }
  resource focus-event {
    as-ui-event: func() -> ui-event;
    related-target: func() -> option<event-target>;
    view: func() -> option<window-proxy>;
    detail: func() -> s32;
    init-ui-event: func(a-type: string, a-can-bubble: option<bool>, a-cancelable: option<bool>, a-view: option<option<borrow<window>>>, a-detail: option<s32>);
  }
  record focus-event-init {
    related-target: option<option<borrow<event-target>>>,
    view: option<option<borrow<window>>>,
    detail: option<s32>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  enum decoder-doctor-notification-type {
    cannot-play,
    platform-decoder-not-found,
    can-play-but-some-missing-decoders,
    cannot-initialize-pulseaudio,
    unsupported-libavcodec,
    decode-error,
    decode-warning,
  }
  record decoder-doctor-notification {
    %type: decoder-doctor-notification-type,
    is-solved: bool,
    decoder-doctor-report-id: string,
    formats: option<string>,
    decode-issue: option<string>,
    doc-url: option<string>,
    resource-url: option<string>,
  }
  resource html-collection {
    as-html-options-collection: func() -> option<html-options-collection>;
    length: func() -> u32;
    item: func(index: u32) -> option<element>;
    named-item: func(name: string) -> option<element>;
    as-html-form-controls-collection: func() -> option<html-form-controls-collection>;
  }
  enum text-track-kind {
    subtitles,
    captions,
    descriptions,
    chapters,
    metadata,
  }
  enum text-track-mode {
    disabled,
    hidden,
    showing,
  }
  resource text-track {
    as-event-target: func() -> event-target;
    kind: func() -> text-track-kind;
    label: func() -> string;
    language: func() -> string;
    id: func() -> string;
    in-band-metadata-track-dispatch-type: func() -> string;
    mode: func() -> text-track-mode;
    set-mode: func(mode: text-track-mode);
    cues: func() -> option<text-track-cue-list>;
    active-cues: func() -> option<text-track-cue-list>;
    add-cue: func(cue: borrow<vtt-cue>);
    remove-cue: func(cue: borrow<vtt-cue>);
    oncuechange-subscribe: func() -> pollable;
    source-buffer: func() -> option<source-buffer>;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource html-button-element {
    as-html-element: func() -> html-element;
    autofocus: func() -> bool;
    set-autofocus: func(autofocus: bool);
    disabled: func() -> bool;
    set-disabled: func(disabled: bool);
    form: func() -> option<html-form-element>;
    form-action: func() -> string;
    set-form-action: func(form-action: string);
    form-enctype: func() -> string;
    set-form-enctype: func(form-enctype: string);
    form-method: func() -> string;
    set-form-method: func(form-method: string);
    form-no-validate: func() -> bool;
    set-form-no-validate: func(form-no-validate: bool);
    form-target: func() -> string;
    set-form-target: func(form-target: string);
    name: func() -> string;
    set-name: func(name: string);
    %type: func() -> string;
    set-type: func(%type: string);
    value: func() -> string;
    set-value: func(value: string);
    will-validate: func() -> bool;
    validity: func() -> validity-state;
    validation-message: func() -> string;
    check-validity: func() -> bool;
    report-validity: func() -> bool;
    set-custom-validity: func(error: string);
    labels: func() -> node-list;
    title: func() -> string;
    set-title: func(title: string);
    scroll-height: func() -> s32;
    set-scroll-height: func(scroll-height: s32);
    scroll-top: func() -> s32;
    set-scroll-top: func(scroll-top: s32);
    lang: func() -> string;
    set-lang: func(lang: string);
    dir: func() -> string;
    set-dir: func(dir: string);
    dataset: func() -> dom-string-map;
    inner-text: func() -> string;
    set-inner-text: func(inner-text: string);
    hidden: func() -> bool;
    set-hidden: func(hidden: bool);
    inert: func() -> bool;
    set-inert: func(inert: bool);
    click: func();
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func(options: option<focus-options>);
    blur: func();
    access-key: func() -> string;
    set-access-key: func(access-key: string);
    access-key-label: func() -> string;
    draggable: func() -> bool;
    set-draggable: func(draggable: bool);
    content-editable: func() -> string;
    set-content-editable: func(content-editable: string);
    is-content-editable: func() -> bool;
    spellcheck: func() -> bool;
    set-spellcheck: func(spellcheck: bool);
    style: func() -> css-style-declaration;
  }
  record midi-options {
    sysex: option<bool>,
    software: option<bool>,
  }
  type event-handler = option<event-handler-non-null>;
  type on-before-unload-event-handler = option<on-before-unload-event-handler-non-null>;
  type on-error-event-handler = option<on-error-event-handler-non-null>;
  enum media-key-system-status {
    available,
    api-disabled,
    cdm-disabled,
    cdm-not-supported,
    cdm-not-installed,
    cdm-created,
  }
  record request-media-key-system-access-notification {
    key-system: string,
    status: media-key-system-status,
  }
  record tree-cell-info {
    row: option<s32>,
    col: option<option<borrow<tree-column>>>,
    child-elt: option<string>,
  }
  resource tree-box-object {
    as-box-object: func() -> box-object;
    columns: func() -> option<tree-columns>;
    focused: func() -> bool;
    set-focused: func(focused: bool);
    tree-body: func() -> option<element>;
    row-height: func() -> s32;
    row-width: func() -> s32;
    horizontal-position: func() -> s32;
    selection-region: func() -> ns-i-scriptable-region;
    get-first-visible-row: func() -> s32;
    get-last-visible-row: func() -> s32;
    get-page-length: func() -> s32;
    ensure-row-is-visible: func(index: s32);
    ensure-cell-is-visible: func(row: s32, col: option<borrow<tree-column>>);
    scroll-to-row: func(index: s32);
    scroll-by-lines: func(num-lines: s32);
    scroll-by-pages: func(num-pages: s32);
    invalidate: func();
    invalidate-column: func(col: option<borrow<tree-column>>);
    invalidate-row: func(index: s32);
    invalidate-cell: func(row: s32, col: option<borrow<tree-column>>);
    invalidate-range: func(start-index: s32, end-index: s32);
    get-row-at: func(x: s32, y: s32) -> s32;
    is-cell-cropped: func(row: s32, col: option<borrow<tree-column>>) -> bool;
    row-count-changed: func(index: s32, count: s32);
    begin-update-batch: func();
    end-update-batch: func();
    clear-style-and-image-caches: func();
    remove-image-cache-entry: func(row: s32, col: borrow<tree-column>);
  }
  resource svgfe-offset-element {
    as-svg-element: func() -> svg-element;
    in1: func() -> svg-animated-string;
    dx: func() -> svg-animated-number;
    dy: func() -> svg-animated-number;
    x: func() -> svg-animated-length;
    y: func() -> svg-animated-length;
    width: func() -> svg-animated-length;
    height: func() -> svg-animated-length;
    %result: func() -> svg-animated-string;
    id: func() -> string;
    set-id: func(id: string);
    class-name: func() -> svg-animated-string;
    dataset: func() -> dom-string-map;
    style: func() -> css-style-declaration;
    owner-svg-element: func() -> option<svgsvg-element>;
    viewport-element: func() -> option<svg-element>;
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func();
    blur: func();
  }
  resource animation-event {
    as-event: func() -> event;
    animation-name: func() -> string;
    elapsed-time: func() -> f32;
    pseudo-element: func() -> string;
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
  }
  record animation-event-init {
    animation-name: option<string>,
    elapsed-time: option<f32>,
    pseudo-element: option<string>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource close-event {
    as-event: func() -> event;
    was-clean: func() -> bool;
    code: func() -> u16;
    reason: func() -> string;
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
  }
  record close-event-init {
    was-clean: option<bool>,
    code: option<u16>,
    reason: option<string>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource style-sheet-change-event {
    as-event: func() -> event;
    stylesheet: func() -> option<css-style-sheet>;
    document-sheet: func() -> bool;
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
  }
  record style-sheet-change-event-init {
    stylesheet: option<option<borrow<css-style-sheet>>>,
    document-sheet: option<bool>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  enum idb-cursor-direction {
    next,
    nextunique,
    prev,
    prevunique,
  }
  resource idb-cursor {
    // source: func() -> idb-index-or-idb-object-store;
    direction: func() -> idb-cursor-direction;
    key: func() -> any;
    primary-key: func() -> any;
    request: func() -> idb-request;
    update: func(value: any) -> idb-request;
    advance: func(count: u32);
    continue: func(key: any);
    continue-primary-key: func(key: any, primary-key: any);
    delete: func() -> idb-request;
    as-idb-cursor-with-value: func() -> option<idb-cursor-with-value>;
  }
  variant idb-index-or-idb-object-store {
    idb-index(borrow<idb-index>),
    idb-object-store(borrow<idb-object-store>),
  }
  resource idb-cursor-with-value {
    as-idb-cursor: func() -> idb-cursor;
    value: func() -> any;
  }
  resource data-transfer {
    drop-effect: func() -> string;
    set-drop-effect: func(drop-effect: string);
    effect-allowed: func() -> string;
    set-effect-allowed: func(effect-allowed: string);
    items: func() -> data-transfer-item-list;
    set-drag-image: func(image: borrow<element>, x: s32, y: s32);
    types: func() -> list<string>;
    get-data: func(format: string) -> string;
    set-data: func(format: string, data: string);
    clear-data: func(format: option<string>);
    files: func() -> option<file-list>;
    // get-files-and-directories: func() -> list<directory-or-file>;
    get-files: func(recursive-flag: option<bool>) -> list<file>;
  }
  variant directory-or-file {
    directory(borrow<directory>),
    file(borrow<file>),
  }
  resource presentation-request {
    as-event-target: func() -> event-target;
    start: func() -> presentation-connection;
    reconnect: func(presentation-id: string) -> presentation-connection;
    get-availability: func() -> presentation-availability;
    onconnectionavailable-subscribe: func() -> pollable;
    start-with-device: func(device-id: string) -> presentation-connection;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource html-form-controls-collection {
    as-html-collection: func() -> html-collection;
    // named-item: func(name: string) -> element-or-radio-node-list;
  }
  variant element-or-radio-node-list {
    element(borrow<element>),
    radio-node-list(borrow<radio-node-list>),
  }
  resource html-data-element {
    as-html-element: func() -> html-element;
    value: func() -> string;
    set-value: func(value: string);
    title: func() -> string;
    set-title: func(title: string);
    scroll-height: func() -> s32;
    set-scroll-height: func(scroll-height: s32);
    scroll-top: func() -> s32;
    set-scroll-top: func(scroll-top: s32);
    lang: func() -> string;
    set-lang: func(lang: string);
    dir: func() -> string;
    set-dir: func(dir: string);
    dataset: func() -> dom-string-map;
    inner-text: func() -> string;
    set-inner-text: func(inner-text: string);
    hidden: func() -> bool;
    set-hidden: func(hidden: bool);
    inert: func() -> bool;
    set-inert: func(inert: bool);
    click: func();
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func(options: option<focus-options>);
    blur: func();
    access-key: func() -> string;
    set-access-key: func(access-key: string);
    access-key-label: func() -> string;
    draggable: func() -> bool;
    set-draggable: func(draggable: bool);
    content-editable: func() -> string;
    set-content-editable: func(content-editable: string);
    is-content-editable: func() -> bool;
    spellcheck: func() -> bool;
    set-spellcheck: func(spellcheck: bool);
    style: func() -> css-style-declaration;
  }
  resource svg-rect {
    x: func() -> f32;
    set-x: func(x: f32);
    y: func() -> f32;
    set-y: func(y: f32);
    width: func() -> f32;
    set-width: func(width: f32);
    height: func() -> f32;
    set-height: func(height: f32);
  }
  resource html-frame-element {
    as-html-element: func() -> html-element;
    name: func() -> string;
    set-name: func(name: string);
    scrolling: func() -> string;
    set-scrolling: func(scrolling: string);
    src: func() -> string;
    set-src: func(src: string);
    frame-border: func() -> string;
    set-frame-border: func(frame-border: string);
    long-desc: func() -> string;
    set-long-desc: func(long-desc: string);
    no-resize: func() -> bool;
    set-no-resize: func(no-resize: bool);
    content-document: func() -> option<document>;
    content-window: func() -> option<window-proxy>;
    margin-height: func() -> string;
    set-margin-height: func(margin-height: string);
    margin-width: func() -> string;
    set-margin-width: func(margin-width: string);
    title: func() -> string;
    set-title: func(title: string);
    scroll-height: func() -> s32;
    set-scroll-height: func(scroll-height: s32);
    scroll-top: func() -> s32;
    set-scroll-top: func(scroll-top: s32);
    lang: func() -> string;
    set-lang: func(lang: string);
    dir: func() -> string;
    set-dir: func(dir: string);
    dataset: func() -> dom-string-map;
    inner-text: func() -> string;
    set-inner-text: func(inner-text: string);
    hidden: func() -> bool;
    set-hidden: func(hidden: bool);
    inert: func() -> bool;
    set-inert: func(inert: bool);
    click: func();
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func(options: option<focus-options>);
    blur: func();
    access-key: func() -> string;
    set-access-key: func(access-key: string);
    access-key-label: func() -> string;
    draggable: func() -> bool;
    set-draggable: func(draggable: bool);
    content-editable: func() -> string;
    set-content-editable: func(content-editable: string);
    is-content-editable: func() -> bool;
    spellcheck: func() -> bool;
    set-spellcheck: func(spellcheck: bool);
    style: func() -> css-style-declaration;
  }
  resource html-div-element {
    as-html-element: func() -> html-element;
    align: func() -> string;
    set-align: func(align: string);
    title: func() -> string;
    set-title: func(title: string);
    scroll-height: func() -> s32;
    set-scroll-height: func(scroll-height: s32);
    scroll-top: func() -> s32;
    set-scroll-top: func(scroll-top: s32);
    lang: func() -> string;
    set-lang: func(lang: string);
    dir: func() -> string;
    set-dir: func(dir: string);
    dataset: func() -> dom-string-map;
    inner-text: func() -> string;
    set-inner-text: func(inner-text: string);
    hidden: func() -> bool;
    set-hidden: func(hidden: bool);
    inert: func() -> bool;
    set-inert: func(inert: bool);
    click: func();
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func(options: option<focus-options>);
    blur: func();
    access-key: func() -> string;
    set-access-key: func(access-key: string);
    access-key-label: func() -> string;
    draggable: func() -> bool;
    set-draggable: func(draggable: bool);
    content-editable: func() -> string;
    set-content-editable: func(content-editable: string);
    is-content-editable: func() -> bool;
    spellcheck: func() -> bool;
    set-spellcheck: func(spellcheck: bool);
    style: func() -> css-style-declaration;
  }
  resource idb-file-request {
    as-dom-request: func() -> dom-request;
    file-handle: func() -> option<idb-file-handle>;
    locked-file: func() -> option<idb-file-handle>;
    onprogress-subscribe: func() -> pollable;
  }
  enum media-key-session-type {
    temporary,
    persistent-license,
  }
  record media-keys-policy {
    min-hdcp-version: option<string>,
  }
  resource media-keys {
    key-system: func() -> string;
    create-session: func(session-type: option<media-key-session-type>) -> media-key-session;
    set-server-certificate: func(server-certificate: buffer-source);
    get-status-for-policy: func(policy: option<media-keys-policy>) -> media-key-status;
  }
  resource svgfe-merge-node-element {
    as-svg-element: func() -> svg-element;
    in1: func() -> svg-animated-string;
    id: func() -> string;
    set-id: func(id: string);
    class-name: func() -> svg-animated-string;
    dataset: func() -> dom-string-map;
    style: func() -> css-style-declaration;
    owner-svg-element: func() -> option<svgsvg-element>;
    viewport-element: func() -> option<svg-element>;
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func();
    blur: func();
  }
  resource mime-type {
    description: func() -> string;
    enabled-plugin: func() -> option<plugin>;
    suffixes: func() -> string;
    %type: func() -> string;
  }
  resource clients {
    get: func(id: string) -> any;
    match-all: func(options: option<client-query-options>) -> list<client>;
    open-window: func(url: string) -> option<window-client>;
    claim: func();
  }
  record client-query-options {
    include-uncontrolled: option<bool>,
    %type: option<client-type>,
  }
  enum client-type {
    window,
    worker,
    sharedworker,
    serviceworker,
    all,
  }
  resource storage {
    length: func() -> u32;
    key: func(index: u32) -> string;
    get-item: func(key: string) -> string;
    set-item: func(key: string, value: string);
    remove-item: func(key: string);
    clear: func();
    is-session-only: func() -> bool;
  }
  resource rtcdtmf-sender {
    as-event-target: func() -> event-target;
    insert-dtmf: func(tones: string, duration: option<u32>, inter-tone-gap: option<u32>);
    ontonechange-subscribe: func() -> pollable;
    tone-buffer: func() -> string;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  record position-options {
    enable-high-accuracy: option<bool>,
    timeout: option<u32>,
    maximum-age: option<u32>,
  }
  resource geolocation {
    get-current-position: func(success-callback: borrow<position-callback>, error-callback: option<option<borrow<position-error-callback>>>, options: option<position-options>);
    watch-position: func(success-callback: borrow<position-callback>, error-callback: option<option<borrow<position-error-callback>>>, options: option<position-options>) -> s32;
    clear-watch: func(watch-id: s32);
  }
  resource svgfe-drop-shadow-element {
    as-svg-element: func() -> svg-element;
    in1: func() -> svg-animated-string;
    dx: func() -> svg-animated-number;
    dy: func() -> svg-animated-number;
    std-deviation-x: func() -> svg-animated-number;
    std-deviation-y: func() -> svg-animated-number;
    set-std-deviation: func(std-deviation-x: f32, std-deviation-y: f32);
    x: func() -> svg-animated-length;
    y: func() -> svg-animated-length;
    width: func() -> svg-animated-length;
    height: func() -> svg-animated-length;
    %result: func() -> svg-animated-string;
    id: func() -> string;
    set-id: func(id: string);
    class-name: func() -> svg-animated-string;
    dataset: func() -> dom-string-map;
    style: func() -> css-style-declaration;
    owner-svg-element: func() -> option<svgsvg-element>;
    viewport-element: func() -> option<svg-element>;
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func();
    blur: func();
  }
  resource html-pre-element {
    as-html-element: func() -> html-element;
    width: func() -> s32;
    set-width: func(width: s32);
    title: func() -> string;
    set-title: func(title: string);
    scroll-height: func() -> s32;
    set-scroll-height: func(scroll-height: s32);
    scroll-top: func() -> s32;
    set-scroll-top: func(scroll-top: s32);
    lang: func() -> string;
    set-lang: func(lang: string);
    dir: func() -> string;
    set-dir: func(dir: string);
    dataset: func() -> dom-string-map;
    inner-text: func() -> string;
    set-inner-text: func(inner-text: string);
    hidden: func() -> bool;
    set-hidden: func(hidden: bool);
    inert: func() -> bool;
    set-inert: func(inert: bool);
    click: func();
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func(options: option<focus-options>);
    blur: func();
    access-key: func() -> string;
    set-access-key: func(access-key: string);
    access-key-label: func() -> string;
    draggable: func() -> bool;
    set-draggable: func(draggable: bool);
    content-editable: func() -> string;
    set-content-editable: func(content-editable: string);
    is-content-editable: func() -> bool;
    spellcheck: func() -> bool;
    set-spellcheck: func(spellcheck: bool);
    style: func() -> css-style-declaration;
  }
  resource html-option-element {
    as-html-element: func() -> html-element;
    disabled: func() -> bool;
    set-disabled: func(disabled: bool);
    form: func() -> option<html-form-element>;
    label: func() -> string;
    set-label: func(label: string);
    default-selected: func() -> bool;
    set-default-selected: func(default-selected: bool);
    selected: func() -> bool;
    set-selected: func(selected: bool);
    value: func() -> string;
    set-value: func(value: string);
    text: func() -> string;
    set-text: func(text: string);
    index: func() -> s32;
    title: func() -> string;
    set-title: func(title: string);
    scroll-height: func() -> s32;
    set-scroll-height: func(scroll-height: s32);
    scroll-top: func() -> s32;
    set-scroll-top: func(scroll-top: s32);
    lang: func() -> string;
    set-lang: func(lang: string);
    dir: func() -> string;
    set-dir: func(dir: string);
    dataset: func() -> dom-string-map;
    inner-text: func() -> string;
    set-inner-text: func(inner-text: string);
    hidden: func() -> bool;
    set-hidden: func(hidden: bool);
    inert: func() -> bool;
    set-inert: func(inert: bool);
    click: func();
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func(options: option<focus-options>);
    blur: func();
    access-key: func() -> string;
    set-access-key: func(access-key: string);
    access-key-label: func() -> string;
    draggable: func() -> bool;
    set-draggable: func(draggable: bool);
    content-editable: func() -> string;
    set-content-editable: func(content-editable: string);
    is-content-editable: func() -> bool;
    spellcheck: func() -> bool;
    set-spellcheck: func(spellcheck: bool);
    style: func() -> css-style-declaration;
  }
  resource svgfe-flood-element {
    as-svg-element: func() -> svg-element;
    x: func() -> svg-animated-length;
    y: func() -> svg-animated-length;
    width: func() -> svg-animated-length;
    height: func() -> svg-animated-length;
    %result: func() -> svg-animated-string;
    id: func() -> string;
    set-id: func(id: string);
    class-name: func() -> svg-animated-string;
    dataset: func() -> dom-string-map;
    style: func() -> css-style-declaration;
    owner-svg-element: func() -> option<svgsvg-element>;
    viewport-element: func() -> option<svg-element>;
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func();
    blur: func();
  }
  resource time-ranges {
    length: func() -> u32;
    start: func(index: u32) -> f64;
    end: func(index: u32) -> f64;
  }
  record idb-open-db-options {
    version: option<u64>,
    storage: option<storage-type>,
  }
  resource idb-factory {
    open: func(params: idb-factory-open-params) -> idb-open-db-request;
    delete-database: func(name: string, options: option<idb-open-db-options>) -> idb-open-db-request;
    cmp: func(first: any, second: any) -> s16;
    open-for-principal: func(params: idb-factory-open-for-principal-params) -> idb-open-db-request;
    delete-for-principal: func(principal: borrow<principal>, name: string, options: option<idb-open-db-options>) -> idb-open-db-request;
  }
  variant idb-factory-open-params {
    name-version(tuple<string, u64>),
    name-options(tuple<string, option<idb-open-db-options>>),
  }
  variant idb-factory-open-for-principal-params {
    principal-name-version(tuple<borrow<principal>, string, u64>),
    principal-name-options(tuple<borrow<principal>, string, option<idb-open-db-options>>),
  }
  variant f64-or-keyframe-animation-options {
    %f64(f64),
    keyframe-animation-options(borrow<keyframe-animation-options>),
  }
  type unrestricted-double-or-keyframe-animation-options = f64-or-keyframe-animation-options;
  resource record-f64 {
    constructor();
    add: func(key: string, value: f64);
    get: func(key: string) -> option<f64>;
    has: func(key: string) -> bool;
    remove: func(key: string);
    keys: func() -> list<string>;
    values: func() -> list<f64>;
    entries: func() -> list<tuple<string, f64>>;
  }
  record audio-worklet-node-options {
    number-of-inputs: option<u32>,
    number-of-outputs: option<u32>,
    output-channel-count: option<list<u32>>,
    parameter-data: option<record-f64>,
    processor-options: option<object>,
    channel-count: option<u32>,
    channel-count-mode: option<channel-count-mode>,
    channel-interpretation: option<channel-interpretation>,
  }
  resource audio-worklet-node {
    as-audio-node: func() -> audio-node;
    parameters: func() -> audio-param-map;
    port: func() -> message-port;
    onprocessorerror-subscribe: func() -> pollable;
    disconnect: func(params: option<audio-worklet-node-disconnect-params>);
    context: func() -> base-audio-context;
    number-of-inputs: func() -> u32;
    number-of-outputs: func() -> u32;
    channel-count: func() -> u32;
    set-channel-count: func(channel-count: u32);
    channel-count-mode: func() -> channel-count-mode;
    set-channel-count-mode: func(channel-count-mode: channel-count-mode);
    channel-interpretation: func() -> channel-interpretation;
    set-channel-interpretation: func(channel-interpretation: channel-interpretation);
  }
  enum rtc-ice-credential-type {
    password,
    token,
  }
  record rtc-ice-server {
    urls: option<list-string-or-string>,
    url: option<string>,
    username: option<string>,
    credential: option<string>,
    credential-type: option<rtc-ice-credential-type>,
  }
  enum rtc-ice-transport-policy {
    relay,
    all,
  }
  enum rtc-bundle-policy {
    balanced,
    max-compat,
    max-bundle,
  }
  record rtc-configuration {
    ice-servers: option<list<rtc-ice-server>>,
    ice-transport-policy: option<rtc-ice-transport-policy>,
    bundle-policy: option<rtc-bundle-policy>,
    peer-identity: option<string>,
    certificates: option<list<borrow<rtc-certificate>>>,
  }
  resource svg-preserve-aspect-ratio {
    SVG-PRESERVEASPECTRATIO-UNKNOWN: static func() -> u16;
    SVG-PRESERVEASPECTRATIO-NONE: static func() -> u16;
    SVG-PRESERVEASPECTRATIO-XMINYMIN: static func() -> u16;
    SVG-PRESERVEASPECTRATIO-XMIDYMIN: static func() -> u16;
    SVG-PRESERVEASPECTRATIO-XMAXYMIN: static func() -> u16;
    SVG-PRESERVEASPECTRATIO-XMINYMID: static func() -> u16;
    SVG-PRESERVEASPECTRATIO-XMIDYMID: static func() -> u16;
    SVG-PRESERVEASPECTRATIO-XMAXYMID: static func() -> u16;
    SVG-PRESERVEASPECTRATIO-XMINYMAX: static func() -> u16;
    SVG-PRESERVEASPECTRATIO-XMIDYMAX: static func() -> u16;
    SVG-PRESERVEASPECTRATIO-XMAXYMAX: static func() -> u16;
    SVG-MEETORSLICE-UNKNOWN: static func() -> u16;
    SVG-MEETORSLICE-MEET: static func() -> u16;
    SVG-MEETORSLICE-SLICE: static func() -> u16;
    align: func() -> u16;
    set-align: func(align: u16);
    meet-or-slice: func() -> u16;
    set-meet-or-slice: func(meet-or-slice: u16);
  }
  record audio-buffer-source-options {
    buffer: option<option<borrow<audio-buffer>>>,
    detune: option<f32>,
    loop: option<bool>,
    loop-end: option<f64>,
    loop-start: option<f64>,
    playback-rate: option<f32>,
  }
  resource audio-buffer-source-node {
    as-audio-scheduled-source-node: func() -> audio-scheduled-source-node;
    buffer: func() -> option<audio-buffer>;
    set-buffer: func(buffer: option<audio-buffer>);
    playback-rate: func() -> audio-param;
    detune: func() -> audio-param;
    loop: func() -> bool;
    set-loop: func(loop: bool);
    loop-start: func() -> f64;
    set-loop-start: func(loop-start: f64);
    loop-end: func() -> f64;
    set-loop-end: func(loop-end: f64);
    onended-subscribe: func() -> pollable;
    start: func(when: option<f64>, grain-offset: option<f64>, grain-duration: option<f64>);
    stop: func(when: option<f64>);
  }
  resource audio-processing-event {
    as-event: func() -> event;
    playback-time: func() -> f64;
    input-buffer: func() -> audio-buffer;
    output-buffer: func() -> audio-buffer;
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
  }
  resource text {
    as-character-data: func() -> character-data;
    split-text: func(offset: u32) -> text;
    whole-text: func() -> string;
    assigned-slot: func() -> option<html-slot-element>;
    get-box-quads: func(options: option<box-quad-options>) -> list<dom-quad>;
    convert-quad-from-node: func(quad: borrow<dom-quad>, %from: geometry-node, options: option<convert-coordinate-options>) -> dom-quad;
    convert-rect-from-node: func(rect: borrow<dom-rect-read-only>, %from: geometry-node, options: option<convert-coordinate-options>) -> dom-quad;
    convert-point-from-node: func(point: dom-point-init, %from: geometry-node, options: option<convert-coordinate-options>) -> dom-point;
    data: func() -> string;
    set-data: func(data: string);
    length: func() -> u32;
    substring-data: func(offset: u32, count: u32) -> string;
    append-data: func(data: string);
    insert-data: func(offset: u32, data: string);
    delete-data: func(offset: u32, count: u32);
    replace-data: func(offset: u32, count: u32, data: string);
    as-cdata-section: func() -> option<cdata-section>;
  }
  resource css-namespace-rule {
    as-css-rule: func() -> css-rule;
    namespace-uri: func() -> string;
    prefix: func() -> string;
    STYLE-RULE: static func() -> u16;
    CHARSET-RULE: static func() -> u16;
    IMPORT-RULE: static func() -> u16;
    MEDIA-RULE: static func() -> u16;
    FONT-FACE-RULE: static func() -> u16;
    PAGE-RULE: static func() -> u16;
    NAMESPACE-RULE: static func() -> u16;
    %type: func() -> u16;
    css-text: func() -> string;
    set-css-text: func(css-text: string);
    parent-rule: func() -> option<css-rule>;
    parent-style-sheet: func() -> option<css-style-sheet>;
  }
  resource svg-animated-boolean {
    base-val: func() -> bool;
    set-base-val: func(base-val: bool);
    anim-val: func() -> bool;
  }
  resource html-body-element {
    as-html-element: func() -> html-element;
    text: func() -> string;
    set-text: func(text: string);
    link: func() -> string;
    set-link: func(link: string);
    v-link: func() -> string;
    set-v-link: func(v-link: string);
    a-link: func() -> string;
    set-a-link: func(a-link: string);
    bg-color: func() -> string;
    set-bg-color: func(bg-color: string);
    background: func() -> string;
    set-background: func(background: string);
    onafterprint-subscribe: func() -> pollable;
    onbeforeprint-subscribe: func() -> pollable;
    onbeforeunload: func() -> on-before-unload-event-handler;
    set-onbeforeunload: func(onbeforeunload: on-before-unload-event-handler);
    onhashchange-subscribe: func() -> pollable;
    onlanguagechange-subscribe: func() -> pollable;
    onmessage-subscribe: func() -> pollable;
    onmessageerror-subscribe: func() -> pollable;
    onoffline-subscribe: func() -> pollable;
    ononline-subscribe: func() -> pollable;
    onpagehide-subscribe: func() -> pollable;
    onpageshow-subscribe: func() -> pollable;
    onpopstate-subscribe: func() -> pollable;
    onstorage-subscribe: func() -> pollable;
    onunload-subscribe: func() -> pollable;
    title: func() -> string;
    set-title: func(title: string);
    scroll-height: func() -> s32;
    set-scroll-height: func(scroll-height: s32);
    scroll-top: func() -> s32;
    set-scroll-top: func(scroll-top: s32);
    lang: func() -> string;
    set-lang: func(lang: string);
    dir: func() -> string;
    set-dir: func(dir: string);
    dataset: func() -> dom-string-map;
    inner-text: func() -> string;
    set-inner-text: func(inner-text: string);
    hidden: func() -> bool;
    set-hidden: func(hidden: bool);
    inert: func() -> bool;
    set-inert: func(inert: bool);
    click: func();
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func(options: option<focus-options>);
    blur: func();
    access-key: func() -> string;
    set-access-key: func(access-key: string);
    access-key-label: func() -> string;
    draggable: func() -> bool;
    set-draggable: func(draggable: bool);
    content-editable: func() -> string;
    set-content-editable: func(content-editable: string);
    is-content-editable: func() -> bool;
    spellcheck: func() -> bool;
    set-spellcheck: func(spellcheck: bool);
    style: func() -> css-style-declaration;
  }
  resource html-source-element {
    as-html-element: func() -> html-element;
    src: func() -> string;
    set-src: func(src: string);
    %type: func() -> string;
    set-type: func(%type: string);
    srcset: func() -> string;
    set-srcset: func(srcset: string);
    sizes: func() -> string;
    set-sizes: func(sizes: string);
    media: func() -> string;
    set-media: func(media: string);
    title: func() -> string;
    set-title: func(title: string);
    scroll-height: func() -> s32;
    set-scroll-height: func(scroll-height: s32);
    scroll-top: func() -> s32;
    set-scroll-top: func(scroll-top: s32);
    lang: func() -> string;
    set-lang: func(lang: string);
    dir: func() -> string;
    set-dir: func(dir: string);
    dataset: func() -> dom-string-map;
    inner-text: func() -> string;
    set-inner-text: func(inner-text: string);
    hidden: func() -> bool;
    set-hidden: func(hidden: bool);
    inert: func() -> bool;
    set-inert: func(inert: bool);
    click: func();
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func(options: option<focus-options>);
    blur: func();
    access-key: func() -> string;
    set-access-key: func(access-key: string);
    access-key-label: func() -> string;
    draggable: func() -> bool;
    set-draggable: func(draggable: bool);
    content-editable: func() -> string;
    set-content-editable: func(content-editable: string);
    is-content-editable: func() -> bool;
    spellcheck: func() -> bool;
    set-spellcheck: func(spellcheck: bool);
    style: func() -> css-style-declaration;
  }
  resource svg-animated-length-list {
    base-val: func() -> svg-length-list;
    anim-val: func() -> svg-length-list;
  }
  enum rtc-signaling-state {
    stable,
    have-local-offer,
    have-remote-offer,
    have-local-pranswer,
    have-remote-pranswer,
    closed,
  }
  enum rtc-ice-gathering-state {
    new,
    gathering,
    complete,
  }
  enum rtc-ice-connection-state {
    new,
    checking,
    connected,
    completed,
    failed,
    disconnected,
    closed,
  }
  enum rtc-peer-connection-state {
    closed,
    failed,
    disconnected,
    new,
    connecting,
    connected,
  }
  record rtc-data-channel-init {
    ordered: option<bool>,
    max-packet-life-time: option<u16>,
    max-retransmits: option<u16>,
    protocol: option<string>,
    negotiated: option<bool>,
    id: option<u16>,
    max-retransmit-time: option<u16>,
  }
  // record rtc-offer-answer-options {  }
  // record rtc-answer-options {  }
  record rtc-offer-options {
    offer-to-receive-video: option<bool>,
    offer-to-receive-audio: option<bool>,
    ice-restart: option<bool>,
  }
  resource rtc-peer-connection {
    as-event-target: func() -> event-target;
    generate-certificate: static func(keygen-algorithm: algorithm-identifier) -> rtc-certificate;
    set-identity-provider: func(provider: string, options: option<rtc-identity-provider-options>);
    get-identity-assertion: func() -> string;
    create-offer: func(options: option<rtc-offer-options>) -> rtc-session-description-init;
    // create-answer: func(options: option<rtc-answer-options>) -> rtc-session-description-init;
    set-local-description: func(description: rtc-session-description-init);
    set-remote-description: func(description: rtc-session-description-init);
    local-description: func() -> option<rtc-session-description>;
    current-local-description: func() -> option<rtc-session-description>;
    pending-local-description: func() -> option<rtc-session-description>;
    remote-description: func() -> option<rtc-session-description>;
    current-remote-description: func() -> option<rtc-session-description>;
    pending-remote-description: func() -> option<rtc-session-description>;
    signaling-state: func() -> rtc-signaling-state;
    add-ice-candidate: func(candidate: rtc-ice-candidate-or-rtc-ice-candidate-init);
    can-trickle-ice-candidates: func() -> bool;
    ice-gathering-state: func() -> rtc-ice-gathering-state;
    ice-connection-state: func() -> rtc-ice-connection-state;
    connection-state: func() -> rtc-peer-connection-state;
    peer-identity: func() -> rtc-identity-assertion;
    idp-login-url: func() -> string;
    id: func() -> string;
    set-id: func(id: string);
    // get-configuration: func() -> rtc-configuration;
    get-local-streams: func() -> list<media-stream>;
    get-remote-streams: func() -> list<media-stream>;
    add-stream: func(%stream: borrow<media-stream>);
    add-track: func(track: borrow<media-stream-track>, %stream: borrow<media-stream>, more-streams: list<borrow<media-stream>>) -> rtc-rtp-sender;
    remove-track: func(sender: borrow<rtc-rtp-sender>);
    add-transceiver: func(track-or-kind: media-stream-track-or-string, init: option<rtc-rtp-transceiver-init>) -> rtc-rtp-transceiver;
    get-senders: func() -> list<rtc-rtp-sender>;
    get-receivers: func() -> list<rtc-rtp-receiver>;
    get-transceivers: func() -> list<rtc-rtp-transceiver>;
    close: func();
    onnegotiationneeded-subscribe: func() -> pollable;
    onicecandidate-subscribe: func() -> pollable;
    onsignalingstatechange-subscribe: func() -> pollable;
    onaddstream-subscribe: func() -> pollable;
    onaddtrack-subscribe: func() -> pollable;
    ontrack-subscribe: func() -> pollable;
    onremovestream-subscribe: func() -> pollable;
    oniceconnectionstatechange-subscribe: func() -> pollable;
    onicegatheringstatechange-subscribe: func() -> pollable;
    onconnectionstatechange-subscribe: func() -> pollable;
    get-stats: func(selector: option<option<borrow<media-stream-track>>>) -> rtc-stats-report;
    create-data-channel: func(label: string, data-channel-dict: option<rtc-data-channel-init>) -> rtc-data-channel;
    ondatachannel-subscribe: func() -> pollable;
    // create-offer: func(success-callback: rtc-session-description-callback, failure-callback: rtc-peer-connection-error-callback, options: option<rtc-offer-options>);
    // create-answer: func(success-callback: rtc-session-description-callback, failure-callback: rtc-peer-connection-error-callback);
    // set-local-description: func(description: rtc-session-description-init, success-callback: borrow<void-function>, failure-callback: rtc-peer-connection-error-callback);
    // set-remote-description: func(description: rtc-session-description-init, success-callback: borrow<void-function>, failure-callback: rtc-peer-connection-error-callback);
    // add-ice-candidate: func(candidate: borrow<rtc-ice-candidate>, success-callback: borrow<void-function>, failure-callback: rtc-peer-connection-error-callback);
    // get-stats: func(selector: option<borrow<media-stream-track>>, success-callback: rtc-stats-callback, failure-callback: rtc-peer-connection-error-callback);
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  variant rtc-ice-candidate-or-rtc-ice-candidate-init {
    rtc-ice-candidate(borrow<rtc-ice-candidate>),
    rtc-ice-candidate-init(rtc-ice-candidate-init),
  }
  variant media-stream-track-or-string {
    media-stream-track(borrow<media-stream-track>),
    %string(string),
  }
  resource extendable-event {
    as-event: func() -> event;
    as-fetch-event: func() -> option<fetch-event>;
    wait-until: func(p: any);
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
    as-push-event: func() -> option<push-event>;
    as-extendable-message-event: func() -> option<extendable-message-event>;
    as-notification-event: func() -> option<notification-event>;
  }
  record extendable-event-init {
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource style-sheet {
    %type: func() -> string;
    href: func() -> string;
    owner-node: func() -> option<node>;
    parent-style-sheet: func() -> option<style-sheet>;
    title: func() -> string;
    media: func() -> media-list;
    disabled: func() -> bool;
    set-disabled: func(disabled: bool);
    source-map-url: func() -> string;
    source-url: func() -> string;
    as-css-style-sheet: func() -> option<css-style-sheet>;
  }
  resource dom-point-read-only {
    from-point: static func(other: option<dom-point-init>) -> dom-point-read-only;
    x: func() -> f64;
    y: func() -> f64;
    z: func() -> f64;
    w: func() -> f64;
    to-json: func() -> object;
    as-dom-point: func() -> option<dom-point>;
  }
  resource dom-point {
    as-dom-point-read-only: func() -> dom-point-read-only;
    from-point: static func(other: option<dom-point-init>) -> dom-point;
    x: func() -> f64;
    set-x: func(x: f64);
    y: func() -> f64;
    set-y: func(y: f64);
    z: func() -> f64;
    set-z: func(z: f64);
    w: func() -> f64;
    set-w: func(w: f64);
  }
  record dom-point-init {
    x: option<f64>,
    y: option<f64>,
    z: option<f64>,
    w: option<f64>,
  }
  resource push-message-data {
    array-buffer: func() -> array-buffer;
    blob: func() -> blob;
    json: func() -> any;
    text: func() -> string;
  }
  resource svg-defs-element {
    as-svg-graphics-element: func() -> svg-graphics-element;
    transform: func() -> svg-animated-transform-list;
    nearest-viewport-element: func() -> option<svg-element>;
    farthest-viewport-element: func() -> option<svg-element>;
    get-b-box: func(a-options: option<svg-bounding-box-options>) -> svg-rect;
    get-ctm: func() -> option<svg-matrix>;
    get-screen-ctm: func() -> option<svg-matrix>;
    get-transform-to-element: func(element: borrow<svg-graphics-element>) -> svg-matrix;
  }
  resource selection {
    anchor-node: func() -> option<node>;
    anchor-offset: func() -> u32;
    focus-node: func() -> option<node>;
    focus-offset: func() -> u32;
    is-collapsed: func() -> bool;
    range-count: func() -> u32;
    %type: func() -> string;
    get-range-at: func(index: u32) -> range;
    add-range: func(range: borrow<range>);
    remove-range: func(range: borrow<range>);
    remove-all-ranges: func();
    empty: func();
    collapse: func(node: option<borrow<node>>, offset: option<u32>);
    set-position: func(node: option<borrow<node>>, offset: option<u32>);
    collapse-to-start: func();
    collapse-to-end: func();
    extend: func(node: borrow<node>, offset: option<u32>);
    set-base-and-extent: func(anchor-node: borrow<node>, anchor-offset: u32, focus-node: borrow<node>, focus-offset: u32);
    select-all-children: func(node: borrow<node>);
    delete-from-document: func();
    contains-node: func(node: borrow<node>, allow-partial-containment: option<bool>) -> bool;
    modify: func(alter: string, direction: string, granularity: string);
    interline-position: func() -> bool;
    set-interline-position: func(interline-position: bool);
    caret-bidi-level: func() -> s16;
    set-caret-bidi-level: func(caret-bidi-level: s16);
    to-string-with-format: func(format-type: string, %flags: u32, wrap-column: s32) -> string;
    add-selection-listener: func(new-listener: borrow<ns-i-selection-listener>);
    remove-selection-listener: func(listener-to-remove: borrow<ns-i-selection-listener>);
    selection-type: func() -> s16;
    get-ranges-for-interval: func(begin-node: borrow<node>, begin-offset: s32, end-node: borrow<node>, end-offset: s32, allow-adjacent: bool) -> list<range>;
    scroll-into-view: func(a-region: s16, a-is-synchronous: bool, av-percent: s16, ah-percent: s16);
    set-colors: func(a-foreground-color: string, a-background-color: string, a-alt-foreground-color: string, a-alt-background-color: string);
    reset-colors: func();
  }
  resource blob-event {
    as-event: func() -> event;
    data: func() -> option<blob>;
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
  }
  record blob-event-init {
    data: option<option<borrow<blob>>>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  record offline-audio-context-options {
    number-of-channels: option<u32>,
    length: u32,
    sample-rate: f32,
  }
  resource offline-audio-context {
    as-base-audio-context: func() -> base-audio-context;
    start-rendering: func() -> audio-buffer;
    length: func() -> u32;
    oncomplete-subscribe: func() -> pollable;
    destination: func() -> audio-destination-node;
    sample-rate: func() -> f32;
    current-time: func() -> f64;
    listener: func() -> audio-listener;
    state: func() -> audio-context-state;
    audio-worklet: func() -> audio-worklet;
    resume: func();
    onstatechange-subscribe: func() -> pollable;
    create-buffer: func(number-of-channels: u32, length: u32, sample-rate: f32) -> audio-buffer;
    decode-audio-data: func(audio-data: array-buffer, success-callback: option<borrow<decode-success-callback>>, error-callback: option<borrow<decode-error-callback>>) -> audio-buffer;
    create-buffer-source: func() -> audio-buffer-source-node;
    create-constant-source: func() -> constant-source-node;
    create-script-processor: func(buffer-size: option<u32>, number-of-input-channels: option<u32>, number-of-output-channels: option<u32>) -> script-processor-node;
    create-analyser: func() -> analyser-node;
    create-gain: func() -> gain-node;
    create-delay: func(max-delay-time: option<f64>) -> delay-node;
    create-biquad-filter: func() -> biquad-filter-node;
    create-iir-filter: func(feedforward: list<f64>, feedback: list<f64>) -> iir-filter-node;
    create-wave-shaper: func() -> wave-shaper-node;
    create-panner: func() -> panner-node;
    create-stereo-panner: func() -> stereo-panner-node;
    create-convolver: func() -> convolver-node;
    create-channel-splitter: func(number-of-outputs: option<u32>) -> channel-splitter-node;
    create-channel-merger: func(number-of-inputs: option<u32>) -> channel-merger-node;
    create-dynamics-compressor: func() -> dynamics-compressor-node;
    create-oscillator: func() -> oscillator-node;
    create-periodic-wave: func(real: float32-array, imag: float32-array, constraints: option<periodic-wave-constraints>) -> periodic-wave;
  }
  resource html-paragraph-element {
    as-html-element: func() -> html-element;
    align: func() -> string;
    set-align: func(align: string);
    title: func() -> string;
    set-title: func(title: string);
    scroll-height: func() -> s32;
    set-scroll-height: func(scroll-height: s32);
    scroll-top: func() -> s32;
    set-scroll-top: func(scroll-top: s32);
    lang: func() -> string;
    set-lang: func(lang: string);
    dir: func() -> string;
    set-dir: func(dir: string);
    dataset: func() -> dom-string-map;
    inner-text: func() -> string;
    set-inner-text: func(inner-text: string);
    hidden: func() -> bool;
    set-hidden: func(hidden: bool);
    inert: func() -> bool;
    set-inert: func(inert: bool);
    click: func();
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func(options: option<focus-options>);
    blur: func();
    access-key: func() -> string;
    set-access-key: func(access-key: string);
    access-key-label: func() -> string;
    draggable: func() -> bool;
    set-draggable: func(draggable: bool);
    content-editable: func() -> string;
    set-content-editable: func(content-editable: string);
    is-content-editable: func() -> bool;
    spellcheck: func() -> bool;
    set-spellcheck: func(spellcheck: bool);
    style: func() -> css-style-declaration;
  }
  resource console {
    assert: func(condition: option<bool>, data: list<any>);
    clear: func();
    count: func(label: option<string>);
    count-reset: func(label: option<string>);
    debug: func(data: list<any>);
    error: func(data: list<any>);
    info: func(data: list<any>);
    log: func(data: list<any>);
    table: func(data: list<any>);
    trace: func(data: list<any>);
    warn: func(data: list<any>);
    dir: func(data: list<any>);
    dirxml: func(data: list<any>);
    group: func(data: list<any>);
    group-collapsed: func(data: list<any>);
    group-end: func();
    time: func(label: option<string>);
    time-log: func(label: option<string>, data: list<any>);
    time-end: func(label: option<string>);
    exception: func(data: list<any>);
    time-stamp: func(data: any);
    profile: func(data: list<any>);
    profile-end: func(data: list<any>);
    create-instance: func(options: option<console-instance-options>) -> console-instance;
  }
  variant string-or-u64 {
    %string(string),
    %u64(u64),
  }
  record console-event {
    id: option<string-or-u64>,
    inner-id: option<string-or-u64>,
    console-id: option<string>,
    addon-id: option<string>,
    level: option<string>,
    filename: option<string>,
    line-number: option<u32>,
    column-number: option<u32>,
    function-name: option<string>,
    time-stamp: option<f64>,
    arguments: option<list<any>>,
    styles: option<list<string>>,
    private: option<bool>,
    group-name: option<string>,
    timer: any,
    counter: any,
    prefix: option<string>,
  }
  record console-profile-event {
    action: option<string>,
    arguments: option<list<any>>,
  }
  record console-stack-entry {
    filename: option<string>,
    line-number: option<u32>,
    column-number: option<u32>,
    function-name: option<string>,
    async-cause: option<string>,
  }
  record console-timer-start {
    name: option<string>,
  }
  record console-timer-log-or-end {
    name: option<string>,
    duration: option<f64>,
  }
  record console-timer-error {
    error: option<string>,
    name: option<string>,
  }
  record console-counter {
    label: option<string>,
    count: option<u32>,
  }
  record console-counter-error {
    label: option<string>,
    error: option<string>,
  }
  resource console-instance {
    assert: func(condition: option<bool>, data: list<any>);
    clear: func();
    count: func(label: option<string>);
    count-reset: func(label: option<string>);
    debug: func(data: list<any>);
    error: func(data: list<any>);
    info: func(data: list<any>);
    log: func(data: list<any>);
    table: func(data: list<any>);
    trace: func(data: list<any>);
    warn: func(data: list<any>);
    dir: func(data: list<any>);
    dirxml: func(data: list<any>);
    group: func(data: list<any>);
    group-collapsed: func(data: list<any>);
    group-end: func();
    time: func(label: option<string>);
    time-log: func(label: option<string>, data: list<any>);
    time-end: func(label: option<string>);
    exception: func(data: list<any>);
    time-stamp: func(data: any);
    profile: func(data: list<any>);
    profile-end: func(data: list<any>);
    report-for-service-worker-scope: func(scope: string, message: string, filename: string, line-number: u32, column-number: u32, level: console-level);
  }
  enum console-log-level {
    all,
    debug,
    log,
    info,
    clear,
    trace,
    time-log,
    time-end,
    time,
    group,
    group-end,
    profile,
    profile-end,
    dir,
    dirxml,
    warn,
    error,
    off,
  }
  record console-instance-options {
    dump: option<borrow<console-instance-dump-callback>>,
    prefix: option<string>,
    inner-id: option<string>,
    console-id: option<string>,
    max-log-level: option<console-log-level>,
    max-log-level-pref: option<string>,
  }
  enum console-level {
    log,
    warning,
    error,
  }
  record channel-splitter-options {
    number-of-outputs: option<u32>,
    channel-count: option<u32>,
    channel-count-mode: option<channel-count-mode>,
    channel-interpretation: option<channel-interpretation>,
  }
  resource channel-splitter-node {
    as-audio-node: func() -> audio-node;
    disconnect: func(params: option<channel-splitter-node-disconnect-params>);
    context: func() -> base-audio-context;
    number-of-inputs: func() -> u32;
    number-of-outputs: func() -> u32;
    channel-count: func() -> u32;
    set-channel-count: func(channel-count: u32);
    channel-count-mode: func() -> channel-count-mode;
    set-channel-count-mode: func(channel-count-mode: channel-count-mode);
    channel-interpretation: func() -> channel-interpretation;
    set-channel-interpretation: func(channel-interpretation: channel-interpretation);
  }
  resource media-list {
    media-text: func() -> string;
    set-media-text: func(media-text: string);
    length: func() -> u32;
    item: func(index: u32) -> string;
    delete-medium: func(old-medium: string);
    append-medium: func(new-medium: string);
  }
  record performance-entry-filter-options {
    name: option<string>,
    entry-type: option<string>,
    initiator-type: option<string>,
  }
  resource performance-observer-entry-list {
    get-entries: func(filter: option<performance-entry-filter-options>) -> performance-entry-list;
    get-entries-by-type: func(entry-type: string) -> performance-entry-list;
    get-entries-by-name: func(name: string, entry-type: option<string>) -> performance-entry-list;
  }
  resource xml-http-request-upload {
    as-xml-http-request-event-target: func() -> xml-http-request-event-target;
  }
  resource attr {
    as-node: func() -> node;
    local-name: func() -> string;
    value: func() -> string;
    set-value: func(value: string);
    name: func() -> string;
    namespace-uri: func() -> string;
    prefix: func() -> string;
    specified: func() -> bool;
    ELEMENT-NODE: static func() -> u16;
    ATTRIBUTE-NODE: static func() -> u16;
    TEXT-NODE: static func() -> u16;
    CDATA-SECTION-NODE: static func() -> u16;
    ENTITY-REFERENCE-NODE: static func() -> u16;
    ENTITY-NODE: static func() -> u16;
    PROCESSING-INSTRUCTION-NODE: static func() -> u16;
    COMMENT-NODE: static func() -> u16;
    DOCUMENT-NODE: static func() -> u16;
    DOCUMENT-TYPE-NODE: static func() -> u16;
    DOCUMENT-FRAGMENT-NODE: static func() -> u16;
    NOTATION-NODE: static func() -> u16;
    node-type: func() -> u16;
    node-name: func() -> string;
    base-uri: func() -> string;
    is-connected: func() -> bool;
    owner-document: func() -> option<document>;
    get-root-node: func(options: option<get-root-node-options>) -> node;
    parent-node: func() -> option<node>;
    parent-element: func() -> option<element>;
    has-child-nodes: func() -> bool;
    child-nodes: func() -> node-list;
    first-child: func() -> option<node>;
    last-child: func() -> option<node>;
    previous-sibling: func() -> option<node>;
    next-sibling: func() -> option<node>;
    node-value: func() -> string;
    set-node-value: func(node-value: string);
    text-content: func() -> string;
    set-text-content: func(text-content: string);
    insert-before: func(node: borrow<node>, child: option<borrow<node>>) -> node;
    append-child: func(node: borrow<node>) -> node;
    replace-child: func(node: borrow<node>, child: borrow<node>) -> node;
    remove-child: func(child: borrow<node>) -> node;
    normalize: func();
    clone-node: func(deep: option<bool>) -> node;
    is-same-node: func(node: option<borrow<node>>) -> bool;
    is-equal-node: func(node: option<borrow<node>>) -> bool;
    DOCUMENT-POSITION-DISCONNECTED: static func() -> u16;
    DOCUMENT-POSITION-PRECEDING: static func() -> u16;
    DOCUMENT-POSITION-FOLLOWING: static func() -> u16;
    DOCUMENT-POSITION-CONTAINS: static func() -> u16;
    DOCUMENT-POSITION-CONTAINED-BY: static func() -> u16;
    DOCUMENT-POSITION-IMPLEMENTATION-SPECIFIC: static func() -> u16;
    compare-document-position: func(other: borrow<node>) -> u16;
    contains: func(other: option<borrow<node>>) -> bool;
    lookup-prefix: func(namespace: string) -> string;
    lookup-namespace-uri: func(prefix: string) -> string;
    is-default-namespace: func(namespace: string) -> bool;
  }
  resource svg-circle-element {
    as-svg-geometry-element: func() -> svg-geometry-element;
    cx: func() -> svg-animated-length;
    cy: func() -> svg-animated-length;
    r: func() -> svg-animated-length;
  }
  resource position {
    coords: func() -> coordinates;
    timestamp: func() -> dom-time-stamp;
  }
  enum rtc-stats-type {
    inbound-rtp,
    outbound-rtp,
    csrc,
    session,
    track,
    transport,
    candidate-pair,
    local-candidate,
    remote-candidate,
  }
  record rtc-stats {
    timestamp: option<dom-high-res-time-stamp>,
    %type: option<rtc-stats-type>,
    id: option<string>,
  }
  record rtcrtp-stream-stats {
    ssrc: option<string>,
    media-type: option<string>,
    remote-id: option<string>,
    is-remote: option<bool>,
    media-track-id: option<string>,
    transport-id: option<string>,
    codec-id: option<string>,
    bitrate-mean: option<f64>,
    bitrate-std-dev: option<f64>,
    framerate-mean: option<f64>,
    framerate-std-dev: option<f64>,
    fir-count: option<u32>,
    pli-count: option<u32>,
    nack-count: option<u32>,
    timestamp: option<dom-high-res-time-stamp>,
    %type: option<rtc-stats-type>,
    id: option<string>,
  }
  record rtc-inbound-rtp-stream-stats {
    packets-received: option<u32>,
    bytes-received: option<u64>,
    jitter: option<f64>,
    packets-lost: option<u32>,
    round-trip-time: option<s32>,
    discarded-packets: option<u32>,
    frames-decoded: option<u32>,
    ssrc: option<string>,
    media-type: option<string>,
    remote-id: option<string>,
    is-remote: option<bool>,
    media-track-id: option<string>,
    transport-id: option<string>,
    codec-id: option<string>,
    bitrate-mean: option<f64>,
    bitrate-std-dev: option<f64>,
    framerate-mean: option<f64>,
    framerate-std-dev: option<f64>,
    fir-count: option<u32>,
    pli-count: option<u32>,
    nack-count: option<u32>,
    timestamp: option<dom-high-res-time-stamp>,
    %type: option<rtc-stats-type>,
    id: option<string>,
  }
  record rtc-outbound-rtp-stream-stats {
    packets-sent: option<u32>,
    bytes-sent: option<u64>,
    target-bitrate: option<f64>,
    dropped-frames: option<u32>,
    frames-encoded: option<u32>,
    ssrc: option<string>,
    media-type: option<string>,
    remote-id: option<string>,
    is-remote: option<bool>,
    media-track-id: option<string>,
    transport-id: option<string>,
    codec-id: option<string>,
    bitrate-mean: option<f64>,
    bitrate-std-dev: option<f64>,
    framerate-mean: option<f64>,
    framerate-std-dev: option<f64>,
    fir-count: option<u32>,
    pli-count: option<u32>,
    nack-count: option<u32>,
    timestamp: option<dom-high-res-time-stamp>,
    %type: option<rtc-stats-type>,
    id: option<string>,
  }
  record rtc-media-stream-track-stats {
    track-identifier: option<string>,
    remote-source: option<bool>,
    ssrc-ids: option<list<string>>,
    frame-width: option<u32>,
    frame-height: option<u32>,
    frames-per-second: option<f64>,
    frames-sent: option<u32>,
    frames-received: option<u32>,
    frames-decoded: option<u32>,
    frames-dropped: option<u32>,
    frames-corrupted: option<u32>,
    audio-level: option<f64>,
    echo-return-loss: option<f64>,
    echo-return-loss-enhancement: option<f64>,
    timestamp: option<dom-high-res-time-stamp>,
    %type: option<rtc-stats-type>,
    id: option<string>,
  }
  record rtc-media-stream-stats {
    stream-identifier: option<string>,
    track-ids: option<list<string>>,
    timestamp: option<dom-high-res-time-stamp>,
    %type: option<rtc-stats-type>,
    id: option<string>,
  }
  record rtcrtp-contributing-source-stats {
    contributor-ssrc: option<u32>,
    inbound-rtp-stream-id: option<string>,
    timestamp: option<dom-high-res-time-stamp>,
    %type: option<rtc-stats-type>,
    id: option<string>,
  }
  record rtc-transport-stats {
    bytes-sent: option<u32>,
    bytes-received: option<u32>,
    timestamp: option<dom-high-res-time-stamp>,
    %type: option<rtc-stats-type>,
    id: option<string>,
  }
  record rtc-ice-component-stats {
    transport-id: option<string>,
    component: option<s32>,
    bytes-sent: option<u32>,
    bytes-received: option<u32>,
    active-connection: option<bool>,
    timestamp: option<dom-high-res-time-stamp>,
    %type: option<rtc-stats-type>,
    id: option<string>,
  }
  enum rtc-stats-ice-candidate-pair-state {
    frozen,
    waiting,
    inprogress,
    failed,
    succeeded,
    cancelled,
  }
  record rtc-ice-candidate-pair-stats {
    transport-id: option<string>,
    local-candidate-id: option<string>,
    remote-candidate-id: option<string>,
    state: option<rtc-stats-ice-candidate-pair-state>,
    priority: option<u64>,
    nominated: option<bool>,
    writable: option<bool>,
    readable: option<bool>,
    bytes-sent: option<u64>,
    bytes-received: option<u64>,
    last-packet-sent-timestamp: option<dom-high-res-time-stamp>,
    last-packet-received-timestamp: option<dom-high-res-time-stamp>,
    selected: option<bool>,
    component-id: option<u32>,
    timestamp: option<dom-high-res-time-stamp>,
    %type: option<rtc-stats-type>,
    id: option<string>,
  }
  enum rtc-stats-ice-candidate-type {
    host,
    serverreflexive,
    peerreflexive,
    relayed,
  }
  record rtc-ice-candidate-stats {
    component-id: option<string>,
    candidate-id: option<string>,
    ip-address: option<string>,
    transport: option<string>,
    port-number: option<s32>,
    candidate-type: option<rtc-stats-ice-candidate-type>,
    timestamp: option<dom-high-res-time-stamp>,
    %type: option<rtc-stats-type>,
    id: option<string>,
  }
  record rtc-codec-stats {
    payload-type: option<u32>,
    codec: option<string>,
    clock-rate: option<u32>,
    channels: option<u32>,
    parameters: option<string>,
    timestamp: option<dom-high-res-time-stamp>,
    %type: option<rtc-stats-type>,
    id: option<string>,
  }
  record rtc-stats-report-internal {
    pcid: option<string>,
    inbound-rtp-stream-stats: option<list<rtc-inbound-rtp-stream-stats>>,
    outbound-rtp-stream-stats: option<list<rtc-outbound-rtp-stream-stats>>,
    rtp-contributing-source-stats: option<list<rtcrtp-contributing-source-stats>>,
    media-stream-track-stats: option<list<rtc-media-stream-track-stats>>,
    media-stream-stats: option<list<rtc-media-stream-stats>>,
    transport-stats: option<list<rtc-transport-stats>>,
    ice-component-stats: option<list<rtc-ice-component-stats>>,
    ice-candidate-pair-stats: option<list<rtc-ice-candidate-pair-stats>>,
    ice-candidate-stats: option<list<rtc-ice-candidate-stats>>,
    codec-stats: option<list<rtc-codec-stats>>,
    local-sdp: option<string>,
    remote-sdp: option<string>,
    timestamp: option<dom-high-res-time-stamp>,
    ice-restarts: option<u32>,
    ice-rollbacks: option<u32>,
    offerer: option<bool>,
    closed: option<bool>,
    trickled-ice-candidate-stats: option<list<rtc-ice-candidate-stats>>,
    raw-local-candidates: option<list<string>>,
    raw-remote-candidates: option<list<string>>,
  }
  resource rtc-stats-report {
  }
  resource html-element {
    as-element: func() -> element;
    as-html-image-element: func() -> option<html-image-element>;
    as-html-div-element: func() -> option<html-div-element>;
    as-html-embed-element: func() -> option<html-embed-element>;
    as-html-table-cell-element: func() -> option<html-table-cell-element>;
    as-html-table-col-element: func() -> option<html-table-col-element>;
    as-html-select-element: func() -> option<html-select-element>;
    as-html-option-element: func() -> option<html-option-element>;
    as-html-source-element: func() -> option<html-source-element>;
    as-html-pre-element: func() -> option<html-pre-element>;
    as-html-body-element: func() -> option<html-body-element>;
    as-html-span-element: func() -> option<html-span-element>;
    as-html-frame-element: func() -> option<html-frame-element>;
    as-html-data-element: func() -> option<html-data-element>;
    as-html-mod-element: func() -> option<html-mod-element>;
    as-html-frame-set-element: func() -> option<html-frame-set-element>;
    as-html-slot-element: func() -> option<html-slot-element>;
    as-html-paragraph-element: func() -> option<html-paragraph-element>;
    as-html-style-element: func() -> option<html-style-element>;
    as-html-button-element: func() -> option<html-button-element>;
    title: func() -> string;
    set-title: func(title: string);
    scroll-height: func() -> s32;
    set-scroll-height: func(scroll-height: s32);
    scroll-top: func() -> s32;
    set-scroll-top: func(scroll-top: s32);
    lang: func() -> string;
    set-lang: func(lang: string);
    dir: func() -> string;
    set-dir: func(dir: string);
    dataset: func() -> dom-string-map;
    inner-text: func() -> string;
    set-inner-text: func(inner-text: string);
    hidden: func() -> bool;
    set-hidden: func(hidden: bool);
    inert: func() -> bool;
    set-inert: func(inert: bool);
    click: func();
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func(options: option<focus-options>);
    blur: func();
    access-key: func() -> string;
    set-access-key: func(access-key: string);
    access-key-label: func() -> string;
    draggable: func() -> bool;
    set-draggable: func(draggable: bool);
    content-editable: func() -> string;
    set-content-editable: func(content-editable: string);
    is-content-editable: func() -> bool;
    spellcheck: func() -> bool;
    set-spellcheck: func(spellcheck: bool);
    style: func() -> css-style-declaration;
    offset-parent: func() -> option<element>;
    offset-top: func() -> s32;
    offset-left: func() -> s32;
    offset-width: func() -> s32;
    offset-height: func() -> s32;
    onabort-subscribe: func() -> pollable;
    onblur-subscribe: func() -> pollable;
    onfocus-subscribe: func() -> pollable;
    onauxclick-subscribe: func() -> pollable;
    oncanplay-subscribe: func() -> pollable;
    oncanplaythrough-subscribe: func() -> pollable;
    onchange-subscribe: func() -> pollable;
    onclick-subscribe: func() -> pollable;
    onclose-subscribe: func() -> pollable;
    oncontextmenu-subscribe: func() -> pollable;
    ondblclick-subscribe: func() -> pollable;
    ondrag-subscribe: func() -> pollable;
    ondragend-subscribe: func() -> pollable;
    ondragenter-subscribe: func() -> pollable;
    ondragexit-subscribe: func() -> pollable;
    ondragleave-subscribe: func() -> pollable;
    ondragover-subscribe: func() -> pollable;
    ondragstart-subscribe: func() -> pollable;
    ondrop-subscribe: func() -> pollable;
    ondurationchange-subscribe: func() -> pollable;
    onemptied-subscribe: func() -> pollable;
    onended-subscribe: func() -> pollable;
    oninput-subscribe: func() -> pollable;
    oninvalid-subscribe: func() -> pollable;
    onkeydown-subscribe: func() -> pollable;
    onkeypress-subscribe: func() -> pollable;
    onkeyup-subscribe: func() -> pollable;
    onload-subscribe: func() -> pollable;
    onloadeddata-subscribe: func() -> pollable;
    onloadedmetadata-subscribe: func() -> pollable;
    onloadend-subscribe: func() -> pollable;
    onloadstart-subscribe: func() -> pollable;
    onmousedown-subscribe: func() -> pollable;
    onmouseenter-subscribe: func() -> pollable;
    onmouseleave-subscribe: func() -> pollable;
    onmousemove-subscribe: func() -> pollable;
    onmouseout-subscribe: func() -> pollable;
    onmouseover-subscribe: func() -> pollable;
    onmouseup-subscribe: func() -> pollable;
    onwheel-subscribe: func() -> pollable;
    onpause-subscribe: func() -> pollable;
    onplay-subscribe: func() -> pollable;
    onplaying-subscribe: func() -> pollable;
    onprogress-subscribe: func() -> pollable;
    onratechange-subscribe: func() -> pollable;
    onreset-subscribe: func() -> pollable;
    onresize-subscribe: func() -> pollable;
    onscroll-subscribe: func() -> pollable;
    onseeked-subscribe: func() -> pollable;
    onseeking-subscribe: func() -> pollable;
    onselect-subscribe: func() -> pollable;
    onshow-subscribe: func() -> pollable;
    onstalled-subscribe: func() -> pollable;
    onsubmit-subscribe: func() -> pollable;
    onsuspend-subscribe: func() -> pollable;
    ontimeupdate-subscribe: func() -> pollable;
    onvolumechange-subscribe: func() -> pollable;
    onwaiting-subscribe: func() -> pollable;
    onselectstart-subscribe: func() -> pollable;
    ontoggle-subscribe: func() -> pollable;
    onpointercancel-subscribe: func() -> pollable;
    onpointerdown-subscribe: func() -> pollable;
    onpointerup-subscribe: func() -> pollable;
    onpointermove-subscribe: func() -> pollable;
    onpointerout-subscribe: func() -> pollable;
    onpointerover-subscribe: func() -> pollable;
    onpointerenter-subscribe: func() -> pollable;
    onpointerleave-subscribe: func() -> pollable;
    ongotpointercapture-subscribe: func() -> pollable;
    onlostpointercapture-subscribe: func() -> pollable;
    onanimationcancel-subscribe: func() -> pollable;
    onanimationend-subscribe: func() -> pollable;
    onanimationiteration-subscribe: func() -> pollable;
    onanimationstart-subscribe: func() -> pollable;
    ontransitioncancel-subscribe: func() -> pollable;
    ontransitionend-subscribe: func() -> pollable;
    ontransitionrun-subscribe: func() -> pollable;
    ontransitionstart-subscribe: func() -> pollable;
    onwebkitanimationend-subscribe: func() -> pollable;
    onwebkitanimationiteration-subscribe: func() -> pollable;
    onwebkitanimationstart-subscribe: func() -> pollable;
    onwebkittransitionend-subscribe: func() -> pollable;
    oncopy-subscribe: func() -> pollable;
    oncut-subscribe: func() -> pollable;
    onpaste-subscribe: func() -> pollable;
    ontouchstart-subscribe: func() -> pollable;
    ontouchend-subscribe: func() -> pollable;
    ontouchmove-subscribe: func() -> pollable;
    ontouchcancel-subscribe: func() -> pollable;
    onerror-subscribe: func() -> pollable;
    as-html-unknown-element: func() -> option<html-unknown-element>;
    as-html-canvas-element: func() -> option<html-canvas-element>;
    as-html-script-element: func() -> option<html-script-element>;
    as-htmlo-list-element: func() -> option<htmlo-list-element>;
    as-html-heading-element: func() -> option<html-heading-element>;
    as-html-track-element: func() -> option<html-track-element>;
    as-html-label-element: func() -> option<html-label-element>;
    as-html-quote-element: func() -> option<html-quote-element>;
    as-html-opt-group-element: func() -> option<html-opt-group-element>;
    as-htmld-list-element: func() -> option<htmld-list-element>;
    as-html-menu-item-element: func() -> option<html-menu-item-element>;
    as-htmli-frame-element: func() -> option<htmli-frame-element>;
    as-html-text-area-element: func() -> option<html-text-area-element>;
    as-html-meter-element: func() -> option<html-meter-element>;
    as-htmlu-list-element: func() -> option<htmlu-list-element>;
    as-html-table-caption-element: func() -> option<html-table-caption-element>;
    as-html-font-element: func() -> option<html-font-element>;
    as-html-meta-element: func() -> option<html-meta-element>;
    as-html-table-row-element: func() -> option<html-table-row-element>;
    as-html-time-element: func() -> option<html-time-element>;
    as-html-map-element: func() -> option<html-map-element>;
    as-html-table-element: func() -> option<html-table-element>;
    as-html-head-element: func() -> option<html-head-element>;
    namespace-uri: func() -> string;
    prefix: func() -> string;
    local-name: func() -> string;
    tag-name: func() -> string;
    id: func() -> string;
    set-id: func(id: string);
    class-name: func() -> string;
    set-class-name: func(class-name: string);
    class-list: func() -> dom-token-list;
    attributes: func() -> named-node-map;
    get-attribute-names: func() -> list<string>;
    get-attribute: func(name: string) -> string;
    get-attribute-ns: func(namespace: string, local-name: string) -> string;
    toggle-attribute: func(name: string, force: option<bool>) -> bool;
    set-attribute: func(name: string, value: string);
    set-attribute-ns: func(namespace: string, name: string, value: string);
    remove-attribute: func(name: string);
    remove-attribute-ns: func(namespace: string, local-name: string);
    has-attribute: func(name: string) -> bool;
    has-attribute-ns: func(namespace: string, local-name: string) -> bool;
    has-attributes: func() -> bool;
    closest: func(selector: string) -> option<element>;
    matches: func(selector: string) -> bool;
    webkit-matches-selector: func(selector: string) -> bool;
    get-elements-by-tag-name: func(local-name: string) -> html-collection;
    get-elements-by-tag-name-ns: func(namespace: string, local-name: string) -> html-collection;
    get-elements-by-class-name: func(class-names: string) -> html-collection;
    get-elements-with-grid: func() -> list<element>;
    insert-adjacent-element: func(where: string, element: borrow<element>) -> option<element>;
    insert-adjacent-text: func(where: string, data: string);
    font-size-inflation: func() -> f32;
    set-pointer-capture: func(pointer-id: s32);
    release-pointer-capture: func(pointer-id: s32);
    has-pointer-capture: func(pointer-id: s32) -> bool;
    set-capture: func(retarget-to-element: option<bool>);
    release-capture: func();
    set-capture-always: func(retarget-to-element: option<bool>);
    get-attribute-node: func(name: string) -> option<attr>;
    set-attribute-node: func(new-attr: borrow<attr>) -> option<attr>;
    remove-attribute-node: func(old-attr: borrow<attr>) -> option<attr>;
    get-attribute-node-ns: func(namespace-uri: string, local-name: string) -> option<attr>;
    set-attribute-node-ns: func(new-attr: borrow<attr>) -> option<attr>;
    scroll-by-no-flush: func(dx: s32, dy: s32) -> bool;
    get-as-flex-container: func() -> option<flex>;
    get-grid-fragments: func() -> list<grid>;
    get-transform-to-ancestor: func(ancestor: borrow<element>) -> dom-matrix-read-only;
    get-transform-to-parent: func() -> dom-matrix-read-only;
    get-transform-to-viewport: func() -> dom-matrix-read-only;
    as-html-link-element: func() -> option<html-link-element>;
    as-html-param-element: func() -> option<html-param-element>;
    as-html-html-element: func() -> option<html-html-element>;
    as-html-dialog-element: func() -> option<html-dialog-element>;
    as-html-menu-element: func() -> option<html-menu-element>;
    as-html-directory-element: func() -> option<html-directory-element>;
    as-html-media-element: func() -> option<html-media-element>;
    as-html-details-element: func() -> option<html-details-element>;
    as-html-form-element: func() -> option<html-form-element>;
    as-html-template-element: func() -> option<html-template-element>;
    as-html-title-element: func() -> option<html-title-element>;
    as-html-output-element: func() -> option<html-output-element>;
    as-html-anchor-element: func() -> option<html-anchor-element>;
    as-html-input-element: func() -> option<html-input-element>;
    as-htmlbr-element: func() -> option<htmlbr-element>;
    as-htmlli-element: func() -> option<htmlli-element>;
    as-htmlhr-element: func() -> option<htmlhr-element>;
    as-html-legend-element: func() -> option<html-legend-element>;
    as-html-field-set-element: func() -> option<html-field-set-element>;
    as-html-picture-element: func() -> option<html-picture-element>;
    as-html-base-element: func() -> option<html-base-element>;
    as-html-object-element: func() -> option<html-object-element>;
    as-html-table-section-element: func() -> option<html-table-section-element>;
    as-html-area-element: func() -> option<html-area-element>;
    as-html-progress-element: func() -> option<html-progress-element>;
    as-html-data-list-element: func() -> option<html-data-list-element>;
  }
  resource html-unknown-element {
    as-html-element: func() -> html-element;
  }
  record idb-file-metadata-parameters {
    size: option<bool>,
    last-modified: option<bool>,
  }
  resource idb-file-handle {
    as-event-target: func() -> event-target;
    mutable-file: func() -> option<idb-mutable-file>;
    file-handle: func() -> option<idb-mutable-file>;
    mode: func() -> file-mode;
    active: func() -> bool;
    location: func() -> u64;
    set-location: func(location: u64);
    get-metadata: func(parameters: option<idb-file-metadata-parameters>) -> option<idb-file-request>;
    read-as-array-buffer: func(size: u64) -> option<idb-file-request>;
    read-as-text: func(size: u64, encoding: option<string>) -> option<idb-file-request>;
    write: func(value: array-buffer-or-array-buffer-view-or-blob-or-string) -> option<idb-file-request>;
    append: func(value: array-buffer-or-array-buffer-view-or-blob-or-string) -> option<idb-file-request>;
    truncate: func(size: option<u64>) -> option<idb-file-request>;
    flush: func() -> option<idb-file-request>;
    abort: func();
    oncomplete-subscribe: func() -> pollable;
    onabort-subscribe: func() -> pollable;
    onerror-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  variant array-buffer-or-array-buffer-view-or-blob-or-string {
    array-buffer(array-buffer),
    array-buffer-view(array-buffer-view),
    blob(borrow<blob>),
    %string(string),
  }
  record open-window-event-detail {
    url: option<string>,
    name: option<string>,
    features: option<string>,
    frame-element: option<option<borrow<node>>>,
  }
  record dom-window-resize-event-detail {
    width: option<s32>,
    height: option<s32>,
  }
  resource performance-server-timing {
    name: func() -> string;
    duration: func() -> dom-high-res-time-stamp;
    description: func() -> string;
    to-json: func() -> object;
  }
  resource svgfe-point-light-element {
    as-svg-element: func() -> svg-element;
    x: func() -> svg-animated-number;
    y: func() -> svg-animated-number;
    z: func() -> svg-animated-number;
    id: func() -> string;
    set-id: func(id: string);
    class-name: func() -> svg-animated-string;
    dataset: func() -> dom-string-map;
    style: func() -> css-style-declaration;
    owner-svg-element: func() -> option<svgsvg-element>;
    viewport-element: func() -> option<svg-element>;
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func();
    blur: func();
  }
  resource svg-style-element {
    as-svg-element: func() -> svg-element;
    xmlspace: func() -> string;
    set-xmlspace: func(xmlspace: string);
    %type: func() -> string;
    set-type: func(%type: string);
    media: func() -> string;
    set-media: func(media: string);
    title: func() -> string;
    set-title: func(title: string);
    id: func() -> string;
    set-id: func(id: string);
    class-name: func() -> svg-animated-string;
    dataset: func() -> dom-string-map;
    style: func() -> css-style-declaration;
    owner-svg-element: func() -> option<svgsvg-element>;
    viewport-element: func() -> option<svg-element>;
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func();
    blur: func();
    sheet: func() -> option<style-sheet>;
  }
  resource css-keyframes-rule {
    as-css-rule: func() -> css-rule;
    name: func() -> string;
    set-name: func(name: string);
    css-rules: func() -> css-rule-list;
    append-rule: func(rule: string);
    delete-rule: func(select: string);
    find-rule: func(select: string) -> option<css-keyframe-rule>;
    STYLE-RULE: static func() -> u16;
    CHARSET-RULE: static func() -> u16;
    IMPORT-RULE: static func() -> u16;
    MEDIA-RULE: static func() -> u16;
    FONT-FACE-RULE: static func() -> u16;
    PAGE-RULE: static func() -> u16;
    NAMESPACE-RULE: static func() -> u16;
    %type: func() -> u16;
    css-text: func() -> string;
    set-css-text: func(css-text: string);
    parent-rule: func() -> option<css-rule>;
    parent-style-sheet: func() -> option<css-style-sheet>;
  }
  enum rtc-rtp-transceiver-direction {
    sendrecv,
    sendonly,
    recvonly,
    inactive,
  }
  record rtc-rtp-transceiver-init {
    direction: option<rtc-rtp-transceiver-direction>,
    streams: option<list<borrow<media-stream>>>,
    send-encodings: option<list<rtc-rtp-encoding-parameters>>,
  }
  resource rtc-rtp-transceiver {
    mid: func() -> string;
    sender: func() -> rtc-rtp-sender;
    receiver: func() -> rtc-rtp-receiver;
    stopped: func() -> bool;
    direction: func() -> rtc-rtp-transceiver-direction;
    set-direction: func(direction: rtc-rtp-transceiver-direction);
    current-direction: func() -> option<rtc-rtp-transceiver-direction>;
    stop: func();
    set-codec-preferences: func(codecs: list<rtc-rtp-codec-capability>);
    set-remote-track-id: func(track-id: string);
    remote-track-id-is: func(track-id: string) -> bool;
    get-remote-track-id: func() -> string;
    set-add-track-magic: func();
    add-track-magic: func() -> bool;
    should-remove: func() -> bool;
    set-should-remove: func(should-remove: bool);
    set-current-direction: func(direction: rtc-rtp-transceiver-direction);
    set-direction-internal: func(direction: rtc-rtp-transceiver-direction);
    set-mid: func(mid: string);
    unset-mid: func();
    set-stopped: func();
    get-kind: func() -> string;
    has-been-used-to-send: func() -> bool;
    sync: func();
    insert-dtmf: func(tones: string, duration: option<u32>, inter-tone-gap: option<u32>);
  }
  record rtc-ice-candidate-init {
    candidate: string,
    sdp-mid: option<string>,
    sdp-m-line-index: option<u16>,
  }
  resource rtc-ice-candidate {
    candidate: func() -> string;
    set-candidate: func(candidate: string);
    sdp-mid: func() -> string;
    set-sdp-mid: func(sdp-mid: string);
    sdp-m-line-index: func() -> u16;
    set-sdp-m-line-index: func(sdp-m-line-index: u16);
    to-json: func() -> object;
  }
  resource scroll-area-event {
    as-ui-event: func() -> ui-event;
    x: func() -> f32;
    y: func() -> f32;
    width: func() -> f32;
    height: func() -> f32;
    init-scroll-area-event: func(%type: string, can-bubble: option<bool>, cancelable: option<bool>, view: option<option<borrow<window>>>, detail: option<s32>, x: option<f32>, y: option<f32>, width: option<f32>, height: option<f32>);
    view: func() -> option<window-proxy>;
    detail: func() -> s32;
    init-ui-event: func(a-type: string, a-can-bubble: option<bool>, a-cancelable: option<bool>, a-view: option<option<borrow<window>>>, a-detail: option<s32>);
  }
  resource html-canvas-element {
    as-html-element: func() -> html-element;
    width: func() -> u32;
    set-width: func(width: u32);
    height: func() -> u32;
    set-height: func(height: u32);
    get-context: func(context-id: string, context-options: any) -> option<ns-i-supports>;
    to-data-url: func(%type: option<string>, encoder-options: any) -> string;
    to-blob: func(callback: borrow<blob-callback>, %type: option<string>, encoder-options: any);
    transfer-control-to-offscreen: func() -> offscreen-canvas;
    capture-stream: func(frame-request-rate: option<f64>) -> media-stream;
  }
  resource scroll-box-object {
    as-box-object: func() -> box-object;
    scroll-to: func(x: s32, y: s32);
    scroll-by: func(dx: s32, dy: s32);
    scroll-by-index: func(dindexes: s32);
    scroll-to-element: func(child: borrow<element>);
    position-x: func() -> s32;
    position-y: func() -> s32;
    scrolled-width: func() -> s32;
    scrolled-height: func() -> s32;
    ensure-element-is-visible: func(child: borrow<element>);
  }
  resource xml-document {
    as-document: func() -> document;
    load: func(url: string) -> bool;
    async: func() -> bool;
    set-async: func(async: bool);
    implementation: func() -> dom-implementation;
    url: func() -> string;
    document-uri: func() -> string;
    compat-mode: func() -> string;
    character-set: func() -> string;
    charset: func() -> string;
    input-encoding: func() -> string;
    content-type: func() -> string;
    doctype: func() -> option<document-type>;
    document-element: func() -> option<element>;
    get-elements-by-tag-name: func(local-name: string) -> html-collection;
    get-elements-by-tag-name-ns: func(namespace: string, local-name: string) -> html-collection;
    get-elements-by-class-name: func(class-names: string) -> html-collection;
    get-element-by-id: func(element-id: string) -> option<element>;
    create-element: func(local-name: string, options: option<element-creation-options-or-string>) -> element;
    create-element-ns: func(namespace: string, qualified-name: string, options: option<element-creation-options-or-string>) -> element;
    create-document-fragment: func() -> document-fragment;
    create-text-node: func(data: string) -> text;
    create-comment: func(data: string) -> comment;
    create-processing-instruction: func(target: string, data: string) -> processing-instruction;
    import-node: func(node: borrow<node>, deep: option<bool>) -> node;
    adopt-node: func(node: borrow<node>) -> node;
    create-event: func(%interface: string) -> event;
    create-range: func() -> range;
    create-node-iterator: func(root: borrow<node>, what-to-show: option<u32>, filter: option<option<borrow<node-filter>>>) -> node-iterator;
    create-tree-walker: func(root: borrow<node>, what-to-show: option<u32>, filter: option<option<borrow<node-filter>>>) -> tree-walker;
    create-cdata-section: func(data: string) -> cdata-section;
    create-attribute: func(name: string) -> attr;
    create-attribute-ns: func(namespace: string, name: string) -> attr;
  }
  resource file-system-directory-entry {
    as-file-system-entry: func() -> file-system-entry;
    create-reader: func() -> file-system-directory-reader;
    get-file: func(path: option<string>, options: option<file-system-flags>, success-callback: option<borrow<file-system-entry-callback>>, error-callback: option<borrow<error-callback>>);
    get-directory: func(path: option<string>, options: option<file-system-flags>, success-callback: option<borrow<file-system-entry-callback>>, error-callback: option<borrow<error-callback>>);
    is-file: func() -> bool;
    is-directory: func() -> bool;
    name: func() -> string;
    full-path: func() -> string;
    filesystem: func() -> file-system;
    get-parent: func(success-callback: option<borrow<file-system-entry-callback>>, error-callback: option<borrow<error-callback>>);
  }
  resource mouse-scroll-event {
    as-mouse-event: func() -> mouse-event;
    HORIZONTAL-AXIS: static func() -> s32;
    VERTICAL-AXIS: static func() -> s32;
    axis: func() -> s32;
    init-mouse-scroll-event: func(%type: string, can-bubble: option<bool>, cancelable: option<bool>, view: option<option<borrow<window>>>, detail: option<s32>, screen-x: option<s32>, screen-y: option<s32>, client-x: option<s32>, client-y: option<s32>, ctrl-key: option<bool>, alt-key: option<bool>, shift-key: option<bool>, meta-key: option<bool>, button: option<s16>, related-target: option<option<borrow<event-target>>>, axis: option<s32>);
    screen-x: func() -> s32;
    screen-y: func() -> s32;
    client-x: func() -> s32;
    client-y: func() -> s32;
    x: func() -> s32;
    y: func() -> s32;
    offset-x: func() -> s32;
    offset-y: func() -> s32;
    ctrl-key: func() -> bool;
    shift-key: func() -> bool;
    alt-key: func() -> bool;
    meta-key: func() -> bool;
    button: func() -> s16;
    buttons: func() -> u16;
    related-target: func() -> option<event-target>;
    region: func() -> string;
    movement-x: func() -> s32;
    movement-y: func() -> s32;
    init-mouse-event: func(type-arg: string, can-bubble-arg: option<bool>, cancelable-arg: option<bool>, view-arg: option<option<borrow<window>>>, detail-arg: option<s32>, screen-x-arg: option<s32>, screen-y-arg: option<s32>, client-x-arg: option<s32>, client-y-arg: option<s32>, ctrl-key-arg: option<bool>, alt-key-arg: option<bool>, shift-key-arg: option<bool>, meta-key-arg: option<bool>, button-arg: option<s16>, related-target-arg: option<option<borrow<event-target>>>);
    get-modifier-state: func(key-arg: string) -> bool;
  }
  resource svg-element {
    as-element: func() -> element;
    as-svg-animation-element: func() -> option<svg-animation-element>;
    as-svgfe-tile-element: func() -> option<svgfe-tile-element>;
    as-svg-clip-path-element: func() -> option<svg-clip-path-element>;
    as-svgfe-morphology-element: func() -> option<svgfe-morphology-element>;
    as-svgfe-color-matrix-element: func() -> option<svgfe-color-matrix-element>;
    as-svgfe-blend-element: func() -> option<svgfe-blend-element>;
    as-svgfe-diffuse-lighting-element: func() -> option<svgfe-diffuse-lighting-element>;
    as-svg-view-element: func() -> option<svg-view-element>;
    as-svg-gradient-element: func() -> option<svg-gradient-element>;
    as-svgfe-drop-shadow-element: func() -> option<svgfe-drop-shadow-element>;
    as-svgfe-flood-element: func() -> option<svgfe-flood-element>;
    as-svg-style-element: func() -> option<svg-style-element>;
    as-svgfe-offset-element: func() -> option<svgfe-offset-element>;
    as-svgfe-point-light-element: func() -> option<svgfe-point-light-element>;
    as-svgfe-merge-node-element: func() -> option<svgfe-merge-node-element>;
    as-svgfe-merge-element: func() -> option<svgfe-merge-element>;
    as-svgfe-distant-light-element: func() -> option<svgfe-distant-light-element>;
    as-svgfe-convolve-matrix-element: func() -> option<svgfe-convolve-matrix-element>;
    id: func() -> string;
    set-id: func(id: string);
    class-name: func() -> svg-animated-string;
    dataset: func() -> dom-string-map;
    style: func() -> css-style-declaration;
    owner-svg-element: func() -> option<svgsvg-element>;
    viewport-element: func() -> option<svg-element>;
    tab-index: func() -> s32;
    set-tab-index: func(tab-index: s32);
    focus: func();
    blur: func();
    onabort-subscribe: func() -> pollable;
    onblur-subscribe: func() -> pollable;
    onfocus-subscribe: func() -> pollable;
    onauxclick-subscribe: func() -> pollable;
    oncanplay-subscribe: func() -> pollable;
    oncanplaythrough-subscribe: func() -> pollable;
    onchange-subscribe: func() -> pollable;
    onclick-subscribe: func() -> pollable;
    onclose-subscribe: func() -> pollable;
    oncontextmenu-subscribe: func() -> pollable;
    ondblclick-subscribe: func() -> pollable;
    ondrag-subscribe: func() -> pollable;
    ondragend-subscribe: func() -> pollable;
    ondragenter-subscribe: func() -> pollable;
    ondragexit-subscribe: func() -> pollable;
    ondragleave-subscribe: func() -> pollable;
    ondragover-subscribe: func() -> pollable;
    ondragstart-subscribe: func() -> pollable;
    ondrop-subscribe: func() -> pollable;
    ondurationchange-subscribe: func() -> pollable;
    onemptied-subscribe: func() -> pollable;
    onended-subscribe: func() -> pollable;
    oninput-subscribe: func() -> pollable;
    oninvalid-subscribe: func() -> pollable;
    onkeydown-subscribe: func() -> pollable;
    onkeypress-subscribe: func() -> pollable;
    onkeyup-subscribe: func() -> pollable;
    onload-subscribe: func() -> pollable;
    onloadeddata-subscribe: func() -> pollable;
    onloadedmetadata-subscribe: func() -> pollable;
    onloadend-subscribe: func() -> pollable;
    onloadstart-subscribe: func() -> pollable;
    onmousedown-subscribe: func() -> pollable;
    onmouseenter-subscribe: func() -> pollable;
    onmouseleave-subscribe: func() -> pollable;
    onmousemove-subscribe: func() -> pollable;
    onmouseout-subscribe: func() -> pollable;
    onmouseover-subscribe: func() -> pollable;
    onmouseup-subscribe: func() -> pollable;
    onwheel-subscribe: func() -> pollable;
    onpause-subscribe: func() -> pollable;
    onplay-subscribe: func() -> pollable;
    onplaying-subscribe: func() -> pollable;
    onprogress-subscribe: func() -> pollable;
    onratechange-subscribe: func() -> pollable;
    onreset-subscribe: func() -> pollable;
    onresize-subscribe: func() -> pollable;
    onscroll-subscribe: func() -> pollable;
    onseeked-subscribe: func() -> pollable;
    onseeking-subscribe: func() -> pollable;
    onselect-subscribe: func() -> pollable;
    onshow-subscribe: func() -> pollable;
    onstalled-subscribe: func() -> pollable;
    onsubmit-subscribe: func() -> pollable;
    onsuspend-subscribe: func() -> pollable;
    ontimeupdate-subscribe: func() -> pollable;
    onvolumechange-subscribe: func() -> pollable;
    onwaiting-subscribe: func() -> pollable;
    onselectstart-subscribe: func() -> pollable;
    ontoggle-subscribe: func() -> pollable;
    onpointercancel-subscribe: func() -> pollable;
    onpointerdown-subscribe: func() -> pollable;
    onpointerup-subscribe: func() -> pollable;
    onpointermove-subscribe: func() -> pollable;
    onpointerout-subscribe: func() -> pollable;
    onpointerover-subscribe: func() -> pollable;
    onpointerenter-subscribe: func() -> pollable;
    onpointerleave-subscribe: func() -> pollable;
    ongotpointercapture-subscribe: func() -> pollable;
    onlostpointercapture-subscribe: func() -> pollable;
    onanimationcancel-subscribe: func() -> pollable;
    onanimationend-subscribe: func() -> pollable;
    onanimationiteration-subscribe: func() -> pollable;
    onanimationstart-subscribe: func() -> pollable;
    ontransitioncancel-subscribe: func() -> pollable;
    ontransitionend-subscribe: func() -> pollable;
    ontransitionrun-subscribe: func() -> pollable;
    ontransitionstart-subscribe: func() -> pollable;
    onwebkitanimationend-subscribe: func() -> pollable;
    onwebkitanimationiteration-subscribe: func() -> pollable;
    onwebkitanimationstart-subscribe: func() -> pollable;
    onwebkittransitionend-subscribe: func() -> pollable;
    oncopy-subscribe: func() -> pollable;
    oncut-subscribe: func() -> pollable;
    onpaste-subscribe: func() -> pollable;
    ontouchstart-subscribe: func() -> pollable;
    ontouchend-subscribe: func() -> pollable;
    ontouchmove-subscribe: func() -> pollable;
    ontouchcancel-subscribe: func() -> pollable;
    onerror-subscribe: func() -> pollable;
    as-svgfe-specular-lighting-element: func() -> option<svgfe-specular-lighting-element>;
    as-svg-desc-element: func() -> option<svg-desc-element>;
    as-svg-pattern-element: func() -> option<svg-pattern-element>;
    as-svg-filter-element: func() -> option<svg-filter-element>;
    as-svgm-path-element: func() -> option<svgm-path-element>;
    namespace-uri: func() -> string;
    prefix: func() -> string;
    local-name: func() -> string;
    tag-name: func() -> string;
    // id: func() -> string;
    // set-id: func(id: string);
    // class-name: func() -> string;
    set-class-name: func(class-name: string);
    class-list: func() -> dom-token-list;
    attributes: func() -> named-node-map;
    get-attribute-names: func() -> list<string>;
    get-attribute: func(name: string) -> string;
    get-attribute-ns: func(namespace: string, local-name: string) -> string;
    toggle-attribute: func(name: string, force: option<bool>) -> bool;
    set-attribute: func(name: string, value: string);
    set-attribute-ns: func(namespace: string, name: string, value: string);
    remove-attribute: func(name: string);
    remove-attribute-ns: func(namespace: string, local-name: string);
    has-attribute: func(name: string) -> bool;
    has-attribute-ns: func(namespace: string, local-name: string) -> bool;
    has-attributes: func() -> bool;
    closest: func(selector: string) -> option<element>;
    matches: func(selector: string) -> bool;
    webkit-matches-selector: func(selector: string) -> bool;
    get-elements-by-tag-name: func(local-name: string) -> html-collection;
    get-elements-by-tag-name-ns: func(namespace: string, local-name: string) -> html-collection;
    get-elements-by-class-name: func(class-names: string) -> html-collection;
    get-elements-with-grid: func() -> list<element>;
    insert-adjacent-element: func(where: string, element: borrow<element>) -> option<element>;
    insert-adjacent-text: func(where: string, data: string);
    font-size-inflation: func() -> f32;
    set-pointer-capture: func(pointer-id: s32);
    release-pointer-capture: func(pointer-id: s32);
    has-pointer-capture: func(pointer-id: s32) -> bool;
    set-capture: func(retarget-to-element: option<bool>);
    release-capture: func();
    set-capture-always: func(retarget-to-element: option<bool>);
    get-attribute-node: func(name: string) -> option<attr>;
    set-attribute-node: func(new-attr: borrow<attr>) -> option<attr>;
    remove-attribute-node: func(old-attr: borrow<attr>) -> option<attr>;
    get-attribute-node-ns: func(namespace-uri: string, local-name: string) -> option<attr>;
    set-attribute-node-ns: func(new-attr: borrow<attr>) -> option<attr>;
    scroll-by-no-flush: func(dx: s32, dy: s32) -> bool;
    get-as-flex-container: func() -> option<flex>;
    get-grid-fragments: func() -> list<grid>;
    get-transform-to-ancestor: func(ancestor: borrow<element>) -> dom-matrix-read-only;
    get-transform-to-parent: func() -> dom-matrix-read-only;
    get-transform-to-viewport: func() -> dom-matrix-read-only;
    as-svg-metadata-element: func() -> option<svg-metadata-element>;
    as-svg-stop-element: func() -> option<svg-stop-element>;
    as-svg-marker-element: func() -> option<svg-marker-element>;
    as-svgfe-composite-element: func() -> option<svgfe-composite-element>;
    as-svg-mask-element: func() -> option<svg-mask-element>;
    as-svg-symbol-element: func() -> option<svg-symbol-element>;
    as-svg-component-transfer-function-element: func() -> option<svg-component-transfer-function-element>;
    as-svgfe-turbulence-element: func() -> option<svgfe-turbulence-element>;
    as-svgfe-image-element: func() -> option<svgfe-image-element>;
    as-svgfe-spot-light-element: func() -> option<svgfe-spot-light-element>;
    as-svg-graphics-element: func() -> option<svg-graphics-element>;
    as-svgfe-component-transfer-element: func() -> option<svgfe-component-transfer-element>;
    as-svg-title-element: func() -> option<svg-title-element>;
    as-svgfe-gaussian-blur-element: func() -> option<svgfe-gaussian-blur-element>;
    as-svgfe-displacement-map-element: func() -> option<svgfe-displacement-map-element>;
    as-svg-script-element: func() -> option<svg-script-element>;
  }
  resource response {
    error: static func() -> response;
    redirect: static func(url: string, status: option<u16>) -> response;
    %type: func() -> response-type;
    url: func() -> string;
    redirected: func() -> bool;
    status: func() -> u16;
    ok: func() -> bool;
    status-text: func() -> string;
    headers: func() -> headers;
    clone: func() -> response;
    clone-unfiltered: func() -> response;
    body-used: func() -> bool;
    array-buffer: func() -> array-buffer;
    blob: func() -> blob;
    form-data: func() -> form-data;
    json: func() -> json;
    text: func() -> string;
    body: func() -> option<readable-stream>;
  }
  record response-init {
    status: option<u16>,
    status-text: option<string>,
    headers: option<headers-init>,
  }
  enum response-type {
    basic,
    cors,
    default,
    error,
    opaque,
    opaqueredirect,
  }
  resource storage-manager {
    persisted: func() -> bool;
    persist: func() -> bool;
    estimate: func() -> storage-estimate;
    get-directory: func() -> file-system-directory-handle;
  }
  record storage-estimate {
    usage: option<u64>,
    quota: option<u64>,
  }
  resource html-script-element {
    as-html-element: func() -> html-element;
    src: func() -> string;
    set-src: func(src: string);
    %type: func() -> string;
    set-type: func(%type: string);
    no-module: func() -> bool;
    set-no-module: func(no-module: bool);
    charset: func() -> string;
    set-charset: func(charset: string);
    async: func() -> bool;
    set-async: func(async: bool);
    defer: func() -> bool;
    set-defer: func(defer: bool);
    cross-origin: func() -> string;
    set-cross-origin: func(cross-origin: string);
    text: func() -> string;
    set-text: func(text: string);
    event: func() -> string;
    set-event: func(event: string);
    html-for: func() -> string;
    set-html-for: func(html-for: string);
    integrity: func() -> string;
    set-integrity: func(integrity: string);
  }
  record server-socket-options {
    binary-type: option<tcp-socket-binary-type>,
  }
  resource tcp-server-socket {
    as-event-target: func() -> event-target;
    local-port: func() -> u16;
    onconnect-subscribe: func() -> pollable;
    onerror-subscribe: func() -> pollable;
    close: func();
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource htmlo-list-element {
    as-html-element: func() -> html-element;
    reversed: func() -> bool;
    set-reversed: func(reversed: bool);
    start: func() -> s32;
    set-start: func(start: s32);
    %type: func() -> string;
    set-type: func(%type: string);
    compact: func() -> bool;
    set-compact: func(compact: bool);
  }
  resource html-heading-element {
    as-html-element: func() -> html-element;
    align: func() -> string;
    set-align: func(align: string);
  }
  resource svgfe-specular-lighting-element {
    as-svg-element: func() -> svg-element;
    in1: func() -> svg-animated-string;
    surface-scale: func() -> svg-animated-number;
    specular-constant: func() -> svg-animated-number;
    specular-exponent: func() -> svg-animated-number;
    kernel-unit-length-x: func() -> svg-animated-number;
    kernel-unit-length-y: func() -> svg-animated-number;
    x: func() -> svg-animated-length;
    y: func() -> svg-animated-length;
    width: func() -> svg-animated-length;
    height: func() -> svg-animated-length;
    %result: func() -> svg-animated-string;
  }
  resource html-track-element {
    as-html-element: func() -> html-element;
    kind: func() -> string;
    set-kind: func(kind: string);
    src: func() -> string;
    set-src: func(src: string);
    srclang: func() -> string;
    set-srclang: func(srclang: string);
    label: func() -> string;
    set-label: func(label: string);
    default: func() -> bool;
    set-default: func(default: bool);
    NONE: static func() -> u16;
    LOADING: static func() -> u16;
    LOADED: static func() -> u16;
    ERROR: static func() -> u16;
    ready-state: func() -> u16;
    track: func() -> option<text-track>;
  }
  resource tree-view {
    row-count: func() -> s32;
    selection: func() -> option<ns-i-tree-selection>;
    set-selection: func(selection: option<ns-i-tree-selection>);
    get-row-properties: func(row: s32) -> string;
    get-cell-properties: func(row: s32, column: borrow<tree-column>) -> string;
    get-column-properties: func(column: borrow<tree-column>) -> string;
    is-container: func(row: s32) -> bool;
    is-container-open: func(row: s32) -> bool;
    is-container-empty: func(row: s32) -> bool;
    is-separator: func(row: s32) -> bool;
    is-sorted: func() -> bool;
    DROP-BEFORE: static func() -> s16;
    DROP-ON: static func() -> s16;
    DROP-AFTER: static func() -> s16;
    can-drop: func(row: s32, orientation: s32, data-transfer: option<borrow<data-transfer>>) -> bool;
    drop: func(row: s32, orientation: s32, data-transfer: option<borrow<data-transfer>>);
    get-parent-index: func(row: s32) -> s32;
    has-next-sibling: func(row: s32, after-index: s32) -> bool;
    get-level: func(row: s32) -> s32;
    get-image-src: func(row: s32, column: borrow<tree-column>) -> string;
    get-cell-value: func(row: s32, column: borrow<tree-column>) -> string;
    get-cell-text: func(row: s32, column: borrow<tree-column>) -> string;
    set-tree: func(tree: option<borrow<tree-box-object>>);
    toggle-open-state: func(row: s32);
    cycle-header: func(column: borrow<tree-column>);
    selection-changed: func();
    cycle-cell: func(row: s32, column: borrow<tree-column>);
    is-editable: func(row: s32, column: borrow<tree-column>) -> bool;
    is-selectable: func(row: s32, column: borrow<tree-column>) -> bool;
    set-cell-value: func(row: s32, column: borrow<tree-column>, value: string);
    set-cell-text: func(row: s32, column: borrow<tree-column>, value: string);
    perform-action: func(action: string);
    perform-action-on-row: func(action: string, row: s32);
    perform-action-on-cell: func(action: string, row: s32, column: borrow<tree-column>);
  }
  resource html-label-element {
    as-html-element: func() -> html-element;
    form: func() -> option<html-form-element>;
    html-for: func() -> string;
    set-html-for: func(html-for: string);
    control: func() -> option<html-element>;
  }
  resource style-sheet-list {
    length: func() -> u32;
    item: func(index: u32) -> option<style-sheet>;
  }
  resource presentation {
    default-request: func() -> option<presentation-request>;
    set-default-request: func(default-request: option<presentation-request>);
    receiver: func() -> option<presentation-receiver>;
  }
  enum navigation-type {
    navigate,
    reload,
    back-forward,
    prerender,
  }
  resource performance-navigation-timing {
    as-performance-resource-timing: func() -> performance-resource-timing;
    unload-event-start: func() -> dom-high-res-time-stamp;
    unload-event-end: func() -> dom-high-res-time-stamp;
    dom-interactive: func() -> dom-high-res-time-stamp;
    dom-content-loaded-event-start: func() -> dom-high-res-time-stamp;
    dom-content-loaded-event-end: func() -> dom-high-res-time-stamp;
    dom-complete: func() -> dom-high-res-time-stamp;
    load-event-start: func() -> dom-high-res-time-stamp;
    load-event-end: func() -> dom-high-res-time-stamp;
    %type: func() -> navigation-type;
    redirect-count: func() -> u16;
    to-json: func() -> object;
  }
  resource html-quote-element {
    as-html-element: func() -> html-element;
    cite: func() -> string;
    set-cite: func(cite: string);
  }
  resource shared-worker {
    as-event-target: func() -> event-target;
    port: func() -> message-port;
    onerror-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource svgfe-func-b-element {
    as-svg-component-transfer-function-element: func() -> svg-component-transfer-function-element;
    SVG-FECOMPONENTTRANSFER-TYPE-UNKNOWN: static func() -> u16;
    SVG-FECOMPONENTTRANSFER-TYPE-IDENTITY: static func() -> u16;
    SVG-FECOMPONENTTRANSFER-TYPE-TABLE: static func() -> u16;
    SVG-FECOMPONENTTRANSFER-TYPE-DISCRETE: static func() -> u16;
    SVG-FECOMPONENTTRANSFER-TYPE-LINEAR: static func() -> u16;
    SVG-FECOMPONENTTRANSFER-TYPE-GAMMA: static func() -> u16;
    %type: func() -> svg-animated-enumeration;
    table-values: func() -> svg-animated-number-list;
    slope: func() -> svg-animated-number;
    intercept: func() -> svg-animated-number;
    amplitude: func() -> svg-animated-number;
    exponent: func() -> svg-animated-number;
    offset: func() -> svg-animated-number;
  }
  resource text-clause {
    start-offset: func() -> s32;
    end-offset: func() -> s32;
    is-caret: func() -> bool;
    is-target-clause: func() -> bool;
  }
  record rtc-track-event-init {
    receiver: borrow<rtc-rtp-receiver>,
    track: borrow<media-stream-track>,
    streams: option<list<borrow<media-stream>>>,
    transceiver: borrow<rtc-rtp-transceiver>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource rtc-track-event {
    as-event: func() -> event;
    receiver: func() -> rtc-rtp-receiver;
    track: func() -> media-stream-track;
    streams: func() -> list<media-stream>;
    transceiver: func() -> rtc-rtp-transceiver;
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
  }
  record native-os-file-read-options {
    encoding: option<string>,
    bytes: option<u64>,
  }
  record native-os-file-write-atomic-options {
    bytes: option<u64>,
    tmp-path: option<string>,
    no-overwrite: option<bool>,
    flush: option<bool>,
    backup-to: option<string>,
  }
  record l10n-element {
    namespace-uri: string,
    local-name: string,
    l10n-id: string,
    %type: option<string>,
    l10n-attrs: option<string>,
    l10n-args: option<object>,
  }
  record attribute-name-value {
    name: string,
    value: string,
  }
  record l10n-value {
    value: option<string>,
    attributes: option<list<option<attribute-name-value>>>,
  }
  resource html-opt-group-element {
    as-html-element: func() -> html-element;
    disabled: func() -> bool;
    set-disabled: func(disabled: bool);
    label: func() -> string;
    set-label: func(label: string);
  }
  enum supported-type {
    text-html,
    text-xml,
    application-xml,
    application-xhtml-xml,
    image-svg-xml,
  }
  resource dom-parser {
    parse-from-string: func(str: string, %type: supported-type) -> document;
    force-enable-xulxbl: func();
  }
  enum permission-name {
    geolocation,
    notifications,
    push,
    persistent-storage,
  }
  record permission-descriptor {
    name: permission-name,
  }
  resource permissions {
    query: func(permission: object) -> permission-status;
    revoke: func(permission: object) -> permission-status;
  }
  record idb-version-change-event-init {
    old-version: option<u64>,
    new-version: option<u64>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource idb-version-change-event {
    as-event: func() -> event;
    constructor(%type: string, event-init-dict: option<idb-version-change-event-init>);
    old-version: func() -> u64;
    new-version: func() -> u64;
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
  }
  resource speech-grammar {
    src: func() -> string;
    set-src: func(src: string);
    weight: func() -> f32;
    set-weight: func(weight: f32);
  }
  resource presentation-connection-available-event {
    as-event: func() -> event;
    connection: func() -> presentation-connection;
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
  }
  record presentation-connection-available-event-init {
    connection: borrow<presentation-connection>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource svg-number {
    value: func() -> f32;
    set-value: func(value: f32);
  }
  resource list-box-object {
    as-box-object: func() -> box-object;
    get-row-count: func() -> s32;
    get-row-height: func() -> s32;
    get-number-of-visible-rows: func() -> s32;
    get-index-of-first-visible-row: func() -> s32;
    ensure-index-is-visible: func(row-index: s32);
    scroll-to-index: func(row-index: s32);
    scroll-by-lines: func(num-lines: s32);
    get-item-at-index: func(index: s32) -> option<element>;
    get-index-of-item: func(item: borrow<element>) -> s32;
  }
  resource audio-destination-node {
    as-audio-node: func() -> audio-node;
    max-channel-count: func() -> u32;
    disconnect: func(params: option<audio-destination-node-disconnect-params>);
    context: func() -> base-audio-context;
    number-of-inputs: func() -> u32;
    number-of-outputs: func() -> u32;
    channel-count: func() -> u32;
    set-channel-count: func(channel-count: u32);
    channel-count-mode: func() -> channel-count-mode;
    set-channel-count-mode: func(channel-count-mode: channel-count-mode);
    channel-interpretation: func() -> channel-interpretation;
    set-channel-interpretation: func(channel-interpretation: channel-interpretation);
  }
  resource navigator {
    share: func(data: option<share-data>);
    can-share: func(data: option<share-data>) -> bool;
    app-code-name: func() -> string;
    app-name: func() -> string;
    app-version: func() -> string;
    platform: func() -> string;
    user-agent: func() -> string;
    product: func() -> string;
    taint-enabled: func() -> bool;
    language: func() -> string;
    languages: func() -> list<string>;
    on-line: func() -> bool;
    register-protocol-handler: func(scheme: string, url: string, title: string);
    register-content-handler: func(mime-type: string, url: string, title: string);
    storage: func() -> storage-manager;
    permissions: func() -> permissions;
    mime-types: func() -> mime-type-array;
    plugins: func() -> plugin-array;
    do-not-track: func() -> string;
    geolocation: func() -> geolocation;
    get-battery: func() -> battery-manager;
    vibrate: func(params: navigator-vibrate-params) -> bool;
    max-touch-points: func() -> s32;
    media-capabilities: func() -> media-capabilities;
    connection: func() -> network-information;
    get-gamepads: func() -> list<option<gamepad>>;
    request-gamepad-service-test: func() -> gamepad-service-test;
    get-vr-displays: func() -> list<vr-display>;
    active-vr-displays: func() -> list<vr-display>;
    is-web-vr-content-detected: func() -> bool;
    is-web-vr-content-presenting: func() -> bool;
    request-vr-presentation: func(display: borrow<vr-display>);
    request-vr-service-test: func() -> vr-service-test;
    request-midi-access: func(options: option<midi-options>) -> midi-access;
    media-devices: func() -> media-devices;
    service-worker: func() -> service-worker-container;
    send-beacon: func(url: string, data: option<option<body-init>>) -> bool;
    presentation: func() -> option<presentation>;
    request-media-key-system-access: func(key-system: string, supported-configurations: list<media-key-system-configuration>) -> media-key-system-access;
    hardware-concurrency: func() -> u64;
    credentials: func() -> credentials-container;
    user-activation: func() -> user-activation;
  }
  variant navigator-vibrate-params {
    duration(u32),
    pattern(list<u32>),
  }
  resource navigator-automation-information {
    webdriver: func() -> bool;
  }
  enum scroll-state {
    started,
    stopped,
  }
  record scroll-view-change-event-init {
    state: option<scroll-state>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource scroll-view-change-event {
    as-event: func() -> event;
    state: func() -> scroll-state;
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
  }
  resource htmld-list-element {
    as-html-element: func() -> html-element;
    compact: func() -> bool;
    set-compact: func(compact: bool);
  }
  resource style-sheet-applicable-state-change-event {
    as-event: func() -> event;
    stylesheet: func() -> option<css-style-sheet>;
    applicable: func() -> bool;
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
  }
  record style-sheet-applicable-state-change-event-init {
    stylesheet: option<option<borrow<css-style-sheet>>>,
    applicable: option<bool>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource css {
    supports: func(params: css-supports-params) -> bool;
  }
  variant css-supports-params {
    property-value(tuple<string, string>),
    condition-text(string),
  }
  record dynamics-compressor-options {
    attack: option<f32>,
    knee: option<f32>,
    ratio: option<f32>,
    release: option<f32>,
    threshold: option<f32>,
    channel-count: option<u32>,
    channel-count-mode: option<channel-count-mode>,
    channel-interpretation: option<channel-interpretation>,
  }
  resource dynamics-compressor-node {
    as-audio-node: func() -> audio-node;
    threshold: func() -> audio-param;
    knee: func() -> audio-param;
    ratio: func() -> audio-param;
    reduction: func() -> f32;
    attack: func() -> audio-param;
    release: func() -> audio-param;
    disconnect: func(params: option<dynamics-compressor-node-disconnect-params>);
    context: func() -> base-audio-context;
    number-of-inputs: func() -> u32;
    number-of-outputs: func() -> u32;
    channel-count: func() -> u32;
    set-channel-count: func(channel-count: u32);
    channel-count-mode: func() -> channel-count-mode;
    set-channel-count-mode: func(channel-count-mode: channel-count-mode);
    channel-interpretation: func() -> channel-interpretation;
    set-channel-interpretation: func(channel-interpretation: channel-interpretation);
  }
  resource html-menu-item-element {
    as-html-element: func() -> html-element;
    %type: func() -> string;
    set-type: func(%type: string);
    label: func() -> string;
    set-label: func(label: string);
    icon: func() -> string;
    set-icon: func(icon: string);
    disabled: func() -> bool;
    set-disabled: func(disabled: bool);
    checked: func() -> bool;
    set-checked: func(checked: bool);
    radiogroup: func() -> string;
    set-radiogroup: func(radiogroup: string);
    default-checked: func() -> bool;
    set-default-checked: func(default-checked: bool);
  }
  resource event {
    as-rtc-peer-connection-ice-event: func() -> option<rtc-peer-connection-ice-event>;
    as-speech-recognition-error: func() -> option<speech-recognition-error>;
    as-speech-synthesis-event: func() -> option<speech-synthesis-event>;
    as-media-key-error: func() -> option<media-key-error>;
    as-media-key-message-event: func() -> option<media-key-message-event>;
    as-presentation-connection-available-event: func() -> option<presentation-connection-available-event>;
    as-promise-rejection-event: func() -> option<promise-rejection-event>;
    as-rtc-track-event: func() -> option<rtc-track-event>;
    as-style-sheet-change-event: func() -> option<style-sheet-change-event>;
    as-close-event: func() -> option<close-event>;
    as-time-event: func() -> option<time-event>;
    as-grouped-history-event: func() -> option<grouped-history-event>;
    as-media-query-list-event: func() -> option<media-query-list-event>;
    as-media-recorder-error-event: func() -> option<media-recorder-error-event>;
    as-error-event: func() -> option<error-event>;
    as-pop-state-event: func() -> option<pop-state-event>;
    as-animation-event: func() -> option<animation-event>;
    as-audio-processing-event: func() -> option<audio-processing-event>;
    as-idb-version-change-event: func() -> option<idb-version-change-event>;
    as-blob-event: func() -> option<blob-event>;
    as-image-capture-error-event: func() -> option<image-capture-error-event>;
    as-extendable-event: func() -> option<extendable-event>;
    as-scroll-view-change-event: func() -> option<scroll-view-change-event>;
    as-style-sheet-applicable-state-change-event: func() -> option<style-sheet-applicable-state-change-event>;
    as-payment-request-update-event: func() -> option<payment-request-update-event>;
    as-web-gl-context-event: func() -> option<web-gl-context-event>;
    as-offline-audio-completion-event: func() -> option<offline-audio-completion-event>;
    %type: func() -> string;
    target: func() -> option<event-target>;
    current-target: func() -> option<event-target>;
    composed-path: func() -> list<event-target>;
    NONE: static func() -> u16;
    CAPTURING-PHASE: static func() -> u16;
    AT-TARGET: static func() -> u16;
    BUBBLING-PHASE: static func() -> u16;
    event-phase: func() -> u16;
    stop-propagation: func();
    stop-immediate-propagation: func();
    bubbles: func() -> bool;
    cancelable: func() -> bool;
    prevent-default: func();
    default-prevented: func() -> bool;
    default-prevented-by-chrome: func() -> bool;
    default-prevented-by-content: func() -> bool;
    composed: func() -> bool;
    is-trusted: func() -> bool;
    time-stamp: func() -> dom-high-res-time-stamp;
    init-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>);
    cancel-bubble: func() -> bool;
    set-cancel-bubble: func(cancel-bubble: bool);
    as-rtcdtmf-tone-change-event: func() -> option<rtcdtmf-tone-change-event>;
    as-font-face-set-load-event: func() -> option<font-face-set-load-event>;
    as-animation-playback-event: func() -> option<animation-playback-event>;
    as-hidden-plugin-event: func() -> option<hidden-plugin-event>;
    as-progress-event: func() -> option<progress-event>;
    as-device-proximity-event: func() -> option<device-proximity-event>;
    as-media-stream-track-event: func() -> option<media-stream-track-event>;
    as-style-rule-change-event: func() -> option<style-rule-change-event>;
    as-udp-message-event: func() -> option<udp-message-event>;
    as-storage-event: func() -> option<storage-event>;
    as-transition-event: func() -> option<transition-event>;
    as-submit-event: func() -> option<submit-event>;
    as-media-encrypted-event: func() -> option<media-encrypted-event>;
    as-device-orientation-event: func() -> option<device-orientation-event>;
    as-midi-connection-event: func() -> option<midi-connection-event>;
    as-rtc-data-channel-event: func() -> option<rtc-data-channel-event>;
    as-before-unload-event: func() -> option<before-unload-event>;
    as-device-light-event: func() -> option<device-light-event>;
    as-page-transition-event: func() -> option<page-transition-event>;
    as-mutation-event: func() -> option<mutation-event>;
    as-popup-blocked-event: func() -> option<popup-blocked-event>;
    as-speech-recognition-event: func() -> option<speech-recognition-event>;
    as-tcp-socket-error-event: func() -> option<tcp-socket-error-event>;
    as-message-event: func() -> option<message-event>;
    as-tcp-server-socket-event: func() -> option<tcp-server-socket-event>;
    as-performance-entry-event: func() -> option<performance-entry-event>;
    as-gamepad-event: func() -> option<gamepad-event>;
    as-track-event: func() -> option<track-event>;
    as-user-proximity-event: func() -> option<user-proximity-event>;
    as-midi-message-event: func() -> option<midi-message-event>;
    as-presentation-connection-close-event: func() -> option<presentation-connection-close-event>;
    as-security-policy-violation-event: func() -> option<security-policy-violation-event>;
    as-clipboard-event: func() -> option<clipboard-event>;
    as-hash-change-event: func() -> option<hash-change-event>;
    as-device-motion-event: func() -> option<device-motion-event>;
    as-custom-event: func() -> option<custom-event>;
    as-tcp-socket-event: func() -> option<tcp-socket-event>;
    as-media-stream-event: func() -> option<media-stream-event>;
    as-caret-state-changed-event: func() -> option<caret-state-changed-event>;
    as-notify-paint-event: func() -> option<notify-paint-event>;
    as-plugin-crashed-event: func() -> option<plugin-crashed-event>;
    as-ui-event: func() -> option<ui-event>;
    as-rtc-peer-connection-ice-error-event: func() -> option<rtc-peer-connection-ice-error-event>;
  }
  record event-init {
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource document-type {
    as-node: func() -> node;
    name: func() -> string;
    public-id: func() -> string;
    system-id: func() -> string;
    ELEMENT-NODE: static func() -> u16;
    ATTRIBUTE-NODE: static func() -> u16;
    TEXT-NODE: static func() -> u16;
    CDATA-SECTION-NODE: static func() -> u16;
    ENTITY-REFERENCE-NODE: static func() -> u16;
    ENTITY-NODE: static func() -> u16;
    PROCESSING-INSTRUCTION-NODE: static func() -> u16;
    COMMENT-NODE: static func() -> u16;
    DOCUMENT-NODE: static func() -> u16;
    DOCUMENT-TYPE-NODE: static func() -> u16;
    DOCUMENT-FRAGMENT-NODE: static func() -> u16;
    NOTATION-NODE: static func() -> u16;
    node-type: func() -> u16;
    node-name: func() -> string;
    base-uri: func() -> string;
    is-connected: func() -> bool;
    owner-document: func() -> option<document>;
    get-root-node: func(options: option<get-root-node-options>) -> node;
    parent-node: func() -> option<node>;
    parent-element: func() -> option<element>;
    has-child-nodes: func() -> bool;
    child-nodes: func() -> node-list;
    first-child: func() -> option<node>;
    last-child: func() -> option<node>;
    previous-sibling: func() -> option<node>;
    next-sibling: func() -> option<node>;
    node-value: func() -> string;
    set-node-value: func(node-value: string);
    text-content: func() -> string;
    set-text-content: func(text-content: string);
    insert-before: func(node: borrow<node>, child: option<borrow<node>>) -> node;
    append-child: func(node: borrow<node>) -> node;
    replace-child: func(node: borrow<node>, child: borrow<node>) -> node;
    remove-child: func(child: borrow<node>) -> node;
    normalize: func();
    clone-node: func(deep: option<bool>) -> node;
    is-same-node: func(node: option<borrow<node>>) -> bool;
    is-equal-node: func(node: option<borrow<node>>) -> bool;
    DOCUMENT-POSITION-DISCONNECTED: static func() -> u16;
    DOCUMENT-POSITION-PRECEDING: static func() -> u16;
    DOCUMENT-POSITION-FOLLOWING: static func() -> u16;
    DOCUMENT-POSITION-CONTAINS: static func() -> u16;
    DOCUMENT-POSITION-CONTAINED-BY: static func() -> u16;
    DOCUMENT-POSITION-IMPLEMENTATION-SPECIFIC: static func() -> u16;
    compare-document-position: func(other: borrow<node>) -> u16;
    contains: func(other: option<borrow<node>>) -> bool;
    lookup-prefix: func(namespace: string) -> string;
    lookup-namespace-uri: func(prefix: string) -> string;
    is-default-namespace: func(namespace: string) -> bool;
    before: func(nodes: list<node-or-string>);
    after: func(nodes: list<node-or-string>);
    replace-with: func(nodes: list<node-or-string>);
    remove: func();
  }
  resource node {
    as-event-target: func() -> event-target;
    as-attr: func() -> option<attr>;
    as-document-type: func() -> option<document-type>;
    ELEMENT-NODE: static func() -> u16;
    ATTRIBUTE-NODE: static func() -> u16;
    TEXT-NODE: static func() -> u16;
    CDATA-SECTION-NODE: static func() -> u16;
    ENTITY-REFERENCE-NODE: static func() -> u16;
    ENTITY-NODE: static func() -> u16;
    PROCESSING-INSTRUCTION-NODE: static func() -> u16;
    COMMENT-NODE: static func() -> u16;
    DOCUMENT-NODE: static func() -> u16;
    DOCUMENT-TYPE-NODE: static func() -> u16;
    DOCUMENT-FRAGMENT-NODE: static func() -> u16;
    NOTATION-NODE: static func() -> u16;
    node-type: func() -> u16;
    node-name: func() -> string;
    base-uri: func() -> string;
    is-connected: func() -> bool;
    owner-document: func() -> option<document>;
    get-root-node: func(options: option<get-root-node-options>) -> node;
    parent-node: func() -> option<node>;
    parent-element: func() -> option<element>;
    has-child-nodes: func() -> bool;
    child-nodes: func() -> node-list;
    first-child: func() -> option<node>;
    last-child: func() -> option<node>;
    previous-sibling: func() -> option<node>;
    next-sibling: func() -> option<node>;
    node-value: func() -> string;
    set-node-value: func(node-value: string);
    text-content: func() -> string;
    set-text-content: func(text-content: string);
    insert-before: func(node: borrow<node>, child: option<borrow<node>>) -> node;
    append-child: func(node: borrow<node>) -> node;
    replace-child: func(node: borrow<node>, child: borrow<node>) -> node;
    remove-child: func(child: borrow<node>) -> node;
    normalize: func();
    clone-node: func(deep: option<bool>) -> node;
    is-same-node: func(node: option<borrow<node>>) -> bool;
    is-equal-node: func(node: option<borrow<node>>) -> bool;
    DOCUMENT-POSITION-DISCONNECTED: static func() -> u16;
    DOCUMENT-POSITION-PRECEDING: static func() -> u16;
    DOCUMENT-POSITION-FOLLOWING: static func() -> u16;
    DOCUMENT-POSITION-CONTAINS: static func() -> u16;
    DOCUMENT-POSITION-CONTAINED-BY: static func() -> u16;
    DOCUMENT-POSITION-IMPLEMENTATION-SPECIFIC: static func() -> u16;
    compare-document-position: func(other: borrow<node>) -> u16;
    contains: func(other: option<borrow<node>>) -> bool;
    lookup-prefix: func(namespace: string) -> string;
    lookup-namespace-uri: func(prefix: string) -> string;
    is-default-namespace: func(namespace: string) -> bool;
    as-character-data: func() -> option<character-data>;
    as-element: func() -> option<element>;
    as-document-fragment: func() -> option<document-fragment>;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
    as-document: func() -> option<document>;
  }
  record get-root-node-options {
    composed: option<bool>,
  }
  resource source-buffer-list {
    as-event-target: func() -> event-target;
    length: func() -> u32;
    onaddsourcebuffer-subscribe: func() -> pollable;
    onremovesourcebuffer-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  enum vr-eye {
    left,
    right,
  }
  resource vr-field-of-view {
    up-degrees: func() -> f64;
    right-degrees: func() -> f64;
    down-degrees: func() -> f64;
    left-degrees: func() -> f64;
  }
  type vr-source = html-canvas-element-or-offscreen-canvas;
  record vr-layer {
    source: option<option<borrow<html-canvas-element>>>,
    left-bounds: option<list<f32>>,
    right-bounds: option<list<f32>>,
  }
  resource vr-display-capabilities {
    has-position: func() -> bool;
    has-orientation: func() -> bool;
    has-external-display: func() -> bool;
    can-present: func() -> bool;
    max-layers: func() -> u32;
  }
  resource vr-stage-parameters {
    sitting-to-standing-transform: func() -> float32-array;
    size-x: func() -> f32;
    size-z: func() -> f32;
  }
  resource vr-pose {
    position: func() -> float32-array;
    linear-velocity: func() -> float32-array;
    linear-acceleration: func() -> float32-array;
    orientation: func() -> float32-array;
    angular-velocity: func() -> float32-array;
    angular-acceleration: func() -> float32-array;
  }
  resource vr-frame-data {
    timestamp: func() -> dom-high-res-time-stamp;
    left-projection-matrix: func() -> float32-array;
    left-view-matrix: func() -> float32-array;
    right-projection-matrix: func() -> float32-array;
    right-view-matrix: func() -> float32-array;
    pose: func() -> vr-pose;
  }
  resource vr-submit-frame-result {
    frame-num: func() -> u32;
    base64-image: func() -> string;
  }
  resource vr-eye-parameters {
    offset: func() -> float32-array;
    field-of-view: func() -> vr-field-of-view;
    render-width: func() -> u32;
    render-height: func() -> u32;
  }
  resource vr-display {
    as-event-target: func() -> event-target;
    presenting-groups: func() -> u32;
    group-mask: func() -> u32;
    set-group-mask: func(group-mask: u32);
    is-connected: func() -> bool;
    is-presenting: func() -> bool;
    capabilities: func() -> vr-display-capabilities;
    stage-parameters: func() -> option<vr-stage-parameters>;
    get-eye-parameters: func(which-eye: vr-eye) -> vr-eye-parameters;
    display-id: func() -> u32;
    display-name: func() -> string;
    get-frame-data: func(frame-data: borrow<vr-frame-data>) -> bool;
    get-pose: func() -> vr-pose;
    get-submit-frame-result: func(%result: borrow<vr-submit-frame-result>) -> bool;
    reset-pose: func();
    depth-near: func() -> f64;
    set-depth-near: func(depth-near: f64);
    depth-far: func() -> f64;
    set-depth-far: func(depth-far: f64);
    request-animation-frame: func(callback: borrow<frame-request-callback>) -> s32;
    cancel-animation-frame: func(handle: s32);
    request-present: func(layers: list<vr-layer>);
    exit-present: func();
    // get-layers: func() -> list<vr-layer>;
    submit-frame: func();
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource file-system-entry {
    as-file-system-directory-entry: func() -> option<file-system-directory-entry>;
    is-file: func() -> bool;
    is-directory: func() -> bool;
    name: func() -> string;
    full-path: func() -> string;
    filesystem: func() -> file-system;
    get-parent: func(success-callback: option<borrow<file-system-entry-callback>>, error-callback: option<borrow<error-callback>>);
    as-file-system-file-entry: func() -> option<file-system-file-entry>;
  }
  resource wheel-event {
    as-mouse-event: func() -> mouse-event;
    DOM-DELTA-PIXEL: static func() -> u32;
    DOM-DELTA-LINE: static func() -> u32;
    DOM-DELTA-PAGE: static func() -> u32;
    delta-x: func() -> f64;
    delta-y: func() -> f64;
    delta-z: func() -> f64;
    delta-mode: func() -> u32;
    screen-x: func() -> s32;
    screen-y: func() -> s32;
    client-x: func() -> s32;
    client-y: func() -> s32;
    x: func() -> s32;
    y: func() -> s32;
    offset-x: func() -> s32;
    offset-y: func() -> s32;
    ctrl-key: func() -> bool;
    shift-key: func() -> bool;
    alt-key: func() -> bool;
    meta-key: func() -> bool;
    button: func() -> s16;
    buttons: func() -> u16;
    related-target: func() -> option<event-target>;
    region: func() -> string;
    movement-x: func() -> s32;
    movement-y: func() -> s32;
    init-mouse-event: func(type-arg: string, can-bubble-arg: option<bool>, cancelable-arg: option<bool>, view-arg: option<option<borrow<window>>>, detail-arg: option<s32>, screen-x-arg: option<s32>, screen-y-arg: option<s32>, client-x-arg: option<s32>, client-y-arg: option<s32>, ctrl-key-arg: option<bool>, alt-key-arg: option<bool>, shift-key-arg: option<bool>, meta-key-arg: option<bool>, button-arg: option<s16>, related-target-arg: option<option<borrow<event-target>>>);
    get-modifier-state: func(key-arg: string) -> bool;
  }
  record wheel-event-init {
    delta-x: option<f64>,
    delta-y: option<f64>,
    delta-z: option<f64>,
    delta-mode: option<u32>,
    screen-x: option<s32>,
    screen-y: option<s32>,
    client-x: option<s32>,
    client-y: option<s32>,
    button: option<s16>,
    buttons: option<u16>,
    related-target: option<option<borrow<event-target>>>,
    movement-x: option<s32>,
    movement-y: option<s32>,
  }
  record udp-options {
    local-address: option<string>,
    local-port: option<u16>,
    remote-address: option<string>,
    remote-port: option<u16>,
    address-reuse: option<bool>,
    loopback: option<bool>,
  }
  resource udp-socket {
    as-event-target: func() -> event-target;
    local-address: func() -> string;
    local-port: func() -> u16;
    remote-address: func() -> string;
    remote-port: func() -> u16;
    address-reuse: func() -> bool;
    loopback: func() -> bool;
    ready-state: func() -> socket-ready-state;
    onmessage-subscribe: func() -> pollable;
    close: func();
    join-multicast-group: func(multicast-group-address: string);
    leave-multicast-group: func(multicast-group-address: string);
    send: func(data: array-buffer-or-array-buffer-view-or-blob-or-string, remote-address: option<string>, remote-port: option<u16>) -> bool;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource svg-animate-element {
    as-svg-animation-element: func() -> svg-animation-element;
  }
  resource svg-foreign-object-element {
    as-svg-graphics-element: func() -> svg-graphics-element;
    x: func() -> svg-animated-length;
    y: func() -> svg-animated-length;
    width: func() -> svg-animated-length;
    height: func() -> svg-animated-length;
    transform: func() -> svg-animated-transform-list;
    nearest-viewport-element: func() -> option<svg-element>;
    farthest-viewport-element: func() -> option<svg-element>;
    get-b-box: func(a-options: option<svg-bounding-box-options>) -> svg-rect;
    get-ctm: func() -> option<svg-matrix>;
    get-screen-ctm: func() -> option<svg-matrix>;
    get-transform-to-element: func(element: borrow<svg-graphics-element>) -> svg-matrix;
  }
  resource video-track-list {
    as-event-target: func() -> event-target;
    length: func() -> u32;
    get-track-by-id: func(id: string) -> option<video-track>;
    selected-index: func() -> s32;
    onchange-subscribe: func() -> pollable;
    onaddtrack-subscribe: func() -> pollable;
    onremovetrack-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource x-path-expression {
    evaluate: func(context-node: borrow<node>, %type: option<u16>, %result: option<object>) -> x-path-result;
    evaluate-with-context: func(context-node: borrow<node>, context-position: u32, context-size: u32, %type: option<u16>, %result: option<object>) -> x-path-result;
  }
  resource rtcdtmf-tone-change-event {
    as-event: func() -> event;
    tone: func() -> string;
  }
  record rtcdtmf-tone-change-event-init {
    tone: option<string>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource character-data {
    as-node: func() -> node;
    as-text: func() -> option<text>;
    data: func() -> string;
    set-data: func(data: string);
    length: func() -> u32;
    substring-data: func(offset: u32, count: u32) -> string;
    append-data: func(data: string);
    insert-data: func(offset: u32, data: string);
    delete-data: func(offset: u32, count: u32);
    replace-data: func(offset: u32, count: u32, data: string);
    as-comment: func() -> option<comment>;
    before: func(nodes: list<node-or-string>);
    after: func(nodes: list<node-or-string>);
    replace-with: func(nodes: list<node-or-string>);
    remove: func();
    previous-element-sibling: func() -> option<element>;
    next-element-sibling: func() -> option<element>;
    as-processing-instruction: func() -> option<processing-instruction>;
  }
  record font-face-set-load-event-init {
    fontfaces: option<list<borrow<font-face>>>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource font-face-set-load-event {
    as-event: func() -> event;
    fontfaces: func() -> list<font-face>;
  }
  resource create-offer-request {
    window-id: func() -> u64;
    inner-window-id: func() -> u64;
    call-id: func() -> string;
    is-secure: func() -> bool;
  }
  resource htmli-frame-element {
    as-html-element: func() -> html-element;
    src: func() -> string;
    set-src: func(src: string);
    srcdoc: func() -> string;
    set-srcdoc: func(srcdoc: string);
    name: func() -> string;
    set-name: func(name: string);
    sandbox: func() -> dom-token-list;
    allow-fullscreen: func() -> bool;
    set-allow-fullscreen: func(allow-fullscreen: bool);
    allow-payment-request: func() -> bool;
    set-allow-payment-request: func(allow-payment-request: bool);
    width: func() -> string;
    set-width: func(width: string);
    height: func() -> string;
    set-height: func(height: string);
    referrer-policy: func() -> string;
    set-referrer-policy: func(referrer-policy: string);
    content-document: func() -> option<document>;
    content-window: func() -> option<window-proxy>;
    align: func() -> string;
    set-align: func(align: string);
    scrolling: func() -> string;
    set-scrolling: func(scrolling: string);
    frame-border: func() -> string;
    set-frame-border: func(frame-border: string);
    long-desc: func() -> string;
    set-long-desc: func(long-desc: string);
    margin-height: func() -> string;
    set-margin-height: func(margin-height: string);
    margin-width: func() -> string;
    set-margin-width: func(margin-width: string);
    get-svg-document: func() -> option<document>;
  }
  resource svg-desc-element {
    as-svg-element: func() -> svg-element;
  }
  resource dom-quad {
    p1: func() -> dom-point;
    p2: func() -> dom-point;
    p3: func() -> dom-point;
    p4: func() -> dom-point;
    get-bounds: func() -> dom-rect-read-only;
    bounds: func() -> dom-rect-read-only;
    // to-json: func() -> dom-quad-json;
  }
  record dom-quad-json {
    p1: option<borrow<dom-point>>,
    p2: option<borrow<dom-point>>,
    p3: option<borrow<dom-point>>,
    p4: option<borrow<dom-point>>,
  }
  record dom-quad-init {
    p1: option<dom-point-init>,
    p2: option<dom-point-init>,
    p3: option<dom-point-init>,
    p4: option<dom-point-init>,
  }
  resource broadcast-channel {
    as-event-target: func() -> event-target;
    name: func() -> string;
    post-message: func(message: any);
    close: func();
    onmessage-subscribe: func() -> pollable;
    onmessageerror-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource animation-playback-event {
    as-event: func() -> event;
    current-time: func() -> f64;
    timeline-time: func() -> f64;
  }
  record animation-playback-event-init {
    current-time: option<f64>,
    timeline-time: option<f64>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource dom-rect {
    as-dom-rect-read-only: func() -> dom-rect-read-only;
    x: func() -> f64;
    set-x: func(x: f64);
    y: func() -> f64;
    set-y: func(y: f64);
    width: func() -> f64;
    set-width: func(width: f64);
    height: func() -> f64;
    set-height: func(height: f64);
    // x: func() -> f64;
    // y: func() -> f64;
    // width: func() -> f64;
    // height: func() -> f64;
    top: func() -> f64;
    right: func() -> f64;
    bottom: func() -> f64;
    left: func() -> f64;
    to-json: func() -> object;
  }
  resource dom-rect-read-only {
    as-dom-rect: func() -> option<dom-rect>;
    x: func() -> f64;
    y: func() -> f64;
    width: func() -> f64;
    height: func() -> f64;
    top: func() -> f64;
    right: func() -> f64;
    bottom: func() -> f64;
    left: func() -> f64;
    to-json: func() -> object;
  }
  record dom-rect-init {
    x: option<f64>,
    y: option<f64>,
    width: option<f64>,
    height: option<f64>,
  }
  resource idle-deadline {
    time-remaining: func() -> dom-high-res-time-stamp;
    did-timeout: func() -> bool;
  }
  record analyser-options {
    fft-size: option<u32>,
    max-decibels: option<f64>,
    min-decibels: option<f64>,
    smoothing-time-constant: option<f64>,
    channel-count: option<u32>,
    channel-count-mode: option<channel-count-mode>,
    channel-interpretation: option<channel-interpretation>,
  }
  resource analyser-node {
    as-audio-node: func() -> audio-node;
    get-float-frequency-data: func(array: float32-array);
    get-byte-frequency-data: func(array: uint8-array);
    get-float-time-domain-data: func(array: float32-array);
    get-byte-time-domain-data: func(array: uint8-array);
    fft-size: func() -> u32;
    set-fft-size: func(fft-size: u32);
    frequency-bin-count: func() -> u32;
    min-decibels: func() -> f64;
    set-min-decibels: func(min-decibels: f64);
    max-decibels: func() -> f64;
    set-max-decibels: func(max-decibels: f64);
    smoothing-time-constant: func() -> f64;
    set-smoothing-time-constant: func(smoothing-time-constant: f64);
    disconnect: func(params: option<analyser-node-disconnect-params>);
    context: func() -> base-audio-context;
    number-of-inputs: func() -> u32;
    number-of-outputs: func() -> u32;
    channel-count: func() -> u32;
    set-channel-count: func(channel-count: u32);
    channel-count-mode: func() -> channel-count-mode;
    set-channel-count-mode: func(channel-count-mode: channel-count-mode);
    channel-interpretation: func() -> channel-interpretation;
    set-channel-interpretation: func(channel-interpretation: channel-interpretation);
  }
  resource ovr-multiview2 {
    FRAMEBUFFER-ATTACHMENT-TEXTURE-NUM-VIEWS-OVR: static func() -> g-lenum;
    FRAMEBUFFER-ATTACHMENT-TEXTURE-BASE-VIEW-INDEX-OVR: static func() -> g-lenum;
    MAX-VIEWS-OVR: static func() -> g-lenum;
    FRAMEBUFFER-INCOMPLETE-VIEW-TARGETS-OVR: static func() -> g-lenum;
    framebuffer-texture-multiview-ovr: func(target: g-lenum, attachment: g-lenum, texture: option<borrow<web-gl-texture>>, level: g-lint, base-view-index: g-lint, num-views: g-lsizei);
  }
  resource image-bitmap-rendering-context {
    transfer-from-image-bitmap: func(bitmap: borrow<image-bitmap>);
    transfer-image-bitmap: func(bitmap: borrow<image-bitmap>);
  }
  resource css-animation {
    as-animation: func() -> animation;
    animation-name: func() -> string;
  }
  resource html-text-area-element {
    as-html-element: func() -> html-element;
    autocomplete: func() -> string;
    set-autocomplete: func(autocomplete: string);
    autofocus: func() -> bool;
    set-autofocus: func(autofocus: bool);
    cols: func() -> u32;
    set-cols: func(cols: u32);
    disabled: func() -> bool;
    set-disabled: func(disabled: bool);
    form: func() -> option<html-form-element>;
    max-length: func() -> s32;
    set-max-length: func(max-length: s32);
    min-length: func() -> s32;
    set-min-length: func(min-length: s32);
    name: func() -> string;
    set-name: func(name: string);
    placeholder: func() -> string;
    set-placeholder: func(placeholder: string);
    read-only: func() -> bool;
    set-read-only: func(read-only: bool);
    required: func() -> bool;
    set-required: func(required: bool);
    rows: func() -> u32;
    set-rows: func(rows: u32);
    wrap: func() -> string;
    set-wrap: func(wrap: string);
    %type: func() -> string;
    default-value: func() -> string;
    set-default-value: func(default-value: string);
    value: func() -> string;
    set-value: func(value: string);
    text-length: func() -> u32;
    will-validate: func() -> bool;
    validity: func() -> validity-state;
    validation-message: func() -> string;
    check-validity: func() -> bool;
    report-validity: func() -> bool;
    set-custom-validity: func(error: string);
    labels: func() -> node-list;
    select: func();
    selection-start: func() -> u32;
    set-selection-start: func(selection-start: u32);
    selection-end: func() -> u32;
    set-selection-end: func(selection-end: u32);
    selection-direction: func() -> string;
    set-selection-direction: func(selection-direction: string);
    set-range-text: func(params: html-text-area-element-set-range-text-params);
    set-selection-range: func(start: u32, end: u32, direction: option<string>);
  }
  variant html-text-area-element-set-range-text-params {
    replacement(string),
    replacement-start-end-mode(tuple<string, u32, u32, option<string>>),
  }
  resource hidden-plugin-event {
    as-event: func() -> event;
    tag: func() -> option<plugin-tag>;
  }
  record hidden-plugin-event-init {
    tag: option<option<borrow<plugin-tag>>>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource svg-pattern-element {
    as-svg-element: func() -> svg-element;
    pattern-units: func() -> svg-animated-enumeration;
    pattern-content-units: func() -> svg-animated-enumeration;
    pattern-transform: func() -> svg-animated-transform-list;
    x: func() -> svg-animated-length;
    y: func() -> svg-animated-length;
    width: func() -> svg-animated-length;
    height: func() -> svg-animated-length;
    href: func() -> svg-animated-string;
    view-box: func() -> svg-animated-rect;
    preserve-aspect-ratio: func() -> svg-animated-preserve-aspect-ratio;
  }
  resource idb-key-range {
    lower: func() -> any;
    upper: func() -> any;
    lower-open: func() -> bool;
    upper-open: func() -> bool;
    includes: func(key: any) -> bool;
    only: static func(value: any) -> idb-key-range;
    lower-bound: static func(lower: any, open: option<bool>) -> idb-key-range;
    upper-bound: static func(upper: any, open: option<bool>) -> idb-key-range;
    bound: static func(lower: any, upper: any, lower-open: option<bool>, upper-open: option<bool>) -> idb-key-range;
    as-idb-locale-aware-key-range: func() -> option<idb-locale-aware-key-range>;
  }
  resource idb-locale-aware-key-range {
    as-idb-key-range: func() -> idb-key-range;
    bound: static func(lower: any, upper: any, lower-open: option<bool>, upper-open: option<bool>) -> idb-locale-aware-key-range;
  }
  resource keyboard-event {
    as-ui-event: func() -> ui-event;
    char-code: func() -> u32;
    key-code: func() -> u32;
    alt-key: func() -> bool;
    ctrl-key: func() -> bool;
    shift-key: func() -> bool;
    meta-key: func() -> bool;
    get-modifier-state: func(key: string) -> bool;
    DOM-KEY-LOCATION-STANDARD: static func() -> u32;
    DOM-KEY-LOCATION-LEFT: static func() -> u32;
    DOM-KEY-LOCATION-RIGHT: static func() -> u32;
    DOM-KEY-LOCATION-NUMPAD: static func() -> u32;
    location: func() -> u32;
    repeat: func() -> bool;
    is-composing: func() -> bool;
    key: func() -> string;
    code: func() -> string;
    init-keyboard-event: func(type-arg: string, bubbles-arg: option<bool>, cancelable-arg: option<bool>, view-arg: option<option<borrow<window>>>, key-arg: option<string>, location-arg: option<u32>, ctrl-key: option<bool>, alt-key: option<bool>, shift-key: option<bool>, meta-key: option<bool>);
    // init-dict: func() -> keyboard-event-init;
    view: func() -> option<window-proxy>;
    detail: func() -> s32;
    init-ui-event: func(a-type: string, a-can-bubble: option<bool>, a-cancelable: option<bool>, a-view: option<option<borrow<window>>>, a-detail: option<s32>);
  }
  record keyboard-event-init {
    key: option<string>,
    code: option<string>,
    location: option<u32>,
    repeat: option<bool>,
    is-composing: option<bool>,
    char-code: option<u32>,
    key-code: option<u32>,
    which: option<u32>,
    ctrl-key: option<bool>,
    shift-key: option<bool>,
    alt-key: option<bool>,
    meta-key: option<bool>,
    modifier-alt-graph: option<bool>,
    modifier-caps-lock: option<bool>,
    modifier-fn: option<bool>,
    modifier-fn-lock: option<bool>,
    modifier-num-lock: option<bool>,
    modifier-os: option<bool>,
    modifier-scroll-lock: option<bool>,
    modifier-symbol: option<bool>,
    modifier-symbol-lock: option<bool>,
    view: option<option<borrow<window>>>,
    detail: option<s32>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource html-meter-element {
    as-html-element: func() -> html-element;
    value: func() -> f64;
    set-value: func(value: f64);
    min: func() -> f64;
    set-min: func(min: f64);
    max: func() -> f64;
    set-max: func(max: f64);
    low: func() -> f64;
    set-low: func(low: f64);
    high: func() -> f64;
    set-high: func(high: f64);
    optimum: func() -> f64;
    set-optimum: func(optimum: f64);
    labels: func() -> node-list;
  }
  resource htmlu-list-element {
    as-html-element: func() -> html-element;
    compact: func() -> bool;
    set-compact: func(compact: bool);
    %type: func() -> string;
    set-type: func(%type: string);
  }
  resource progress-event {
    as-event: func() -> event;
    length-computable: func() -> bool;
    loaded: func() -> u64;
    total: func() -> u64;
  }
  record progress-event-init {
    length-computable: option<bool>,
    loaded: option<u64>,
    total: option<u64>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource audio-param {
    value: func() -> f32;
    set-value: func(value: f32);
    default-value: func() -> f32;
    min-value: func() -> f32;
    max-value: func() -> f32;
    set-value-at-time: func(value: f32, start-time: f64) -> audio-param;
    linear-ramp-to-value-at-time: func(value: f32, end-time: f64) -> audio-param;
    exponential-ramp-to-value-at-time: func(value: f32, end-time: f64) -> audio-param;
    set-target-at-time: func(target: f32, start-time: f64, time-constant: f64) -> audio-param;
    set-value-curve-at-time: func(values: float32-array, start-time: f64, duration: f64) -> audio-param;
    cancel-scheduled-values: func(start-time: f64) -> audio-param;
  }
  resource device-proximity-event {
    as-event: func() -> event;
    value: func() -> f64;
    min: func() -> f64;
    max: func() -> f64;
  }
  record device-proximity-event-init {
    value: option<f64>,
    min: option<f64>,
    max: option<f64>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource service-worker {
    as-event-target: func() -> event-target;
    script-url: func() -> string;
    state: func() -> service-worker-state;
    onstatechange-subscribe: func() -> pollable;
    post-message: func(message: any, transferable: option<list<object>>);
    onerror-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  enum service-worker-state {
    parsed,
    installing,
    installed,
    activating,
    activated,
    redundant,
  }
  resource html-audio-element {
    as-html-media-element: func() -> html-media-element;
    error: func() -> option<media-error>;
    src: func() -> string;
    set-src: func(src: string);
    current-src: func() -> string;
    src-object: func() -> option<media-stream>;
    set-src-object: func(src-object: option<media-stream>);
    cross-origin: func() -> string;
    set-cross-origin: func(cross-origin: string);
    NETWORK-EMPTY: static func() -> u16;
    NETWORK-IDLE: static func() -> u16;
    NETWORK-LOADING: static func() -> u16;
    NETWORK-NO-SOURCE: static func() -> u16;
    network-state: func() -> u16;
    preload: func() -> string;
    set-preload: func(preload: string);
    buffered: func() -> time-ranges;
    load: func();
    can-play-type: func(%type: string) -> string;
    HAVE-NOTHING: static func() -> u16;
    HAVE-METADATA: static func() -> u16;
    HAVE-CURRENT-DATA: static func() -> u16;
    HAVE-FUTURE-DATA: static func() -> u16;
    HAVE-ENOUGH-DATA: static func() -> u16;
    ready-state: func() -> u16;
    seeking: func() -> bool;
    current-time: func() -> f64;
    set-current-time: func(current-time: f64);
    fast-seek: func(time: f64);
    duration: func() -> f64;
    is-encrypted: func() -> bool;
    paused: func() -> bool;
    default-playback-rate: func() -> f64;
    set-default-playback-rate: func(default-playback-rate: f64);
    playback-rate: func() -> f64;
    set-playback-rate: func(playback-rate: f64);
    played: func() -> time-ranges;
    seekable: func() -> time-ranges;
    ended: func() -> bool;
    autoplay: func() -> bool;
    set-autoplay: func(autoplay: bool);
    loop: func() -> bool;
    set-loop: func(loop: bool);
    play: func();
    pause: func();
    controls: func() -> bool;
    set-controls: func(controls: bool);
    volume: func() -> f64;
    set-volume: func(volume: f64);
    muted: func() -> bool;
    set-muted: func(muted: bool);
    default-muted: func() -> bool;
    set-default-muted: func(default-muted: bool);
    audio-tracks: func() -> audio-track-list;
    video-tracks: func() -> video-track-list;
    text-tracks: func() -> option<text-track-list>;
    add-text-track: func(kind: text-track-kind, label: option<string>, language: option<string>) -> text-track;
  }
  resource html-table-caption-element {
    as-html-element: func() -> html-element;
    align: func() -> string;
    set-align: func(align: string);
  }
  enum media-device-kind {
    audioinput,
    audiooutput,
    videoinput,
  }
  resource media-device-info {
    device-id: func() -> string;
    kind: func() -> media-device-kind;
    label: func() -> string;
    group-id: func() -> string;
    to-json: func() -> object;
  }
  enum oscillator-type {
    sine,
    square,
    sawtooth,
    triangle,
    custom,
  }
  record oscillator-options {
    %type: option<oscillator-type>,
    frequency: option<f32>,
    detune: option<f32>,
    periodic-wave: option<borrow<periodic-wave>>,
    channel-count: option<u32>,
    channel-count-mode: option<channel-count-mode>,
    channel-interpretation: option<channel-interpretation>,
  }
  resource oscillator-node {
    as-audio-scheduled-source-node: func() -> audio-scheduled-source-node;
    %type: func() -> oscillator-type;
    set-type: func(%type: oscillator-type);
    frequency: func() -> audio-param;
    detune: func() -> audio-param;
    set-periodic-wave: func(periodic-wave: borrow<periodic-wave>);
    onended-subscribe: func() -> pollable;
    start: func(when: option<f64>);
    stop: func(when: option<f64>);
  }
  record widevine-cdm-manifest {
    name: string,
    description: string,
    version: string,
    x-cdm-module-versions: string,
    x-cdm-interface-versions: string,
    x-cdm-host-versions: string,
    x-cdm-codecs: string,
  }
  resource text-encoder {
    encoding: func() -> string;
    encode: func(input: option<string>) -> uint8-array;
  }
  resource svg-filter-element {
    as-svg-element: func() -> svg-element;
    filter-units: func() -> svg-animated-enumeration;
    primitive-units: func() -> svg-animated-enumeration;
    x: func() -> svg-animated-length;
    y: func() -> svg-animated-length;
    width: func() -> svg-animated-length;
    height: func() -> svg-animated-length;
    href: func() -> svg-animated-string;
  }
  record media-stream-track-event-init {
    track: borrow<media-stream-track>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource media-stream-track-event {
    as-event: func() -> event;
    track: func() -> media-stream-track;
  }
  resource svg-path-element {
    as-svg-geometry-element: func() -> svg-geometry-element;
    get-path-seg-at-length: func(distance: f32) -> u32;
    path-seg-list: func() -> svg-path-seg-list;
    animated-path-seg-list: func() -> svg-path-seg-list;
  }
  resource rtc-rtp-receiver {
    track: func() -> media-stream-track;
    get-capabilities: static func(kind: string) -> option<rtc-rtp-capabilities>;
    get-stats: func() -> rtc-stats-report;
    get-contributing-sources: func() -> list<rtc-rtp-contributing-source>;
    get-synchronization-sources: func() -> list<rtc-rtp-synchronization-source>;
    set-stream-ids: func(stream-ids: list<string>);
    set-remote-send-bit: func(send-bit: bool);
    process-track-additions-and-removals: func(transceiver: borrow<rtc-rtp-transceiver>, post-processing: object);
  }
  resource html-font-element {
    as-html-element: func() -> html-element;
    color: func() -> string;
    set-color: func(color: string);
    face: func() -> string;
    set-face: func(face: string);
    size: func() -> string;
    set-size: func(size: string);
  }
  resource html-meta-element {
    as-html-element: func() -> html-element;
    name: func() -> string;
    set-name: func(name: string);
    http-equiv: func() -> string;
    set-http-equiv: func(http-equiv: string);
    content: func() -> string;
    set-content: func(content: string);
    scheme: func() -> string;
    set-scheme: func(scheme: string);
  }
  resource css-page-rule {
    as-css-rule: func() -> css-rule;
    style: func() -> css-style-declaration;
    STYLE-RULE: static func() -> u16;
    CHARSET-RULE: static func() -> u16;
    IMPORT-RULE: static func() -> u16;
    MEDIA-RULE: static func() -> u16;
    FONT-FACE-RULE: static func() -> u16;
    PAGE-RULE: static func() -> u16;
    NAMESPACE-RULE: static func() -> u16;
    %type: func() -> u16;
    css-text: func() -> string;
    set-css-text: func(css-text: string);
    parent-rule: func() -> option<css-rule>;
    parent-style-sheet: func() -> option<css-style-sheet>;
  }
  resource html-table-row-element {
    as-html-element: func() -> html-element;
    row-index: func() -> s32;
    section-row-index: func() -> s32;
    cells: func() -> html-collection;
    insert-cell: func(index: option<s32>) -> html-element;
    delete-cell: func(index: s32);
    align: func() -> string;
    set-align: func(align: string);
    ch: func() -> string;
    set-ch: func(ch: string);
    ch-off: func() -> string;
    set-ch-off: func(ch-off: string);
    v-align: func() -> string;
    set-v-align: func(v-align: string);
    bg-color: func() -> string;
    set-bg-color: func(bg-color: string);
  }
  resource dedicated-worker-global-scope {
    as-worker-global-scope: func() -> worker-global-scope;
    name: func() -> string;
    post-message: func(message: any, transfer: option<list<object>>);
    close: func();
    onmessage-subscribe: func() -> pollable;
    onmessageerror-subscribe: func() -> pollable;
    request-animation-frame: func(callback: borrow<frame-request-callback>) -> s32;
    cancel-animation-frame: func(handle: s32);
  }
  variant headers-or-list-list-string-or-record-string {
    headers(borrow<headers>),
    list-list-string(list<list<string>>),
    record-string(record-string),
  }
  type headers-init = headers-or-list-list-string-or-record-string;
  enum headers-guard-enum {
    none,
    request,
    request-no-cors,
    response,
    immutable,
  }
  resource headers {
    append: func(name: string, value: string);
    delete: func(name: string);
    get: func(name: string) -> string;
    has: func(name: string) -> bool;
    set: func(name: string, value: string);
    guard: func() -> headers-guard-enum;
    set-guard: func(guard: headers-guard-enum);
  }
  resource message-port {
    as-event-target: func() -> event-target;
    post-message: func(message: any, transferable: option<list<object>>);
    start: func();
    close: func();
    onmessage-subscribe: func() -> pollable;
    onmessageerror-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource touch-list {
    length: func() -> u32;
    item: func(index: u32) -> option<touch>;
  }
  variant blob-or-directory-or-string {
    blob(borrow<blob>),
    directory(borrow<directory>),
    %string(string),
  }
  type form-data-entry-value = blob-or-directory-or-string;
  resource form-data {
    append: func(params: form-data-append-params);
    delete: func(name: string);
    // get: func(name: string) -> option<form-data-entry-value>;
    // get-all: func(name: string) -> list<form-data-entry-value>;
    has: func(name: string) -> bool;
    set: func(params: form-data-set-params);
  }
  variant form-data-append-params {
    name-value-filename(tuple<string, borrow<blob>, option<string>>),
    name-value(tuple<string, string>),
  }
  variant form-data-set-params {
    name-value-filename(tuple<string, borrow<blob>, option<string>>),
    name-value(tuple<string, string>),
  }
  resource html-time-element {
    as-html-element: func() -> html-element;
    date-time: func() -> string;
    set-date-time: func(date-time: string);
  }
  resource service-worker-container {
    as-event-target: func() -> event-target;
    controller: func() -> option<service-worker>;
    ready: func() -> service-worker-registration;
    register: func(script-url: string, options: option<registration-options>) -> service-worker-registration;
    get-registration: func(document-url: option<string>) -> any;
    get-registrations: func() -> list<service-worker-registration>;
    oncontrollerchange-subscribe: func() -> pollable;
    onerror-subscribe: func() -> pollable;
    onmessage-subscribe: func() -> pollable;
    get-scope-for-url: func(url: string) -> string;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  record registration-options {
    scope: option<string>,
    %type: option<string>,
    update-via-cache: option<service-worker-update-via-cache>,
  }
  resource vr-mock-display {
    set-eye-resolution: func(a-render-width: u32, a-render-height: u32);
    set-eye-parameter: func(eye: vr-eye, offset-x: f64, offset-y: f64, offset-z: f64, up-degree: f64, right-degree: f64, down-degree: f64, left-degree: f64);
    set-pose: func(position: float32-array, linear-velocity: float32-array, linear-acceleration: float32-array, orientation: float32-array, angular-velocity: float32-array, angular-acceleration: float32-array);
    set-mount-state: func(is-mounted: bool);
    update: func();
  }
  resource vr-mock-controller {
    new-button-event: func(button: u32, pressed: bool);
    new-axis-move-event: func(axis: u32, value: f64);
    new-pose-move: func(position: float32-array, linear-velocity: float32-array, linear-acceleration: float32-array, orientation: float32-array, angular-velocity: float32-array, angular-acceleration: float32-array);
  }
  resource vr-service-test {
    attach-vr-display: func(id: string) -> vr-mock-display;
    attach-vr-controller: func(id: string) -> vr-mock-controller;
  }
  type dom-high-res-time-stamp = f64;
  resource midi-input-map {
  }
  resource worker-navigator {
    app-code-name: func() -> string;
    app-name: func() -> string;
    app-version: func() -> string;
    platform: func() -> string;
    user-agent: func() -> string;
    product: func() -> string;
    taint-enabled: func() -> bool;
    language: func() -> string;
    languages: func() -> list<string>;
    on-line: func() -> bool;
    hardware-concurrency: func() -> u64;
    storage: func() -> storage-manager;
    connection: func() -> network-information;
    media-capabilities: func() -> media-capabilities;
  }
  resource html-map-element {
    as-html-element: func() -> html-element;
    name: func() -> string;
    set-name: func(name: string);
    areas: func() -> html-collection;
  }
  resource midi-output {
    as-midi-port: func() -> midi-port;
    send: func(data: list<u8>, timestamp: option<dom-high-res-time-stamp>);
    clear: func();
  }
  resource script-processor-node {
    as-audio-node: func() -> audio-node;
    onaudioprocess-subscribe: func() -> pollable;
    buffer-size: func() -> s32;
    disconnect: func(params: option<script-processor-node-disconnect-params>);
    context: func() -> base-audio-context;
    number-of-inputs: func() -> u32;
    number-of-outputs: func() -> u32;
    channel-count: func() -> u32;
    set-channel-count: func(channel-count: u32);
    channel-count-mode: func() -> channel-count-mode;
    set-channel-count-mode: func(channel-count-mode: channel-count-mode);
    channel-interpretation: func() -> channel-interpretation;
    set-channel-interpretation: func(channel-interpretation: channel-interpretation);
  }
  resource svgm-path-element {
    as-svg-element: func() -> svg-element;
    href: func() -> svg-animated-string;
  }
  resource html-table-element {
    as-html-element: func() -> html-element;
    caption: func() -> option<html-table-caption-element>;
    set-caption: func(caption: option<html-table-caption-element>);
    create-caption: func() -> html-element;
    delete-caption: func();
    t-head: func() -> option<html-table-section-element>;
    set-t-head: func(t-head: option<html-table-section-element>);
    create-t-head: func() -> html-element;
    delete-t-head: func();
    t-foot: func() -> option<html-table-section-element>;
    set-t-foot: func(t-foot: option<html-table-section-element>);
    create-t-foot: func() -> html-element;
    delete-t-foot: func();
    t-bodies: func() -> html-collection;
    create-t-body: func() -> html-element;
    rows: func() -> html-collection;
    insert-row: func(index: option<s32>) -> html-element;
    delete-row: func(index: s32);
    align: func() -> string;
    set-align: func(align: string);
    border: func() -> string;
    set-border: func(border: string);
    frame: func() -> string;
    set-frame: func(frame: string);
    rules: func() -> string;
    set-rules: func(rules: string);
    summary: func() -> string;
    set-summary: func(summary: string);
    width: func() -> string;
    set-width: func(width: string);
    bg-color: func() -> string;
    set-bg-color: func(bg-color: string);
    cell-padding: func() -> string;
    set-cell-padding: func(cell-padding: string);
    cell-spacing: func() -> string;
    set-cell-spacing: func(cell-spacing: string);
  }
  resource window {
    as-event-target: func() -> event-target;
    window: func() -> window;
    self: func() -> window;
    document: func() -> option<document>;
    name: func() -> string;
    set-name: func(name: string);
    location: func() -> location;
    history: func() -> history;
    custom-elements: func() -> custom-element-registry;
    locationbar: func() -> bar-prop;
    menubar: func() -> bar-prop;
    personalbar: func() -> bar-prop;
    scrollbars: func() -> bar-prop;
    statusbar: func() -> bar-prop;
    toolbar: func() -> bar-prop;
    status: func() -> string;
    set-status: func(status: string);
    close: func();
    closed: func() -> bool;
    stop: func();
    focus: func();
    blur: func();
    event: func() -> any;
    frames: func() -> window-proxy;
    length: func() -> u32;
    top: func() -> option<window-proxy>;
    opener: func() -> any;
    set-opener: func(opener: any);
    parent: func() -> option<window-proxy>;
    frame-element: func() -> option<element>;
    open: func(url: option<string>, target: option<string>, features: option<string>) -> option<window-proxy>;
    navigator: func() -> navigator;
    external: func() -> external;
    application-cache: func() -> application-cache;
    alert: func(params: option<window-alert-params>);
    confirm: func(message: option<string>) -> bool;
    prompt: func(message: option<string>, default: option<string>) -> string;
    print: func();
    post-message: func(message: any, target-origin: string, transfer: option<list<object>>);
    onabort-subscribe: func() -> pollable;
    onblur-subscribe: func() -> pollable;
    onfocus-subscribe: func() -> pollable;
    onauxclick-subscribe: func() -> pollable;
    oncanplay-subscribe: func() -> pollable;
    oncanplaythrough-subscribe: func() -> pollable;
    onchange-subscribe: func() -> pollable;
    onclick-subscribe: func() -> pollable;
    onclose-subscribe: func() -> pollable;
    oncontextmenu-subscribe: func() -> pollable;
    ondblclick-subscribe: func() -> pollable;
    ondrag-subscribe: func() -> pollable;
    ondragend-subscribe: func() -> pollable;
    ondragenter-subscribe: func() -> pollable;
    ondragexit-subscribe: func() -> pollable;
    ondragleave-subscribe: func() -> pollable;
    ondragover-subscribe: func() -> pollable;
    ondragstart-subscribe: func() -> pollable;
    ondrop-subscribe: func() -> pollable;
    ondurationchange-subscribe: func() -> pollable;
    onemptied-subscribe: func() -> pollable;
    onended-subscribe: func() -> pollable;
    oninput-subscribe: func() -> pollable;
    oninvalid-subscribe: func() -> pollable;
    onkeydown-subscribe: func() -> pollable;
    onkeypress-subscribe: func() -> pollable;
    onkeyup-subscribe: func() -> pollable;
    onload-subscribe: func() -> pollable;
    onloadeddata-subscribe: func() -> pollable;
    onloadedmetadata-subscribe: func() -> pollable;
    onloadend-subscribe: func() -> pollable;
    onloadstart-subscribe: func() -> pollable;
    onmousedown-subscribe: func() -> pollable;
    onmouseenter-subscribe: func() -> pollable;
    onmouseleave-subscribe: func() -> pollable;
    onmousemove-subscribe: func() -> pollable;
    onmouseout-subscribe: func() -> pollable;
    onmouseover-subscribe: func() -> pollable;
    onmouseup-subscribe: func() -> pollable;
    onwheel-subscribe: func() -> pollable;
    onpause-subscribe: func() -> pollable;
    onplay-subscribe: func() -> pollable;
    onplaying-subscribe: func() -> pollable;
    onprogress-subscribe: func() -> pollable;
    onratechange-subscribe: func() -> pollable;
    onreset-subscribe: func() -> pollable;
    onresize-subscribe: func() -> pollable;
    onscroll-subscribe: func() -> pollable;
    onseeked-subscribe: func() -> pollable;
    onseeking-subscribe: func() -> pollable;
    onselect-subscribe: func() -> pollable;
    onshow-subscribe: func() -> pollable;
    onstalled-subscribe: func() -> pollable;
    onsubmit-subscribe: func() -> pollable;
    onsuspend-subscribe: func() -> pollable;
    ontimeupdate-subscribe: func() -> pollable;
    onvolumechange-subscribe: func() -> pollable;
    onwaiting-subscribe: func() -> pollable;
    onselectstart-subscribe: func() -> pollable;
    ontoggle-subscribe: func() -> pollable;
    onpointercancel-subscribe: func() -> pollable;
    onpointerdown-subscribe: func() -> pollable;
    onpointerup-subscribe: func() -> pollable;
    onpointermove-subscribe: func() -> pollable;
    onpointerout-subscribe: func() -> pollable;
    onpointerover-subscribe: func() -> pollable;
    onpointerenter-subscribe: func() -> pollable;
    onpointerleave-subscribe: func() -> pollable;
    ongotpointercapture-subscribe: func() -> pollable;
    onlostpointercapture-subscribe: func() -> pollable;
    onanimationcancel-subscribe: func() -> pollable;
    onanimationend-subscribe: func() -> pollable;
    onanimationiteration-subscribe: func() -> pollable;
    onanimationstart-subscribe: func() -> pollable;
    ontransitioncancel-subscribe: func() -> pollable;
    ontransitionend-subscribe: func() -> pollable;
    ontransitionrun-subscribe: func() -> pollable;
    ontransitionstart-subscribe: func() -> pollable;
    onwebkitanimationend-subscribe: func() -> pollable;
    onwebkitanimationiteration-subscribe: func() -> pollable;
    onwebkitanimationstart-subscribe: func() -> pollable;
    onwebkittransitionend-subscribe: func() -> pollable;
    onafterprint-subscribe: func() -> pollable;
    onbeforeprint-subscribe: func() -> pollable;
    onbeforeunload: func() -> on-before-unload-event-handler;
    set-onbeforeunload: func(onbeforeunload: on-before-unload-event-handler);
    onhashchange-subscribe: func() -> pollable;
    onlanguagechange-subscribe: func() -> pollable;
    onmessage-subscribe: func() -> pollable;
    onmessageerror-subscribe: func() -> pollable;
    onoffline-subscribe: func() -> pollable;
    ononline-subscribe: func() -> pollable;
    onpagehide-subscribe: func() -> pollable;
    onpageshow-subscribe: func() -> pollable;
    onpopstate-subscribe: func() -> pollable;
    onstorage-subscribe: func() -> pollable;
    onunload-subscribe: func() -> pollable;
    onappinstalled-subscribe: func() -> pollable;
    session-storage: func() -> option<storage>;
    local-storage: func() -> option<storage>;
    capture-events: func();
    release-events: func();
    get-selection: func() -> option<selection>;
    get-computed-style: func(elt: borrow<element>, pseudo-elt: option<string>) -> option<css-style-declaration>;
    match-media: func(query: string) -> option<media-query-list>;
    screen: func() -> screen;
    visual-viewport: func() -> option<visual-viewport>;
    move-to: func(x: s32, y: s32);
    move-by: func(x: s32, y: s32);
    resize-to: func(x: s32, y: s32);
    resize-by: func(x: s32, y: s32);
    inner-width: func() -> any;
    set-inner-width: func(inner-width: any);
    inner-height: func() -> any;
    set-inner-height: func(inner-height: any);
    scroll: func(params: window-scroll-params);
    scroll-to: func(params: window-scroll-to-params);
    scroll-by: func(params: window-scroll-by-params);
    scroll-x: func() -> f64;
    page-x-offset: func() -> f64;
    scroll-y: func() -> f64;
    page-y-offset: func() -> f64;
    screen-x: func() -> any;
    set-screen-x: func(screen-x: any);
    screen-y: func() -> any;
    set-screen-y: func(screen-y: any);
    outer-width: func() -> any;
    set-outer-width: func(outer-width: any);
    outer-height: func() -> any;
    set-outer-height: func(outer-height: any);
    device-pixel-ratio: func() -> f64;
    u2f: func() -> u2f;
    speech-synthesis: func() -> speech-synthesis;
    ontouchstart-subscribe: func() -> pollable;
    ontouchend-subscribe: func() -> pollable;
    ontouchmove-subscribe: func() -> pollable;
    ontouchcancel-subscribe: func() -> pollable;
    onerror: func() -> on-error-event-handler;
    set-onerror: func(onerror: on-error-event-handler);
    orientation: func() -> s16;
    onorientationchange-subscribe: func() -> pollable;
    onvrdisplayconnect-subscribe: func() -> pollable;
    onvrdisplaydisconnect-subscribe: func() -> pollable;
    onvrdisplayactivate-subscribe: func() -> pollable;
    onvrdisplaydeactivate-subscribe: func() -> pollable;
    onvrdisplaypresentchange-subscribe: func() -> pollable;
    paint-worklet: func() -> worklet;
    request-idle-callback: func(callback: borrow<idle-request-callback>, options: option<idle-request-options>) -> u32;
    cancel-idle-callback: func(handle: u32);
    crypto: func() -> crypto;
    origin: func() -> string;
    btoa: func(btoa: string) -> string;
    atob: func(atob: string) -> string;
    set-timeout: func(params: window-set-timeout-params) -> s32;
    clear-timeout: func(handle: option<s32>);
    set-interval: func(params: window-set-interval-params) -> s32;
    clear-interval: func(handle: option<s32>);
    create-image-bitmap: func(params: window-create-image-bitmap-params) -> image-bitmap;
    request-animation-frame: func(callback: borrow<frame-request-callback>) -> s32;
    cancel-animation-frame: func(handle: s32);
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  variant window-alert-params {
    message(string),
  }
  enum scroll-behavior {
    auto,
    instant,
    smooth,
  }
  record scroll-options {
    behavior: option<scroll-behavior>,
  }
  record scroll-to-options {
    left: option<f64>,
    top: option<f64>,
    behavior: option<scroll-behavior>,
  }
  variant window-scroll-params {
    x-y(tuple<f64, f64>),
    options(option<scroll-to-options>),
  }
  variant window-scroll-to-params {
    x-y(tuple<f64, f64>),
    options(option<scroll-to-options>),
  }
  variant window-scroll-by-params {
    x-y(tuple<f64, f64>),
    options(option<scroll-to-options>),
  }
  record idle-request-options {
    timeout: option<u32>,
  }
  resource style-rule-change-event {
    as-event: func() -> event;
    stylesheet: func() -> option<css-style-sheet>;
    rule: func() -> option<css-rule>;
  }
  record style-rule-change-event-init {
    stylesheet: option<option<borrow<css-style-sheet>>>,
    rule: option<option<borrow<css-rule>>>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource performance-mark {
    as-performance-entry: func() -> performance-entry;
    name: func() -> string;
    entry-type: func() -> string;
    start-time: func() -> dom-high-res-time-stamp;
    duration: func() -> dom-high-res-time-stamp;
    to-json: func() -> object;
  }
  resource speech-recognition-result-list {
    length: func() -> u32;
    item: func(index: u32) -> speech-recognition-result;
  }
  resource html-head-element {
    as-html-element: func() -> html-element;
  }
  resource abort-controller {
    signal: func() -> abort-signal;
    abort: func();
  }
  resource location {
    href: func() -> string;
    set-href: func(href: string);
    origin: func() -> string;
    protocol: func() -> string;
    set-protocol: func(protocol: string);
    host: func() -> string;
    set-host: func(host: string);
    hostname: func() -> string;
    set-hostname: func(hostname: string);
    port: func() -> string;
    set-port: func(port: string);
    pathname: func() -> string;
    set-pathname: func(pathname: string);
    search: func() -> string;
    set-search: func(search: string);
    hash: func() -> string;
    set-hash: func(hash: string);
    assign: func(url: string);
    replace: func(url: string);
    reload: func(forceget: option<bool>);
  }
  resource element {
    as-node: func() -> node;
    as-svg-element: func() -> option<svg-element>;
    as-html-element: func() -> option<html-element>;
    namespace-uri: func() -> string;
    prefix: func() -> string;
    local-name: func() -> string;
    tag-name: func() -> string;
    id: func() -> string;
    set-id: func(id: string);
    class-name: func() -> string;
    set-class-name: func(class-name: string);
    class-list: func() -> dom-token-list;
    attributes: func() -> named-node-map;
    get-attribute-names: func() -> list<string>;
    get-attribute: func(name: string) -> string;
    get-attribute-ns: func(namespace: string, local-name: string) -> string;
    toggle-attribute: func(name: string, force: option<bool>) -> bool;
    set-attribute: func(name: string, value: string);
    set-attribute-ns: func(namespace: string, name: string, value: string);
    remove-attribute: func(name: string);
    remove-attribute-ns: func(namespace: string, local-name: string);
    has-attribute: func(name: string) -> bool;
    has-attribute-ns: func(namespace: string, local-name: string) -> bool;
    has-attributes: func() -> bool;
    closest: func(selector: string) -> option<element>;
    matches: func(selector: string) -> bool;
    webkit-matches-selector: func(selector: string) -> bool;
    get-elements-by-tag-name: func(local-name: string) -> html-collection;
    get-elements-by-tag-name-ns: func(namespace: string, local-name: string) -> html-collection;
    get-elements-by-class-name: func(class-names: string) -> html-collection;
    get-elements-with-grid: func() -> list<element>;
    insert-adjacent-element: func(where: string, element: borrow<element>) -> option<element>;
    insert-adjacent-text: func(where: string, data: string);
    font-size-inflation: func() -> f32;
    set-pointer-capture: func(pointer-id: s32);
    release-pointer-capture: func(pointer-id: s32);
    has-pointer-capture: func(pointer-id: s32) -> bool;
    set-capture: func(retarget-to-element: option<bool>);
    release-capture: func();
    set-capture-always: func(retarget-to-element: option<bool>);
    get-attribute-node: func(name: string) -> option<attr>;
    set-attribute-node: func(new-attr: borrow<attr>) -> option<attr>;
    remove-attribute-node: func(old-attr: borrow<attr>) -> option<attr>;
    get-attribute-node-ns: func(namespace-uri: string, local-name: string) -> option<attr>;
    set-attribute-node-ns: func(new-attr: borrow<attr>) -> option<attr>;
    scroll-by-no-flush: func(dx: s32, dy: s32) -> bool;
    get-as-flex-container: func() -> option<flex>;
    get-grid-fragments: func() -> list<grid>;
    get-transform-to-ancestor: func(ancestor: borrow<element>) -> dom-matrix-read-only;
    get-transform-to-parent: func() -> dom-matrix-read-only;
    get-transform-to-viewport: func() -> dom-matrix-read-only;
    get-client-rects: func() -> dom-rect-list;
    get-bounding-client-rect: func() -> dom-rect;
    scroll-into-view: func(arg: option<bool-or-scroll-into-view-options>);
    scroll-top: func() -> s32;
    set-scroll-top: func(scroll-top: s32);
    scroll-left: func() -> s32;
    set-scroll-left: func(scroll-left: s32);
    scroll-width: func() -> s32;
    scroll-height: func() -> s32;
    scroll: func(params: element-scroll-params);
    scroll-to: func(params: element-scroll-to-params);
    scroll-by: func(params: element-scroll-by-params);
    client-top: func() -> s32;
    client-left: func() -> s32;
    client-width: func() -> s32;
    client-height: func() -> s32;
    inner-html: func() -> string;
    set-inner-html: func(inner-html: string);
    outer-html: func() -> string;
    set-outer-html: func(outer-html: string);
    insert-adjacent-html: func(position: string, text: string);
    query-selector: func(selectors: string) -> option<element>;
    query-selector-all: func(selectors: string) -> node-list;
    attach-shadow: func(shadow-root-init-dict: shadow-root-init) -> shadow-root;
    shadow-root: func() -> option<shadow-root>;
    open-or-closed-shadow-root: func() -> option<shadow-root>;
    assigned-slot: func() -> option<html-slot-element>;
    slot: func() -> string;
    set-slot: func(slot: string);
    children: func() -> html-collection;
    first-element-child: func() -> option<element>;
    last-element-child: func() -> option<element>;
    child-element-count: func() -> u32;
    prepend: func(nodes: list<node-or-string>);
    append: func(nodes: list<node-or-string>);
    replace-children: func(nodes: list<node-or-string>);
    get-box-quads: func(options: option<box-quad-options>) -> list<dom-quad>;
    convert-quad-from-node: func(quad: borrow<dom-quad>, %from: geometry-node, options: option<convert-coordinate-options>) -> dom-quad;
    convert-rect-from-node: func(rect: borrow<dom-rect-read-only>, %from: geometry-node, options: option<convert-coordinate-options>) -> dom-quad;
    convert-point-from-node: func(point: dom-point-init, %from: geometry-node, options: option<convert-coordinate-options>) -> dom-point;
    request-fullscreen: func();
    request-pointer-lock: func();
    before: func(nodes: list<node-or-string>);
    after: func(nodes: list<node-or-string>);
    replace-with: func(nodes: list<node-or-string>);
    remove: func();
    previous-element-sibling: func() -> option<element>;
    next-element-sibling: func() -> option<element>;
  }
  enum scroll-logical-position {
    start,
    center,
    end,
    nearest,
  }
  record scroll-into-view-options {
    block: option<scroll-logical-position>,
    inline: option<scroll-logical-position>,
    behavior: option<scroll-behavior>,
  }
  variant bool-or-scroll-into-view-options {
    %bool(bool),
    scroll-into-view-options(scroll-into-view-options),
  }
  variant element-scroll-params {
    x-y(tuple<f64, f64>),
    options(option<scroll-to-options>),
  }
  variant element-scroll-to-params {
    x-y(tuple<f64, f64>),
    options(option<scroll-to-options>),
  }
  variant element-scroll-by-params {
    x-y(tuple<f64, f64>),
    options(option<scroll-to-options>),
  }
  record shadow-root-init {
    mode: shadow-root-mode,
  }
  variant node-or-string {
    node(borrow<node>),
    %string(string),
  }
  resource svg-animated-transform-list {
    base-val: func() -> svg-transform-list;
    anim-val: func() -> svg-transform-list;
  }
  resource cache {
    match: func(request: request-info, options: option<cache-query-options>) -> response;
    match-all: func(request: option<request-info>, options: option<cache-query-options>) -> list<response>;
    add: func(request: request-info);
    add-all: func(requests: list<request-info>);
    put: func(request: request-info, response: borrow<response>);
    delete: func(request: request-info, options: option<cache-query-options>) -> bool;
    keys: func(request: option<request-info>, options: option<cache-query-options>) -> list<request>;
  }
  record cache-query-options {
    ignore-search: option<bool>,
    ignore-method: option<bool>,
    ignore-vary: option<bool>,
    cache-name: option<string>,
  }
  record cache-batch-operation {
    %type: option<string>,
    request: option<borrow<request>>,
    response: option<borrow<response>>,
    options: option<cache-query-options>,
  }
  enum gamepad-haptic-actuator-type {
    vibration,
  }
  resource gamepad-haptic-actuator {
    %type: func() -> gamepad-haptic-actuator-type;
    pulse: func(value: f64, duration: f64) -> bool;
  }
  resource udp-message-event {
    as-event: func() -> event;
    remote-address: func() -> string;
    remote-port: func() -> u16;
    data: func() -> any;
  }
  record udp-message-event-init {
    remote-address: option<string>,
    remote-port: option<u16>,
    data: any,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource html-link-element {
    as-html-element: func() -> html-element;
    disabled: func() -> bool;
    set-disabled: func(disabled: bool);
    href: func() -> string;
    set-href: func(href: string);
    cross-origin: func() -> string;
    set-cross-origin: func(cross-origin: string);
    rel: func() -> string;
    set-rel: func(rel: string);
    rel-list: func() -> dom-token-list;
    media: func() -> string;
    set-media: func(media: string);
    hreflang: func() -> string;
    set-hreflang: func(hreflang: string);
    %type: func() -> string;
    set-type: func(%type: string);
    referrer-policy: func() -> string;
    set-referrer-policy: func(referrer-policy: string);
    sizes: func() -> dom-token-list;
    charset: func() -> string;
    set-charset: func(charset: string);
    rev: func() -> string;
    set-rev: func(rev: string);
    target: func() -> string;
    set-target: func(target: string);
    integrity: func() -> string;
    set-integrity: func(integrity: string);
    %as: func() -> string;
    set-as: func(%as: string);
    sheet: func() -> option<style-sheet>;
  }
  resource document-fragment {
    as-node: func() -> node;
    get-element-by-id: func(element-id: string) -> option<element>;
    query-selector: func(selectors: string) -> option<element>;
    query-selector-all: func(selectors: string) -> node-list;
    children: func() -> html-collection;
    first-element-child: func() -> option<element>;
    last-element-child: func() -> option<element>;
    child-element-count: func() -> u32;
    prepend: func(nodes: list<node-or-string>);
    append: func(nodes: list<node-or-string>);
    replace-children: func(nodes: list<node-or-string>);
    as-shadow-root: func() -> option<shadow-root>;
  }
  record stereo-panner-options {
    pan: option<f32>,
    channel-count: option<u32>,
    channel-count-mode: option<channel-count-mode>,
    channel-interpretation: option<channel-interpretation>,
  }
  resource stereo-panner-node {
    as-audio-node: func() -> audio-node;
    pan: func() -> audio-param;
    disconnect: func(params: option<stereo-panner-node-disconnect-params>);
    context: func() -> base-audio-context;
    number-of-inputs: func() -> u32;
    number-of-outputs: func() -> u32;
    channel-count: func() -> u32;
    set-channel-count: func(channel-count: u32);
    channel-count-mode: func() -> channel-count-mode;
    set-channel-count-mode: func(channel-count-mode: channel-count-mode);
    channel-interpretation: func() -> channel-interpretation;
    set-channel-interpretation: func(channel-interpretation: channel-interpretation);
  }
  resource storage-event {
    as-event: func() -> event;
    key: func() -> string;
    old-value: func() -> string;
    new-value: func() -> string;
    url: func() -> string;
    storage-area: func() -> option<storage>;
    init-storage-event: func(%type: string, can-bubble: option<bool>, cancelable: option<bool>, key: option<string>, old-value: option<string>, new-value: option<string>, url: option<string>, storage-area: option<option<borrow<storage>>>);
  }
  record storage-event-init {
    key: option<string>,
    old-value: option<string>,
    new-value: option<string>,
    url: option<string>,
    storage-area: option<option<borrow<storage>>>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  enum fetch-state {
    requesting,
    responding,
    aborted,
    errored,
    complete,
  }
  resource fetch-observer {
    as-event-target: func() -> event-target;
    state: func() -> fetch-state;
    onstatechange-subscribe: func() -> pollable;
    onrequestprogress-subscribe: func() -> pollable;
    onresponseprogress-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource presentation-connection-list {
    as-event-target: func() -> event-target;
    connections: func() -> list<presentation-connection>;
    onconnectionavailable-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource html-param-element {
    as-html-element: func() -> html-element;
    name: func() -> string;
    set-name: func(name: string);
    value: func() -> string;
    set-value: func(value: string);
    %type: func() -> string;
    set-type: func(%type: string);
    value-type: func() -> string;
    set-value-type: func(value-type: string);
  }
  resource text-track-list {
    as-event-target: func() -> event-target;
    length: func() -> u32;
    get-track-by-id: func(id: string) -> option<text-track>;
    onchange-subscribe: func() -> pollable;
    onaddtrack-subscribe: func() -> pollable;
    onremovetrack-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  enum audio-context-state {
    suspended,
    running,
    closed,
  }
  resource base-audio-context {
    as-event-target: func() -> event-target;
    as-offline-audio-context: func() -> option<offline-audio-context>;
    destination: func() -> audio-destination-node;
    sample-rate: func() -> f32;
    current-time: func() -> f64;
    listener: func() -> audio-listener;
    state: func() -> audio-context-state;
    audio-worklet: func() -> audio-worklet;
    resume: func();
    onstatechange-subscribe: func() -> pollable;
    create-buffer: func(number-of-channels: u32, length: u32, sample-rate: f32) -> audio-buffer;
    decode-audio-data: func(audio-data: array-buffer, success-callback: option<borrow<decode-success-callback>>, error-callback: option<borrow<decode-error-callback>>) -> audio-buffer;
    create-buffer-source: func() -> audio-buffer-source-node;
    create-constant-source: func() -> constant-source-node;
    create-script-processor: func(buffer-size: option<u32>, number-of-input-channels: option<u32>, number-of-output-channels: option<u32>) -> script-processor-node;
    create-analyser: func() -> analyser-node;
    create-gain: func() -> gain-node;
    create-delay: func(max-delay-time: option<f64>) -> delay-node;
    create-biquad-filter: func() -> biquad-filter-node;
    create-iir-filter: func(feedforward: list<f64>, feedback: list<f64>) -> iir-filter-node;
    create-wave-shaper: func() -> wave-shaper-node;
    create-panner: func() -> panner-node;
    create-stereo-panner: func() -> stereo-panner-node;
    create-convolver: func() -> convolver-node;
    create-channel-splitter: func(number-of-outputs: option<u32>) -> channel-splitter-node;
    create-channel-merger: func(number-of-inputs: option<u32>) -> channel-merger-node;
    create-dynamics-compressor: func() -> dynamics-compressor-node;
    create-oscillator: func() -> oscillator-node;
    create-periodic-wave: func(real: float32-array, imag: float32-array, constraints: option<periodic-wave-constraints>) -> periodic-wave;
    as-audio-context: func() -> option<audio-context>;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource transition-event {
    as-event: func() -> event;
    property-name: func() -> string;
    elapsed-time: func() -> f32;
    pseudo-element: func() -> string;
  }
  record transition-event-init {
    property-name: option<string>,
    elapsed-time: option<f32>,
    pseudo-element: option<string>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  enum permission-state {
    granted,
    denied,
    prompt,
  }
  resource permission-status {
    as-event-target: func() -> event-target;
    state: func() -> permission-state;
    onchange-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  type key-type = string;
  type key-usage = string;
  type named-curve = string;
  type big-integer = uint8-array;
  record algorithm {
    name: string,
  }
  record aes-cbc-params {
    iv: buffer-source,
    name: string,
  }
  record aes-ctr-params {
    counter: buffer-source,
    length: u8,
    name: string,
  }
  record aes-gcm-params {
    iv: buffer-source,
    additional-data: option<buffer-source>,
    tag-length: option<u8>,
    name: string,
  }
  record hmac-import-params {
    hash: algorithm-identifier,
    name: string,
  }
  record pbkdf2-params {
    salt: buffer-source,
    iterations: u32,
    hash: algorithm-identifier,
    name: string,
  }
  record rsa-hashed-import-params {
    hash: algorithm-identifier,
  }
  record aes-key-gen-params {
    length: u16,
    name: string,
  }
  record hmac-key-gen-params {
    hash: algorithm-identifier,
    length: option<u32>,
    name: string,
  }
  record rsa-hashed-key-gen-params {
    modulus-length: u32,
    public-exponent: big-integer,
    hash: algorithm-identifier,
    name: string,
  }
  record rsa-oaep-params {
    label: option<buffer-source>,
    name: string,
  }
  record rsa-pss-params {
    salt-length: u32,
    name: string,
  }
  record dh-key-gen-params {
    prime: big-integer,
    generator: big-integer,
    name: string,
  }
  record ec-key-gen-params {
    named-curve: named-curve,
    name: string,
  }
  record aes-derived-key-params {
    length: u32,
    name: string,
  }
  record hmac-derived-key-params {
    length: option<u32>,
    hash: algorithm-identifier,
    name: string,
  }
  record ecdh-key-derive-params {
    public: borrow<crypto-key>,
    name: string,
  }
  record dh-key-derive-params {
    public: borrow<crypto-key>,
    name: string,
  }
  record dh-import-key-params {
    prime: big-integer,
    generator: big-integer,
    name: string,
  }
  record ecdsa-params {
    hash: algorithm-identifier,
    name: string,
  }
  record ec-key-import-params {
    named-curve: option<named-curve>,
    name: string,
  }
  record hkdf-params {
    hash: algorithm-identifier,
    salt: buffer-source,
    info: buffer-source,
    name: string,
  }
  record rsa-other-primes-info {
    r: string,
    d: string,
    t: string,
  }
  record json-web-key {
    kty: string,
    %use: option<string>,
    key-ops: option<list<string>>,
    alg: option<string>,
    ext: option<bool>,
    crv: option<string>,
    x: option<string>,
    y: option<string>,
    d: option<string>,
    n: option<string>,
    e: option<string>,
    p: option<string>,
    q: option<string>,
    dp: option<string>,
    dq: option<string>,
    qi: option<string>,
    oth: option<list<rsa-other-primes-info>>,
    k: option<string>,
  }
  resource crypto-key {
    %type: func() -> key-type;
    extractable: func() -> bool;
    algorithm: func() -> object;
    usages: func() -> list<key-usage>;
  }
  record crypto-key-pair {
    public-key: borrow<crypto-key>,
    private-key: borrow<crypto-key>,
  }
  type key-format = string;
  variant object-or-string {
    object(object),
    %string(string),
  }
  type algorithm-identifier = object-or-string;
  resource subtle-crypto {
    encrypt: func(algorithm: algorithm-identifier, key: borrow<crypto-key>, data: buffer-source) -> any;
    decrypt: func(algorithm: algorithm-identifier, key: borrow<crypto-key>, data: buffer-source) -> any;
    sign: func(algorithm: algorithm-identifier, key: borrow<crypto-key>, data: buffer-source) -> any;
    verify: func(algorithm: algorithm-identifier, key: borrow<crypto-key>, signature: buffer-source, data: buffer-source) -> any;
    digest: func(algorithm: algorithm-identifier, data: buffer-source) -> any;
    generate-key: func(algorithm: algorithm-identifier, extractable: bool, key-usages: list<key-usage>) -> any;
    derive-key: func(algorithm: algorithm-identifier, base-key: borrow<crypto-key>, derived-key-type: algorithm-identifier, extractable: bool, key-usages: list<key-usage>) -> any;
    derive-bits: func(algorithm: algorithm-identifier, base-key: borrow<crypto-key>, length: u32) -> any;
    import-key: func(format: key-format, key-data: object, algorithm: algorithm-identifier, extractable: bool, key-usages: list<key-usage>) -> any;
    export-key: func(format: key-format, key: borrow<crypto-key>) -> any;
    wrap-key: func(format: key-format, key: borrow<crypto-key>, wrapping-key: borrow<crypto-key>, wrap-algorithm: algorithm-identifier) -> any;
    unwrap-key: func(format: key-format, wrapped-key: buffer-source, unwrapping-key: borrow<crypto-key>, unwrap-algorithm: algorithm-identifier, unwrapped-key-algorithm: algorithm-identifier, extractable: bool, key-usages: list<key-usage>) -> any;
  }
  resource svg-line-element {
    as-svg-geometry-element: func() -> svg-geometry-element;
    x1: func() -> svg-animated-length;
    y1: func() -> svg-animated-length;
    x2: func() -> svg-animated-length;
    y2: func() -> svg-animated-length;
  }
  resource html-html-element {
    as-html-element: func() -> html-element;
    version: func() -> string;
    set-version: func(version: string);
  }
  resource svg-transform {
    SVG-TRANSFORM-UNKNOWN: static func() -> u16;
    SVG-TRANSFORM-MATRIX: static func() -> u16;
    SVG-TRANSFORM-TRANSLATE: static func() -> u16;
    SVG-TRANSFORM-SCALE: static func() -> u16;
    SVG-TRANSFORM-ROTATE: static func() -> u16;
    SVG-TRANSFORM-SKEWX: static func() -> u16;
    SVG-TRANSFORM-SKEWY: static func() -> u16;
    %type: func() -> u16;
    matrix: func() -> svg-matrix;
    angle: func() -> f32;
    set-matrix: func(matrix: borrow<svg-matrix>);
    set-translate: func(tx: f32, ty: f32);
    set-scale: func(sx: f32, sy: f32);
    set-rotate: func(angle: f32, cx: f32, cy: f32);
    set-skew-x: func(angle: f32);
    set-skew-y: func(angle: f32);
  }
  resource html-dialog-element {
    as-html-element: func() -> html-element;
    open: func() -> bool;
    set-open: func(open: bool);
    return-value: func() -> string;
    set-return-value: func(return-value: string);
    show: func();
    show-modal: func();
    close: func(return-value: option<string>);
  }
  enum recording-state {
    inactive,
    recording,
    paused,
  }
  resource media-recorder {
    as-event-target: func() -> event-target;
    %stream: func() -> media-stream;
    state: func() -> recording-state;
    mime-type: func() -> string;
    ondataavailable-subscribe: func() -> pollable;
    onerror-subscribe: func() -> pollable;
    onstart-subscribe: func() -> pollable;
    onstop-subscribe: func() -> pollable;
    onwarning-subscribe: func() -> pollable;
    start: func(time-slice: option<s32>);
    stop: func();
    pause: func();
    resume: func();
    request-data: func();
    is-type-supported: static func(%type: string) -> bool;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  record media-recorder-options {
    mime-type: option<string>,
    audio-bits-per-second: option<u32>,
    video-bits-per-second: option<u32>,
    bits-per-second: option<u32>,
  }
  resource paint-request {
    client-rect: func() -> dom-rect;
    reason: func() -> string;
  }
  resource svg-text-positioning-element {
    as-svg-text-content-element: func() -> svg-text-content-element;
    as-svg-text-element: func() -> option<svg-text-element>;
    x: func() -> svg-animated-length-list;
    y: func() -> svg-animated-length-list;
    dx: func() -> svg-animated-length-list;
    dy: func() -> svg-animated-length-list;
    rotate: func() -> svg-animated-number-list;
    LENGTHADJUST-UNKNOWN: static func() -> u16;
    LENGTHADJUST-SPACING: static func() -> u16;
    LENGTHADJUST-SPACINGANDGLYPHS: static func() -> u16;
    text-length: func() -> svg-animated-length;
    length-adjust: func() -> svg-animated-enumeration;
    get-number-of-chars: func() -> s32;
    get-computed-text-length: func() -> f32;
    get-sub-string-length: func(charnum: u32, nchars: u32) -> f32;
    get-start-position-of-char: func(charnum: u32) -> svg-point;
    get-end-position-of-char: func(charnum: u32) -> svg-point;
    get-extent-of-char: func(charnum: u32) -> svg-rect;
    get-rotation-of-char: func(charnum: u32) -> f32;
    get-char-num-at-position: func(point: borrow<svg-point>) -> s32;
    select-sub-string: func(charnum: u32, nchars: u32);
    as-svgt-span-element: func() -> option<svgt-span-element>;
  }
  resource submit-event {
    as-event: func() -> event;
    submitter: func() -> option<html-element>;
  }
  record submit-event-init {
    submitter: option<option<borrow<html-element>>>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  enum scroll-setting {
    default,
    up,
  }
  resource vtt-region {
    id: func() -> string;
    set-id: func(id: string);
    width: func() -> f64;
    set-width: func(width: f64);
    lines: func() -> s32;
    set-lines: func(lines: s32);
    region-anchor-x: func() -> f64;
    set-region-anchor-x: func(region-anchor-x: f64);
    region-anchor-y: func() -> f64;
    set-region-anchor-y: func(region-anchor-y: f64);
    viewport-anchor-x: func() -> f64;
    set-viewport-anchor-x: func(viewport-anchor-x: f64);
    viewport-anchor-y: func() -> f64;
    set-viewport-anchor-y: func(viewport-anchor-y: f64);
    scroll: func() -> scroll-setting;
    set-scroll: func(scroll: scroll-setting);
  }
  resource media-encrypted-event {
    as-event: func() -> event;
    init-data-type: func() -> string;
    init-data: func() -> array-buffer;
  }
  record media-key-needed-event-init {
    init-data-type: option<string>,
    init-data: option<array-buffer>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource device-orientation-event {
    as-event: func() -> event;
    alpha: func() -> f64;
    beta: func() -> f64;
    gamma: func() -> f64;
    absolute: func() -> bool;
    init-device-orientation-event: func(%type: string, can-bubble: option<bool>, cancelable: option<bool>, alpha: option<f64>, beta: option<f64>, gamma: option<f64>, absolute: option<bool>);
  }
  record device-orientation-event-init {
    alpha: option<f64>,
    beta: option<f64>,
    gamma: option<f64>,
    absolute: option<bool>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource svg-metadata-element {
    as-svg-element: func() -> svg-element;
  }
  resource svg-stop-element {
    as-svg-element: func() -> svg-element;
    offset: func() -> svg-animated-number;
  }
  resource idb-mutable-file {
    as-event-target: func() -> event-target;
    name: func() -> string;
    %type: func() -> string;
    database: func() -> idb-database;
    open: func(mode: option<borrow<file-mode>>) -> idb-file-handle;
    get-file: func() -> dom-request;
    onabort-subscribe: func() -> pollable;
    onerror-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource svg-animated-integer {
    base-val: func() -> s32;
    set-base-val: func(base-val: s32);
    anim-val: func() -> s32;
  }
  resource pointer-event {
    as-mouse-event: func() -> mouse-event;
    pointer-id: func() -> s32;
    width: func() -> s32;
    height: func() -> s32;
    pressure: func() -> f32;
    tangential-pressure: func() -> f32;
    tilt-x: func() -> s32;
    tilt-y: func() -> s32;
    twist: func() -> s32;
    pointer-type: func() -> string;
    is-primary: func() -> bool;
    get-coalesced-events: func() -> list<pointer-event>;
    screen-x: func() -> s32;
    screen-y: func() -> s32;
    client-x: func() -> s32;
    client-y: func() -> s32;
    x: func() -> s32;
    y: func() -> s32;
    offset-x: func() -> s32;
    offset-y: func() -> s32;
    ctrl-key: func() -> bool;
    shift-key: func() -> bool;
    alt-key: func() -> bool;
    meta-key: func() -> bool;
    button: func() -> s16;
    buttons: func() -> u16;
    related-target: func() -> option<event-target>;
    region: func() -> string;
    movement-x: func() -> s32;
    movement-y: func() -> s32;
    init-mouse-event: func(type-arg: string, can-bubble-arg: option<bool>, cancelable-arg: option<bool>, view-arg: option<option<borrow<window>>>, detail-arg: option<s32>, screen-x-arg: option<s32>, screen-y-arg: option<s32>, client-x-arg: option<s32>, client-y-arg: option<s32>, ctrl-key-arg: option<bool>, alt-key-arg: option<bool>, shift-key-arg: option<bool>, meta-key-arg: option<bool>, button-arg: option<s16>, related-target-arg: option<option<borrow<event-target>>>);
    get-modifier-state: func(key-arg: string) -> bool;
  }
  record pointer-event-init {
    pointer-id: option<s32>,
    width: option<s32>,
    height: option<s32>,
    pressure: option<f32>,
    tangential-pressure: option<f32>,
    tilt-x: option<s32>,
    tilt-y: option<s32>,
    twist: option<s32>,
    pointer-type: option<string>,
    is-primary: option<bool>,
    coalesced-events: option<list<borrow<pointer-event>>>,
    screen-x: option<s32>,
    screen-y: option<s32>,
    client-x: option<s32>,
    client-y: option<s32>,
    button: option<s16>,
    buttons: option<u16>,
    related-target: option<option<borrow<event-target>>>,
    movement-x: option<s32>,
    movement-y: option<s32>,
  }
  enum xml-http-request-response-type {
    default,
    arraybuffer,
    blob,
    document,
    json,
    text,
  }
  resource xml-http-request {
    as-xml-http-request-event-target: func() -> xml-http-request-event-target;
    onreadystatechange-subscribe: func() -> pollable;
    UNSENT: static func() -> u16;
    OPENED: static func() -> u16;
    HEADERS-RECEIVED: static func() -> u16;
    LOADING: static func() -> u16;
    DONE: static func() -> u16;
    ready-state: func() -> u16;
    open: func(params: xml-http-request-open-params);
    set-request-header: func(header: string, value: string);
    timeout: func() -> u32;
    set-timeout: func(timeout: u32);
    with-credentials: func() -> bool;
    set-with-credentials: func(with-credentials: bool);
    upload: func() -> xml-http-request-upload;
    send: func(body: option<body-init-or-document>);
    abort: func();
    response-url: func() -> string;
    status: func() -> u16;
    status-text: func() -> string;
    get-response-header: func(header: string) -> string;
    get-all-response-headers: func() -> string;
    override-mime-type: func(mime: string);
    response-type: func() -> xml-http-request-response-type;
    set-response-type: func(response-type: xml-http-request-response-type);
    response: func() -> any;
    response-text: func() -> string;
    response-xml: func() -> option<document>;
  }
  variant body-init-or-document {
    body-init(body-init),
    document(borrow<document>),
  }
  variant xml-http-request-open-params {
    method-url(tuple<string, string>),
    method-url-async-user-password(tuple<string, string, bool, option<string>, option<string>>),
  }
  type ns-i-supports = object;
  resource html-menu-element {
    as-html-element: func() -> html-element;
    %type: func() -> string;
    set-type: func(%type: string);
    label: func() -> string;
    set-label: func(label: string);
    compact: func() -> bool;
    set-compact: func(compact: bool);
  }
  resource performance-navigation {
    TYPE-NAVIGATE: static func() -> u16;
    TYPE-RELOAD: static func() -> u16;
    TYPE-BACK-FORWARD: static func() -> u16;
    TYPE-RESERVED: static func() -> u16;
    %type: func() -> u16;
    redirect-count: func() -> u16;
    to-json: func() -> object;
  }
  resource svg-animated-length {
    base-val: func() -> svg-length;
    anim-val: func() -> svg-length;
  }
  resource html-directory-element {
    as-html-element: func() -> html-element;
    compact: func() -> bool;
    set-compact: func(compact: bool);
  }
  resource input-event {
    as-ui-event: func() -> ui-event;
    is-composing: func() -> bool;
    input-type: func() -> string;
    data: func() -> string;
    data-transfer: func() -> option<data-transfer>;
    get-target-ranges: func() -> list<static-range>;
    view: func() -> option<window-proxy>;
    detail: func() -> s32;
    init-ui-event: func(a-type: string, a-can-bubble: option<bool>, a-cancelable: option<bool>, a-view: option<option<borrow<window>>>, a-detail: option<s32>);
  }
  record input-event-init {
    is-composing: option<bool>,
    input-type: option<string>,
    data: option<string>,
    view: option<option<borrow<window>>>,
    detail: option<s32>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource dom-rect-list {
    length: func() -> u32;
    item: func(index: u32) -> option<dom-rect>;
  }
  resource exception {
    name: func() -> string;
    message: func() -> string;
    %result: func() -> u32;
    filename: func() -> string;
    line-number: func() -> u32;
    column-number: func() -> u32;
    location: func() -> option<stack-frame>;
    data: func() -> option<ns-i-supports>;
    stack: func() -> string;
  }
  resource dom-exception {
    name: func() -> string;
    message: func() -> string;
    code: func() -> u16;
    INDEX-SIZE-ERR: static func() -> u16;
    DOMSTRING-SIZE-ERR: static func() -> u16;
    HIERARCHY-REQUEST-ERR: static func() -> u16;
    WRONG-DOCUMENT-ERR: static func() -> u16;
    INVALID-CHARACTER-ERR: static func() -> u16;
    NO-DATA-ALLOWED-ERR: static func() -> u16;
    NO-MODIFICATION-ALLOWED-ERR: static func() -> u16;
    NOT-FOUND-ERR: static func() -> u16;
    NOT-SUPPORTED-ERR: static func() -> u16;
    INUSE-ATTRIBUTE-ERR: static func() -> u16;
    INVALID-STATE-ERR: static func() -> u16;
    SYNTAX-ERR: static func() -> u16;
    INVALID-MODIFICATION-ERR: static func() -> u16;
    NAMESPACE-ERR: static func() -> u16;
    INVALID-ACCESS-ERR: static func() -> u16;
    VALIDATION-ERR: static func() -> u16;
    TYPE-MISMATCH-ERR: static func() -> u16;
    SECURITY-ERR: static func() -> u16;
    NETWORK-ERR: static func() -> u16;
    ABORT-ERR: static func() -> u16;
    URL-MISMATCH-ERR: static func() -> u16;
    QUOTA-EXCEEDED-ERR: static func() -> u16;
    TIMEOUT-ERR: static func() -> u16;
    INVALID-NODE-TYPE-ERR: static func() -> u16;
    DATA-CLONE-ERR: static func() -> u16;
    %result: func() -> u32;
    filename: func() -> string;
    line-number: func() -> u32;
    column-number: func() -> u32;
    location: func() -> option<stack-frame>;
    data: func() -> option<ns-i-supports>;
    stack: func() -> string;
  }
  resource css-font-face-rule {
    as-css-rule: func() -> css-rule;
    style: func() -> css-style-declaration;
    STYLE-RULE: static func() -> u16;
    CHARSET-RULE: static func() -> u16;
    IMPORT-RULE: static func() -> u16;
    MEDIA-RULE: static func() -> u16;
    FONT-FACE-RULE: static func() -> u16;
    PAGE-RULE: static func() -> u16;
    NAMESPACE-RULE: static func() -> u16;
    %type: func() -> u16;
    css-text: func() -> string;
    set-css-text: func(css-text: string);
    parent-rule: func() -> option<css-rule>;
    parent-style-sheet: func() -> option<css-style-sheet>;
  }
  enum push-encryption-key-name {
    p256dh,
    auth,
  }
  record push-subscription-keys {
    p256dh: option<string>,
    auth: option<string>,
  }
  record push-subscription-json {
    endpoint: option<string>,
    keys: option<push-subscription-keys>,
  }
  record push-subscription-init {
    endpoint: string,
    scope: string,
    p256dh-key: option<array-buffer>,
    auth-secret: option<array-buffer>,
    app-server-key: option<buffer-source>,
  }
  resource push-subscription {
    endpoint: func() -> string;
    options: func() -> push-subscription-options;
    get-key: func(name: push-encryption-key-name) -> array-buffer;
    unsubscribe: func() -> bool;
    to-json: func() -> push-subscription-json;
  }
  enum audio-context-latency-category {
    balanced,
    interactive,
    playback,
  }
  variant audio-context-latency-category-or-f64 {
    audio-context-latency-category(audio-context-latency-category),
    %f64(f64),
  }
  record audio-context-options {
    latency-hint: option<audio-context-latency-category-or-f64>,
    sample-rate: option<f32>,
  }
  resource audio-context {
    as-base-audio-context: func() -> base-audio-context;
    suspend: func();
    close: func();
    create-media-element-source: func(media-element: borrow<html-media-element>) -> media-element-audio-source-node;
    create-media-stream-source: func(media-stream: borrow<media-stream>) -> media-stream-audio-source-node;
    create-media-stream-destination: func() -> media-stream-audio-destination-node;
    destination: func() -> audio-destination-node;
    sample-rate: func() -> f32;
    current-time: func() -> f64;
    listener: func() -> audio-listener;
    state: func() -> audio-context-state;
    audio-worklet: func() -> audio-worklet;
    resume: func();
    onstatechange-subscribe: func() -> pollable;
    create-buffer: func(number-of-channels: u32, length: u32, sample-rate: f32) -> audio-buffer;
    decode-audio-data: func(audio-data: array-buffer, success-callback: option<borrow<decode-success-callback>>, error-callback: option<borrow<decode-error-callback>>) -> audio-buffer;
    create-buffer-source: func() -> audio-buffer-source-node;
    create-constant-source: func() -> constant-source-node;
    create-script-processor: func(buffer-size: option<u32>, number-of-input-channels: option<u32>, number-of-output-channels: option<u32>) -> script-processor-node;
    create-analyser: func() -> analyser-node;
    create-gain: func() -> gain-node;
    create-delay: func(max-delay-time: option<f64>) -> delay-node;
    create-biquad-filter: func() -> biquad-filter-node;
    create-iir-filter: func(feedforward: list<f64>, feedback: list<f64>) -> iir-filter-node;
    create-wave-shaper: func() -> wave-shaper-node;
    create-panner: func() -> panner-node;
    create-stereo-panner: func() -> stereo-panner-node;
    create-convolver: func() -> convolver-node;
    create-channel-splitter: func(number-of-outputs: option<u32>) -> channel-splitter-node;
    create-channel-merger: func(number-of-inputs: option<u32>) -> channel-merger-node;
    create-dynamics-compressor: func() -> dynamics-compressor-node;
    create-oscillator: func() -> oscillator-node;
    create-periodic-wave: func(real: float32-array, imag: float32-array, constraints: option<periodic-wave-constraints>) -> periodic-wave;
  }
  record touch-init {
    identifier: s32,
    target: borrow<event-target>,
    client-x: option<s32>,
    client-y: option<s32>,
    screen-x: option<s32>,
    screen-y: option<s32>,
    page-x: option<s32>,
    page-y: option<s32>,
    radius-x: option<f32>,
    radius-y: option<f32>,
    rotation-angle: option<f32>,
    force: option<f32>,
  }
  resource touch {
    identifier: func() -> s32;
    target: func() -> option<event-target>;
    screen-x: func() -> s32;
    screen-y: func() -> s32;
    client-x: func() -> s32;
    client-y: func() -> s32;
    page-x: func() -> s32;
    page-y: func() -> s32;
    radius-x: func() -> s32;
    radius-y: func() -> s32;
    rotation-angle: func() -> f32;
    force: func() -> f32;
  }
  resource html-media-element {
    as-html-element: func() -> html-element;
    as-html-audio-element: func() -> option<html-audio-element>;
    error: func() -> option<media-error>;
    src: func() -> string;
    set-src: func(src: string);
    current-src: func() -> string;
    src-object: func() -> option<media-stream>;
    set-src-object: func(src-object: option<media-stream>);
    cross-origin: func() -> string;
    set-cross-origin: func(cross-origin: string);
    NETWORK-EMPTY: static func() -> u16;
    NETWORK-IDLE: static func() -> u16;
    NETWORK-LOADING: static func() -> u16;
    NETWORK-NO-SOURCE: static func() -> u16;
    network-state: func() -> u16;
    preload: func() -> string;
    set-preload: func(preload: string);
    buffered: func() -> time-ranges;
    load: func();
    can-play-type: func(%type: string) -> string;
    HAVE-NOTHING: static func() -> u16;
    HAVE-METADATA: static func() -> u16;
    HAVE-CURRENT-DATA: static func() -> u16;
    HAVE-FUTURE-DATA: static func() -> u16;
    HAVE-ENOUGH-DATA: static func() -> u16;
    ready-state: func() -> u16;
    seeking: func() -> bool;
    current-time: func() -> f64;
    set-current-time: func(current-time: f64);
    fast-seek: func(time: f64);
    duration: func() -> f64;
    is-encrypted: func() -> bool;
    paused: func() -> bool;
    default-playback-rate: func() -> f64;
    set-default-playback-rate: func(default-playback-rate: f64);
    playback-rate: func() -> f64;
    set-playback-rate: func(playback-rate: f64);
    played: func() -> time-ranges;
    seekable: func() -> time-ranges;
    ended: func() -> bool;
    autoplay: func() -> bool;
    set-autoplay: func(autoplay: bool);
    loop: func() -> bool;
    set-loop: func(loop: bool);
    play: func();
    pause: func();
    controls: func() -> bool;
    set-controls: func(controls: bool);
    volume: func() -> f64;
    set-volume: func(volume: f64);
    muted: func() -> bool;
    set-muted: func(muted: bool);
    default-muted: func() -> bool;
    set-default-muted: func(default-muted: bool);
    audio-tracks: func() -> audio-track-list;
    video-tracks: func() -> video-track-list;
    text-tracks: func() -> option<text-track-list>;
    add-text-track: func(kind: text-track-kind, label: option<string>, language: option<string>) -> text-track;
    media-keys: func() -> option<media-keys>;
    set-media-keys: func(media-keys: option<borrow<media-keys>>);
    onencrypted-subscribe: func() -> pollable;
    onwaitingforkey-subscribe: func() -> pollable;
    seek-to-next-frame: func();
    set-visible: func(a-visible: bool);
    has-suspend-taint: func() -> bool;
    as-html-video-element: func() -> option<html-video-element>;
  }
  resource dom-implementation {
    has-feature: func() -> bool;
    create-document-type: func(qualified-name: string, public-id: string, system-id: string) -> document-type;
    create-document: func(namespace: string, qualified-name: string, doctype: option<option<borrow<document-type>>>) -> document;
    create-html-document: func(title: option<string>) -> document;
  }
  enum composite-operation {
    replace,
    add,
    accumulate,
  }
  variant list-option-composite-operation-or-option-composite-operation {
    list-option-composite-operation(list<option<composite-operation>>),
    option-composite-operation(option<composite-operation>),
  }
  record base-property-indexed-keyframe {
    offset: option<f64-or-list-f64>,
    easing: option<list-string-or-string>,
    composite: option<list-option-composite-operation-or-option-composite-operation>,
  }
  record base-keyframe {
    offset: option<f64>,
    easing: option<string>,
    composite: option<option<composite-operation>>,
    simulate-compute-values-failure: option<bool>,
  }
  record base-computed-keyframe {
    computed-offset: option<f64>,
    offset: option<f64>,
    easing: option<string>,
    composite: option<option<composite-operation>>,
    simulate-compute-values-failure: option<bool>,
  }
  resource node-list {
    item: func(index: u32) -> option<node>;
    length: func() -> u32;
    as-radio-node-list: func() -> option<radio-node-list>;
  }
  resource midi-connection-event {
    as-event: func() -> event;
    port: func() -> option<midi-port>;
  }
  record midi-connection-event-init {
    port: option<option<borrow<midi-port>>>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource html-details-element {
    as-html-element: func() -> html-element;
    open: func() -> bool;
    set-open: func(open: bool);
  }
  record rtc-identity-assertion {
    idp: option<string>,
    name: option<string>,
  }
  resource image-data {
    width: func() -> u32;
    height: func() -> u32;
    data: func() -> uint8-clamped-array;
  }
  resource svg-marker-element {
    as-svg-element: func() -> svg-element;
    SVG-MARKERUNITS-UNKNOWN: static func() -> u16;
    SVG-MARKERUNITS-USERSPACEONUSE: static func() -> u16;
    SVG-MARKERUNITS-STROKEWIDTH: static func() -> u16;
    SVG-MARKER-ORIENT-UNKNOWN: static func() -> u16;
    SVG-MARKER-ORIENT-AUTO: static func() -> u16;
    SVG-MARKER-ORIENT-ANGLE: static func() -> u16;
    ref-x: func() -> svg-animated-length;
    ref-y: func() -> svg-animated-length;
    marker-units: func() -> svg-animated-enumeration;
    marker-width: func() -> svg-animated-length;
    marker-height: func() -> svg-animated-length;
    orient-type: func() -> svg-animated-enumeration;
    orient-angle: func() -> svg-animated-angle;
    set-orient-to-auto: func();
    set-orient-to-angle: func(angle: borrow<svg-angle>);
    view-box: func() -> svg-animated-rect;
    preserve-aspect-ratio: func() -> svg-animated-preserve-aspect-ratio;
  }
  resource audio-track {
    id: func() -> string;
    kind: func() -> string;
    label: func() -> string;
    language: func() -> string;
    enabled: func() -> bool;
    set-enabled: func(enabled: bool);
    source-buffer: func() -> option<source-buffer>;
  }
  resource comment {
    as-character-data: func() -> character-data;
  }
  resource html-document {
    as-document: func() -> document;
    domain: func() -> string;
    set-domain: func(domain: string);
    cookie: func() -> string;
    set-cookie: func(cookie: string);
    close: func();
    write: func(text: list<string>);
    writeln: func(text: list<string>);
    design-mode: func() -> string;
    set-design-mode: func(design-mode: string);
    exec-command: func(command-id: string, show-ui: option<bool>, value: option<string>) -> bool;
    query-command-enabled: func(command-id: string) -> bool;
    query-command-indeterm: func(command-id: string) -> bool;
    query-command-state: func(command-id: string) -> bool;
    query-command-supported: func(command-id: string) -> bool;
    query-command-value: func(command-id: string) -> string;
    fg-color: func() -> string;
    set-fg-color: func(fg-color: string);
    link-color: func() -> string;
    set-link-color: func(link-color: string);
    vlink-color: func() -> string;
    set-vlink-color: func(vlink-color: string);
    alink-color: func() -> string;
    set-alink-color: func(alink-color: string);
    bg-color: func() -> string;
    set-bg-color: func(bg-color: string);
    clear: func();
    all: func() -> html-all-collection;
    capture-events: func();
    release-events: func();
    blocked-tracking-node-count: func() -> s32;
    blocked-tracking-nodes: func() -> node-list;
    as-image-document: func() -> option<image-document>;
    implementation: func() -> dom-implementation;
    url: func() -> string;
    document-uri: func() -> string;
    compat-mode: func() -> string;
    character-set: func() -> string;
    charset: func() -> string;
    input-encoding: func() -> string;
    content-type: func() -> string;
    doctype: func() -> option<document-type>;
    document-element: func() -> option<element>;
    get-elements-by-tag-name: func(local-name: string) -> html-collection;
    get-elements-by-tag-name-ns: func(namespace: string, local-name: string) -> html-collection;
    get-elements-by-class-name: func(class-names: string) -> html-collection;
    get-element-by-id: func(element-id: string) -> option<element>;
    create-element: func(local-name: string, options: option<element-creation-options-or-string>) -> element;
    create-element-ns: func(namespace: string, qualified-name: string, options: option<element-creation-options-or-string>) -> element;
    create-document-fragment: func() -> document-fragment;
    create-text-node: func(data: string) -> text;
    create-comment: func(data: string) -> comment;
    create-processing-instruction: func(target: string, data: string) -> processing-instruction;
    import-node: func(node: borrow<node>, deep: option<bool>) -> node;
    adopt-node: func(node: borrow<node>) -> node;
    create-event: func(%interface: string) -> event;
    create-range: func() -> range;
    create-node-iterator: func(root: borrow<node>, what-to-show: option<u32>, filter: option<option<borrow<node-filter>>>) -> node-iterator;
    create-tree-walker: func(root: borrow<node>, what-to-show: option<u32>, filter: option<option<borrow<node-filter>>>) -> tree-walker;
    create-cdata-section: func(data: string) -> cdata-section;
    create-attribute: func(name: string) -> attr;
    create-attribute-ns: func(namespace: string, name: string) -> attr;
  }
  resource push-event {
    as-extendable-event: func() -> extendable-event;
    data: func() -> option<push-message-data>;
  }
  variant buffer-source-or-string {
    buffer-source(buffer-source),
    %string(string),
  }
  type push-message-data-init = buffer-source-or-string;
  record push-event-init {
    data: option<push-message-data-init>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  enum binary-type {
    blob,
    arraybuffer,
  }
  resource web-socket {
    as-event-target: func() -> event-target;
    url: func() -> string;
    CONNECTING: static func() -> u16;
    OPEN: static func() -> u16;
    CLOSING: static func() -> u16;
    CLOSED: static func() -> u16;
    ready-state: func() -> u16;
    buffered-amount: func() -> u32;
    onopen-subscribe: func() -> pollable;
    onerror-subscribe: func() -> pollable;
    onclose-subscribe: func() -> pollable;
    extensions: func() -> string;
    protocol: func() -> string;
    close: func(code: option<u16>, reason: option<string>);
    onmessage-subscribe: func() -> pollable;
    binary-type: func() -> binary-type;
    set-binary-type: func(binary-type: binary-type);
    send: func(params: web-socket-send-params);
    create-server-web-socket: static func(url: string, protocols: list<string>, transport-provider: borrow<ns-i-transport-provider>, negotiated-extensions: string) -> web-socket;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  variant web-socket-send-params {
    data(string),
    // data(borrow<blob>),
    // data(array-buffer),
    // data(array-buffer-view),
  }
  resource svg-unit-types {
    SVG-UNIT-TYPE-UNKNOWN: static func() -> u16;
    SVG-UNIT-TYPE-USERSPACEONUSE: static func() -> u16;
    SVG-UNIT-TYPE-OBJECTBOUNDINGBOX: static func() -> u16;
  }
  resource html-form-element {
    as-html-element: func() -> html-element;
    accept-charset: func() -> string;
    set-accept-charset: func(accept-charset: string);
    action: func() -> string;
    set-action: func(action: string);
    autocomplete: func() -> string;
    set-autocomplete: func(autocomplete: string);
    enctype: func() -> string;
    set-enctype: func(enctype: string);
    encoding: func() -> string;
    set-encoding: func(encoding: string);
    method: func() -> string;
    set-method: func(method: string);
    name: func() -> string;
    set-name: func(name: string);
    no-validate: func() -> bool;
    set-no-validate: func(no-validate: bool);
    target: func() -> string;
    set-target: func(target: string);
    elements: func() -> html-collection;
    length: func() -> s32;
    submit: func();
    request-submit: func(submitter: option<option<borrow<html-element>>>);
    reset: func();
    check-validity: func() -> bool;
    report-validity: func() -> bool;
  }
  record rtc-data-channel-event-init {
    channel: borrow<rtc-data-channel>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource rtc-data-channel-event {
    as-event: func() -> event;
    channel: func() -> rtc-data-channel;
  }
  record image-encode-options {
    %type: option<string>,
    quality: option<f64>,
  }
  resource offscreen-canvas {
    as-event-target: func() -> event-target;
    width: func() -> u32;
    set-width: func(width: u32);
    height: func() -> u32;
    set-height: func(height: u32);
    get-context: func(context-id: string, context-options: any) -> option<ns-i-supports>;
    transfer-to-image-bitmap: func() -> image-bitmap;
    convert-to-blob: func(options: option<image-encode-options>) -> blob;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource dom-string-map {
  }
  resource audio-listener {
    doppler-factor: func() -> f64;
    set-doppler-factor: func(doppler-factor: f64);
    speed-of-sound: func() -> f64;
    set-speed-of-sound: func(speed-of-sound: f64);
    set-position: func(x: f64, y: f64, z: f64);
    set-orientation: func(x: f64, y: f64, z: f64, x-up: f64, y-up: f64, z-up: f64);
    set-velocity: func(x: f64, y: f64, z: f64);
  }
  resource svgfe-composite-element {
    as-svg-element: func() -> svg-element;
    SVG-FECOMPOSITE-OPERATOR-UNKNOWN: static func() -> u16;
    SVG-FECOMPOSITE-OPERATOR-OVER: static func() -> u16;
    SVG-FECOMPOSITE-OPERATOR-IN: static func() -> u16;
    SVG-FECOMPOSITE-OPERATOR-OUT: static func() -> u16;
    SVG-FECOMPOSITE-OPERATOR-ATOP: static func() -> u16;
    SVG-FECOMPOSITE-OPERATOR-XOR: static func() -> u16;
    SVG-FECOMPOSITE-OPERATOR-ARITHMETIC: static func() -> u16;
    in1: func() -> svg-animated-string;
    in2: func() -> svg-animated-string;
    operator: func() -> svg-animated-enumeration;
    k1: func() -> svg-animated-number;
    k2: func() -> svg-animated-number;
    k3: func() -> svg-animated-number;
    k4: func() -> svg-animated-number;
    x: func() -> svg-animated-length;
    y: func() -> svg-animated-length;
    width: func() -> svg-animated-length;
    height: func() -> svg-animated-length;
    %result: func() -> svg-animated-string;
  }
  record rtc-rtp-contributing-source {
    timestamp: dom-high-res-time-stamp,
    source: u32,
    audio-level: option<f64>,
  }
  record rtc-rtp-synchronization-source {
    voice-activity-flag: option<bool>,
    timestamp: dom-high-res-time-stamp,
    source: u32,
    audio-level: option<f64>,
  }
  enum rtc-rtp-source-entry-type {
    contributing,
    synchronization,
  }
  record rtc-rtp-source-entry {
    source-type: rtc-rtp-source-entry-type,
    voice-activity-flag: option<bool>,
    timestamp: dom-high-res-time-stamp,
    source: u32,
    audio-level: option<f64>,
  }
  resource svg-mask-element {
    as-svg-element: func() -> svg-element;
    SVG-MASKTYPE-LUMINANCE: static func() -> u16;
    SVG-MASKTYPE-ALPHA: static func() -> u16;
    mask-units: func() -> svg-animated-enumeration;
    mask-content-units: func() -> svg-animated-enumeration;
    x: func() -> svg-animated-length;
    y: func() -> svg-animated-length;
    width: func() -> svg-animated-length;
    height: func() -> svg-animated-length;
  }
  enum video-facing-mode-enum {
    user,
    environment,
    left,
    right,
  }
  enum media-source-enum {
    camera,
    screen,
    application,
    window,
    browser,
    microphone,
    audio-capture,
    other,
  }
  variant constrain-long-range-or-s32 {
    constrain-long-range(constrain-long-range),
    %s32(s32),
  }
  type constrain-long = constrain-long-range-or-s32;
  variant constrain-double-range-or-f64 {
    constrain-double-range(constrain-double-range),
    %f64(f64),
  }
  type constrain-double = constrain-double-range-or-f64;
  variant bool-or-constrain-boolean-parameters {
    %bool(bool),
    constrain-boolean-parameters(constrain-boolean-parameters),
  }
  type constrain-boolean = bool-or-constrain-boolean-parameters;
  variant constrain-dom-string-parameters-or-list-string-or-string {
    constrain-dom-string-parameters(constrain-dom-string-parameters),
    list-string(list<string>),
    %string(string),
  }
  type constrain-dom-string = constrain-dom-string-parameters-or-list-string-or-string;
  record media-track-constraint-set {
    width: option<constrain-long>,
    height: option<constrain-long>,
    frame-rate: option<constrain-double>,
    facing-mode: option<constrain-dom-string>,
    media-source: option<string>,
    browser-window: option<s64>,
    scroll-with-page: option<bool>,
    device-id: option<constrain-dom-string>,
    viewport-offset-x: option<constrain-long>,
    viewport-offset-y: option<constrain-long>,
    viewport-width: option<constrain-long>,
    viewport-height: option<constrain-long>,
    echo-cancellation: option<constrain-boolean>,
    noise-suppression: option<constrain-boolean>,
    auto-gain-control: option<constrain-boolean>,
    channel-count: option<constrain-long>,
  }
  record media-track-constraints {
    advanced: option<list<media-track-constraint-set>>,
    width: option<constrain-long>,
    height: option<constrain-long>,
    frame-rate: option<constrain-double>,
    facing-mode: option<constrain-dom-string>,
    media-source: option<string>,
    browser-window: option<s64>,
    scroll-with-page: option<bool>,
    device-id: option<constrain-dom-string>,
    viewport-offset-x: option<constrain-long>,
    viewport-offset-y: option<constrain-long>,
    viewport-width: option<constrain-long>,
    viewport-height: option<constrain-long>,
    echo-cancellation: option<constrain-boolean>,
    noise-suppression: option<constrain-boolean>,
    auto-gain-control: option<constrain-boolean>,
    channel-count: option<constrain-long>,
  }
  enum media-stream-track-state {
    live,
    ended,
  }
  resource media-stream-track {
    as-event-target: func() -> event-target;
    as-canvas-capture-media-stream-track: func() -> option<canvas-capture-media-stream-track>;
    kind: func() -> string;
    id: func() -> string;
    label: func() -> string;
    enabled: func() -> bool;
    set-enabled: func(enabled: bool);
    muted: func() -> bool;
    onmute-subscribe: func() -> pollable;
    onunmute-subscribe: func() -> pollable;
    ready-state: func() -> media-stream-track-state;
    onended-subscribe: func() -> pollable;
    clone: func() -> media-stream-track;
    stop: func();
    get-constraints: func() -> media-track-constraints;
    get-settings: func() -> media-track-settings;
    apply-constraints: func(constraints: option<media-track-constraints>);
    muted-changed: func(muted: bool);
    as-video-stream-track: func() -> option<video-stream-track>;
    as-audio-stream-track: func() -> option<audio-stream-track>;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  record iir-filter-options {
    feedforward: list<f64>,
    feedback: list<f64>,
    channel-count: option<u32>,
    channel-count-mode: option<channel-count-mode>,
    channel-interpretation: option<channel-interpretation>,
  }
  resource iir-filter-node {
    as-audio-node: func() -> audio-node;
    get-frequency-response: func(frequency-hz: float32-array, mag-response: float32-array, phase-response: float32-array);
    disconnect: func(params: option<iir-filter-node-disconnect-params>);
    context: func() -> base-audio-context;
    number-of-inputs: func() -> u32;
    number-of-outputs: func() -> u32;
    channel-count: func() -> u32;
    set-channel-count: func(channel-count: u32);
    channel-count-mode: func() -> channel-count-mode;
    set-channel-count-mode: func(channel-count-mode: channel-count-mode);
    channel-interpretation: func() -> channel-interpretation;
    set-channel-interpretation: func(channel-interpretation: channel-interpretation);
  }
  resource payment-address {
    to-json: func() -> object;
    country: func() -> string;
    address-line: func() -> list<string>;
    region: func() -> string;
    city: func() -> string;
    dependent-locality: func() -> string;
    postal-code: func() -> string;
    sorting-code: func() -> string;
    language-code: func() -> string;
    organization: func() -> string;
    recipient: func() -> string;
    phone: func() -> string;
  }
  resource speech-grammar-list {
    length: func() -> u32;
    item: func(index: u32) -> speech-grammar;
    add-from-uri: func(src: string, weight: option<f32>);
    add-from-string: func(%string: string, weight: option<f32>);
  }
  resource speech-recognition {
    as-event-target: func() -> event-target;
    grammars: func() -> speech-grammar-list;
    set-grammars: func(grammars: speech-grammar-list);
    lang: func() -> string;
    set-lang: func(lang: string);
    continuous: func() -> bool;
    set-continuous: func(continuous: bool);
    interim-results: func() -> bool;
    set-interim-results: func(interim-results: bool);
    max-alternatives: func() -> u32;
    set-max-alternatives: func(max-alternatives: u32);
    service-uri: func() -> string;
    set-service-uri: func(service-uri: string);
    start: func(%stream: option<borrow<media-stream>>);
    stop: func();
    abort: func();
    onaudiostart-subscribe: func() -> pollable;
    onsoundstart-subscribe: func() -> pollable;
    onspeechstart-subscribe: func() -> pollable;
    onspeechend-subscribe: func() -> pollable;
    onsoundend-subscribe: func() -> pollable;
    onaudioend-subscribe: func() -> pollable;
    onresult-subscribe: func() -> pollable;
    onnomatch-subscribe: func() -> pollable;
    onerror-subscribe: func() -> pollable;
    onstart-subscribe: func() -> pollable;
    onend-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource html-template-element {
    as-html-element: func() -> html-element;
    content: func() -> document-fragment;
  }
  resource before-unload-event {
    as-event: func() -> event;
    return-value: func() -> string;
    set-return-value: func(return-value: string);
  }
  resource svg-animate-transform-element {
    as-svg-animation-element: func() -> svg-animation-element;
  }
  resource webgl-multi-draw {
    multi-draw-arrays-webgl: func(mode: g-lenum, firsts-list: int32-array-or-list-g-lint, firsts-offset: g-luint, counts-list: int32-array-or-list-g-lsizei, counts-offset: g-luint, drawcount: g-lsizei);
    multi-draw-elements-webgl: func(mode: g-lenum, counts-list: int32-array-or-list-g-lint, counts-offset: g-luint, %type: g-lenum, offsets-list: int32-array-or-list-g-lsizei, offsets-offset: g-luint, drawcount: g-lsizei);
    multi-draw-arrays-instanced-webgl: func(mode: g-lenum, firsts-list: int32-array-or-list-g-lint, firsts-offset: g-luint, counts-list: int32-array-or-list-g-lsizei, counts-offset: g-luint, instance-counts-list: int32-array-or-list-g-lsizei, instance-counts-offset: g-luint, drawcount: g-lsizei);
    multi-draw-elements-instanced-webgl: func(mode: g-lenum, counts-list: int32-array-or-list-g-lint, counts-offset: g-luint, %type: g-lenum, offsets-list: int32-array-or-list-g-lsizei, offsets-offset: g-luint, instance-counts-list: int32-array-or-list-g-lsizei, instance-counts-offset: g-luint, drawcount: g-lsizei);
  }
  variant int32-array-or-list-g-lsizei {
    int32-array(int32-array),
    list-g-lsizei(list<g-lsizei>),
  }
  resource media-query-list {
    as-event-target: func() -> event-target;
    media: func() -> string;
    matches: func() -> bool;
    add-listener: func(listener: option<borrow<event-listener>>);
    remove-listener: func(listener: option<borrow<event-listener>>);
    onchange-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource paint-worklet-global-scope {
    as-worklet-global-scope: func() -> worklet-global-scope;
    register-paint: func(name: string, paint-ctor: borrow<void-function>);
  }
  record media-element-audio-source-options {
    media-element: borrow<html-media-element>,
  }
  resource media-element-audio-source-node {
    as-audio-node: func() -> audio-node;
    disconnect: func(params: option<media-element-audio-source-node-disconnect-params>);
    context: func() -> base-audio-context;
    number-of-inputs: func() -> u32;
    number-of-outputs: func() -> u32;
    channel-count: func() -> u32;
    set-channel-count: func(channel-count: u32);
    channel-count-mode: func() -> channel-count-mode;
    set-channel-count-mode: func(channel-count-mode: channel-count-mode);
    channel-interpretation: func() -> channel-interpretation;
    set-channel-interpretation: func(channel-interpretation: channel-interpretation);
  }
  resource svg-transform-list {
    number-of-items: func() -> u32;
    clear: func();
    initialize: func(new-item: borrow<svg-transform>) -> svg-transform;
    get-item: func(index: u32) -> svg-transform;
    insert-item-before: func(new-item: borrow<svg-transform>, index: u32) -> svg-transform;
    replace-item: func(new-item: borrow<svg-transform>, index: u32) -> svg-transform;
    remove-item: func(index: u32) -> svg-transform;
    append-item: func(new-item: borrow<svg-transform>) -> svg-transform;
    create-svg-transform-from-matrix: func(matrix: borrow<svg-matrix>) -> svg-transform;
    consolidate: func() -> option<svg-transform>;
  }
  resource html-title-element {
    as-html-element: func() -> html-element;
    text: func() -> string;
    set-text: func(text: string);
  }
  resource device-light-event {
    as-event: func() -> event;
    value: func() -> f64;
  }
  record device-light-event-init {
    value: option<f64>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource svg-animated-rect {
    base-val: func() -> option<svg-rect>;
    anim-val: func() -> option<svg-rect>;
  }
  resource html-output-element {
    as-html-element: func() -> html-element;
    html-for: func() -> dom-token-list;
    form: func() -> option<html-form-element>;
    name: func() -> string;
    set-name: func(name: string);
    %type: func() -> string;
    default-value: func() -> string;
    set-default-value: func(default-value: string);
    value: func() -> string;
    set-value: func(value: string);
    will-validate: func() -> bool;
    validity: func() -> validity-state;
    validation-message: func() -> string;
    check-validity: func() -> bool;
    report-validity: func() -> bool;
    set-custom-validity: func(error: string);
    labels: func() -> node-list;
  }
  enum basic-card-type {
    credit,
    debit,
    prepaid,
  }
  record basic-card-request {
    supported-networks: option<list<string>>,
    supported-types: option<list<basic-card-type>>,
  }
  record basic-card-response {
    cardholder-name: option<string>,
    card-number: string,
    expiry-month: option<string>,
    expiry-year: option<string>,
    card-security-code: option<string>,
    billing-address: option<option<borrow<payment-address>>>,
  }
  resource video-track {
    id: func() -> string;
    kind: func() -> string;
    label: func() -> string;
    language: func() -> string;
    selected: func() -> bool;
    set-selected: func(selected: bool);
    source-buffer: func() -> option<source-buffer>;
  }
  resource media-devices {
    as-event-target: func() -> event-target;
    ondevicechange-subscribe: func() -> pollable;
    get-supported-constraints: func() -> media-track-supported-constraints;
    enumerate-devices: func() -> list<media-device-info>;
    get-user-media: func(constraints: option<media-stream-constraints>) -> media-stream;
    get-display-media: func(constraints: option<display-media-stream-constraints>) -> media-stream;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource page-transition-event {
    as-event: func() -> event;
    persisted: func() -> bool;
    in-frame-swap: func() -> bool;
  }
  record page-transition-event-init {
    persisted: option<bool>,
    in-frame-swap: option<bool>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource html-anchor-element {
    as-html-element: func() -> html-element;
    target: func() -> string;
    set-target: func(target: string);
    download: func() -> string;
    set-download: func(download: string);
    ping: func() -> string;
    set-ping: func(ping: string);
    rel: func() -> string;
    set-rel: func(rel: string);
    referrer-policy: func() -> string;
    set-referrer-policy: func(referrer-policy: string);
    rel-list: func() -> dom-token-list;
    hreflang: func() -> string;
    set-hreflang: func(hreflang: string);
    %type: func() -> string;
    set-type: func(%type: string);
    text: func() -> string;
    set-text: func(text: string);
    href: func() -> string;
    set-href: func(href: string);
    origin: func() -> string;
    protocol: func() -> string;
    set-protocol: func(protocol: string);
    username: func() -> string;
    set-username: func(username: string);
    password: func() -> string;
    set-password: func(password: string);
    host: func() -> string;
    set-host: func(host: string);
    hostname: func() -> string;
    set-hostname: func(hostname: string);
    port: func() -> string;
    set-port: func(port: string);
    pathname: func() -> string;
    set-pathname: func(pathname: string);
    search: func() -> string;
    set-search: func(search: string);
    hash: func() -> string;
    set-hash: func(hash: string);
    coords: func() -> string;
    set-coords: func(coords: string);
    charset: func() -> string;
    set-charset: func(charset: string);
    name: func() -> string;
    set-name: func(name: string);
    rev: func() -> string;
    set-rev: func(rev: string);
    shape: func() -> string;
    set-shape: func(shape: string);
  }
  enum selection-mode {
    select,
    start,
    end,
    preserve,
  }
  resource html-input-element {
    as-html-element: func() -> html-element;
    accept: func() -> string;
    set-accept: func(accept: string);
    alt: func() -> string;
    set-alt: func(alt: string);
    autocomplete: func() -> string;
    set-autocomplete: func(autocomplete: string);
    autofocus: func() -> bool;
    set-autofocus: func(autofocus: bool);
    default-checked: func() -> bool;
    set-default-checked: func(default-checked: bool);
    checked: func() -> bool;
    set-checked: func(checked: bool);
    disabled: func() -> bool;
    set-disabled: func(disabled: bool);
    form: func() -> option<html-form-element>;
    files: func() -> option<file-list>;
    set-files: func(files: option<file-list>);
    form-action: func() -> string;
    set-form-action: func(form-action: string);
    form-enctype: func() -> string;
    set-form-enctype: func(form-enctype: string);
    form-method: func() -> string;
    set-form-method: func(form-method: string);
    form-no-validate: func() -> bool;
    set-form-no-validate: func(form-no-validate: bool);
    form-target: func() -> string;
    set-form-target: func(form-target: string);
    height: func() -> u32;
    set-height: func(height: u32);
    indeterminate: func() -> bool;
    set-indeterminate: func(indeterminate: bool);
    input-mode: func() -> string;
    set-input-mode: func(input-mode: string);
    %list: func() -> option<html-element>;
    max: func() -> string;
    set-max: func(max: string);
    max-length: func() -> s32;
    set-max-length: func(max-length: s32);
    min: func() -> string;
    set-min: func(min: string);
    min-length: func() -> s32;
    set-min-length: func(min-length: s32);
    multiple: func() -> bool;
    set-multiple: func(multiple: bool);
    name: func() -> string;
    set-name: func(name: string);
    pattern: func() -> string;
    set-pattern: func(pattern: string);
    placeholder: func() -> string;
    set-placeholder: func(placeholder: string);
    read-only: func() -> bool;
    set-read-only: func(read-only: bool);
    required: func() -> bool;
    set-required: func(required: bool);
    size: func() -> u32;
    set-size: func(size: u32);
    src: func() -> string;
    set-src: func(src: string);
    step: func() -> string;
    set-step: func(step: string);
    %type: func() -> string;
    set-type: func(%type: string);
    default-value: func() -> string;
    set-default-value: func(default-value: string);
    value: func() -> string;
    set-value: func(value: string);
    value-as-date: func() -> option<date>;
    set-value-as-date: func(value-as-date: option<date>);
    value-as-number: func() -> f64;
    set-value-as-number: func(value-as-number: f64);
    width: func() -> u32;
    set-width: func(width: u32);
    will-validate: func() -> bool;
    validity: func() -> validity-state;
    validation-message: func() -> string;
    check-validity: func() -> bool;
    report-validity: func() -> bool;
    set-custom-validity: func(error: string);
    labels: func() -> option<node-list>;
    select: func();
    selection-start: func() -> u32;
    set-selection-start: func(selection-start: u32);
    selection-end: func() -> u32;
    set-selection-end: func(selection-end: u32);
    selection-direction: func() -> string;
    set-selection-direction: func(selection-direction: string);
    set-range-text: func(params: html-input-element-set-range-text-params);
    set-selection-range: func(start: u32, end: u32, direction: option<string>);
    show-picker: func();
    align: func() -> string;
    set-align: func(align: string);
    use-map: func() -> string;
    set-use-map: func(use-map: string);
    webkit-entries: func() -> list<file-system-entry>;
    webkitdirectory: func() -> bool;
    set-webkitdirectory: func(webkitdirectory: bool);
    get-date-time-input-box-value: func() -> date-time-value;
    update-date-time-input-box: func(value: option<date-time-value>);
    set-date-time-picker-state: func(open: bool);
    get-minimum: func() -> f64;
    get-maximum: func() -> f64;
    preview-value: func() -> string;
    set-preview-value: func(preview-value: string);
  }
  variant html-input-element-set-range-text-params {
    replacement(string),
    replacement-start-end-selection-mode(tuple<string, u32, u32, option<selection-mode>>),
  }
  record date-time-value {
    hour: option<s32>,
    minute: option<s32>,
    year: option<s32>,
    month: option<s32>,
    day: option<s32>,
  }
  resource worklet-global-scope {
    as-audio-worklet-global-scope: func() -> option<audio-worklet-global-scope>;
    as-paint-worklet-global-scope: func() -> option<paint-worklet-global-scope>;
  }
  resource mutation-event {
    as-event: func() -> event;
    MODIFICATION: static func() -> u16;
    ADDITION: static func() -> u16;
    REMOVAL: static func() -> u16;
    SMIL: static func() -> u16;
    related-node: func() -> option<node>;
    prev-value: func() -> string;
    new-value: func() -> string;
    attr-name: func() -> string;
    attr-change: func() -> u16;
    init-mutation-event: func(%type: string, can-bubble: option<bool>, cancelable: option<bool>, related-node: option<option<borrow<node>>>, prev-value: option<string>, new-value: option<string>, attr-name: option<string>, attr-change: option<u16>);
  }
  resource popup-blocked-event {
    as-event: func() -> event;
    requesting-window: func() -> option<window>;
    popup-window-uri: func() -> option<uri>;
    popup-window-name: func() -> string;
    popup-window-features: func() -> string;
  }
  record popup-blocked-event-init {
    requesting-window: option<option<borrow<window>>>,
    popup-window-uri: option<option<borrow<uri>>>,
    popup-window-name: option<string>,
    popup-window-features: option<string>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource htmlbr-element {
    as-html-element: func() -> html-element;
    clear: func() -> string;
    set-clear: func(clear: string);
  }
  resource promise-native-handler {
  }
  resource dom-matrix-read-only {
    a: func() -> f64;
    b: func() -> f64;
    c: func() -> f64;
    d: func() -> f64;
    e: func() -> f64;
    f: func() -> f64;
    m11: func() -> f64;
    m12: func() -> f64;
    m13: func() -> f64;
    m14: func() -> f64;
    m21: func() -> f64;
    m22: func() -> f64;
    m23: func() -> f64;
    m24: func() -> f64;
    m31: func() -> f64;
    m32: func() -> f64;
    m33: func() -> f64;
    m34: func() -> f64;
    m41: func() -> f64;
    m42: func() -> f64;
    m43: func() -> f64;
    m44: func() -> f64;
    translate: func(tx: f64, ty: f64, tz: option<f64>) -> dom-matrix;
    scale: func(scale: f64, origin-x: option<f64>, origin-y: option<f64>) -> dom-matrix;
    scale3d: func(scale: f64, origin-x: option<f64>, origin-y: option<f64>, origin-z: option<f64>) -> dom-matrix;
    scale-non-uniform: func(scale-x: f64, scale-y: option<f64>, scale-z: option<f64>, origin-x: option<f64>, origin-y: option<f64>, origin-z: option<f64>) -> dom-matrix;
    rotate: func(angle: f64, origin-x: option<f64>, origin-y: option<f64>) -> dom-matrix;
    rotate-from-vector: func(x: f64, y: f64) -> dom-matrix;
    rotate-axis-angle: func(x: f64, y: f64, z: f64, angle: f64) -> dom-matrix;
    skew-x: func(sx: f64) -> dom-matrix;
    skew-y: func(sy: f64) -> dom-matrix;
    multiply: func(other: borrow<dom-matrix>) -> dom-matrix;
    flip-x: func() -> dom-matrix;
    flip-y: func() -> dom-matrix;
    inverse: func() -> dom-matrix;
    is2-d: func() -> bool;
    is-identity: func() -> bool;
    transform-point: func(point: option<dom-point-init>) -> dom-point;
    to-float32-array: func() -> float32-array;
    to-float64-array: func() -> float64-array;
    to-json: func() -> object;
    as-dom-matrix: func() -> option<dom-matrix>;
  }
  resource dom-matrix {
    as-dom-matrix-read-only: func() -> dom-matrix-read-only;
    as-web-kit-css-matrix: func() -> option<web-kit-css-matrix>;
    a: func() -> f64;
    set-a: func(a: f64);
    b: func() -> f64;
    set-b: func(b: f64);
    c: func() -> f64;
    set-c: func(c: f64);
    d: func() -> f64;
    set-d: func(d: f64);
    e: func() -> f64;
    set-e: func(e: f64);
    f: func() -> f64;
    set-f: func(f: f64);
    m11: func() -> f64;
    set-m11: func(m11: f64);
    m12: func() -> f64;
    set-m12: func(m12: f64);
    m13: func() -> f64;
    set-m13: func(m13: f64);
    m14: func() -> f64;
    set-m14: func(m14: f64);
    m21: func() -> f64;
    set-m21: func(m21: f64);
    m22: func() -> f64;
    set-m22: func(m22: f64);
    m23: func() -> f64;
    set-m23: func(m23: f64);
    m24: func() -> f64;
    set-m24: func(m24: f64);
    m31: func() -> f64;
    set-m31: func(m31: f64);
    m32: func() -> f64;
    set-m32: func(m32: f64);
    m33: func() -> f64;
    set-m33: func(m33: f64);
    m34: func() -> f64;
    set-m34: func(m34: f64);
    m41: func() -> f64;
    set-m41: func(m41: f64);
    m42: func() -> f64;
    set-m42: func(m42: f64);
    m43: func() -> f64;
    set-m43: func(m43: f64);
    m44: func() -> f64;
    set-m44: func(m44: f64);
    multiply-self: func(other: borrow<dom-matrix>) -> dom-matrix;
    pre-multiply-self: func(other: borrow<dom-matrix>) -> dom-matrix;
    translate-self: func(tx: f64, ty: f64, tz: option<f64>) -> dom-matrix;
    scale-self: func(scale: f64, origin-x: option<f64>, origin-y: option<f64>) -> dom-matrix;
    scale3d-self: func(scale: f64, origin-x: option<f64>, origin-y: option<f64>, origin-z: option<f64>) -> dom-matrix;
    scale-non-uniform-self: func(scale-x: f64, scale-y: option<f64>, scale-z: option<f64>, origin-x: option<f64>, origin-y: option<f64>, origin-z: option<f64>) -> dom-matrix;
    rotate-self: func(angle: f64, origin-x: option<f64>, origin-y: option<f64>) -> dom-matrix;
    rotate-from-vector-self: func(x: f64, y: f64) -> dom-matrix;
    rotate-axis-angle-self: func(x: f64, y: f64, z: f64, angle: f64) -> dom-matrix;
    skew-x-self: func(sx: f64) -> dom-matrix;
    skew-y-self: func(sy: f64) -> dom-matrix;
    invert-self: func() -> dom-matrix;
    set-matrix-value: func(transform-list: string) -> dom-matrix;
  }
  record dom-matrix2-d-init {
    a: option<f64>,
    b: option<f64>,
    c: option<f64>,
    d: option<f64>,
    e: option<f64>,
    f: option<f64>,
    m11: option<f64>,
    m12: option<f64>,
    m21: option<f64>,
    m22: option<f64>,
    m41: option<f64>,
    m42: option<f64>,
  }
  record dom-matrix-init {
    m13: option<f64>,
    m14: option<f64>,
    m23: option<f64>,
    m24: option<f64>,
    m31: option<f64>,
    m32: option<f64>,
    m33: option<f64>,
    m34: option<f64>,
    m43: option<f64>,
    m44: option<f64>,
    is2-d: option<bool>,
    a: option<f64>,
    b: option<f64>,
    c: option<f64>,
    d: option<f64>,
    e: option<f64>,
    f: option<f64>,
    m11: option<f64>,
    m12: option<f64>,
    m21: option<f64>,
    m22: option<f64>,
    m41: option<f64>,
    m42: option<f64>,
  }
  resource video-stream-track {
    as-media-stream-track: func() -> media-stream-track;
  }
  record autocomplete-info {
    section: option<string>,
    address-type: option<string>,
    contact-type: option<string>,
    field-name: option<string>,
  }
  resource svg-symbol-element {
    as-svg-element: func() -> svg-element;
    view-box: func() -> svg-animated-rect;
    preserve-aspect-ratio: func() -> svg-animated-preserve-aspect-ratio;
    required-features: func() -> svg-string-list;
    required-extensions: func() -> svg-string-list;
    system-language: func() -> svg-string-list;
    has-extension: func(extension: string) -> bool;
  }
  resource svg-angle {
    SVG-ANGLETYPE-UNKNOWN: static func() -> u16;
    SVG-ANGLETYPE-UNSPECIFIED: static func() -> u16;
    SVG-ANGLETYPE-DEG: static func() -> u16;
    SVG-ANGLETYPE-RAD: static func() -> u16;
    SVG-ANGLETYPE-GRAD: static func() -> u16;
    unit-type: func() -> u16;
    value: func() -> f32;
    set-value: func(value: f32);
    value-in-specified-units: func() -> f32;
    set-value-in-specified-units: func(value-in-specified-units: f32);
    value-as-string: func() -> string;
    set-value-as-string: func(value-as-string: string);
    new-value-specified-units: func(unit-type: u16, value-in-specified-units: f32);
    convert-to-specified-units: func(unit-type: u16);
  }
  record periodic-wave-constraints {
    disable-normalization: option<bool>,
  }
  record periodic-wave-options {
    real: option<list<f32>>,
    imag: option<list<f32>>,
    disable-normalization: option<bool>,
  }
  resource periodic-wave {
  }
  resource speech-recognition-event {
    as-event: func() -> event;
    result-index: func() -> u32;
    results: func() -> option<speech-recognition-result-list>;
    interpretation: func() -> any;
    emma: func() -> option<document>;
  }
  record speech-recognition-event-init {
    result-index: option<u32>,
    results: option<option<borrow<speech-recognition-result-list>>>,
    interpretation: any,
    emma: option<option<borrow<document>>>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource tcp-socket-error-event {
    as-event: func() -> event;
    name: func() -> string;
    message: func() -> string;
  }
  record tcp-socket-error-event-init {
    name: option<string>,
    message: option<string>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource client {
    url: func() -> string;
    frame-type: func() -> frame-type;
    %type: func() -> client-type;
    id: func() -> string;
    post-message: func(message: any, transfer: option<list<object>>);
    as-window-client: func() -> option<window-client>;
  }
  resource window-client {
    as-client: func() -> client;
    visibility-state: func() -> visibility-state;
    focused: func() -> bool;
    focus: func() -> window-client;
    navigate: func(url: string) -> window-client;
  }
  enum frame-type {
    auxiliary,
    top-level,
    nested,
    none,
  }
  resource speech-synthesis-voice {
    voice-uri: func() -> string;
    name: func() -> string;
    lang: func() -> string;
    local-service: func() -> bool;
    default: func() -> bool;
  }
  resource rtc-identity-provider-registrar {
    register: func(idp: rtc-identity-provider);
    has-idp: func() -> bool;
    generate-assertion: func(contents: string, origin: string, options: option<rtc-identity-provider-options>) -> rtc-identity-assertion-result;
    validate-assertion: func(assertion: string, origin: string) -> rtc-identity-validation-result;
  }
  record rtc-identity-provider {
    generate-assertion: borrow<generate-assertion-callback>,
    validate-assertion: borrow<validate-assertion-callback>,
  }
  record rtc-identity-assertion-result {
    idp: rtc-identity-provider-details,
    assertion: string,
  }
  record rtc-identity-provider-details {
    domain: string,
    protocol: option<string>,
  }
  record rtc-identity-validation-result {
    identity: string,
    contents: string,
  }
  record rtc-identity-provider-options {
    protocol: option<string>,
    username-hint: option<string>,
    peer-identity: option<string>,
  }
  resource local-media-stream {
    as-media-stream: func() -> media-stream;
    stop: func();
  }
  record idb-object-store-parameters {
    key-path: option<list-string-or-string>,
    auto-increment: option<bool>,
  }
  resource idb-object-store {
    name: func() -> string;
    set-name: func(name: string);
    key-path: func() -> any;
    index-names: func() -> dom-string-list;
    transaction: func() -> idb-transaction;
    auto-increment: func() -> bool;
    put: func(value: any, key: any) -> idb-request;
    add: func(value: any, key: any) -> idb-request;
    delete: func(key: any) -> idb-request;
    get: func(key: any) -> idb-request;
    get-key: func(key: any) -> idb-request;
    clear: func() -> idb-request;
    open-cursor: func(range: any, direction: option<idb-cursor-direction>) -> idb-request;
    create-index: func(name: string, key-path: list-string-or-string, optional-parameters: option<idb-index-parameters>) -> idb-index;
    index: func(name: string) -> idb-index;
    delete-index: func(index-name: string);
    count: func(key: any) -> idb-request;
    get-all: func(key: any, limit: option<u32>) -> idb-request;
    get-all-keys: func(key: any, limit: option<u32>) -> idb-request;
    open-key-cursor: func(range: any, direction: option<idb-cursor-direction>) -> idb-request;
  }
  resource svgsvg-element {
    as-svg-graphics-element: func() -> svg-graphics-element;
    x: func() -> svg-animated-length;
    y: func() -> svg-animated-length;
    width: func() -> svg-animated-length;
    height: func() -> svg-animated-length;
    use-current-view: func() -> bool;
    current-scale: func() -> f32;
    set-current-scale: func(current-scale: f32);
    current-translate: func() -> svg-point;
    suspend-redraw: func(max-wait-milliseconds: u32) -> u32;
    unsuspend-redraw: func(suspend-handle-id: u32);
    unsuspend-redraw-all: func();
    force-redraw: func();
    pause-animations: func();
    unpause-animations: func();
    animations-paused: func() -> bool;
    get-current-time: func() -> f32;
    set-current-time: func(seconds: f32);
    deselect-all: func();
    create-svg-number: func() -> svg-number;
    create-svg-length: func() -> svg-length;
    create-svg-angle: func() -> svg-angle;
    create-svg-point: func() -> svg-point;
    create-svg-matrix: func() -> svg-matrix;
    create-svg-rect: func() -> svg-rect;
    create-svg-transform: func() -> svg-transform;
    create-svg-transform-from-matrix: func(matrix: borrow<svg-matrix>) -> svg-transform;
    get-element-by-id: func(element-id: string) -> option<element>;
    view-box: func() -> svg-animated-rect;
    preserve-aspect-ratio: func() -> svg-animated-preserve-aspect-ratio;
    SVG-ZOOMANDPAN-UNKNOWN: static func() -> u16;
    SVG-ZOOMANDPAN-DISABLE: static func() -> u16;
    SVG-ZOOMANDPAN-MAGNIFY: static func() -> u16;
    zoom-and-pan: func() -> u16;
    set-zoom-and-pan: func(zoom-and-pan: u16);
    transform: func() -> svg-animated-transform-list;
    nearest-viewport-element: func() -> option<svg-element>;
    farthest-viewport-element: func() -> option<svg-element>;
    get-b-box: func(a-options: option<svg-bounding-box-options>) -> svg-rect;
    get-ctm: func() -> option<svg-matrix>;
    get-screen-ctm: func() -> option<svg-matrix>;
    get-transform-to-element: func(element: borrow<svg-graphics-element>) -> svg-matrix;
  }
  record media-configuration {
    video: option<video-configuration>,
    audio: option<audio-configuration>,
  }
  record media-decoding-configuration {
    %type: media-decoding-type,
    video: option<video-configuration>,
    audio: option<audio-configuration>,
  }
  record media-encoding-configuration {
    %type: media-encoding-type,
    video: option<video-configuration>,
    audio: option<audio-configuration>,
  }
  enum media-decoding-type {
    file,
    media-source,
  }
  enum media-encoding-type {
    %record,
    transmission,
  }
  record video-configuration {
    content-type: option<string>,
    width: option<u32>,
    height: option<u32>,
    bitrate: option<u64>,
    framerate: option<string>,
  }
  record audio-configuration {
    content-type: option<string>,
    channels: option<string>,
    bitrate: option<u64>,
    samplerate: option<u32>,
  }
  resource media-capabilities-info {
    supported: func() -> bool;
    smooth: func() -> bool;
    power-efficient: func() -> bool;
  }
  resource media-capabilities {
    decoding-info: func(configuration: media-decoding-configuration) -> media-capabilities-info;
    encoding-info: func(configuration: media-encoding-configuration) -> media-capabilities-info;
  }
  resource presentation-receiver {
    connection-list: func() -> presentation-connection-list;
  }
  resource css-font-feature-values-rule {
    as-css-rule: func() -> css-rule;
    font-family: func() -> string;
    set-font-family: func(font-family: string);
    value-text: func() -> string;
    set-value-text: func(value-text: string);
    STYLE-RULE: static func() -> u16;
    CHARSET-RULE: static func() -> u16;
    IMPORT-RULE: static func() -> u16;
    MEDIA-RULE: static func() -> u16;
    FONT-FACE-RULE: static func() -> u16;
    PAGE-RULE: static func() -> u16;
    NAMESPACE-RULE: static func() -> u16;
    %type: func() -> u16;
    css-text: func() -> string;
    set-css-text: func(css-text: string);
    parent-rule: func() -> option<css-rule>;
    parent-style-sheet: func() -> option<css-style-sheet>;
  }
  resource svg-component-transfer-function-element {
    as-svg-element: func() -> svg-element;
    as-svgfe-func-r-element: func() -> option<svgfe-func-r-element>;
    as-svgfe-func-g-element: func() -> option<svgfe-func-g-element>;
    as-svgfe-func-b-element: func() -> option<svgfe-func-b-element>;
    SVG-FECOMPONENTTRANSFER-TYPE-UNKNOWN: static func() -> u16;
    SVG-FECOMPONENTTRANSFER-TYPE-IDENTITY: static func() -> u16;
    SVG-FECOMPONENTTRANSFER-TYPE-TABLE: static func() -> u16;
    SVG-FECOMPONENTTRANSFER-TYPE-DISCRETE: static func() -> u16;
    SVG-FECOMPONENTTRANSFER-TYPE-LINEAR: static func() -> u16;
    SVG-FECOMPONENTTRANSFER-TYPE-GAMMA: static func() -> u16;
    %type: func() -> svg-animated-enumeration;
    table-values: func() -> svg-animated-number-list;
    slope: func() -> svg-animated-number;
    intercept: func() -> svg-animated-number;
    amplitude: func() -> svg-animated-number;
    exponent: func() -> svg-animated-number;
    offset: func() -> svg-animated-number;
    as-svgfe-func-a-element: func() -> option<svgfe-func-a-element>;
  }
  resource message-event {
    as-event: func() -> event;
    data: func() -> any;
    origin: func() -> string;
    last-event-id: func() -> string;
    // source: func() -> option<message-event-source>;
    ports: func() -> list<message-port>;
    init-message-event: func(%type: string, bubbles: option<bool>, cancelable: option<bool>, data: any, origin: option<string>, last-event-id: option<string>, source: option<option<message-event-source>>, ports: option<list<borrow<message-port>>>);
  }
  record message-event-init {
    data: any,
    origin: option<string>,
    last-event-id: option<string>,
    source: option<option<message-event-source>>,
    ports: option<list<borrow<message-port>>>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  variant message-port-or-service-worker-or-window-proxy {
    message-port(borrow<message-port>),
    service-worker(borrow<service-worker>),
    window-proxy(borrow<window-proxy>),
  }
  type message-event-source = message-port-or-service-worker-or-window-proxy;
  resource tcp-server-socket-event {
    as-event: func() -> event;
    socket: func() -> tcp-socket;
  }
  record tcp-server-socket-event-init {
    socket: option<option<borrow<tcp-socket>>>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource svg-use-element {
    as-svg-graphics-element: func() -> svg-graphics-element;
    x: func() -> svg-animated-length;
    y: func() -> svg-animated-length;
    width: func() -> svg-animated-length;
    height: func() -> svg-animated-length;
    href: func() -> svg-animated-string;
    transform: func() -> svg-animated-transform-list;
    nearest-viewport-element: func() -> option<svg-element>;
    farthest-viewport-element: func() -> option<svg-element>;
    get-b-box: func(a-options: option<svg-bounding-box-options>) -> svg-rect;
    get-ctm: func() -> option<svg-matrix>;
    get-screen-ctm: func() -> option<svg-matrix>;
    get-transform-to-element: func(element: borrow<svg-graphics-element>) -> svg-matrix;
  }
  variant blob-or-canvas-image-source-or-image-data {
    blob(borrow<blob>),
    canvas-image-source(canvas-image-source),
    image-data(borrow<image-data>),
  }
  type image-bitmap-source = blob-or-canvas-image-source-or-image-data;
  resource image-bitmap {
    width: func() -> u32;
    height: func() -> u32;
    close: func();
  }
  enum image-orientation {
    from-image,
    flip-y,
  }
  enum premultiply-alpha {
    none,
    premultiply,
    default,
  }
  enum color-space-conversion {
    none,
    default,
  }
  enum resize-quality {
    pixelated,
    low,
    medium,
    high,
  }
  record image-bitmap-options {
    image-orientation: option<image-orientation>,
    premultiply-alpha: option<premultiply-alpha>,
    color-space-conversion: option<color-space-conversion>,
    resize-width: option<u32>,
    resize-height: option<u32>,
    resize-quality: option<resize-quality>,
  }
  enum channel-count-mode {
    max,
    clamped-max,
    explicit,
  }
  enum channel-interpretation {
    speakers,
    discrete,
  }
  record audio-node-options {
    channel-count: option<u32>,
    channel-count-mode: option<channel-count-mode>,
    channel-interpretation: option<channel-interpretation>,
  }
  variant media-stream-audio-source-node-disconnect-params {
    output(u32),
    destination(borrow<audio-node>),
    destination-output(tuple<borrow<audio-node>, u32>),
    destination-output-input(tuple<borrow<audio-node>, u32, u32>),
    // destination(borrow<audio-param>),
    // destination-output(tuple<borrow<audio-param>, u32>),
  }
  variant audio-destination-node-disconnect-params {
    output(u32),
    destination(borrow<audio-node>),
    destination-output(tuple<borrow<audio-node>, u32>),
    destination-output-input(tuple<borrow<audio-node>, u32, u32>),
    // destination(borrow<audio-param>),
    // destination-output(tuple<borrow<audio-param>, u32>),
  }
  variant dynamics-compressor-node-disconnect-params {
    output(u32),
    destination(borrow<audio-node>),
    destination-output(tuple<borrow<audio-node>, u32>),
    destination-output-input(tuple<borrow<audio-node>, u32, u32>),
    // destination(borrow<audio-param>),
    // destination-output(tuple<borrow<audio-param>, u32>),
  }
  variant analyser-node-disconnect-params {
    output(u32),
    destination(borrow<audio-node>),
    destination-output(tuple<borrow<audio-node>, u32>),
    destination-output-input(tuple<borrow<audio-node>, u32, u32>),
    // destination(borrow<audio-param>),
    // destination-output(tuple<borrow<audio-param>, u32>),
  }
  variant audio-worklet-node-disconnect-params {
    output(u32),
    destination(borrow<audio-node>),
    destination-output(tuple<borrow<audio-node>, u32>),
    destination-output-input(tuple<borrow<audio-node>, u32, u32>),
    // destination(borrow<audio-param>),
    // destination-output(tuple<borrow<audio-param>, u32>),
  }
  variant stereo-panner-node-disconnect-params {
    output(u32),
    destination(borrow<audio-node>),
    destination-output(tuple<borrow<audio-node>, u32>),
    destination-output-input(tuple<borrow<audio-node>, u32, u32>),
    // destination(borrow<audio-param>),
    // destination-output(tuple<borrow<audio-param>, u32>),
  }
  variant channel-splitter-node-disconnect-params {
    output(u32),
    destination(borrow<audio-node>),
    destination-output(tuple<borrow<audio-node>, u32>),
    destination-output-input(tuple<borrow<audio-node>, u32, u32>),
    // destination(borrow<audio-param>),
    // destination-output(tuple<borrow<audio-param>, u32>),
  }
  variant iir-filter-node-disconnect-params {
    output(u32),
    destination(borrow<audio-node>),
    destination-output(tuple<borrow<audio-node>, u32>),
    destination-output-input(tuple<borrow<audio-node>, u32, u32>),
    // destination(borrow<audio-param>),
    // destination-output(tuple<borrow<audio-param>, u32>),
  }
  variant script-processor-node-disconnect-params {
    output(u32),
    destination(borrow<audio-node>),
    destination-output(tuple<borrow<audio-node>, u32>),
    destination-output-input(tuple<borrow<audio-node>, u32, u32>),
    // destination(borrow<audio-param>),
    // destination-output(tuple<borrow<audio-param>, u32>),
  }
  variant media-element-audio-source-node-disconnect-params {
    output(u32),
    destination(borrow<audio-node>),
    destination-output(tuple<borrow<audio-node>, u32>),
    destination-output-input(tuple<borrow<audio-node>, u32, u32>),
    // destination(borrow<audio-param>),
    // destination-output(tuple<borrow<audio-param>, u32>),
  }
  resource audio-node {
    as-event-target: func() -> event-target;
    as-media-stream-audio-source-node: func() -> option<media-stream-audio-source-node>;
    as-audio-destination-node: func() -> option<audio-destination-node>;
    as-dynamics-compressor-node: func() -> option<dynamics-compressor-node>;
    as-analyser-node: func() -> option<analyser-node>;
    as-audio-worklet-node: func() -> option<audio-worklet-node>;
    as-stereo-panner-node: func() -> option<stereo-panner-node>;
    as-channel-splitter-node: func() -> option<channel-splitter-node>;
    as-iir-filter-node: func() -> option<iir-filter-node>;
    as-script-processor-node: func() -> option<script-processor-node>;
    as-media-element-audio-source-node: func() -> option<media-element-audio-source-node>;
    disconnect: func(params: option<audio-node-disconnect-params>);
    context: func() -> base-audio-context;
    number-of-inputs: func() -> u32;
    number-of-outputs: func() -> u32;
    channel-count: func() -> u32;
    set-channel-count: func(channel-count: u32);
    channel-count-mode: func() -> channel-count-mode;
    set-channel-count-mode: func(channel-count-mode: channel-count-mode);
    channel-interpretation: func() -> channel-interpretation;
    set-channel-interpretation: func(channel-interpretation: channel-interpretation);
    as-convolver-node: func() -> option<convolver-node>;
    as-panner-node: func() -> option<panner-node>;
    as-gain-node: func() -> option<gain-node>;
    as-audio-scheduled-source-node: func() -> option<audio-scheduled-source-node>;
    as-wave-shaper-node: func() -> option<wave-shaper-node>;
    as-channel-merger-node: func() -> option<channel-merger-node>;
    as-delay-node: func() -> option<delay-node>;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
    as-biquad-filter-node: func() -> option<biquad-filter-node>;
    as-media-stream-audio-destination-node: func() -> option<media-stream-audio-destination-node>;
  }
  variant audio-node-disconnect-params {
    output(u32),
    destination(borrow<audio-node>),
    destination-output(tuple<borrow<audio-node>, u32>),
    destination-output-input(tuple<borrow<audio-node>, u32, u32>),
    // destination(borrow<audio-param>),
    // destination-output(tuple<borrow<audio-param>, u32>),
  }
  record convolver-options {
    buffer: option<option<borrow<audio-buffer>>>,
    disable-normalization: option<bool>,
    channel-count: option<u32>,
    channel-count-mode: option<channel-count-mode>,
    channel-interpretation: option<channel-interpretation>,
  }
  resource convolver-node {
    as-audio-node: func() -> audio-node;
    buffer: func() -> option<audio-buffer>;
    set-buffer: func(buffer: option<audio-buffer>);
    normalize: func() -> bool;
    set-normalize: func(normalize: bool);
  }
  record performance-entry-event-init {
    name: option<string>,
    entry-type: option<string>,
    start-time: option<dom-high-res-time-stamp>,
    duration: option<dom-high-res-time-stamp>,
    epoch: option<f64>,
    origin: option<string>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource performance-entry-event {
    as-event: func() -> event;
    name: func() -> string;
    entry-type: func() -> string;
    start-time: func() -> dom-high-res-time-stamp;
    duration: func() -> dom-high-res-time-stamp;
    epoch: func() -> f64;
    origin: func() -> string;
  }
  resource gamepad-event {
    as-event: func() -> event;
    as-gamepad-axis-move-event: func() -> option<gamepad-axis-move-event>;
    as-gamepad-button-event: func() -> option<gamepad-button-event>;
    gamepad: func() -> option<gamepad>;
  }
  record gamepad-event-init {
    gamepad: option<option<borrow<gamepad>>>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource svgfe-turbulence-element {
    as-svg-element: func() -> svg-element;
    SVG-TURBULENCE-TYPE-UNKNOWN: static func() -> u16;
    SVG-TURBULENCE-TYPE-FRACTALNOISE: static func() -> u16;
    SVG-TURBULENCE-TYPE-TURBULENCE: static func() -> u16;
    SVG-STITCHTYPE-UNKNOWN: static func() -> u16;
    SVG-STITCHTYPE-STITCH: static func() -> u16;
    SVG-STITCHTYPE-NOSTITCH: static func() -> u16;
    base-frequency-x: func() -> svg-animated-number;
    base-frequency-y: func() -> svg-animated-number;
    num-octaves: func() -> svg-animated-integer;
    seed: func() -> svg-animated-number;
    stitch-tiles: func() -> svg-animated-enumeration;
    %type: func() -> svg-animated-enumeration;
    x: func() -> svg-animated-length;
    y: func() -> svg-animated-length;
    width: func() -> svg-animated-length;
    height: func() -> svg-animated-length;
    %result: func() -> svg-animated-string;
  }
  enum panning-model-type {
    equalpower,
    hrtf,
  }
  enum distance-model-type {
    linear,
    inverse,
    exponential,
  }
  record panner-options {
    panning-model: option<panning-model-type>,
    distance-model: option<distance-model-type>,
    position-x: option<f32>,
    position-y: option<f32>,
    position-z: option<f32>,
    orientation-x: option<f32>,
    orientation-y: option<f32>,
    orientation-z: option<f32>,
    ref-distance: option<f64>,
    max-distance: option<f64>,
    rolloff-factor: option<f64>,
    cone-inner-angle: option<f64>,
    cone-outer-angle: option<f64>,
    cone-outer-gain: option<f64>,
    channel-count: option<u32>,
    channel-count-mode: option<channel-count-mode>,
    channel-interpretation: option<channel-interpretation>,
  }
  resource panner-node {
    as-audio-node: func() -> audio-node;
    panning-model: func() -> panning-model-type;
    set-panning-model: func(panning-model: panning-model-type);
    set-position: func(x: f64, y: f64, z: f64);
    set-orientation: func(x: f64, y: f64, z: f64);
    set-velocity: func(x: f64, y: f64, z: f64);
    position-x: func() -> audio-param;
    position-y: func() -> audio-param;
    position-z: func() -> audio-param;
    orientation-x: func() -> audio-param;
    orientation-y: func() -> audio-param;
    orientation-z: func() -> audio-param;
    distance-model: func() -> distance-model-type;
    set-distance-model: func(distance-model: distance-model-type);
    ref-distance: func() -> f64;
    set-ref-distance: func(ref-distance: f64);
    max-distance: func() -> f64;
    set-max-distance: func(max-distance: f64);
    rolloff-factor: func() -> f64;
    set-rolloff-factor: func(rolloff-factor: f64);
    cone-inner-angle: func() -> f64;
    set-cone-inner-angle: func(cone-inner-angle: f64);
    cone-outer-angle: func() -> f64;
    set-cone-outer-angle: func(cone-outer-angle: f64);
    cone-outer-gain: func() -> f64;
    set-cone-outer-gain: func(cone-outer-gain: f64);
  }
  resource media-error {
    MEDIA-ERR-ABORTED: static func() -> u16;
    MEDIA-ERR-NETWORK: static func() -> u16;
    MEDIA-ERR-DECODE: static func() -> u16;
    MEDIA-ERR-SRC-NOT-SUPPORTED: static func() -> u16;
    code: func() -> u16;
    message: func() -> string;
  }
  resource directory {
    name: func() -> string;
    path: func() -> string;
    // get-files-and-directories: func() -> list<directory-or-file>;
    get-files: func(recursive-flag: option<bool>) -> list<file>;
  }
  resource caret-position {
    offset-node: func() -> option<node>;
    offset: func() -> u32;
    get-client-rect: func() -> option<dom-rect>;
  }
  resource browser-feed-writer {
    write-content: func();
    close: func();
  }
  resource cdata-section {
    as-text: func() -> text;
  }
  resource css-keyframe-rule {
    as-css-rule: func() -> css-rule;
    key-text: func() -> string;
    set-key-text: func(key-text: string);
    style: func() -> css-style-declaration;
    STYLE-RULE: static func() -> u16;
    CHARSET-RULE: static func() -> u16;
    IMPORT-RULE: static func() -> u16;
    MEDIA-RULE: static func() -> u16;
    FONT-FACE-RULE: static func() -> u16;
    PAGE-RULE: static func() -> u16;
    NAMESPACE-RULE: static func() -> u16;
    %type: func() -> u16;
    css-text: func() -> string;
    set-css-text: func(css-text: string);
    parent-rule: func() -> option<css-rule>;
    parent-style-sheet: func() -> option<css-style-sheet>;
  }
  resource fuzzing-functions {
    garbage-collect: static func();
    cycle-collect: static func();
    enable-accessibility: static func();
  }
  variant request-or-string {
    request(borrow<request>),
    %string(string),
  }
  type request-info = request-or-string;
  type ns-content-policy-type = u32;
  resource request {
    method: func() -> string;
    url: func() -> string;
    headers: func() -> headers;
    destination: func() -> request-destination;
    referrer: func() -> string;
    referrer-policy: func() -> referrer-policy;
    mode: func() -> request-mode;
    credentials: func() -> request-credentials;
    cache: func() -> request-cache;
    redirect: func() -> request-redirect;
    integrity: func() -> string;
    signal: func() -> abort-signal;
    clone: func() -> request;
    override-content-policy-type: func(context: ns-content-policy-type);
    body-used: func() -> bool;
    array-buffer: func() -> array-buffer;
    blob: func() -> blob;
    form-data: func() -> form-data;
    json: func() -> json;
    text: func() -> string;
    body: func() -> option<readable-stream>;
  }
  record request-init {
    method: option<string>,
    headers: option<headers-init>,
    body: option<option<body-init>>,
    referrer: option<string>,
    referrer-policy: option<referrer-policy>,
    mode: option<request-mode>,
    credentials: option<request-credentials>,
    cache: option<request-cache>,
    redirect: option<request-redirect>,
    integrity: option<string>,
    signal: option<option<borrow<abort-signal>>>,
    observe: option<borrow<observer-callback>>,
  }
  enum request-destination {
    default,
    audio,
    audioworklet,
    document,
    embed,
    font,
    image,
    manifest,
    object,
    paintworklet,
    report,
    script,
    sharedworker,
    style,
    track,
    video,
    worker,
    xslt,
  }
  enum request-mode {
    same-origin,
    no-cors,
    cors,
    navigate,
  }
  enum request-credentials {
    omit,
    same-origin,
    %include,
  }
  enum request-cache {
    default,
    no-store,
    reload,
    no-cache,
    force-cache,
    only-if-cached,
  }
  enum request-redirect {
    follow,
    error,
    manual,
  }
  enum referrer-policy {
    default,
    no-referrer,
    no-referrer-when-downgrade,
    origin,
    origin-when-cross-origin,
    unsafe-url,
    same-origin,
    strict-origin,
    strict-origin-when-cross-origin,
  }
  resource svg-image-element {
    as-svg-graphics-element: func() -> svg-graphics-element;
    x: func() -> svg-animated-length;
    y: func() -> svg-animated-length;
    width: func() -> svg-animated-length;
    height: func() -> svg-animated-length;
    preserve-aspect-ratio: func() -> svg-animated-preserve-aspect-ratio;
    href: func() -> svg-animated-string;
    transform: func() -> svg-animated-transform-list;
    nearest-viewport-element: func() -> option<svg-element>;
    farthest-viewport-element: func() -> option<svg-element>;
    get-b-box: func(a-options: option<svg-bounding-box-options>) -> svg-rect;
    get-ctm: func() -> option<svg-matrix>;
    get-screen-ctm: func() -> option<svg-matrix>;
    get-transform-to-element: func(element: borrow<svg-graphics-element>) -> svg-matrix;
  }
  resource range {
    start-container: func() -> node;
    start-offset: func() -> u32;
    end-container: func() -> node;
    end-offset: func() -> u32;
    collapsed: func() -> bool;
    common-ancestor-container: func() -> node;
    set-start: func(ref-node: borrow<node>, offset: u32);
    set-end: func(ref-node: borrow<node>, offset: u32);
    set-start-before: func(ref-node: borrow<node>);
    set-start-after: func(ref-node: borrow<node>);
    set-end-before: func(ref-node: borrow<node>);
    set-end-after: func(ref-node: borrow<node>);
    collapse: func(to-start: option<bool>);
    select-node: func(ref-node: borrow<node>);
    select-node-contents: func(ref-node: borrow<node>);
    START-TO-START: static func() -> u16;
    START-TO-END: static func() -> u16;
    END-TO-END: static func() -> u16;
    END-TO-START: static func() -> u16;
    compare-boundary-points: func(how: u16, source-range: borrow<range>) -> s16;
    delete-contents: func();
    extract-contents: func() -> document-fragment;
    clone-contents: func() -> document-fragment;
    insert-node: func(node: borrow<node>);
    surround-contents: func(new-parent: borrow<node>);
    clone-range: func() -> range;
    detach: func();
    is-point-in-range: func(node: borrow<node>, offset: u32) -> bool;
    compare-point: func(node: borrow<node>, offset: u32) -> s16;
    intersects-node: func(node: borrow<node>) -> bool;
    create-contextual-fragment: func(fragment: string) -> document-fragment;
    get-client-rects: func() -> option<dom-rect-list>;
    get-bounding-client-rect: func() -> dom-rect;
    // get-client-rects-and-texts: func() -> client-rects-and-texts;
  }
  record client-rects-and-texts {
    rect-list: borrow<dom-rect-list>,
    text-list: list<string>,
  }
  resource worklet {
    as-audio-worklet: func() -> option<audio-worklet>;
    add-module: func(module-url: string, options: option<worklet-options>);
  }
  record worklet-options {
    credentials: option<request-credentials>,
  }
  resource svgfe-image-element {
    as-svg-element: func() -> svg-element;
    preserve-aspect-ratio: func() -> svg-animated-preserve-aspect-ratio;
    x: func() -> svg-animated-length;
    y: func() -> svg-animated-length;
    width: func() -> svg-animated-length;
    height: func() -> svg-animated-length;
    %result: func() -> svg-animated-string;
    href: func() -> svg-animated-string;
  }
  resource file-system-file-entry {
    as-file-system-entry: func() -> file-system-entry;
    file: func(success-callback: borrow<file-callback>, error-callback: option<borrow<error-callback>>);
  }
  resource service-worker-registration {
    as-event-target: func() -> event-target;
    installing: func() -> option<service-worker>;
    waiting: func() -> option<service-worker>;
    active: func() -> option<service-worker>;
    scope: func() -> string;
    update-via-cache: func() -> service-worker-update-via-cache;
    update: func();
    unregister: func() -> bool;
    onupdatefound-subscribe: func() -> pollable;
    push-manager: func() -> push-manager;
    show-notification: func(title: string, options: option<notification-options>);
    get-notifications: func(filter: option<borrow<get-notification-options>>) -> list<notification>;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  enum service-worker-update-via-cache {
    imports,
    all,
    none,
  }
  resource svgfe-func-a-element {
    as-svg-component-transfer-function-element: func() -> svg-component-transfer-function-element;
  }
  resource svgfe-spot-light-element {
    as-svg-element: func() -> svg-element;
    x: func() -> svg-animated-number;
    y: func() -> svg-animated-number;
    z: func() -> svg-animated-number;
    points-at-x: func() -> svg-animated-number;
    points-at-y: func() -> svg-animated-number;
    points-at-z: func() -> svg-animated-number;
    specular-exponent: func() -> svg-animated-number;
    limiting-cone-angle: func() -> svg-animated-number;
  }
  resource html-all-collection {
    length: func() -> u32;
    // named-item: func(name: string) -> html-collection-or-node;
  }
  variant html-collection-or-node {
    html-collection(borrow<html-collection>),
    node(borrow<node>),
  }
  enum presentation-connection-state {
    connecting,
    connected,
    closed,
    terminated,
  }
  enum presentation-connection-binary-type {
    blob,
    arraybuffer,
  }
  resource presentation-connection {
    as-event-target: func() -> event-target;
    id: func() -> string;
    url: func() -> string;
    state: func() -> presentation-connection-state;
    onconnect-subscribe: func() -> pollable;
    onclose-subscribe: func() -> pollable;
    onterminate-subscribe: func() -> pollable;
    binary-type: func() -> presentation-connection-binary-type;
    set-binary-type: func(binary-type: presentation-connection-binary-type);
    send: func(params: presentation-connection-send-params);
    onmessage-subscribe: func() -> pollable;
    close: func();
    terminate: func();
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  variant presentation-connection-send-params {
    data(string),
    // data(borrow<blob>),
    // data(array-buffer),
    // data(array-buffer-view),
  }
  record svg-bounding-box-options {
    fill: option<bool>,
    stroke: option<bool>,
    markers: option<bool>,
    clipped: option<bool>,
  }
  resource svg-graphics-element {
    as-svg-element: func() -> svg-element;
    as-svg-defs-element: func() -> option<svg-defs-element>;
    as-svga-element: func() -> option<svga-element>;
    as-svg-image-element: func() -> option<svg-image-element>;
    as-svgsvg-element: func() -> option<svgsvg-element>;
    as-svg-foreign-object-element: func() -> option<svg-foreign-object-element>;
    as-svg-switch-element: func() -> option<svg-switch-element>;
    as-svg-use-element: func() -> option<svg-use-element>;
    as-svg-geometry-element: func() -> option<svg-geometry-element>;
    transform: func() -> svg-animated-transform-list;
    nearest-viewport-element: func() -> option<svg-element>;
    farthest-viewport-element: func() -> option<svg-element>;
    get-b-box: func(a-options: option<svg-bounding-box-options>) -> svg-rect;
    get-ctm: func() -> option<svg-matrix>;
    get-screen-ctm: func() -> option<svg-matrix>;
    get-transform-to-element: func(element: borrow<svg-graphics-element>) -> svg-matrix;
    required-features: func() -> svg-string-list;
    required-extensions: func() -> svg-string-list;
    system-language: func() -> svg-string-list;
    has-extension: func(extension: string) -> bool;
    as-svgg-element: func() -> option<svgg-element>;
    as-svg-text-content-element: func() -> option<svg-text-content-element>;
  }
  resource svg-animated-number {
    base-val: func() -> f32;
    set-base-val: func(base-val: f32);
    anim-val: func() -> f32;
  }
  resource svgg-element {
    as-svg-graphics-element: func() -> svg-graphics-element;
  }
  enum scroll-restoration {
    auto,
    manual,
  }
  resource history {
    length: func() -> u32;
    scroll-restoration: func() -> scroll-restoration;
    set-scroll-restoration: func(scroll-restoration: scroll-restoration);
    state: func() -> any;
    go: func(delta: option<s32>);
    back: func();
    forward: func();
    push-state: func(data: any, title: string, url: option<string>);
    replace-state: func(data: any, title: string, url: option<string>);
  }
  resource offscreen-canvas-rendering-context2-d {
    canvas: func() -> offscreen-canvas;
    save: func();
    restore: func();
    reset: func();
    scale: func(x: f64, y: f64);
    rotate: func(angle: f64);
    translate: func(x: f64, y: f64);
    transform: func(a: f64, b: f64, c: f64, d: f64, e: f64, f: f64);
    set-transform: func(params: offscreen-canvas-rendering-context2-d-set-transform-params);
    reset-transform: func();
    get-transform: func() -> dom-matrix;
    global-alpha: func() -> f64;
    set-global-alpha: func(global-alpha: f64);
    global-composite-operation: func() -> string;
    set-global-composite-operation: func(global-composite-operation: string);
    image-smoothing-enabled: func() -> bool;
    set-image-smoothing-enabled: func(image-smoothing-enabled: bool);
    // stroke-style: func() -> canvas-gradient-or-canvas-pattern-or-string;
    set-stroke-style: func(stroke-style: canvas-gradient-or-canvas-pattern-or-string);
    // fill-style: func() -> canvas-gradient-or-canvas-pattern-or-string;
    set-fill-style: func(fill-style: canvas-gradient-or-canvas-pattern-or-string);
    create-linear-gradient: func(x0: f64, y0: f64, x1: f64, y1: f64) -> canvas-gradient;
    create-radial-gradient: func(x0: f64, y0: f64, r0: f64, x1: f64, y1: f64, r1: f64) -> canvas-gradient;
    create-pattern: func(image: canvas-image-source, repetition: string) -> option<canvas-pattern>;
    shadow-offset-x: func() -> f64;
    set-shadow-offset-x: func(shadow-offset-x: f64);
    shadow-offset-y: func() -> f64;
    set-shadow-offset-y: func(shadow-offset-y: f64);
    shadow-blur: func() -> f64;
    set-shadow-blur: func(shadow-blur: f64);
    shadow-color: func() -> string;
    set-shadow-color: func(shadow-color: string);
    filter: func() -> string;
    set-filter: func(filter: string);
    clear-rect: func(x: f64, y: f64, w: f64, h: f64);
    fill-rect: func(x: f64, y: f64, w: f64, h: f64);
    stroke-rect: func(x: f64, y: f64, w: f64, h: f64);
    begin-path: func();
    fill: func(params: offscreen-canvas-rendering-context2-d-fill-params);
    stroke: func(params: option<offscreen-canvas-rendering-context2-d-stroke-params>);
    clip: func(params: offscreen-canvas-rendering-context2-d-clip-params);
    is-point-in-path: func(params: offscreen-canvas-rendering-context2-d-is-point-in-path-params) -> bool;
    is-point-in-stroke: func(params: offscreen-canvas-rendering-context2-d-is-point-in-stroke-params) -> bool;
    fill-text: func(text: string, x: f64, y: f64, max-width: option<f64>);
    stroke-text: func(text: string, x: f64, y: f64, max-width: option<f64>);
    measure-text: func(text: string) -> text-metrics;
    draw-image: func(params: offscreen-canvas-rendering-context2-d-draw-image-params);
    create-image-data: func(params: offscreen-canvas-rendering-context2-d-create-image-data-params) -> image-data;
    get-image-data: func(sx: f64, sy: f64, sw: f64, sh: f64) -> image-data;
    put-image-data: func(params: offscreen-canvas-rendering-context2-d-put-image-data-params);
    line-width: func() -> f64;
    set-line-width: func(line-width: f64);
    line-cap: func() -> string;
    set-line-cap: func(line-cap: string);
    line-join: func() -> string;
    set-line-join: func(line-join: string);
    miter-limit: func() -> f64;
    set-miter-limit: func(miter-limit: f64);
    set-line-dash: func(segments: list<f64>);
    get-line-dash: func() -> list<f64>;
    line-dash-offset: func() -> f64;
    set-line-dash-offset: func(line-dash-offset: f64);
    font: func() -> string;
    set-font: func(font: string);
    text-align: func() -> string;
    set-text-align: func(text-align: string);
    text-baseline: func() -> string;
    set-text-baseline: func(text-baseline: string);
    close-path: func();
    move-to: func(x: f64, y: f64);
    line-to: func(x: f64, y: f64);
    quadratic-curve-to: func(cpx: f64, cpy: f64, x: f64, y: f64);
    bezier-curve-to: func(cp1x: f64, cp1y: f64, cp2x: f64, cp2y: f64, x: f64, y: f64);
    arc-to: func(x1: f64, y1: f64, x2: f64, y2: f64, radius: f64);
    rect: func(x: f64, y: f64, w: f64, h: f64);
    round-rect: func(x: f64, y: f64, w: f64, h: f64, radii: option<dom-point-init-or-f64-or-list-dom-point-init-or-f64>);
    arc: func(x: f64, y: f64, radius: f64, start-angle: f64, end-angle: f64, anticlockwise: option<bool>);
    ellipse: func(x: f64, y: f64, radius-x: f64, radius-y: f64, rotation: f64, start-angle: f64, end-angle: f64, anticlockwise: option<bool>);
  }
  variant offscreen-canvas-rendering-context2-d-set-transform-params {
    a-b-c-d-e-f(tuple<f64, f64, f64, f64, f64, f64>),
    transform(option<dom-matrix2-d-init>),
  }
  variant offscreen-canvas-rendering-context2-d-fill-params {
    winding(option<canvas-winding-rule>),
    path-winding(tuple<borrow<path2-d>, option<canvas-winding-rule>>),
  }
  variant offscreen-canvas-rendering-context2-d-stroke-params {
    path(borrow<path2-d>),
  }
  variant offscreen-canvas-rendering-context2-d-clip-params {
    winding(option<canvas-winding-rule>),
    path-winding(tuple<borrow<path2-d>, option<canvas-winding-rule>>),
  }
  variant offscreen-canvas-rendering-context2-d-is-point-in-path-params {
    x-y-winding(tuple<f64, f64, option<canvas-winding-rule>>),
    path-x-y-winding(tuple<borrow<path2-d>, f64, f64, option<canvas-winding-rule>>),
  }
  variant offscreen-canvas-rendering-context2-d-is-point-in-stroke-params {
    x-y(tuple<f64, f64>),
    path-x-y(tuple<borrow<path2-d>, f64, f64>),
  }
  variant offscreen-canvas-rendering-context2-d-draw-image-params {
    image-dx-dy(tuple<canvas-image-source, f64, f64>),
    image-dx-dy-dw-dh(tuple<canvas-image-source, f64, f64, f64, f64>),
    image-sx-sy-sw-sh-dx-dy-dw-dh(tuple<canvas-image-source, f64, f64, f64, f64, f64, f64, f64, f64>),
  }
  variant offscreen-canvas-rendering-context2-d-create-image-data-params {
    sw-sh(tuple<f64, f64>),
    imagedata(borrow<image-data>),
  }
  variant offscreen-canvas-rendering-context2-d-put-image-data-params {
    imagedata-dx-dy(tuple<borrow<image-data>, f64, f64>),
    imagedata-dx-dy-dirty-x-dirty-y-dirty-width-dirty-height(tuple<borrow<image-data>, f64, f64, f64, f64, f64, f64>),
  }
  resource crypto {
    subtle: func() -> subtle-crypto;
    get-random-values: func(array: array-buffer-view) -> array-buffer-view;
    random-uuid: func() -> string;
  }
  enum checkerboard-reason {
    severe,
    recent,
  }
  record checkerboard-report {
    severity: option<u32>,
    timestamp: option<borrow<dom-time-stamp>>,
    log: option<string>,
    reason: option<checkerboard-reason>,
  }
  resource checkerboard-report-service {
    // get-reports: func() -> list<checkerboard-report>;
    is-recording-enabled: func() -> bool;
    set-recording-enabled: func(a-enabled: bool);
    flush-active-reports: func();
  }
  resource html-video-element {
    as-html-media-element: func() -> html-media-element;
    width: func() -> u32;
    set-width: func(width: u32);
    height: func() -> u32;
    set-height: func(height: u32);
    video-width: func() -> u32;
    video-height: func() -> u32;
    poster: func() -> string;
    set-poster: func(poster: string);
    get-video-playback-quality: func() -> video-playback-quality;
  }
  enum orientation-type {
    portrait-primary,
    portrait-secondary,
    landscape-primary,
    landscape-secondary,
  }
  enum orientation-lock-type {
    any,
    natural,
    landscape,
    portrait,
    portrait-primary,
    portrait-secondary,
    landscape-primary,
    landscape-secondary,
  }
  resource screen-orientation {
    as-event-target: func() -> event-target;
    lock: func(orientation: orientation-lock-type);
    unlock: func();
    %type: func() -> orientation-type;
    angle: func() -> u16;
    onchange-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource css-supports-rule {
    as-css-condition-rule: func() -> css-condition-rule;
  }
  resource processing-instruction {
    as-character-data: func() -> character-data;
    target: func() -> string;
    sheet: func() -> option<style-sheet>;
  }
  resource worker-location {
    href: func() -> string;
    origin: func() -> string;
    protocol: func() -> string;
    host: func() -> string;
    hostname: func() -> string;
    port: func() -> string;
    pathname: func() -> string;
    search: func() -> string;
    hash: func() -> string;
  }
  enum fill-mode {
    none,
    forwards,
    backwards,
    both,
    auto,
  }
  enum playback-direction {
    normal,
    reverse,
    alternate,
    alternate-reverse,
  }
  variant f64-or-string {
    %f64(f64),
    %string(string),
  }
  record effect-timing {
    delay: option<f64>,
    end-delay: option<f64>,
    fill: option<fill-mode>,
    iteration-start: option<f64>,
    iterations: option<f64>,
    duration: option<f64-or-string>,
    direction: option<playback-direction>,
    easing: option<string>,
  }
  record optional-effect-timing {
    delay: option<f64>,
    end-delay: option<f64>,
    fill: option<fill-mode>,
    iteration-start: option<f64>,
    iterations: option<f64>,
    duration: option<f64-or-string>,
    direction: option<playback-direction>,
    easing: option<string>,
  }
  record computed-effect-timing {
    end-time: option<f64>,
    active-duration: option<f64>,
    local-time: option<f64>,
    progress: option<f64>,
    current-iteration: option<f64>,
    delay: option<f64>,
    end-delay: option<f64>,
    fill: option<fill-mode>,
    iteration-start: option<f64>,
    iterations: option<f64>,
    duration: option<f64-or-string>,
    direction: option<playback-direction>,
    easing: option<string>,
  }
  resource animation-effect {
    get-timing: func() -> effect-timing;
    get-computed-timing: func() -> computed-effect-timing;
    update-timing: func(timing: option<optional-effect-timing>);
    as-keyframe-effect: func() -> option<keyframe-effect>;
  }
  resource file-reader {
    as-event-target: func() -> event-target;
    read-as-array-buffer: func(blob: borrow<blob>);
    read-as-binary-string: func(filedata: borrow<blob>);
    read-as-text: func(blob: borrow<blob>, label: option<string>);
    read-as-data-url: func(blob: borrow<blob>);
    abort: func();
    EMPTY: static func() -> u16;
    LOADING: static func() -> u16;
    DONE: static func() -> u16;
    ready-state: func() -> u16;
    %result: func() -> any;
    error: func() -> option<dom-exception>;
    onloadstart-subscribe: func() -> pollable;
    onprogress-subscribe: func() -> pollable;
    onload-subscribe: func() -> pollable;
    onabort-subscribe: func() -> pollable;
    onerror-subscribe: func() -> pollable;
    onloadend-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource track-event {
    as-event: func() -> event;
    // track: func() -> audio-track-or-text-track-or-video-track;
  }
  variant audio-track-or-text-track-or-video-track {
    audio-track(borrow<audio-track>),
    text-track(borrow<text-track>),
    video-track(borrow<video-track>),
  }
  record track-event-init {
    track: option<audio-track-or-text-track-or-video-track>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource css-rule-list {
    length: func() -> u32;
    item: func(index: u32) -> option<css-rule>;
  }
  resource xslt-processor {
    import-stylesheet: func(style: borrow<node>);
    transform-to-fragment: func(source: borrow<node>, output: borrow<document>) -> document-fragment;
    transform-to-document: func(source: borrow<node>) -> document;
    set-parameter: func(namespace-uri: string, local-name: string, value: any);
    get-parameter: func(namespace-uri: string, local-name: string) -> option<ns-i-variant>;
    remove-parameter: func(namespace-uri: string, local-name: string);
    clear-parameters: func();
    reset: func();
    DISABLE-ALL-LOADS: static func() -> u32;
    %flags: func() -> u32;
    set-flags: func(%flags: u32);
  }
  record focus-options {
    prevent-scroll: option<bool>,
    focus-visible: option<bool>,
  }
  resource svgfe-component-transfer-element {
    as-svg-element: func() -> svg-element;
    in1: func() -> svg-animated-string;
    x: func() -> svg-animated-length;
    y: func() -> svg-animated-length;
    width: func() -> svg-animated-length;
    height: func() -> svg-animated-length;
    %result: func() -> svg-animated-string;
  }
  resource user-proximity-event {
    as-event: func() -> event;
    near: func() -> bool;
  }
  record user-proximity-event-init {
    near: option<bool>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource speech-recognition-result {
    length: func() -> u32;
    item: func(index: u32) -> speech-recognition-alternative;
    is-final: func() -> bool;
  }
  resource readable-stream {
    constructor(underlying-source: option<object>, strategy: option<queuing-strategy>);
    locked: func() -> bool;
    cancel: func(reason: any);
    // get-reader: func(options: option<readable-stream-get-reader-options>) -> readable-stream-reader;
    pipe-through: func(transform: readable-writable-pair, options: option<stream-pipe-options>) -> readable-stream;
    pipe-to: func(destination: borrow<writable-stream>, options: option<stream-pipe-options>);
    tee: func() -> list<readable-stream>;
  }
  variant readable-stream-byob-reader-or-readable-stream-default-reader {
    readable-stream-byob-reader(borrow<readable-stream-byob-reader>),
    readable-stream-default-reader(borrow<readable-stream-default-reader>),
  }
  type readable-stream-reader = readable-stream-byob-reader-or-readable-stream-default-reader;
  enum readable-stream-reader-mode {
    byob,
  }
  record readable-stream-get-reader-options {
    mode: option<readable-stream-reader-mode>,
  }
  record readable-stream-iterator-options {
    prevent-cancel: option<bool>,
  }
  record readable-writable-pair {
    readable: borrow<readable-stream>,
    writable: borrow<writable-stream>,
  }
  record stream-pipe-options {
    prevent-close: option<bool>,
    prevent-abort: option<bool>,
    prevent-cancel: option<bool>,
    signal: option<borrow<abort-signal>>,
  }
  record underlying-source {
    start: option<borrow<underlying-source-start-callback>>,
    pull: option<borrow<underlying-source-pull-callback>>,
    cancel: option<borrow<underlying-source-cancel-callback>>,
    %type: option<readable-stream-type>,
    auto-allocate-chunk-size: option<u64>,
  }
  variant readable-byte-stream-controller-or-readable-stream-default-controller {
    readable-byte-stream-controller(borrow<readable-byte-stream-controller>),
    readable-stream-default-controller(borrow<readable-stream-default-controller>),
  }
  type readable-stream-controller = readable-byte-stream-controller-or-readable-stream-default-controller;
  enum readable-stream-type {
    bytes,
  }
  resource readable-stream-default-reader {
    constructor(%stream: borrow<readable-stream>);
    read: func() -> readable-stream-read-result;
    release-lock: func();
    cancel: func(reason: any);
  }
  record readable-stream-read-result {
    value: any,
    done: option<bool>,
  }
  resource readable-stream-byob-reader {
    constructor(%stream: borrow<readable-stream>);
    read: func(view: array-buffer-view) -> readable-stream-read-result;
    release-lock: func();
    cancel: func(reason: any);
  }
  resource readable-stream-default-controller {
    desired-size: func() -> f64;
    close: func();
    enqueue: func(chunk: any);
    error: func(e: any);
  }
  resource readable-byte-stream-controller {
    byob-request: func() -> option<readable-stream-byob-request>;
    desired-size: func() -> f64;
    close: func();
    enqueue: func(chunk: array-buffer-view);
    error: func(e: any);
  }
  resource readable-stream-byob-request {
    view: func() -> array-buffer-view;
    respond: func(bytes-written: u64);
    respond-with-new-view: func(view: array-buffer-view);
  }
  resource writable-stream {
    as-file-system-writable-file-stream: func() -> option<file-system-writable-file-stream>;
    constructor(underlying-sink: option<object>, strategy: option<queuing-strategy>);
    locked: func() -> bool;
    abort: func(reason: any);
    close: func();
    get-writer: func() -> writable-stream-default-writer;
  }
  record underlying-sink {
    start: option<borrow<underlying-sink-start-callback>>,
    write: option<borrow<underlying-sink-write-callback>>,
    close: option<borrow<underlying-sink-close-callback>>,
    abort: option<borrow<underlying-sink-abort-callback>>,
    %type: any,
  }
  resource writable-stream-default-writer {
    constructor(%stream: borrow<writable-stream>);
    desired-size: func() -> f64;
    abort: func(reason: any);
    close: func();
    release-lock: func();
    write: func(chunk: any);
  }
  resource writable-stream-default-controller {
    signal: func() -> abort-signal;
    error: func(e: any);
  }
  resource transform-stream {
    constructor(transformer: option<object>, writable-strategy: option<queuing-strategy>, readable-strategy: option<queuing-strategy>);
    readable: func() -> readable-stream;
    writable: func() -> writable-stream;
  }
  record transformer {
    start: option<borrow<transformer-start-callback>>,
    transform: option<borrow<transformer-transform-callback>>,
    flush: option<borrow<transformer-flush-callback>>,
    readable-type: any,
    writable-type: any,
  }
  resource transform-stream-default-controller {
    desired-size: func() -> f64;
    enqueue: func(chunk: any);
    error: func(reason: any);
    terminate: func();
  }
  record queuing-strategy {
    high-water-mark: option<f64>,
    size: option<borrow<queuing-strategy-size>>,
  }
  record queuing-strategy-init {
    high-water-mark: f64,
  }
  resource byte-length-queuing-strategy {
    constructor(init: queuing-strategy-init);
    high-water-mark: func() -> f64;
    size: func() -> function;
  }
  resource count-queuing-strategy {
    constructor(init: queuing-strategy-init);
    high-water-mark: func() -> f64;
    size: func() -> function;
  }
  resource svg-text-path-element {
    as-svg-text-content-element: func() -> svg-text-content-element;
    TEXTPATH-METHODTYPE-UNKNOWN: static func() -> u16;
    TEXTPATH-METHODTYPE-ALIGN: static func() -> u16;
    TEXTPATH-METHODTYPE-STRETCH: static func() -> u16;
    TEXTPATH-SPACINGTYPE-UNKNOWN: static func() -> u16;
    TEXTPATH-SPACINGTYPE-AUTO: static func() -> u16;
    TEXTPATH-SPACINGTYPE-EXACT: static func() -> u16;
    start-offset: func() -> svg-animated-length;
    method: func() -> svg-animated-enumeration;
    spacing: func() -> svg-animated-enumeration;
    href: func() -> svg-animated-string;
    LENGTHADJUST-UNKNOWN: static func() -> u16;
    LENGTHADJUST-SPACING: static func() -> u16;
    LENGTHADJUST-SPACINGANDGLYPHS: static func() -> u16;
    text-length: func() -> svg-animated-length;
    length-adjust: func() -> svg-animated-enumeration;
    get-number-of-chars: func() -> s32;
    get-computed-text-length: func() -> f32;
    get-sub-string-length: func(charnum: u32, nchars: u32) -> f32;
    get-start-position-of-char: func(charnum: u32) -> svg-point;
    get-end-position-of-char: func(charnum: u32) -> svg-point;
    get-extent-of-char: func(charnum: u32) -> svg-rect;
    get-rotation-of-char: func(charnum: u32) -> f32;
    get-char-num-at-position: func(point: borrow<svg-point>) -> s32;
    select-sub-string: func(charnum: u32, nchars: u32);
  }
  resource htmlli-element {
    as-html-element: func() -> html-element;
    value: func() -> s32;
    set-value: func(value: s32);
    %type: func() -> string;
    set-type: func(%type: string);
  }
  resource performance-measure {
    as-performance-entry: func() -> performance-entry;
    name: func() -> string;
    entry-type: func() -> string;
    start-time: func() -> dom-high-res-time-stamp;
    duration: func() -> dom-high-res-time-stamp;
    to-json: func() -> object;
  }
  resource midi-message-event {
    as-event: func() -> event;
    data: func() -> uint8-array;
  }
  record midi-message-event-init {
    data: option<uint8-array>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource svg-string-list {
    length: func() -> u32;
    number-of-items: func() -> u32;
    clear: func();
    initialize: func(new-item: string) -> string;
    get-item: func(index: u32) -> string;
    insert-item-before: func(new-item: string, index: u32) -> string;
    replace-item: func(new-item: string, index: u32) -> string;
    remove-item: func(index: u32) -> string;
    append-item: func(new-item: string) -> string;
  }
  resource data-transfer-item {
    kind: func() -> string;
    %type: func() -> string;
    get-as-string: func(callback: option<borrow<function-string-callback>>);
    get-as-file: func() -> option<file>;
    webkit-get-as-entry: func() -> option<file-system-entry>;
  }
  resource css-counter-style-rule {
    as-css-rule: func() -> css-rule;
    name: func() -> string;
    set-name: func(name: string);
    system: func() -> string;
    set-system: func(system: string);
    symbols: func() -> string;
    set-symbols: func(symbols: string);
    additive-symbols: func() -> string;
    set-additive-symbols: func(additive-symbols: string);
    negative: func() -> string;
    set-negative: func(negative: string);
    prefix: func() -> string;
    set-prefix: func(prefix: string);
    suffix: func() -> string;
    set-suffix: func(suffix: string);
    range: func() -> string;
    set-range: func(range: string);
    pad: func() -> string;
    set-pad: func(pad: string);
    speak-as: func() -> string;
    set-speak-as: func(speak-as: string);
    fallback: func() -> string;
    set-fallback: func(fallback: string);
    STYLE-RULE: static func() -> u16;
    CHARSET-RULE: static func() -> u16;
    IMPORT-RULE: static func() -> u16;
    MEDIA-RULE: static func() -> u16;
    FONT-FACE-RULE: static func() -> u16;
    PAGE-RULE: static func() -> u16;
    NAMESPACE-RULE: static func() -> u16;
    %type: func() -> u16;
    css-text: func() -> string;
    set-css-text: func(css-text: string);
    parent-rule: func() -> option<css-rule>;
    parent-style-sheet: func() -> option<css-style-sheet>;
  }
  resource svg-polyline-element {
    as-svg-geometry-element: func() -> svg-geometry-element;
    points: func() -> svg-point-list;
    animated-points: func() -> svg-point-list;
  }
  variant worker-global-scope-set-timeout-params {
    handler-timeout-arguments(tuple<borrow<function>, option<s32>, list<any>>),
    handler-timeout-unused(tuple<string, option<s32>, list<any>>),
  }
  variant worker-global-scope-set-interval-params {
    handler-timeout-arguments(tuple<borrow<function>, option<s32>, list<any>>),
    handler-timeout-unused(tuple<string, option<s32>, list<any>>),
  }
  variant worker-global-scope-create-image-bitmap-params {
    a-image-a-options(tuple<image-bitmap-source, option<image-bitmap-options>>),
    a-image-a-sx-a-sy-a-sw-a-sh-a-options(tuple<image-bitmap-source, s32, s32, s32, s32, option<image-bitmap-options>>),
  }
  variant window-set-timeout-params {
    handler-timeout-arguments(tuple<borrow<function>, option<s32>, list<any>>),
    handler-timeout-unused(tuple<string, option<s32>, list<any>>),
  }
  variant window-set-interval-params {
    handler-timeout-arguments(tuple<borrow<function>, option<s32>, list<any>>),
    handler-timeout-unused(tuple<string, option<s32>, list<any>>),
  }
  variant window-create-image-bitmap-params {
    a-image-a-options(tuple<image-bitmap-source, option<image-bitmap-options>>),
    a-image-a-sx-a-sy-a-sw-a-sh-a-options(tuple<image-bitmap-source, s32, s32, s32, s32, option<image-bitmap-options>>),
  }
  resource user-activation {
    has-been-active: func() -> bool;
    is-active: func() -> bool;
  }
  record font-face-set-iterator-result {
    value: any,
    done: bool,
  }
  resource font-face-set-iterator {
    next: func() -> font-face-set-iterator-result;
  }
  enum font-face-set-load-status {
    loading,
    loaded,
  }
  resource font-face-set {
    as-event-target: func() -> event-target;
    size: func() -> u32;
    add: func(font: borrow<font-face>);
    has: func(font: borrow<font-face>) -> bool;
    delete: func(font: borrow<font-face>) -> bool;
    clear: func();
    entries: func() -> font-face-set-iterator;
    values: func() -> font-face-set-iterator;
    for-each: func(cb: borrow<font-face-set-for-each-callback>, this-arg: any);
    onloading-subscribe: func() -> pollable;
    onloadingdone-subscribe: func() -> pollable;
    onloadingerror-subscribe: func() -> pollable;
    load: func(font: string, text: option<string>) -> list<font-face>;
    check: func(font: string, text: option<string>) -> bool;
    status: func() -> font-face-set-load-status;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource svg-set-element {
    as-svg-animation-element: func() -> svg-animation-element;
  }
  resource svg-path-seg-list {
    number-of-items: func() -> u32;
    get-item: func(index: u32) -> svg-path-seg;
  }
  record gain-options {
    gain: option<f32>,
    channel-count: option<u32>,
    channel-count-mode: option<channel-count-mode>,
    channel-interpretation: option<channel-interpretation>,
  }
  resource gain-node {
    as-audio-node: func() -> audio-node;
    gain: func() -> audio-param;
  }
  resource extendable-message-event {
    as-extendable-event: func() -> extendable-event;
    data: func() -> any;
    origin: func() -> string;
    last-event-id: func() -> string;
    // source: func() -> client-or-message-port-or-service-worker;
    ports: func() -> list<message-port>;
  }
  variant client-or-message-port-or-service-worker {
    client(borrow<client>),
    message-port(borrow<message-port>),
    service-worker(borrow<service-worker>),
  }
  record extendable-message-event-init {
    data: any,
    origin: option<string>,
    last-event-id: option<string>,
    source: option<client-or-message-port-or-service-worker>,
    ports: option<list<borrow<message-port>>>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  enum browser-find-case-sensitivity {
    case-sensitive,
    case-insensitive,
  }
  enum browser-find-direction {
    forward,
    backward,
  }
  record browser-element-download-options {
    filename: option<string>,
    referrer: option<string>,
  }
  record browser-element-execute-script-options {
    url: option<string>,
    origin: option<string>,
  }
  resource speech-synthesis-utterance {
    as-event-target: func() -> event-target;
    text: func() -> string;
    set-text: func(text: string);
    lang: func() -> string;
    set-lang: func(lang: string);
    voice: func() -> option<speech-synthesis-voice>;
    set-voice: func(voice: option<speech-synthesis-voice>);
    volume: func() -> f32;
    set-volume: func(volume: f32);
    rate: func() -> f32;
    set-rate: func(rate: f32);
    pitch: func() -> f32;
    set-pitch: func(pitch: f32);
    onstart-subscribe: func() -> pollable;
    onend-subscribe: func() -> pollable;
    onerror-subscribe: func() -> pollable;
    onpause-subscribe: func() -> pollable;
    onresume-subscribe: func() -> pollable;
    onmark-subscribe: func() -> pollable;
    onboundary-subscribe: func() -> pollable;
    chosen-voice-uri: func() -> string;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  enum presentation-connection-closed-reason {
    error,
    closed,
    wentaway,
  }
  resource presentation-connection-close-event {
    as-event: func() -> event;
    reason: func() -> presentation-connection-closed-reason;
    message: func() -> string;
  }
  record presentation-connection-close-event-init {
    reason: presentation-connection-closed-reason,
    message: option<string>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  enum css-style-sheet-parsing-mode {
    author,
    user,
    agent,
  }
  resource css-style-sheet {
    as-style-sheet: func() -> style-sheet;
    constructor();
    owner-rule: func() -> option<css-rule>;
    css-rules: func() -> css-rule-list;
    parsing-mode: func() -> css-style-sheet-parsing-mode;
    insert-rule: func(rule: string, index: option<u32>) -> u32;
    delete-rule: func(index: u32);
    replace: func(text: string) -> css-style-sheet;
    replace-sync: func(text: string);
  }
  resource htmlhr-element {
    as-html-element: func() -> html-element;
    align: func() -> string;
    set-align: func(align: string);
    color: func() -> string;
    set-color: func(color: string);
    no-shade: func() -> bool;
    set-no-shade: func(no-shade: bool);
    size: func() -> string;
    set-size: func(size: string);
    width: func() -> string;
    set-width: func(width: string);
  }
  resource push-subscription-options {
    application-server-key: func() -> array-buffer;
  }
  record rtc-certificate-expiration {
    expires: option<borrow<dom-time-stamp>>,
  }
  resource rtc-certificate {
    expires: func() -> dom-time-stamp;
  }
  resource idb-database {
    as-event-target: func() -> event-target;
    name: func() -> string;
    version: func() -> u64;
    object-store-names: func() -> dom-string-list;
    create-object-store: func(name: string, optional-parameters: option<idb-object-store-parameters>) -> idb-object-store;
    delete-object-store: func(name: string);
    transaction: func(store-names: list-string-or-string, mode: option<idb-transaction-mode>) -> idb-transaction;
    close: func();
    onabort-subscribe: func() -> pollable;
    onclose-subscribe: func() -> pollable;
    onerror-subscribe: func() -> pollable;
    onversionchange-subscribe: func() -> pollable;
    storage: func() -> storage-type;
    create-mutable-file: func(name: string, %type: option<string>) -> idb-request;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource custom-element-registry {
    define: func(name: string, function-constructor: borrow<function>, options: option<element-definition-options>);
    set-element-creation-callback: func(name: string, callback: borrow<custom-element-creation-callback>);
    get: func(name: string) -> any;
    when-defined: func(name: string);
    upgrade: func(root: borrow<node>);
  }
  record element-definition-options {
    extends: option<string>,
  }
  resource file {
    as-blob: func() -> blob;
    name: func() -> string;
    last-modified: func() -> s64;
    size: func() -> u64;
    %type: func() -> string;
    slice: func(start: option<s64>, end: option<s64>, content-type: option<string>) -> blob;
    %stream: func() -> readable-stream;
    text: func() -> string;
    array-buffer: func() -> array-buffer;
  }
  record file-property-bag {
    %type: option<string>,
    last-modified: option<s64>,
  }
  record chrome-file-property-bag {
    name: option<string>,
    existence-check: option<bool>,
    %type: option<string>,
    last-modified: option<s64>,
  }
  resource html-legend-element {
    as-html-element: func() -> html-element;
    form: func() -> option<html-form-element>;
    align: func() -> string;
    set-align: func(align: string);
  }
  resource audio-scheduled-source-node {
    as-audio-node: func() -> audio-node;
    as-constant-source-node: func() -> option<constant-source-node>;
    as-audio-buffer-source-node: func() -> option<audio-buffer-source-node>;
    as-oscillator-node: func() -> option<oscillator-node>;
    onended-subscribe: func() -> pollable;
    start: func(when: option<f64>);
    stop: func(when: option<f64>);
  }
  resource animation-timeline {
    current-time: func() -> f64;
    as-document-timeline: func() -> option<document-timeline>;
  }
  enum over-sample-type {
    none,
    x2x,
    x4x,
  }
  record wave-shaper-options {
    curve: option<list<f32>>,
    oversample: option<over-sample-type>,
    channel-count: option<u32>,
    channel-count-mode: option<channel-count-mode>,
    channel-interpretation: option<channel-interpretation>,
  }
  resource wave-shaper-node {
    as-audio-node: func() -> audio-node;
    curve: func() -> float32-array;
    set-curve: func(curve: float32-array);
    oversample: func() -> over-sample-type;
    set-oversample: func(oversample: over-sample-type);
  }
  resource gamepad-button {
    pressed: func() -> bool;
    touched: func() -> bool;
    value: func() -> f64;
  }
  enum gamepad-hand {
    default,
    left,
    right,
  }
  enum gamepad-mapping-type {
    default,
    standard,
  }
  resource gamepad {
    id: func() -> string;
    index: func() -> u32;
    mapping: func() -> gamepad-mapping-type;
    hand: func() -> gamepad-hand;
    display-id: func() -> u32;
    connected: func() -> bool;
    buttons: func() -> list<gamepad-button>;
    axes: func() -> list<f64>;
    timestamp: func() -> dom-high-res-time-stamp;
    pose: func() -> option<gamepad-pose>;
    haptic-actuators: func() -> list<gamepad-haptic-actuator>;
  }
  record channel-merger-options {
    number-of-inputs: option<u32>,
    channel-count: option<u32>,
    channel-count-mode: option<channel-count-mode>,
    channel-interpretation: option<channel-interpretation>,
  }
  resource channel-merger-node {
    as-audio-node: func() -> audio-node;
  }
  resource svg-zoom-and-pan {
    SVG-ZOOMANDPAN-UNKNOWN: static func() -> u16;
    SVG-ZOOMANDPAN-DISABLE: static func() -> u16;
    SVG-ZOOMANDPAN-MAGNIFY: static func() -> u16;
    zoom-and-pan: func() -> u16;
    set-zoom-and-pan: func(zoom-and-pan: u16);
  }
  resource node-iterator {
    root: func() -> node;
    reference-node: func() -> option<node>;
    pointer-before-reference-node: func() -> bool;
    what-to-show: func() -> u32;
    filter: func() -> option<node-filter>;
    next-node: func() -> option<node>;
    previous-node: func() -> option<node>;
    detach: func();
  }
  enum security-policy-violation-event-disposition {
    enforce,
    report,
  }
  resource security-policy-violation-event {
    as-event: func() -> event;
    document-uri: func() -> string;
    referrer: func() -> string;
    blocked-uri: func() -> string;
    violated-directive: func() -> string;
    effective-directive: func() -> string;
    original-policy: func() -> string;
    source-file: func() -> string;
    sample: func() -> string;
    disposition: func() -> security-policy-violation-event-disposition;
    status-code: func() -> u16;
    line-number: func() -> s32;
    column-number: func() -> s32;
  }
  record security-policy-violation-event-init {
    document-uri: option<string>,
    referrer: option<string>,
    blocked-uri: option<string>,
    violated-directive: option<string>,
    effective-directive: option<string>,
    original-policy: option<string>,
    source-file: option<string>,
    sample: option<string>,
    disposition: option<security-policy-violation-event-disposition>,
    status-code: option<u16>,
    line-number: option<s32>,
    column-number: option<s32>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  enum shadow-root-mode {
    open,
    closed,
  }
  resource shadow-root {
    as-document-fragment: func() -> document-fragment;
    mode: func() -> shadow-root-mode;
    host: func() -> element;
    get-element-by-id: func(element-id: string) -> option<element>;
    get-elements-by-tag-name: func(local-name: string) -> html-collection;
    get-elements-by-tag-name-ns: func(namespace: string, local-name: string) -> html-collection;
    get-elements-by-class-name: func(class-names: string) -> html-collection;
    inner-html: func() -> string;
    set-inner-html: func(inner-html: string);
    element-from-point: func(x: f32, y: f32) -> option<element>;
    elements-from-point: func(x: f32, y: f32) -> list<element>;
    active-element: func() -> option<element>;
    style-sheets: func() -> style-sheet-list;
    pointer-lock-element: func() -> option<element>;
    fullscreen-element: func() -> option<element>;
  }
  resource css-rule {
    as-css-keyframes-rule: func() -> option<css-keyframes-rule>;
    as-css-import-rule: func() -> option<css-import-rule>;
    as-css-page-rule: func() -> option<css-page-rule>;
    as-css-keyframe-rule: func() -> option<css-keyframe-rule>;
    as-css-namespace-rule: func() -> option<css-namespace-rule>;
    as-css-counter-style-rule: func() -> option<css-counter-style-rule>;
    as-css-font-feature-values-rule: func() -> option<css-font-feature-values-rule>;
    as-css-grouping-rule: func() -> option<css-grouping-rule>;
    as-css-font-face-rule: func() -> option<css-font-face-rule>;
    STYLE-RULE: static func() -> u16;
    CHARSET-RULE: static func() -> u16;
    IMPORT-RULE: static func() -> u16;
    MEDIA-RULE: static func() -> u16;
    FONT-FACE-RULE: static func() -> u16;
    PAGE-RULE: static func() -> u16;
    NAMESPACE-RULE: static func() -> u16;
    %type: func() -> u16;
    css-text: func() -> string;
    set-css-text: func(css-text: string);
    parent-rule: func() -> option<css-rule>;
    parent-style-sheet: func() -> option<css-style-sheet>;
    KEYFRAMES-RULE: static func() -> u16;
    KEYFRAME-RULE: static func() -> u16;
    COUNTER-STYLE-RULE: static func() -> u16;
    SUPPORTS-RULE: static func() -> u16;
    DOCUMENT-RULE: static func() -> u16;
    FONT-FEATURE-VALUES-RULE: static func() -> u16;
    as-css-style-rule: func() -> option<css-style-rule>;
  }
  resource bar-prop {
    visible: func() -> bool;
    set-visible: func(visible: bool);
  }
  resource svg-text-content-element {
    as-svg-graphics-element: func() -> svg-graphics-element;
    as-svg-text-path-element: func() -> option<svg-text-path-element>;
    as-svg-text-positioning-element: func() -> option<svg-text-positioning-element>;
    LENGTHADJUST-UNKNOWN: static func() -> u16;
    LENGTHADJUST-SPACING: static func() -> u16;
    LENGTHADJUST-SPACINGANDGLYPHS: static func() -> u16;
    text-length: func() -> svg-animated-length;
    length-adjust: func() -> svg-animated-enumeration;
    get-number-of-chars: func() -> s32;
    get-computed-text-length: func() -> f32;
    get-sub-string-length: func(charnum: u32, nchars: u32) -> f32;
    get-start-position-of-char: func(charnum: u32) -> svg-point;
    get-end-position-of-char: func(charnum: u32) -> svg-point;
    get-extent-of-char: func(charnum: u32) -> svg-rect;
    get-rotation-of-char: func(charnum: u32) -> f32;
    get-char-num-at-position: func(point: borrow<svg-point>) -> s32;
    select-sub-string: func(charnum: u32, nchars: u32);
  }
  resource html-field-set-element {
    as-html-element: func() -> html-element;
    disabled: func() -> bool;
    set-disabled: func(disabled: bool);
    form: func() -> option<html-form-element>;
    name: func() -> string;
    set-name: func(name: string);
    %type: func() -> string;
    elements: func() -> html-collection;
    will-validate: func() -> bool;
    validity: func() -> validity-state;
    validation-message: func() -> string;
    check-validity: func() -> bool;
    report-validity: func() -> bool;
    set-custom-validity: func(error: string);
  }
  resource audio-worklet-processor {
    port: func() -> message-port;
  }
  resource html-picture-element {
    as-html-element: func() -> html-element;
  }
  resource video-playback-quality {
    creation-time: func() -> dom-high-res-time-stamp;
    total-video-frames: func() -> u32;
    dropped-video-frames: func() -> u32;
    corrupted-video-frames: func() -> u32;
  }
  enum rtc-priority-type {
    very-low,
    low,
    medium,
    high,
  }
  enum rtc-degradation-preference {
    maintain-framerate,
    maintain-resolution,
    balanced,
  }
  record rtc-rtx-parameters {
    ssrc: option<u32>,
  }
  record rtc-fec-parameters {
    ssrc: option<u32>,
  }
  record rtc-rtp-encoding-parameters {
    ssrc: option<u32>,
    rtx: option<rtc-rtx-parameters>,
    fec: option<rtc-fec-parameters>,
    active: option<bool>,
    priority: option<rtc-priority-type>,
    max-bitrate: option<u32>,
    degradation-preference: option<rtc-degradation-preference>,
    rid: option<string>,
    scale-resolution-down-by: option<f32>,
  }
  record rtc-rtp-header-extension-parameters {
    uri: option<string>,
    id: option<u16>,
    encrypted: option<bool>,
  }
  record rtc-rtcp-parameters {
    cname: option<string>,
    reduced-size: option<bool>,
  }
  record rtc-rtp-codec-parameters {
    payload-type: option<u16>,
    mime-type: option<string>,
    clock-rate: option<u32>,
    channels: option<u16>,
    sdp-fmtp-line: option<string>,
  }
  record rtc-rtp-parameters {
    encodings: option<list<rtc-rtp-encoding-parameters>>,
    header-extensions: option<list<rtc-rtp-header-extension-parameters>>,
    rtcp: option<rtc-rtcp-parameters>,
    codecs: option<list<rtc-rtp-codec-parameters>>,
  }
  record rtc-rtp-codec-capability {
    mime-type: string,
    clock-rate: u32,
    channels: option<u16>,
    sdp-fmtp-line: option<string>,
  }
  record rtc-rtp-header-extension-capability {
    uri: string,
  }
  record rtc-rtp-capabilities {
    codecs: list<rtc-rtp-codec-capability>,
    header-extensions: list<rtc-rtp-header-extension-capability>,
  }
  resource rtc-rtp-sender {
    track: func() -> option<media-stream-track>;
    set-parameters: func(parameters: option<rtc-rtp-parameters>);
    get-parameters: func() -> rtc-rtp-parameters;
    replace-track: func(with-track: option<borrow<media-stream-track>>);
    get-stats: func() -> rtc-stats-report;
    get-capabilities: static func(kind: string) -> option<rtc-rtp-capabilities>;
    dtmf: func() -> option<rtcdtmf-sender>;
    get-streams: func() -> list<media-stream>;
    set-streams: func(streams: list<borrow<media-stream>>);
    set-track: func(track: option<borrow<media-stream-track>>);
    check-was-created-by-pc: func(pc: borrow<rtc-peer-connection>);
  }
  resource svg-animated-string {
    base-val: func() -> string;
    set-base-val: func(base-val: string);
    anim-val: func() -> string;
  }
  resource performance-timing {
    navigation-start: func() -> u64;
    unload-event-start: func() -> u64;
    unload-event-end: func() -> u64;
    redirect-start: func() -> u64;
    redirect-end: func() -> u64;
    fetch-start: func() -> u64;
    domain-lookup-start: func() -> u64;
    domain-lookup-end: func() -> u64;
    connect-start: func() -> u64;
    connect-end: func() -> u64;
    secure-connection-start: func() -> u64;
    request-start: func() -> u64;
    response-start: func() -> u64;
    response-end: func() -> u64;
    dom-loading: func() -> u64;
    dom-interactive: func() -> u64;
    dom-content-loaded-event-start: func() -> u64;
    dom-content-loaded-event-end: func() -> u64;
    dom-complete: func() -> u64;
    load-event-start: func() -> u64;
    load-event-end: func() -> u64;
    time-to-non-blank-paint: func() -> u64;
    time-to-dom-content-flushed: func() -> u64;
    to-json: func() -> object;
  }
  enum idb-transaction-mode {
    readonly,
    readwrite,
    readwriteflush,
    cleanup,
    versionchange,
  }
  resource idb-transaction {
    as-event-target: func() -> event-target;
    mode: func() -> idb-transaction-mode;
    db: func() -> idb-database;
    error: func() -> option<dom-exception>;
    object-store: func(name: string) -> idb-object-store;
    commit: func();
    abort: func();
    onabort-subscribe: func() -> pollable;
    oncomplete-subscribe: func() -> pollable;
    onerror-subscribe: func() -> pollable;
    object-store-names: func() -> dom-string-list;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource svg-title-element {
    as-svg-element: func() -> svg-element;
  }
  enum pc-impl-signaling-state {
    signaling-invalid,
    signaling-stable,
    signaling-have-local-offer,
    signaling-have-remote-offer,
    signaling-have-local-pranswer,
    signaling-have-remote-pranswer,
    signaling-closed,
  }
  enum pc-impl-ice-connection-state {
    new,
    checking,
    connected,
    completed,
    failed,
    disconnected,
    closed,
  }
  enum pc-impl-ice-gathering-state {
    new,
    gathering,
    complete,
  }
  resource notification-event {
    as-extendable-event: func() -> extendable-event;
    notification: func() -> notification;
  }
  record notification-event-init {
    notification: borrow<notification>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  record clipboard-event-init {
    clipboard-data: option<option<borrow<data-transfer>>>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource clipboard-event {
    as-event: func() -> event;
    constructor(%type: string, event-init-dict: option<clipboard-event-init>);
    clipboard-data: func() -> option<data-transfer>;
  }
  resource mouse-event {
    as-ui-event: func() -> ui-event;
    as-mouse-scroll-event: func() -> option<mouse-scroll-event>;
    as-pointer-event: func() -> option<pointer-event>;
    as-wheel-event: func() -> option<wheel-event>;
    screen-x: func() -> s32;
    screen-y: func() -> s32;
    client-x: func() -> s32;
    client-y: func() -> s32;
    x: func() -> s32;
    y: func() -> s32;
    offset-x: func() -> s32;
    offset-y: func() -> s32;
    ctrl-key: func() -> bool;
    shift-key: func() -> bool;
    alt-key: func() -> bool;
    meta-key: func() -> bool;
    button: func() -> s16;
    buttons: func() -> u16;
    related-target: func() -> option<event-target>;
    region: func() -> string;
    movement-x: func() -> s32;
    movement-y: func() -> s32;
    init-mouse-event: func(type-arg: string, can-bubble-arg: option<bool>, cancelable-arg: option<bool>, view-arg: option<option<borrow<window>>>, detail-arg: option<s32>, screen-x-arg: option<s32>, screen-y-arg: option<s32>, client-x-arg: option<s32>, client-y-arg: option<s32>, ctrl-key-arg: option<bool>, alt-key-arg: option<bool>, shift-key-arg: option<bool>, meta-key-arg: option<bool>, button-arg: option<s16>, related-target-arg: option<option<borrow<event-target>>>);
    get-modifier-state: func(key-arg: string) -> bool;
    as-drag-event: func() -> option<drag-event>;
    view: func() -> option<window-proxy>;
    detail: func() -> s32;
    init-ui-event: func(a-type: string, a-can-bubble: option<bool>, a-cancelable: option<bool>, a-view: option<option<borrow<window>>>, a-detail: option<s32>);
  }
  record mouse-event-init {
    screen-x: option<s32>,
    screen-y: option<s32>,
    client-x: option<s32>,
    client-y: option<s32>,
    button: option<s16>,
    buttons: option<u16>,
    related-target: option<option<borrow<event-target>>>,
    movement-x: option<s32>,
    movement-y: option<s32>,
    ctrl-key: option<bool>,
    shift-key: option<bool>,
    alt-key: option<bool>,
    meta-key: option<bool>,
    modifier-alt-graph: option<bool>,
    modifier-caps-lock: option<bool>,
    modifier-fn: option<bool>,
    modifier-fn-lock: option<bool>,
    modifier-num-lock: option<bool>,
    modifier-os: option<bool>,
    modifier-scroll-lock: option<bool>,
    modifier-symbol: option<bool>,
    modifier-symbol-lock: option<bool>,
    view: option<option<borrow<window>>>,
    detail: option<s32>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource hash-change-event {
    as-event: func() -> event;
    old-url: func() -> string;
    new-url: func() -> string;
    init-hash-change-event: func(type-arg: string, can-bubble-arg: option<bool>, cancelable-arg: option<bool>, old-url-arg: option<string>, new-url-arg: option<string>);
  }
  record hash-change-event-init {
    old-url: option<string>,
    new-url: option<string>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource html-base-element {
    as-html-element: func() -> html-element;
    href: func() -> string;
    set-href: func(href: string);
    target: func() -> string;
    set-target: func(target: string);
  }
  resource device-acceleration {
    x: func() -> f64;
    y: func() -> f64;
    z: func() -> f64;
  }
  resource device-rotation-rate {
    alpha: func() -> f64;
    beta: func() -> f64;
    gamma: func() -> f64;
  }
  resource device-motion-event {
    as-event: func() -> event;
    acceleration: func() -> option<device-acceleration>;
    acceleration-including-gravity: func() -> option<device-acceleration>;
    rotation-rate: func() -> option<device-rotation-rate>;
    interval: func() -> f64;
  }
  record device-acceleration-init {
    x: option<f64>,
    y: option<f64>,
    z: option<f64>,
  }
  record device-rotation-rate-init {
    alpha: option<f64>,
    beta: option<f64>,
    gamma: option<f64>,
  }
  record device-motion-event-init {
    acceleration: option<device-acceleration-init>,
    acceleration-including-gravity: option<device-acceleration-init>,
    rotation-rate: option<device-rotation-rate-init>,
    interval: option<f64>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource custom-event {
    as-event: func() -> event;
    detail: func() -> any;
    init-custom-event: func(%type: string, can-bubble: option<bool>, cancelable: option<bool>, detail: any);
  }
  record custom-event-init {
    detail: any,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource file-system-directory-reader {
    read-entries: func(success-callback: borrow<file-system-entries-callback>, error-callback: option<borrow<error-callback>>);
  }
  record touch-event-init {
    touches: option<list<borrow<touch>>>,
    target-touches: option<list<borrow<touch>>>,
    changed-touches: option<list<borrow<touch>>>,
    ctrl-key: option<bool>,
    shift-key: option<bool>,
    alt-key: option<bool>,
    meta-key: option<bool>,
    modifier-alt-graph: option<bool>,
    modifier-caps-lock: option<bool>,
    modifier-fn: option<bool>,
    modifier-fn-lock: option<bool>,
    modifier-num-lock: option<bool>,
    modifier-os: option<bool>,
    modifier-scroll-lock: option<bool>,
    modifier-symbol: option<bool>,
    modifier-symbol-lock: option<bool>,
    view: option<option<borrow<window>>>,
    detail: option<s32>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource touch-event {
    as-ui-event: func() -> ui-event;
    touches: func() -> touch-list;
    target-touches: func() -> touch-list;
    changed-touches: func() -> touch-list;
    alt-key: func() -> bool;
    meta-key: func() -> bool;
    ctrl-key: func() -> bool;
    shift-key: func() -> bool;
    init-touch-event: func(%type: string, can-bubble: option<bool>, cancelable: option<bool>, view: option<option<borrow<window>>>, detail: option<s32>, ctrl-key: option<bool>, alt-key: option<bool>, shift-key: option<bool>, meta-key: option<bool>, touches: option<option<borrow<touch-list>>>, target-touches: option<option<borrow<touch-list>>>, changed-touches: option<option<borrow<touch-list>>>);
    view: func() -> option<window-proxy>;
    detail: func() -> s32;
    init-ui-event: func(a-type: string, a-can-bubble: option<bool>, a-cancelable: option<bool>, a-view: option<option<borrow<window>>>, a-detail: option<s32>);
  }
  resource html-object-element {
    as-html-element: func() -> html-element;
    data: func() -> string;
    set-data: func(data: string);
    %type: func() -> string;
    set-type: func(%type: string);
    type-must-match: func() -> bool;
    set-type-must-match: func(type-must-match: bool);
    name: func() -> string;
    set-name: func(name: string);
    use-map: func() -> string;
    set-use-map: func(use-map: string);
    form: func() -> option<html-form-element>;
    width: func() -> string;
    set-width: func(width: string);
    height: func() -> string;
    set-height: func(height: string);
    content-document: func() -> option<document>;
    content-window: func() -> option<window-proxy>;
    will-validate: func() -> bool;
    validity: func() -> validity-state;
    validation-message: func() -> string;
    check-validity: func() -> bool;
    report-validity: func() -> bool;
    set-custom-validity: func(error: string);
    align: func() -> string;
    set-align: func(align: string);
    archive: func() -> string;
    set-archive: func(archive: string);
    code: func() -> string;
    set-code: func(code: string);
    declare: func() -> bool;
    set-declare: func(declare: bool);
    hspace: func() -> u32;
    set-hspace: func(hspace: u32);
    standby: func() -> string;
    set-standby: func(standby: string);
    vspace: func() -> u32;
    set-vspace: func(vspace: u32);
    code-base: func() -> string;
    set-code-base: func(code-base: string);
    code-type: func() -> string;
    set-code-type: func(code-type: string);
    border: func() -> string;
    set-border: func(border: string);
    get-svg-document: func() -> option<document>;
  }
  resource svg-length {
    SVG-LENGTHTYPE-UNKNOWN: static func() -> u16;
    SVG-LENGTHTYPE-NUMBER: static func() -> u16;
    SVG-LENGTHTYPE-PERCENTAGE: static func() -> u16;
    SVG-LENGTHTYPE-EMS: static func() -> u16;
    SVG-LENGTHTYPE-EXS: static func() -> u16;
    SVG-LENGTHTYPE-PX: static func() -> u16;
    SVG-LENGTHTYPE-CM: static func() -> u16;
    SVG-LENGTHTYPE-MM: static func() -> u16;
    SVG-LENGTHTYPE-IN: static func() -> u16;
    SVG-LENGTHTYPE-PT: static func() -> u16;
    SVG-LENGTHTYPE-PC: static func() -> u16;
    unit-type: func() -> u16;
    value: func() -> f32;
    set-value: func(value: f32);
    value-in-specified-units: func() -> f32;
    set-value-in-specified-units: func(value-in-specified-units: f32);
    value-as-string: func() -> string;
    set-value-as-string: func(value-as-string: string);
    new-value-specified-units: func(unit-type: u16, value-in-specified-units: f32);
    convert-to-specified-units: func(unit-type: u16);
  }
  resource css-style-rule {
    as-css-rule: func() -> css-rule;
    selector-text: func() -> string;
    set-selector-text: func(selector-text: string);
    style: func() -> css-style-declaration;
  }
  resource svgfe-gaussian-blur-element {
    as-svg-element: func() -> svg-element;
    in1: func() -> svg-animated-string;
    std-deviation-x: func() -> svg-animated-number;
    std-deviation-y: func() -> svg-animated-number;
    set-std-deviation: func(std-deviation-x: f32, std-deviation-y: f32);
    x: func() -> svg-animated-length;
    y: func() -> svg-animated-length;
    width: func() -> svg-animated-length;
    height: func() -> svg-animated-length;
    %result: func() -> svg-animated-string;
  }
  resource svg-animated-preserve-aspect-ratio {
    base-val: func() -> svg-preserve-aspect-ratio;
    anim-val: func() -> svg-preserve-aspect-ratio;
  }
  resource data-transfer-item-list {
    length: func() -> u32;
    add: func(params: data-transfer-item-list-add-params) -> option<data-transfer-item>;
    remove: func(index: u32);
    clear: func();
  }
  variant data-transfer-item-list-add-params {
    data-type(tuple<string, string>),
    data(borrow<file>),
  }
  enum speech-synthesis-error-code {
    canceled,
    interrupted,
    audio-busy,
    audio-hardware,
    network,
    synthesis-unavailable,
    synthesis-failed,
    language-unavailable,
    voice-unavailable,
    text-too-long,
    invalid-argument,
  }
  resource speech-synthesis-error-event {
    as-speech-synthesis-event: func() -> speech-synthesis-event;
    error: func() -> speech-synthesis-error-code;
  }
  record speech-synthesis-error-event-init {
    error: speech-synthesis-error-code,
    utterance: borrow<speech-synthesis-utterance>,
    char-index: option<u32>,
    char-length: option<u32>,
    elapsed-time: option<f32>,
    name: option<string>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource text-track-cue {
    as-event-target: func() -> event-target;
    as-vtt-cue: func() -> option<vtt-cue>;
    track: func() -> option<text-track>;
    id: func() -> string;
    set-id: func(id: string);
    start-time: func() -> f64;
    set-start-time: func(start-time: f64);
    end-time: func() -> f64;
    set-end-time: func(end-time: f64);
    pause-on-exit: func() -> bool;
    set-pause-on-exit: func(pause-on-exit: bool);
    onenter-subscribe: func() -> pollable;
    onexit-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource svg-polygon-element {
    as-svg-geometry-element: func() -> svg-geometry-element;
    points: func() -> svg-point-list;
    animated-points: func() -> svg-point-list;
  }
  resource plugin-array {
    length: func() -> u32;
    item: func(index: u32) -> option<plugin>;
    named-item: func(name: string) -> option<plugin>;
    refresh: func(reload-documents: option<bool>);
  }
  record key-ids-init-data {
    kids: list<string>,
  }
  resource speech-synthesis {
    as-event-target: func() -> event-target;
    pending: func() -> bool;
    speaking: func() -> bool;
    paused: func() -> bool;
    speak: func(utterance: borrow<speech-synthesis-utterance>);
    cancel: func();
    pause: func();
    resume: func();
    get-voices: func() -> list<speech-synthesis-voice>;
    onvoiceschanged-subscribe: func() -> pollable;
    force-end: func();
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource offline-resource-list {
    as-event-target: func() -> event-target;
    UNCACHED: static func() -> u16;
    IDLE: static func() -> u16;
    CHECKING: static func() -> u16;
    DOWNLOADING: static func() -> u16;
    UPDATEREADY: static func() -> u16;
    OBSOLETE: static func() -> u16;
    status: func() -> u16;
    update: func();
    swap-cache: func();
    onchecking-subscribe: func() -> pollable;
    onerror-subscribe: func() -> pollable;
    onnoupdate-subscribe: func() -> pollable;
    ondownloading-subscribe: func() -> pollable;
    onprogress-subscribe: func() -> pollable;
    onupdateready-subscribe: func() -> pollable;
    oncached-subscribe: func() -> pollable;
    onobsolete-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource svgfe-displacement-map-element {
    as-svg-element: func() -> svg-element;
    SVG-CHANNEL-UNKNOWN: static func() -> u16;
    SVG-CHANNEL-R: static func() -> u16;
    SVG-CHANNEL-G: static func() -> u16;
    SVG-CHANNEL-B: static func() -> u16;
    SVG-CHANNEL-A: static func() -> u16;
    in1: func() -> svg-animated-string;
    in2: func() -> svg-animated-string;
    scale: func() -> svg-animated-number;
    x-channel-selector: func() -> svg-animated-enumeration;
    y-channel-selector: func() -> svg-animated-enumeration;
    x: func() -> svg-animated-length;
    y: func() -> svg-animated-length;
    width: func() -> svg-animated-length;
    height: func() -> svg-animated-length;
    %result: func() -> svg-animated-string;
  }
  resource svg-script-element {
    as-svg-element: func() -> svg-element;
    %type: func() -> string;
    set-type: func(%type: string);
    cross-origin: func() -> string;
    set-cross-origin: func(cross-origin: string);
    href: func() -> svg-animated-string;
  }
  enum media-source-ready-state {
    closed,
    open,
    ended,
  }
  enum media-source-end-of-stream-error {
    network,
    decode,
  }
  resource media-source {
    as-event-target: func() -> event-target;
    source-buffers: func() -> source-buffer-list;
    active-source-buffers: func() -> source-buffer-list;
    ready-state: func() -> media-source-ready-state;
    duration: func() -> f64;
    set-duration: func(duration: f64);
    onsourceopen-subscribe: func() -> pollable;
    onsourceended-subscribe: func() -> pollable;
    onsourceclose-subscribe: func() -> pollable;
    add-source-buffer: func(%type: string) -> source-buffer;
    remove-source-buffer: func(source-buffer: borrow<source-buffer>);
    end-of-stream: func(error: option<media-source-end-of-stream-error>);
    set-live-seekable-range: func(start: f64, end: f64);
    clear-live-seekable-range: func();
    is-type-supported: static func(%type: string) -> bool;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  resource html-table-section-element {
    as-html-element: func() -> html-element;
    rows: func() -> html-collection;
    insert-row: func(index: option<s32>) -> html-element;
    delete-row: func(index: s32);
    align: func() -> string;
    set-align: func(align: string);
    ch: func() -> string;
    set-ch: func(ch: string);
    ch-off: func() -> string;
    set-ch-off: func(ch-off: string);
    v-align: func() -> string;
    set-v-align: func(v-align: string);
  }
  resource audio-stream-track {
    as-media-stream-track: func() -> media-stream-track;
  }
  resource tcp-socket-event {
    as-event: func() -> event;
    data: func() -> any;
  }
  record tcp-socket-event-init {
    data: any,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  record media-stream-event-init {
    %stream: option<option<borrow<media-stream>>>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource media-stream-event {
    as-event: func() -> event;
    %stream: func() -> option<media-stream>;
  }
  type blob-part = blob-or-buffer-source-or-string;
  resource blob {
    as-file: func() -> option<file>;
    size: func() -> u64;
    %type: func() -> string;
    slice: func(start: option<s64>, end: option<s64>, content-type: option<string>) -> blob;
    %stream: func() -> readable-stream;
    text: func() -> string;
    array-buffer: func() -> array-buffer;
  }
  enum ending-types {
    transparent,
    native,
  }
  record blob-property-bag {
    %type: option<string>,
    endings: option<ending-types>,
  }
  enum caret-changed-reason {
    visibilitychange,
    updateposition,
    longpressonemptycontent,
    taponcaret,
    presscaret,
    releasecaret,
    scroll,
  }
  record caret-state-changed-event-init {
    collapsed: option<bool>,
    bounding-client-rect: option<option<borrow<dom-rect-read-only>>>,
    reason: option<caret-changed-reason>,
    caret-visible: option<bool>,
    caret-visually-visible: option<bool>,
    selection-visible: option<bool>,
    selection-editable: option<bool>,
    selected-text-content: option<string>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource caret-state-changed-event {
    as-event: func() -> event;
    collapsed: func() -> bool;
    bounding-client-rect: func() -> option<dom-rect-read-only>;
    reason: func() -> caret-changed-reason;
    caret-visible: func() -> bool;
    caret-visually-visible: func() -> bool;
    selection-visible: func() -> bool;
    selection-editable: func() -> bool;
    selected-text-content: func() -> string;
  }
  record delay-options {
    max-delay-time: option<f64>,
    delay-time: option<f64>,
    channel-count: option<u32>,
    channel-count-mode: option<channel-count-mode>,
    channel-interpretation: option<channel-interpretation>,
  }
  resource delay-node {
    as-audio-node: func() -> audio-node;
    delay-time: func() -> audio-param;
  }
  record idb-index-parameters {
    unique: option<bool>,
    multi-entry: option<bool>,
    locale: option<string>,
  }
  resource idb-index {
    name: func() -> string;
    set-name: func(name: string);
    object-store: func() -> idb-object-store;
    key-path: func() -> any;
    multi-entry: func() -> bool;
    unique: func() -> bool;
    locale: func() -> string;
    is-auto-locale: func() -> bool;
    open-cursor: func(range: any, direction: option<idb-cursor-direction>) -> idb-request;
    open-key-cursor: func(range: any, direction: option<idb-cursor-direction>) -> idb-request;
    get: func(key: any) -> idb-request;
    get-key: func(key: any) -> idb-request;
    count: func(key: any) -> idb-request;
    get-all: func(key: any, limit: option<u32>) -> idb-request;
    get-all-keys: func(key: any, limit: option<u32>) -> idb-request;
  }
  resource screen {
    as-event-target: func() -> event-target;
    avail-width: func() -> s32;
    avail-height: func() -> s32;
    width: func() -> s32;
    height: func() -> s32;
    color-depth: func() -> s32;
    pixel-depth: func() -> s32;
    top: func() -> s32;
    left: func() -> s32;
    avail-top: func() -> s32;
    avail-left: func() -> s32;
    orientation: func() -> screen-orientation;
    color-gamut: func() -> screen-color-gamut;
    luminance: func() -> option<screen-luminance>;
    onchange-subscribe: func() -> pollable;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
  }
  enum screen-color-gamut {
    srgb,
    p3,
    rec2020,
  }
  resource screen-luminance {
    min: func() -> f64;
    max: func() -> f64;
    max-average: func() -> f64;
  }
  record fake-plugin-tag-init {
    handler-uri: string,
    mime-entries: list<fake-plugin-mime-entry>,
    nice-name: option<string>,
    full-path: option<string>,
    name: option<string>,
    description: option<string>,
    file-name: option<string>,
    version: option<string>,
    sandbox-script: option<string>,
  }
  record fake-plugin-mime-entry {
    %type: string,
    description: option<string>,
    extension: option<string>,
  }
  resource svg-ellipse-element {
    as-svg-geometry-element: func() -> svg-geometry-element;
    cx: func() -> svg-animated-length;
    cy: func() -> svg-animated-length;
    rx: func() -> svg-animated-length;
    ry: func() -> svg-animated-length;
  }
  enum iteration-composite-operation {
    replace,
    accumulate,
  }
  record keyframe-effect-options {
    iteration-composite: option<iteration-composite-operation>,
    composite: option<composite-operation>,
    delay: option<f64>,
    end-delay: option<f64>,
    fill: option<fill-mode>,
    iteration-start: option<f64>,
    iterations: option<f64>,
    duration: option<f64-or-string>,
    direction: option<playback-direction>,
    easing: option<string>,
  }
  resource keyframe-effect {
    as-animation-effect: func() -> animation-effect;
    // target: func() -> css-pseudo-element-or-element;
    set-target: func(target: css-pseudo-element-or-element);
    iteration-composite: func() -> iteration-composite-operation;
    set-iteration-composite: func(iteration-composite: iteration-composite-operation);
    composite: func() -> composite-operation;
    set-composite: func(composite: composite-operation);
    get-keyframes: func() -> list<object>;
    set-keyframes: func(keyframes: object);
    get-properties: func() -> list<animation-property-details>;
  }
  variant css-pseudo-element-or-element {
    css-pseudo-element(borrow<css-pseudo-element>),
    element(borrow<element>),
  }
  record animation-property-value-details {
    offset: f64,
    value: option<string>,
    easing: option<string>,
    composite: composite-operation,
  }
  record animation-property-details {
    property: string,
    running-on-compositor: bool,
    warning: option<string>,
    values: list<animation-property-value-details>,
  }
  resource html-area-element {
    as-html-element: func() -> html-element;
    alt: func() -> string;
    set-alt: func(alt: string);
    coords: func() -> string;
    set-coords: func(coords: string);
    shape: func() -> string;
    set-shape: func(shape: string);
    target: func() -> string;
    set-target: func(target: string);
    download: func() -> string;
    set-download: func(download: string);
    ping: func() -> string;
    set-ping: func(ping: string);
    rel: func() -> string;
    set-rel: func(rel: string);
    referrer-policy: func() -> string;
    set-referrer-policy: func(referrer-policy: string);
    rel-list: func() -> dom-token-list;
    href: func() -> string;
    set-href: func(href: string);
    origin: func() -> string;
    protocol: func() -> string;
    set-protocol: func(protocol: string);
    username: func() -> string;
    set-username: func(username: string);
    password: func() -> string;
    set-password: func(password: string);
    host: func() -> string;
    set-host: func(host: string);
    hostname: func() -> string;
    set-hostname: func(hostname: string);
    port: func() -> string;
    set-port: func(port: string);
    pathname: func() -> string;
    set-pathname: func(pathname: string);
    search: func() -> string;
    set-search: func(search: string);
    hash: func() -> string;
    set-hash: func(hash: string);
    no-href: func() -> bool;
    set-no-href: func(no-href: bool);
  }
  resource html-progress-element {
    as-html-element: func() -> html-element;
    value: func() -> f64;
    set-value: func(value: f64);
    max: func() -> f64;
    set-max: func(max: f64);
    position: func() -> f64;
    labels: func() -> node-list;
  }
  resource plugin {
    description: func() -> string;
    filename: func() -> string;
    version: func() -> string;
    name: func() -> string;
    length: func() -> u32;
    item: func(index: u32) -> option<mime-type>;
    named-item: func(name: string) -> option<mime-type>;
  }
  resource svgt-span-element {
    as-svg-text-positioning-element: func() -> svg-text-positioning-element;
  }
  record event-listener-options {
    capture: option<bool>,
  }
  record add-event-listener-options {
    passive: option<bool>,
    once: option<bool>,
    capture: option<bool>,
  }
  variant add-event-listener-options-or-bool {
    add-event-listener-options(add-event-listener-options),
    %bool(bool),
  }
  variant bool-or-event-listener-options {
    %bool(bool),
    event-listener-options(event-listener-options),
  }
  resource event-target {
    as-permission-status: func() -> option<permission-status>;
    as-idb-transaction: func() -> option<idb-transaction>;
    as-screen-orientation: func() -> option<screen-orientation>;
    as-font-face-set: func() -> option<font-face-set>;
    as-animation: func() -> option<animation>;
    as-audio-node: func() -> option<audio-node>;
    as-speech-recognition: func() -> option<speech-recognition>;
    as-tcp-socket: func() -> option<tcp-socket>;
    as-rtc-peer-connection: func() -> option<rtc-peer-connection>;
    as-text-track-cue: func() -> option<text-track-cue>;
    as-battery-manager: func() -> option<battery-manager>;
    as-media-recorder: func() -> option<media-recorder>;
    as-media-stream-track: func() -> option<media-stream-track>;
    as-speech-synthesis-utterance: func() -> option<speech-synthesis-utterance>;
    as-source-buffer-list: func() -> option<source-buffer-list>;
    as-web-socket: func() -> option<web-socket>;
    as-text-track-list: func() -> option<text-track-list>;
    as-event-source: func() -> option<event-source>;
    as-speech-synthesis: func() -> option<speech-synthesis>;
    as-broadcast-channel: func() -> option<broadcast-channel>;
    as-base-audio-context: func() -> option<base-audio-context>;
    as-midi-port: func() -> option<midi-port>;
    as-tcp-server-socket: func() -> option<tcp-server-socket>;
    as-dom-request: func() -> option<dom-request>;
    as-presentation-connection: func() -> option<presentation-connection>;
    as-file-reader: func() -> option<file-reader>;
    as-worker-debugger-global-scope: func() -> option<worker-debugger-global-scope>;
    as-worker-global-scope: func() -> option<worker-global-scope>;
    as-rtc-data-channel: func() -> option<rtc-data-channel>;
    as-shared-worker: func() -> option<shared-worker>;
    as-idb-request: func() -> option<idb-request>;
    as-rtcdtmf-sender: func() -> option<rtcdtmf-sender>;
    as-idb-file-handle: func() -> option<idb-file-handle>;
    as-media-stream: func() -> option<media-stream>;
    as-media-devices: func() -> option<media-devices>;
    as-notification: func() -> option<notification>;
    as-presentation-connection-list: func() -> option<presentation-connection-list>;
    as-service-worker-registration: func() -> option<service-worker-registration>;
    as-video-track-list: func() -> option<video-track-list>;
    as-presentation-request: func() -> option<presentation-request>;
    as-offscreen-canvas: func() -> option<offscreen-canvas>;
    as-udp-socket: func() -> option<udp-socket>;
    as-midi-access: func() -> option<midi-access>;
    as-abort-signal: func() -> option<abort-signal>;
    as-media-query-list: func() -> option<media-query-list>;
    as-idb-mutable-file: func() -> option<idb-mutable-file>;
    as-window: func() -> option<window>;
    as-node: func() -> option<node>;
    as-offline-resource-list: func() -> option<offline-resource-list>;
    as-xml-http-request-event-target: func() -> option<xml-http-request-event-target>;
    as-idb-database: func() -> option<idb-database>;
    as-fetch-observer: func() -> option<fetch-observer>;
    as-service-worker: func() -> option<service-worker>;
    as-presentation-availability: func() -> option<presentation-availability>;
    as-network-information: func() -> option<network-information>;
    as-media-key-session: func() -> option<media-key-session>;
    as-visual-viewport: func() -> option<visual-viewport>;
    as-media-source: func() -> option<media-source>;
    as-message-port: func() -> option<message-port>;
    as-text-track: func() -> option<text-track>;
    as-service-worker-container: func() -> option<service-worker-container>;
    as-screen: func() -> option<screen>;
    as-source-buffer: func() -> option<source-buffer>;
    as-vr-display: func() -> option<vr-display>;
    add-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<add-event-listener-options-or-bool>, wants-untrusted: option<bool>);
    remove-event-listener: func(%type: string, listener: borrow<event-listener>, options: option<bool-or-event-listener-options>);
    dispatch-event: func(event: borrow<event>) -> bool;
    as-audio-track-list: func() -> option<audio-track-list>;
    as-worker: func() -> option<worker>;
    as-performance: func() -> option<performance>;
  }
  resource speech-recognition-alternative {
    transcript: func() -> string;
    confidence: func() -> f32;
  }
  record push-subscription-options-init {
    user-visible-only: option<bool>,
    application-server-key: option<buffer-source-or-string>,
  }
  resource push-manager-impl {
    subscribe: func(options: option<push-subscription-options-init>) -> push-subscription;
    get-subscription: func() -> option<push-subscription>;
    permission-state: func(options: option<push-subscription-options-init>) -> push-permission-state;
  }
  resource push-manager {
    subscribe: func(options: option<push-subscription-options-init>) -> push-subscription;
    get-subscription: func() -> option<push-subscription>;
    permission-state: func(options: option<push-subscription-options-init>) -> push-permission-state;
  }
  enum push-permission-state {
    granted,
    denied,
    prompt,
  }
  resource dom-string-list {
    length: func() -> u32;
    item: func(index: u32) -> string;
    contains: func(%string: string) -> bool;
  }
  enum pc-observer-state-type {
    none,
    ice-connection-state,
    ice-gathering-state,
    signaling-state,
  }
  resource drag-event {
    as-mouse-event: func() -> mouse-event;
    data-transfer: func() -> option<data-transfer>;
    init-drag-event: func(%type: string, can-bubble: option<bool>, cancelable: option<bool>, a-view: option<option<borrow<window>>>, a-detail: option<s32>, a-screen-x: option<s32>, a-screen-y: option<s32>, a-client-x: option<s32>, a-client-y: option<s32>, a-ctrl-key: option<bool>, a-alt-key: option<bool>, a-shift-key: option<bool>, a-meta-key: option<bool>, a-button: option<u16>, a-related-target: option<option<borrow<event-target>>>, a-data-transfer: option<option<borrow<data-transfer>>>);
  }
  record drag-event-init {
    data-transfer: option<option<borrow<data-transfer>>>,
    screen-x: option<s32>,
    screen-y: option<s32>,
    client-x: option<s32>,
    client-y: option<s32>,
    button: option<s16>,
    buttons: option<u16>,
    related-target: option<option<borrow<event-target>>>,
    movement-x: option<s32>,
    movement-y: option<s32>,
  }
  resource notify-paint-event {
    as-event: func() -> event;
    client-rects: func() -> dom-rect-list;
    bounding-client-rect: func() -> dom-rect;
    paint-requests: func() -> paint-request-list;
    transaction-id: func() -> u64;
    paint-time-stamp: func() -> dom-high-res-time-stamp;
  }
  resource svg-length-list {
    number-of-items: func() -> u32;
    clear: func();
    initialize: func(new-item: borrow<svg-length>) -> svg-length;
    get-item: func(index: u32) -> svg-length;
    insert-item-before: func(new-item: borrow<svg-length>, index: u32) -> svg-length;
    replace-item: func(new-item: borrow<svg-length>, index: u32) -> svg-length;
    remove-item: func(index: u32) -> svg-length;
    append-item: func(new-item: borrow<svg-length>) -> svg-length;
  }
  resource html-data-list-element {
    as-html-element: func() -> html-element;
    options: func() -> html-collection;
  }
  resource audio-track-list {
    as-event-target: func() -> event-target;
    length: func() -> u32;
    get-track-by-id: func(id: string) -> option<audio-track>;
    onchange-subscribe: func() -> pollable;
    onaddtrack-subscribe: func() -> pollable;
    onremovetrack-subscribe: func() -> pollable;
  }
  resource plugin-crashed-event {
    as-event: func() -> event;
    plugin-id: func() -> u32;
    plugin-dump-id: func() -> string;
    plugin-name: func() -> string;
    browser-dump-id: func() -> string;
    plugin-filename: func() -> string;
    submitted-crash-report: func() -> bool;
    gmp-plugin: func() -> bool;
  }
  record plugin-crashed-event-init {
    plugin-id: option<u32>,
    plugin-dump-id: option<string>,
    plugin-name: option<string>,
    browser-dump-id: option<string>,
    plugin-filename: option<string>,
    submitted-crash-report: option<bool>,
    gmp-plugin: option<bool>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource image-document {
    as-html-document: func() -> html-document;
    image-is-overflowing: func() -> bool;
    image-is-resized: func() -> bool;
    image-request: func() -> option<img-i-request>;
    shrink-to-fit: func();
    restore-image: func();
    restore-image-to: func(x: s32, y: s32);
    toggle-image-size: func();
  }
  resource performance-entry {
    as-performance-mark: func() -> option<performance-mark>;
    as-performance-resource-timing: func() -> option<performance-resource-timing>;
    as-performance-measure: func() -> option<performance-measure>;
    name: func() -> string;
    entry-type: func() -> string;
    start-time: func() -> dom-high-res-time-stamp;
    duration: func() -> dom-high-res-time-stamp;
    to-json: func() -> object;
  }
  resource radio-node-list {
    as-node-list: func() -> node-list;
    value: func() -> string;
    set-value: func(value: string);
  }
  resource composition-event {
    as-ui-event: func() -> ui-event;
    data: func() -> string;
    locale: func() -> string;
    ranges: func() -> list<text-clause>;
    init-composition-event: func(type-arg: string, can-bubble-arg: option<bool>, cancelable-arg: option<bool>, view-arg: option<option<borrow<window>>>, data-arg: option<string>, locale-arg: option<string>);
    view: func() -> option<window-proxy>;
    detail: func() -> s32;
    init-ui-event: func(a-type: string, a-can-bubble: option<bool>, a-cancelable: option<bool>, a-view: option<option<borrow<window>>>, a-detail: option<s32>);
  }
  record composition-event-init {
    data: option<string>,
    view: option<option<borrow<window>>>,
    detail: option<s32>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource ui-event {
    as-event: func() -> event;
    as-focus-event: func() -> option<focus-event>;
    as-mouse-event: func() -> option<mouse-event>;
    as-touch-event: func() -> option<touch-event>;
    as-keyboard-event: func() -> option<keyboard-event>;
    as-input-event: func() -> option<input-event>;
    as-scroll-area-event: func() -> option<scroll-area-event>;
    as-composition-event: func() -> option<composition-event>;
    view: func() -> option<window-proxy>;
    detail: func() -> s32;
    init-ui-event: func(a-type: string, a-can-bubble: option<bool>, a-cancelable: option<bool>, a-view: option<option<borrow<window>>>, a-detail: option<s32>);
    SCROLL-PAGE-UP: static func() -> s32;
    SCROLL-PAGE-DOWN: static func() -> s32;
    layer-x: func() -> s32;
    layer-y: func() -> s32;
    page-x: func() -> s32;
    page-y: func() -> s32;
    which: func() -> u32;
    range-parent: func() -> option<node>;
    range-offset: func() -> s32;
  }
  record ui-event-init {
    view: option<option<borrow<window>>>,
    detail: option<s32>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  record event-modifier-init {
    ctrl-key: option<bool>,
    shift-key: option<bool>,
    alt-key: option<bool>,
    meta-key: option<bool>,
    modifier-alt-graph: option<bool>,
    modifier-caps-lock: option<bool>,
    modifier-fn: option<bool>,
    modifier-fn-lock: option<bool>,
    modifier-num-lock: option<bool>,
    modifier-os: option<bool>,
    modifier-scroll-lock: option<bool>,
    modifier-symbol: option<bool>,
    modifier-symbol-lock: option<bool>,
    view: option<option<borrow<window>>>,
    detail: option<s32>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  record document-timeline-options {
    origin-time: option<dom-high-res-time-stamp>,
  }
  resource document-timeline {
    as-animation-timeline: func() -> animation-timeline;
  }
  resource rtc-peer-connection-ice-error-event {
    as-event: func() -> event;
    constructor(%type: string, event-init-dict: borrow<rtc-peer-connection-ice-error-event-init>);
    address: func() -> string;
    port: func() -> u16;
    url: func() -> string;
    error-code: func() -> u16;
    error-text: func() -> string;
  }
  enum biquad-filter-type {
    lowpass,
    highpass,
    bandpass,
    lowshelf,
    highshelf,
    peaking,
    notch,
    allpass,
  }
  record biquad-filter-options {
    %type: option<biquad-filter-type>,
    q: option<f32>,
    detune: option<f32>,
    frequency: option<f32>,
    gain: option<f32>,
    channel-count: option<u32>,
    channel-count-mode: option<channel-count-mode>,
    channel-interpretation: option<channel-interpretation>,
  }
  resource biquad-filter-node {
    as-audio-node: func() -> audio-node;
    %type: func() -> biquad-filter-type;
    set-type: func(%type: biquad-filter-type);
    frequency: func() -> audio-param;
    detune: func() -> audio-param;
    q: func() -> audio-param;
    gain: func() -> audio-param;
    get-frequency-response: func(frequency-hz: float32-array, mag-response: float32-array, phase-response: float32-array);
  }
  resource idb-open-db-request {
    as-idb-request: func() -> idb-request;
    onblocked-subscribe: func() -> pollable;
    onupgradeneeded-subscribe: func() -> pollable;
  }
  resource midi-output-map {
  }
  enum visibility-state {
    hidden,
    visible,
  }
  record element-creation-options {
    is: option<string>,
    pseudo: option<string>,
  }
  variant element-creation-options-or-string {
    element-creation-options(element-creation-options),
    %string(string),
  }
  resource document {
    as-node: func() -> node;
    as-xml-document: func() -> option<xml-document>;
    as-html-document: func() -> option<html-document>;
    implementation: func() -> dom-implementation;
    url: func() -> string;
    document-uri: func() -> string;
    compat-mode: func() -> string;
    character-set: func() -> string;
    charset: func() -> string;
    input-encoding: func() -> string;
    content-type: func() -> string;
    doctype: func() -> option<document-type>;
    document-element: func() -> option<element>;
    get-elements-by-tag-name: func(local-name: string) -> html-collection;
    get-elements-by-tag-name-ns: func(namespace: string, local-name: string) -> html-collection;
    get-elements-by-class-name: func(class-names: string) -> html-collection;
    get-element-by-id: func(element-id: string) -> option<element>;
    create-element: func(local-name: string, options: option<element-creation-options-or-string>) -> element;
    create-element-ns: func(namespace: string, qualified-name: string, options: option<element-creation-options-or-string>) -> element;
    create-document-fragment: func() -> document-fragment;
    create-text-node: func(data: string) -> text;
    create-comment: func(data: string) -> comment;
    create-processing-instruction: func(target: string, data: string) -> processing-instruction;
    import-node: func(node: borrow<node>, deep: option<bool>) -> node;
    adopt-node: func(node: borrow<node>) -> node;
    create-event: func(%interface: string) -> event;
    create-range: func() -> range;
    create-node-iterator: func(root: borrow<node>, what-to-show: option<u32>, filter: option<option<borrow<node-filter>>>) -> node-iterator;
    create-tree-walker: func(root: borrow<node>, what-to-show: option<u32>, filter: option<option<borrow<node-filter>>>) -> tree-walker;
    create-cdata-section: func(data: string) -> cdata-section;
    create-attribute: func(name: string) -> attr;
    create-attribute-ns: func(namespace: string, name: string) -> attr;
    location: func() -> option<location>;
    referrer: func() -> string;
    last-modified: func() -> string;
    ready-state: func() -> string;
    title: func() -> string;
    set-title: func(title: string);
    dir: func() -> string;
    set-dir: func(dir: string);
    body: func() -> option<html-element>;
    set-body: func(body: option<html-element>);
    head: func() -> option<html-head-element>;
    images: func() -> html-collection;
    embeds: func() -> html-collection;
    plugins: func() -> html-collection;
    links: func() -> html-collection;
    forms: func() -> html-collection;
    scripts: func() -> html-collection;
    get-elements-by-name: func(element-name: string) -> node-list;
    default-view: func() -> option<window-proxy>;
    has-focus: func() -> bool;
    onreadystatechange-subscribe: func() -> pollable;
    onbeforescriptexecute-subscribe: func() -> pollable;
    onafterscriptexecute-subscribe: func() -> pollable;
    onselectionchange-subscribe: func() -> pollable;
    current-script: func() -> option<element>;
    release-capture: func();
    document-uri-object: func() -> option<uri>;
    referrer-policy: func() -> u32;
    anchors: func() -> html-collection;
    applets: func() -> html-collection;
    fullscreen: func() -> bool;
    fullscreen-enabled: func() -> bool;
    exit-fullscreen: func();
    onfullscreenchange-subscribe: func() -> pollable;
    onfullscreenerror-subscribe: func() -> pollable;
    exit-pointer-lock: func();
    onpointerlockchange-subscribe: func() -> pollable;
    onpointerlockerror-subscribe: func() -> pollable;
    hidden: func() -> bool;
    visibility-state: func() -> visibility-state;
    onvisibilitychange-subscribe: func() -> pollable;
    selected-style-sheet-set: func() -> string;
    set-selected-style-sheet-set: func(selected-style-sheet-set: string);
    last-style-sheet-set: func() -> string;
    preferred-style-sheet-set: func() -> string;
    style-sheet-sets: func() -> dom-string-list;
    enable-style-sheets-for-set: func(name: string);
    caret-position-from-point: func(x: f32, y: f32) -> option<caret-position>;
    scrolling-element: func() -> option<element>;
    query-selector: func(selectors: string) -> option<element>;
    query-selector-all: func(selectors: string) -> node-list;
    timeline: func() -> document-timeline;
    get-animations: func() -> list<animation>;
    root-element: func() -> option<svgsvg-element>;
    is-srcdoc-document: func() -> bool;
    sandbox-flags-as-string: func() -> string;
    insert-anonymous-content: func(a-element: borrow<element>) -> anonymous-content;
    remove-anonymous-content: func(a-content: borrow<anonymous-content>);
    get-selection: func() -> option<selection>;
    user-has-interacted: func() -> bool;
    notify-user-gesture-activation: func();
    document-flash-classification: func() -> flash-classification;
    create-expression: func(expression: string, resolver: option<option<borrow<x-path-ns-resolver>>>) -> x-path-expression;
    create-ns-resolver: func(node-resolver: borrow<node>) -> node;
    evaluate: func(expression: string, context-node: borrow<node>, resolver: option<option<borrow<x-path-ns-resolver>>>, %type: option<u16>, %result: option<object>) -> x-path-result;
    onabort-subscribe: func() -> pollable;
    onblur-subscribe: func() -> pollable;
    onfocus-subscribe: func() -> pollable;
    onauxclick-subscribe: func() -> pollable;
    oncanplay-subscribe: func() -> pollable;
    oncanplaythrough-subscribe: func() -> pollable;
    onchange-subscribe: func() -> pollable;
    onclick-subscribe: func() -> pollable;
    onclose-subscribe: func() -> pollable;
    oncontextmenu-subscribe: func() -> pollable;
    ondblclick-subscribe: func() -> pollable;
    ondrag-subscribe: func() -> pollable;
    ondragend-subscribe: func() -> pollable;
    ondragenter-subscribe: func() -> pollable;
    ondragexit-subscribe: func() -> pollable;
    ondragleave-subscribe: func() -> pollable;
    ondragover-subscribe: func() -> pollable;
    ondragstart-subscribe: func() -> pollable;
    ondrop-subscribe: func() -> pollable;
    ondurationchange-subscribe: func() -> pollable;
    onemptied-subscribe: func() -> pollable;
    onended-subscribe: func() -> pollable;
    oninput-subscribe: func() -> pollable;
    oninvalid-subscribe: func() -> pollable;
    onkeydown-subscribe: func() -> pollable;
    onkeypress-subscribe: func() -> pollable;
    onkeyup-subscribe: func() -> pollable;
    onload-subscribe: func() -> pollable;
    onloadeddata-subscribe: func() -> pollable;
    onloadedmetadata-subscribe: func() -> pollable;
    onloadend-subscribe: func() -> pollable;
    onloadstart-subscribe: func() -> pollable;
    onmousedown-subscribe: func() -> pollable;
    onmouseenter-subscribe: func() -> pollable;
    onmouseleave-subscribe: func() -> pollable;
    onmousemove-subscribe: func() -> pollable;
    onmouseout-subscribe: func() -> pollable;
    onmouseover-subscribe: func() -> pollable;
    onmouseup-subscribe: func() -> pollable;
    onwheel-subscribe: func() -> pollable;
    onpause-subscribe: func() -> pollable;
    onplay-subscribe: func() -> pollable;
    onplaying-subscribe: func() -> pollable;
    onprogress-subscribe: func() -> pollable;
    onratechange-subscribe: func() -> pollable;
    onreset-subscribe: func() -> pollable;
    onresize-subscribe: func() -> pollable;
    onscroll-subscribe: func() -> pollable;
    onseeked-subscribe: func() -> pollable;
    onseeking-subscribe: func() -> pollable;
    onselect-subscribe: func() -> pollable;
    onshow-subscribe: func() -> pollable;
    onstalled-subscribe: func() -> pollable;
    onsubmit-subscribe: func() -> pollable;
    onsuspend-subscribe: func() -> pollable;
    ontimeupdate-subscribe: func() -> pollable;
    onvolumechange-subscribe: func() -> pollable;
    onwaiting-subscribe: func() -> pollable;
    onselectstart-subscribe: func() -> pollable;
    ontoggle-subscribe: func() -> pollable;
    onpointercancel-subscribe: func() -> pollable;
    onpointerdown-subscribe: func() -> pollable;
    onpointerup-subscribe: func() -> pollable;
    onpointermove-subscribe: func() -> pollable;
    onpointerout-subscribe: func() -> pollable;
    onpointerover-subscribe: func() -> pollable;
    onpointerenter-subscribe: func() -> pollable;
    onpointerleave-subscribe: func() -> pollable;
    ongotpointercapture-subscribe: func() -> pollable;
    onlostpointercapture-subscribe: func() -> pollable;
    onanimationcancel-subscribe: func() -> pollable;
    onanimationend-subscribe: func() -> pollable;
    onanimationiteration-subscribe: func() -> pollable;
    onanimationstart-subscribe: func() -> pollable;
    ontransitioncancel-subscribe: func() -> pollable;
    ontransitionend-subscribe: func() -> pollable;
    ontransitionrun-subscribe: func() -> pollable;
    ontransitionstart-subscribe: func() -> pollable;
    onwebkitanimationend-subscribe: func() -> pollable;
    onwebkitanimationiteration-subscribe: func() -> pollable;
    onwebkitanimationstart-subscribe: func() -> pollable;
    onwebkittransitionend-subscribe: func() -> pollable;
    oncopy-subscribe: func() -> pollable;
    oncut-subscribe: func() -> pollable;
    onpaste-subscribe: func() -> pollable;
    ontouchstart-subscribe: func() -> pollable;
    ontouchend-subscribe: func() -> pollable;
    ontouchmove-subscribe: func() -> pollable;
    ontouchcancel-subscribe: func() -> pollable;
    children: func() -> html-collection;
    first-element-child: func() -> option<element>;
    last-element-child: func() -> option<element>;
    child-element-count: func() -> u32;
    prepend: func(nodes: list<node-or-string>);
    append: func(nodes: list<node-or-string>);
    replace-children: func(nodes: list<node-or-string>);
    onerror-subscribe: func() -> pollable;
    get-box-quads: func(options: option<box-quad-options>) -> list<dom-quad>;
    convert-quad-from-node: func(quad: borrow<dom-quad>, %from: geometry-node, options: option<convert-coordinate-options>) -> dom-quad;
    convert-rect-from-node: func(rect: borrow<dom-rect-read-only>, %from: geometry-node, options: option<convert-coordinate-options>) -> dom-quad;
    convert-point-from-node: func(point: dom-point-init, %from: geometry-node, options: option<convert-coordinate-options>) -> dom-point;
    fonts: func() -> font-face-set;
    element-from-point: func(x: f32, y: f32) -> option<element>;
    elements-from-point: func(x: f32, y: f32) -> list<element>;
    active-element: func() -> option<element>;
    style-sheets: func() -> style-sheet-list;
    pointer-lock-element: func() -> option<element>;
    fullscreen-element: func() -> option<element>;
  }
  record block-parsing-options {
    block-script-created: option<bool>,
  }
  enum flash-classification {
    unclassified,
    unknown,
    allowed,
    denied,
  }
  resource worker {
    as-event-target: func() -> event-target;
    terminate: func();
    post-message: func(message: any, transfer: option<list<object>>);
    onmessage-subscribe: func() -> pollable;
    onmessageerror-subscribe: func() -> pollable;
    onerror-subscribe: func() -> pollable;
    as-chrome-worker: func() -> option<chrome-worker>;
  }
  record worker-options {
    %type: option<worker-type>,
    credentials: option<request-credentials>,
    name: option<string>,
  }
  enum worker-type {
    classic,
    module,
  }
  resource chrome-worker {
    as-worker: func() -> worker;
  }
  resource canvas-capture-media-stream {
    as-media-stream: func() -> media-stream;
    canvas: func() -> html-canvas-element;
    request-frame: func();
  }
  resource payment-method-change-event {
    as-payment-request-update-event: func() -> payment-request-update-event;
    method-name: func() -> string;
    method-details: func() -> object;
  }
  record payment-method-change-event-init {
    method-name: string,
    method-details: option<object>,
    bubbles: option<bool>,
    cancelable: option<bool>,
    composed: option<bool>,
  }
  resource media-stream-audio-destination-node {
    as-audio-node: func() -> audio-node;
    %stream: func() -> media-stream;
  }
  type performance-entry-list = list<performance-entry>;
  resource performance {
    as-event-target: func() -> event-target;
    now: func() -> dom-high-res-time-stamp;
    time-origin: func() -> dom-high-res-time-stamp;
    timing: func() -> performance-timing;
    navigation: func() -> performance-navigation;
    to-json: func() -> object;
    get-entries: func() -> performance-entry-list;
    get-entries-by-type: func(entry-type: string) -> performance-entry-list;
    get-entries-by-name: func(name: string, entry-type: option<string>) -> performance-entry-list;
    clear-resource-timings: func();
    set-resource-timing-buffer-size: func(max-size: u32);
    onresourcetimingbufferfull-subscribe: func() -> pollable;
    mark: func(mark-name: string);
    clear-marks: func(mark-name: option<string>);
    measure: func(measure-name: string, start-mark: option<string>, end-mark: option<string>);
    clear-measures: func(measure-name: option<string>);
  }
  resource credential {
    as-public-key-credential: func() -> option<public-key-credential>;
    id: func() -> string;
    %type: func() -> string;
  }
  resource credentials-container {
    get: func(options: option<credential-request-options>) -> option<credential>;
    create: func(options: option<credential-creation-options>) -> option<credential>;
    store: func(credential: borrow<credential>) -> credential;
    prevent-silent-access: func();
  }
  record credential-request-options {
    public-key: option<public-key-credential-request-options>,
    signal: option<borrow<abort-signal>>,
  }
  record credential-creation-options {
    public-key: option<public-key-credential-creation-options>,
    signal: option<borrow<abort-signal>>,
  }
  get-service-worker-global-scope: func() -> service-worker-global-scope;
  get-shared-worker-global-scope: func() -> shared-worker-global-scope;
  get-worker-global-scope: func() -> worker-global-scope;
  get-dedicated-worker-global-scope: func() -> dedicated-worker-global-scope;
  get-window: func() -> window;
}
